# Package: chewdoc

### Package Overview
**Name**: chewdoc  
**Version**: 0.1.0  
**Author**: Roma Romanov  
**Interface**: >=3.8.1  
**Dependencies**: click>=8.1.0
  - requests>=2.25.1
  - tomli>=0.10.2
  - rich>=10.0.0

:::{module} chewchew.tests.test_version

**Imports**: `src.chewdoc.__version__`
### Interface
- `test_version_availability`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/tests/test_version.py`  
**Dependencies**: `src.chewdoc.__version__`

:::
:::{module} chewchew.tests.test_core

**Imports**: `pytest`, `pathlib.Path`, `src.chewdoc.core.analyze_package`, `src.chewdoc.core.parse_pyproject`, `src.chewdoc.core.extract_docstrings`, `src.chewdoc.core.extract_type_info`, `src.chewdoc.core.download_pypi_package`, `src.chewdoc.core._get_module_name`, `src.chewdoc.core.get_local_metadata`, `src.chewdoc.core.get_package_path`, `src.chewdoc.core._get_package_name`, `src.chewdoc.core._find_imports`, `ast`, `subprocess`, `unittest.mock.patch`
**Type References**: [[FailedProcess]]

### Interface
- `test_analyze_local_package`() -> Any
- `test_pyproject_parsing`() -> Any
- `test_docstring_extraction`() -> Any
- `test_type_hint_extraction`() -> Any
- `test_type_cross_references`() -> Any
- `test_invalid_pypi_package`() -> Any
- `test_missing_local_package`() -> Any
- `test_empty_module_analysis`() -> Any
- `test_package_download_failure`() -> Any
- `test_download_pypi_failure`() -> Any
- `test_download_no_files_found`() -> Any
- `test_module_name_generation`() -> Any
- `test_local_metadata_fallback`() -> Any
- `test_missing_pypi_package`() -> Any
- `test_docstring_extraction_error`() -> Any
- `test_package_extraction_logic`() -> Any
- `test_pyproject_fallback`() -> Any
- `test_minimal_metadata`() -> Any
- `test_import_discovery`() -> Any
- `test_installed_package_path`() -> Any
- `mock_run`() -> Any

### Implementation
**FailedProcess**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/tests/test_core.py`  
**Dependencies**: `pytest`, `pathlib.Path`, `src.chewdoc.core.analyze_package`, `src.chewdoc.core.parse_pyproject`, `src.chewdoc.core.extract_docstrings`, `src.chewdoc.core.extract_type_info`, `src.chewdoc.core.download_pypi_package`, `src.chewdoc.core._get_module_name`, `src.chewdoc.core.get_local_metadata`, `src.chewdoc.core.get_package_path`, `src.chewdoc.core._get_package_name`, `src.chewdoc.core._find_imports`, `ast`, `subprocess`, `unittest.mock.patch`

:::
:::{module} chewchew.tests



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/tests/__init__.py`  

:::
:::{module} chewchew.tests.test_cli
:::{doc} test_cli_package_command:6
Test package command with valid local package
:::
:::{doc} test_cli_version_handling:34
Test PyPI package version handling
:::
**Imports**: `pytest`, `click.testing.CliRunner`, `src.chewdoc.cli.cli`, `unittest.mock.patch`
### Interface
- `test_cli_package_command`() -> Any
- `test_cli_version_handling`() -> Any
- `test_cli_module_command`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/tests/test_cli.py`  
**Dependencies**: `pytest`, `click.testing.CliRunner`, `src.chewdoc.cli.cli`, `unittest.mock.patch`

:::
:::{module} chewchew.tests.test_formatters

**Imports**: `pytest`, `pathlib.Path`, `chewdoc.formatters.myst_writer.generate_myst`
### Interface
- `test_myst_generation`() -> Any
- `test_module_relationships_in_output`() -> Any
- `test_cross_reference_validation`() -> Any
- `test_module_relationship_visualization`() -> Any
- `test_format_empty_module`() -> Any
- `test_known_type_formatting`() -> Any
- `test_myst_empty_input`() -> Any
- `test_myst_metadata_fallbacks`() -> Any
- `test_class_formatting`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/tests/test_formatters.py`  
**Dependencies**: `pytest`, `pathlib.Path`, `chewdoc.formatters.myst_writer.generate_myst`

:::
:::{module} chewchew.src.chewdoc._version

**Imports**: `typing.Tuple`, `typing.Union`
**Type References**: [[VERSION_TUPLE]]

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/src/chewdoc/_version.py`  
**Dependencies**: `typing.Tuple`, `typing.Union`

:::
:::{module} chewchew.src.chewdoc.constants



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/src/chewdoc/constants.py`  

:::
:::{module} chewchew.src.chewdoc

**Imports**: `_version.version`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/src/chewdoc/__init__.py`  
**Dependencies**: `_version.version`

:::
:::{module} chewchew.src.chewdoc.core
:::{doc} analyze_package:12
Analyze a Python package with enhanced error handling
:::
:::{doc} process_modules:28
Discover and process package modules with type info
:::
:::{doc} parse_ast:54
Parse Python file to AST
:::
:::{doc} get_package_metadata:59
Extract package metadata from local or PyPI package
:::
:::{doc} get_local_metadata:65
Extract package metadata from pyproject.toml or setup.py.
:::
:::{doc} get_pypi_metadata:82
Retrieve PyPI package metadata
:::
:::{doc} get_package_path:98
Get root path for package sources
:::
:::{doc} parse_pyproject:112
Parse pyproject.toml for package metadata
:::
:::{doc} extract_docstrings:128
Extract docstrings from AST nodes with error handling
:::
:::{doc} download_pypi_package:142
Download PyPI package to temporary directory
:::
:::{doc} generate_docs:164
Generate documentation from analyzed package data
:::
:::{doc} _get_module_name:168
Get full module name from file path (internal)
:::
:::{doc} extract_type_info:201
Enhanced type hint parsing with qualified names
:::
:::{doc} _get_arg_types:255
Extract argument types from a function definition.
:::
:::{doc} _get_return_type:263
Extract return type annotation.
:::
:::{doc} _get_class_attributes:267
Extract class attribute type annotations.
:::
:::{doc} _get_annotation:275
Extract type annotation from an AST node.
:::
:::{doc} _get_package_name:295
Extract package name from filename
:::
**Imports**: `ast`, `pathlib.Path`, `typing.Dict`, `typing.Any`, `typing.Optional`, `importlib.metadata`, `subprocess`, `tempfile`, `shutil`, `tomli`, `chewdoc.formatters.myst_writer.generate_myst`, `re`
### Interface
- `analyze_package`(source: str, version: str, is_local: bool) -> [Dict[<ast.Tuple object at 0x103f43a90>]](#dict)
- `process_modules`(package_path: Path) -> list
- `parse_ast`(file_path: Path) -> ast.AST
- `get_package_metadata`(source: str, version: [Optional[str]](#optional), is_local: bool) -> [Dict[<ast.Tuple object at 0x103f39210>]](#dict)
- `get_local_metadata`(path: Path) -> dict
- `get_pypi_metadata`(name: str, version: [Optional[str]](#optional)) -> [Dict[<ast.Tuple object at 0x103f2f3d0>]](#dict)
- `get_package_path`(source: str, is_local: bool) -> Path
- `parse_pyproject`(path: Path) -> dict
- `extract_docstrings`(node: ast.AST) -> [Dict[<ast.Tuple object at 0x103f4d790>]](#dict)
- `download_pypi_package`(name: str, version: str) -> Path
- `generate_docs`(package_info: [Dict[<ast.Tuple object at 0x103f3c710>]](#dict), output_path: str) -> None
- `_get_module_name`(file_path: Path, package_root: Path) -> str
- `_find_imports`(node: ast.AST) -> list
- `extract_type_info`(node: ast.AST) -> [Dict[<ast.Tuple object at 0x104a2ac10>]](#dict)
- `_get_arg_types`(args: ast.arguments) -> [Dict[<ast.Tuple object at 0x104a30190>]](#dict)
- `_get_return_type`(returns: ast.AST) -> str
- `_get_class_attributes`(cls: ast.ClassDef) -> [Dict[<ast.Tuple object at 0x104a32910>]](#dict)
- `_get_annotation`(node: ast.AST) -> str
- `_get_package_name`(path: Path) -> str
- `_track_references`(annotation: str, context: str) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/src/chewdoc/core.py`  
**Dependencies**: `ast`, `pathlib.Path`, `typing.Dict`, `typing.Any`, `typing.Optional`, `importlib.metadata`, `subprocess`, `tempfile`, `shutil`, `tomli`, `chewdoc.formatters.myst_writer.generate_myst`, `re`

:::
:::{module} chewchew.src.chewdoc.cli
:::{doc} cli:6
Generate LLM-optimized documentation from Python packages
:::
:::{doc} package:15
Process a Python package
:::
:::{doc} module:31
Process a single Python module
:::
**Imports**: `click`, `pathlib.Path`, `chewdoc.core.analyze_package`, `chewdoc.core.generate_docs`
### Interface
- `cli`() -> Any
- `package`() -> Any
- `module`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/src/chewdoc/cli.py`  
**Dependencies**: `click`, `pathlib.Path`, `chewdoc.core.analyze_package`, `chewdoc.core.generate_docs`

:::
:::{module} chewchew.src.chewdoc.__main__

**Imports**: `chewdoc.cli.cli`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/src/chewdoc/__main__.py`  
**Dependencies**: `chewdoc.cli.cli`

:::
:::{module} chewchew.src.chewdoc.formatters



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/src/chewdoc/formatters/__init__.py`  

:::
:::{module} chewchew.src.chewdoc.formatters.myst_writer
:::{doc} generate_myst:7
Generate MyST documentation with validation
:::
:::{doc} _format_metadata:22
Format package metadata section with fallbacks
:::
:::{doc} _format_modules:33
Compact module formatting with collapsible sections
:::
:::{doc} _format_type_info:49
Compact type information formatting
:::
:::{doc} _format_type_reference:73
Format type strings as links when possible
:::
:::{doc} _format_function_signature:81
Format complex type signatures
:::
:::{doc} _format_docstrings:88
Format extracted docstrings
:::
:::{doc} _format_relationships:95
Compact relationship formatting
:::
:::{doc} _compact_imports:104
Compact imports formatting
:::
:::{doc} _format_type_info:111
Compact type information formatting
:::
**Imports**: `pathlib.Path`, `typing.Dict`, `typing.Any`, `chewdoc.constants.META_TEMPLATE`, `chewdoc.constants.MODULE_TEMPLATE`, `chewdoc.constants.API_REF_TEMPLATE`, `chewdoc.constants.RELATIONSHIP_TEMPLATE`
### Interface
- `generate_myst`(package_data: [Dict[<ast.Tuple object at 0x104a67390>]](#dict), output_path: Path) -> None
- `_format_metadata`(package_data: [Dict[<ast.Tuple object at 0x104a643d0>]](#dict)) -> str
- `_format_modules`(modules: list) -> str
- `_format_type_info`(type_info: [Dict[<ast.Tuple object at 0x104a843d0>]](#dict)) -> str
- `_format_type_reference`(type_str: str) -> str
- `_format_function_signature`(details: [Dict[<ast.Tuple object at 0x104a75450>]](#dict)) -> str
- `_format_docstrings`(docstrings: [Dict[<ast.Tuple object at 0x104a77a50>]](#dict)) -> str
- `_format_relationships`(module: dict) -> str
- `_compact_imports`(imports: list) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/src/chewdoc/formatters/myst_writer.py`  
**Dependencies**: `pathlib.Path`, `typing.Dict`, `typing.Any`, `chewdoc.constants.META_TEMPLATE`, `chewdoc.constants.MODULE_TEMPLATE`, `chewdoc.constants.API_REF_TEMPLATE`, `chewdoc.constants.RELATIONSHIP_TEMPLATE`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.mccabe
:::{doc} ASTVisitor:22
Performs a depth-first walk of the AST.
:::
:::{doc} PathGraphingAstVisitor:94
A visitor for a parsed Abstract Syntax Tree which finds executable
statements.
:::
:::{doc} McCabeChecker:228
McCabe cyclomatic complexity checker.
:::
:::{doc} get_module_complexity:292
Returns the complexity of a module
:::
**Imports**: `__future__.with_statement`, `optparse`, `sys`, `tokenize`, `collections.defaultdict`, `ast`, `ast.iter_child_nodes`, `flake8.util.ast`, `flake8.util.iter_child_nodes`
**Type References**: [[ASTVisitor]], [[McCabeChecker]], [[PathGraph]], [[PathGraphingAstVisitor]], [[PathNode]]

### Interface
- `get_code_complexity`() -> Any
- `get_module_complexity`() -> Any
- `_read`() -> Any
- `main`() -> Any
- `__init__`() -> Any
- `default`() -> Any
- `dispatch`() -> Any
- `preorder`() -> Any
- `to_dot`() -> Any
- `dot_id`() -> Any
- `connect`() -> Any
- `complexity`() -> Any
- `reset`() -> Any
- `dispatch_list`() -> Any
- `visitFunctionDef`() -> Any
- `visitClassDef`() -> Any
- `appendPathNode`() -> Any
- `visitSimpleStatement`() -> Any
- `visitLoop`() -> Any
- `visitIf`() -> Any
- `_subgraph`() -> Any
- `_subgraph_parse`() -> Any
- `visitTryExcept`() -> Any
- `visitWith`() -> Any
- `add_options`() -> Any
- `parse_options`() -> Any
- `run`() -> Any

### Implementation
**ASTVisitor**

**PathNode**

**PathGraph**

**PathGraphingAstVisitor**

**McCabeChecker**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/mccabe.py`  
**Dependencies**: `__future__.with_statement`, `optparse`, `sys`, `tokenize`, `collections.defaultdict`, `ast`, `ast.iter_child_nodes`, `flake8.util.ast`, `flake8.util.iter_child_nodes`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._black_version



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_black_version.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pycodestyle
:::{doc} register_check:170
Register a new check object.
:::
:::{doc} tabs_or_spaces:194
Never mix tabs and spaces.

The most popular way of indenting Python is with spaces only.  The
second-most popular way is with tabs only.  Code indented with a
mixture of tabs and spaces should be converted to using spaces
exclusively.  When invoking the Python command line interpreter with
the -t option, it issues warnings about code that illegally mixes
tabs and spaces.  When using -tt these warnings become errors.
These options are highly recommended!

Okay: if a == 0:\n    a = 1\n    b = 1
:::
:::{doc} tabs_obsolete:214
On new projects, spaces-only are strongly recommended over tabs.

Okay: if True:\n    return
W191: if True:\n\treturn
:::
:::{doc} trailing_whitespace:226
Trailing whitespace is superfluous.

The warning returned varies on whether the line itself is blank,
for easier filtering for those who want to indent their blank lines.

Okay: spam(1)\n#
W291: spam(1) \n#
W293: class Foo(object):\n    \n    bang = 12
:::
:::{doc} trailing_blank_lines:248
Trailing blank lines are superfluous.

Okay: spam(1)
W391: spam(1)\n

However the last line should end with a new line (warning W292).
:::
:::{doc} maximum_line_length:265
Limit all lines to a maximum of 79 characters.

There are still many devices around that are limited to 80 character
lines; plus, limiting windows to 80 characters makes it possible to
have several windows side-by-side.  The default wrapping on such
devices looks ugly.  Therefore, please limit all lines to a maximum
of 79 characters. For flowing long blocks of text (docstrings or
comments), limiting the length to 72 characters is recommended.

Reports error E501.
:::
:::{doc} blank_lines:338
Separate top-level function and class definitions with two blank
lines.

Method definitions inside a class are separated by a single blank
line.

Extra blank lines may be used (sparingly) to separate groups of
related functions.  Blank lines may be omitted between a bunch of
related one-liners (e.g. a set of dummy implementations).

Use blank lines in functions, sparingly, to indicate logical
sections.

Okay: def a():\n    pass\n\n\ndef b():\n    pass
Okay: def a():\n    pass\n\n\nasync def b():\n    pass
Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
Okay: default = 1\nfoo = 1
Okay: classify = 1\nfoo = 1

E301: class Foo:\n    b = 0\n    def bar():\n        pass
E302: def a():\n    pass\n\ndef b(n):\n    pass
E302: def a():\n    pass\n\nasync def b(n):\n    pass
E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
E303: def a():\n\n\n\n    pass
E304: @decorator\n\ndef a():\n    pass
E305: def a():\n    pass\na()
E306: def a():\n    def b():\n        pass\n    def c():\n        pass
:::
:::{doc} extraneous_whitespace:424
Avoid extraneous whitespace.

Avoid extraneous whitespace in these situations:
- Immediately inside parentheses, brackets or braces.
- Immediately before a comma, semicolon, or colon.

Okay: spam(ham[1], {eggs: 2})
E201: spam( ham[1], {eggs: 2})
E201: spam(ham[ 1], {eggs: 2})
E201: spam(ham[1], { eggs: 2})
E202: spam(ham[1], {eggs: 2} )
E202: spam(ham[1 ], {eggs: 2})
E202: spam(ham[1], {eggs: 2 })

E203: if x == 4: print x, y; x, y = y , x
E203: if x == 4: print x, y ; x, y = y, x
E203: if x == 4 : print x, y; x, y = y, x

Okay: @decorator
E204: @ decorator
:::
:::{doc} whitespace_around_keywords:463
Avoid extraneous whitespace around keywords.

Okay: True and False
E271: True and  False
E272: True  and False
E273: True and\tFalse
E274: True\tand False
:::
:::{doc} missing_whitespace_after_keyword:487
Keywords should be followed by whitespace.

Okay: from foo import (bar, baz)
E275: from foo import(bar, baz)
E275: from importable.module import(bar, baz)
E275: if(foo): bar
:::
:::{doc} indentation:510
Use indent_size (PEP8 says 4) spaces per indentation level.

For really old code that you don't want to mess up, you can continue
to use 8-space tabs.

Okay: a = 1
Okay: if a == 0:\n    a = 1
E111:   a = 1
E114:   # a = 1

Okay: for item in items:\n    pass
E112: for item in items:\npass
E115: for item in items:\n# Hi\n    pass

Okay: a = 1\nb = 2
E113: a = 1\n    b = 2
E116: a = 1\n    # b = 2
:::
:::{doc} continued_indentation:552
Continuation lines indentation.

Continuation lines should align wrapped elements either vertically
using Python's implicit line joining inside parentheses, brackets
and braces, or using a hanging indent.

When using a hanging indent these considerations should be applied:
- there should be no arguments on the first line, and
- further indentation should be used to clearly distinguish itself
  as a continuation line.

Okay: a = (\n)
E123: a = (\n    )

Okay: a = (\n    42)
E121: a = (\n   42)
E122: a = (\n42)
E123: a = (\n    42\n    )
E124: a = (24,\n     42\n)
E125: if (\n    b):\n    pass
E126: a = (\n        42)
E127: a = (24,\n      42)
E128: a = (24,\n    42)
E129: if (a or\n    b):\n    pass
E131: a = (\n    42\n 24)
:::
:::{doc} whitespace_before_parameters:758
Avoid extraneous whitespace.

Avoid extraneous whitespace in the following situations:
- before the open parenthesis that starts the argument list of a
  function call.
- before the open parenthesis that starts an indexing or slicing.

Okay: spam(1)
E211: spam (1)

Okay: dict['key'] = list[index]
E211: dict ['key'] = list[index]
E211: dict['key'] = list [index]
:::
:::{doc} whitespace_around_operator:799
Avoid extraneous whitespace around an operator.

Okay: a = 12 + 3
E221: a = 4  + 5
E222: a = 4 +  5
E223: a = 4\t+ 5
E224: a = 4 +\t5
:::
:::{doc} missing_whitespace:823
Surround operators with the correct amount of whitespace.

- Always surround these binary operators with a single space on
  either side: assignment (=), augmented assignment (+=, -= etc.),
  comparisons (==, <, >, !=, <=, >=, in, not in, is, is not),
  Booleans (and, or, not).

- Each comma, semicolon or colon should be followed by whitespace.

- If operators with different priorities are used, consider adding
  whitespace around the operators with the lowest priorities.

Okay: i = i + 1
Okay: submitted += 1
Okay: x = x * 2 - 1
Okay: hypot2 = x * x + y * y
Okay: c = (a + b) * (a - b)
Okay: foo(bar, key='word', *args, **kwargs)
Okay: alpha[:-i]
Okay: [a, b]
Okay: (3,)
Okay: a[3,] = 1
Okay: a[1:4]
Okay: a[:4]
Okay: a[1:]
Okay: a[1:4:2]

E225: i=i+1
E225: submitted +=1
E225: x = x /2 - 1
E225: z = x **y
E225: z = 1and 1
E226: c = (a+b) * (a-b)
E226: hypot2 = x*x + y*y
E227: c = a|b
E228: msg = fmt%(errno, errmsg)
E231: ['a','b']
E231: foo(bar,baz)
E231: [{'a':'b'}]
:::
:::{doc} whitespace_around_comma:984
Avoid extraneous whitespace after a comma or a colon.

Note: these checks are disabled by default

Okay: a = (1, 2)
E241: a = (1,  2)
E242: a = (1,\t2)
:::
:::{doc} whitespace_around_named_parameter_equals:1003
Don't use spaces around the '=' sign in function arguments.

Don't use spaces around the '=' sign when used to indicate a
keyword argument or a default parameter value, except when
using a type annotation.

Okay: def complex(real, imag=0.0):
Okay: return magic(r=real, i=imag)
Okay: boolean(a == b)
Okay: boolean(a != b)
Okay: boolean(a <= b)
Okay: boolean(a >= b)
Okay: def foo(arg: int = 42):
Okay: async def foo(arg: int = 42):

E251: def complex(real, imag = 0.0):
E251: return magic(r = real, i = imag)
E252: def complex(real, image: float=0.0):
:::
:::{doc} whitespace_before_comment:1069
Separate inline comments by at least two spaces.

An inline comment is a comment on the same line as a statement.
Inline comments should be separated by at least two spaces from the
statement. They should start with a # and a single space.

Each line of a block comment starts with a # and one or multiple
spaces as there can be indented text inside the comment.

Okay: x = x + 1  # Increment x
Okay: x = x + 1    # Increment x
Okay: # Block comments:
Okay: #  - Block comment list
Okay: #  - Block comment list
E261: x = x + 1 # Increment x
E262: x = x + 1  #Increment x
E262: x = x + 1  #  Increment x
E262: x = x + 1  #  Increment x
E265: #Block comment
E266: ### Block comment
:::
:::{doc} imports_on_separate_lines:1114
Place imports on separate lines.

Okay: import os\nimport sys
E401: import sys, os

Okay: from subprocess import Popen, PIPE
Okay: from myclas import MyClass
Okay: from foo.bar.yourclass import YourClass
Okay: import myclass
Okay: import foo.bar.yourclass
:::
:::{doc} module_imports_on_top_of_file:1134
Place imports at the top of the file.

Always put imports at the top of the file, just after any module
comments and docstrings, and before module globals and constants.

Okay: import os
Okay: # this is a comment\nimport os
Okay: '''this is a module docstring'''\nimport os
Okay: r'''this is a module docstring'''\nimport os
E402: a=1\nimport os
E402: 'One string'\n"Two string"\nimport os
E402: a=1\nfrom sys import x

Okay: if x:\n    import os
:::
:::{doc} compound_statements:1189
Compound statements (on the same line) are generally
discouraged.

While sometimes it's okay to put an if/for/while with a small body
on the same line, never do this for multi-clause statements.
Also avoid folding such long lines!

Always use a def statement instead of an assignment statement that
binds a lambda expression directly to a name.

Okay: if foo == 'blah':\n    do_blah_thing()
Okay: do_one()
Okay: do_two()
Okay: do_three()

E701: if foo == 'blah': do_blah_thing()
E701: for x in lst: total += x
E701: while t < 10: t = delay()
E701: if foo == 'blah': do_blah_thing()
E701: else: do_non_blah_thing()
E701: try: something()
E701: finally: cleanup()
E701: if foo == 'blah': one(); two(); three()
E702: do_one(); do_two(); do_three()
E703: do_four();  # useless semicolon
E704: def f(x): return 2*x
E731: f = lambda x: 2*x
:::
:::{doc} explicit_line_join:1254
Avoid explicit line join between brackets.

The preferred way of wrapping long lines is by using Python's
implied line continuation inside parentheses, brackets and braces.
Long lines can be broken over multiple lines by wrapping expressions
in parentheses.  These should be used in preference to using a
backslash for line continuation.

E502: aaa = [123, \\n       123]
E502: aaa = ("bbb " \\n       "ccc")

Okay: aaa = [123,\n       123]
Okay: aaa = ("bbb "\n       "ccc")
Okay: aaa = "bbb " \\n    "ccc"
Okay: aaa = 123  # \\
:::
:::{doc} _break_around_binary_operators:1311
Private function to reduce duplication.

This factors out the shared details between
:func:`break_before_binary_operator` and
:func:`break_after_binary_operator`.
:::
:::{doc} break_before_binary_operator:1338
Avoid breaks before binary operators.

The preferred place to break around a binary operator is after the
operator, not before it.

W503: (width == 0\n + height == 0)
W503: (width == 0\n and height == 0)
W503: var = (1\n       & ~2)
W503: var = (1\n       / -2)
W503: var = (1\n       + -1\n       + -2)

Okay: foo(\n    -x)
Okay: foo(x\n    [])
Okay: x = '''\n''' + ''
Okay: foo(x,\n    -y)
Okay: foo(x,  # comment\n    -y)
:::
:::{doc} break_after_binary_operator:1368
Avoid breaks after binary operators.

The preferred place to break around a binary operator is before the
operator, not after it.

W504: (width == 0 +\n height == 0)
W504: (width == 0 and\n height == 0)
W504: var = (1 &\n       ~2)

Okay: foo(\n    -x)
Okay: foo(x\n    [])
Okay: x = '''\n''' + ''
Okay: x = '' + '''\n'''
Okay: foo(x,\n    -y)
Okay: foo(x,  # comment\n    -y)

The following should be W504 but unary_context is tricky with these
Okay: var = (1 /\n       -2)
Okay: var = (1 +\n       -1 +\n       -2)
:::
:::{doc} comparison_to_singleton:1403
Comparison to singletons should use "is" or "is not".

Comparisons to singletons like None should always be done
with "is" or "is not", never the equality operators.

Okay: if arg is not None:
E711: if arg != None:
E711: if None == arg:
E712: if arg == True:
E712: if False == arg:

Also, beware of writing if x when you really mean if x is not None
-- e.g. when testing whether a variable or argument that defaults to
None was set to some other value.  The other value might have a type
(such as a container) that could be false in a boolean context!
:::
:::{doc} comparison_negative:1440
Negative comparison should be done using "not in" and "is not".

Okay: if x not in y:\n    pass
Okay: assert (X in Y or X is Z)
Okay: if not (X in Y):\n    pass
Okay: zz = x is not y
E713: Z = not X in Y
E713: if not X.B in Y:\n    pass
E714: if not X is Y:\n    pass
E714: Z = not X.B is Y
:::
:::{doc} comparison_type:1462
Object type comparisons should `is` / `is not` / `isinstance()`.

Do not compare types directly.

Okay: if isinstance(obj, int):
Okay: if type(obj) is int:
E721: if type(obj) == type(1):
:::
:::{doc} bare_except:1484
When catching exceptions, mention specific exceptions when
possible.

Okay: except Exception:
Okay: except BaseException:
E722: except:
:::
:::{doc} ambiguous_identifier:1501
Never use the characters 'l', 'O', or 'I' as variable names.

In some fonts, these characters are indistinguishable from the
numerals one and zero. When tempted to use 'l', use 'L' instead.

Okay: L = 0
Okay: o = 123
Okay: i = 42
E741: l = 0
E741: O = 123
E741: I = 42

Variables can be bound in several other contexts, including class
and function definitions, lambda functions, 'global' and 'nonlocal'
statements, exception handlers, and 'with' and 'for' statements.
In addition, we have a special handling for function parameters.

Okay: except AttributeError as o:
Okay: with lock as L:
Okay: foo(l=12)
Okay: foo(l=I)
Okay: for a in foo(l=12):
Okay: lambda arg: arg * l
Okay: lambda a=l[I:5]: None
Okay: lambda x=a.I: None
Okay: if l >= 12:
E741: except AttributeError as O:
E741: with lock as l:
E741: global I
E741: nonlocal l
E741: def foo(l):
E741: def foo(l=12):
E741: l = foo(l=12)
E741: for l in range(10):
E741: [l for l in lines if l]
E741: lambda l: None
E741: lambda a=x[1:5], l: None
E741: lambda **l:
E741: def f(**l):
E742: class I(object):
E743: def l(x):
:::
:::{doc} python_3000_invalid_escape_sequence:1601
Invalid escape sequences are deprecated in Python 3.6.

Okay: regex = r'\.png$'
W605: regex = '\.png$'
:::
:::{doc} maximum_doc_length:1662
Limit all doc lines to a maximum of 72 characters.

For flowing long blocks of text (docstrings or comments), limiting
the length to 72 characters is recommended.

Reports warning W505
:::
:::{doc} readlines:1714
Read the source code.
:::
:::{doc} stdin_get_value:1725
Read the value from stdin.
:::
:::{doc} expand_indent:1733
Return the amount of indentation.

Tabs are expanded to the next multiple of 8.
:::
:::{doc} mute_string:1752
Replace contents with 'xxx' to prevent syntax matching.
:::
:::{doc} parse_udiff:1764
Return a dictionary of matching lines.
:::
:::{doc} normalize_paths:1793
Parse a comma-separated list of paths.

Return a list of absolute paths.
:::
:::{doc} filename_match:1811
Check if patterns contains a pattern that matches filename.

If patterns is unspecified, this always returns True.
:::
:::{doc} update_counts:1821
Adds one to the counts of each appearance of characters in s,
for characters in counts
:::
:::{doc} Checker:1838
Load a Python source file, tokenize it, check coding style.
:::
:::{doc} BaseReport:2132
Collect the results of the checks.
:::
:::{doc} FileReport:2222
Collect the results of the checks and print the filenames.
:::
:::{doc} StandardReport:2228
Collect and print the results of the checks.
:::
:::{doc} DiffReport:2282
Collect and print the results for the changed lines only.
:::
:::{doc} StyleGuide:2295
Initialize a PEP-8 instance with few options.
:::
:::{doc} get_parser:2432
Create the parser for the program.
:::
:::{doc} read_config:2497
Read and parse configurations.

If a config file is specified on the command line with the
"--config" option, then only it is used for configuration.

Otherwise, the user configuration (~/.config/pycodestyle) and any
local configurations in the current directory or above will be
merged together (in that order) using the read method of
ConfigParser.
:::
:::{doc} process_options:2571
Process options passed either via arglist or command line args.

Passing in the ``config_file`` parameter allows other tools, such as
flake8 to specify their own options to be processed in pycodestyle.
:::
:::{doc} _parse_multi_options:2623
Split and strip and discard empties.

Turns the following:

A,
B,

into ["A", "B"]
:::
:::{doc} _main:2639
Parse options and run checks on Python source.
:::
**Imports**: `bisect`, `configparser`, `inspect`, `io`, `keyword`, `os`, `re`, `sys`, `time`, `tokenize`, `warnings`, `fnmatch.fnmatch`, `functools.lru_cache`, `optparse.OptionParser`, `signal`
**Type References**: [[BaseReport]], [[Checker]], [[DiffReport]], [[FileReport]], [[StandardReport]], [[StyleGuide]]

### Interface
- `_get_parameters`() -> Any
- `register_check`() -> Any
- `tabs_or_spaces`() -> Any
- `tabs_obsolete`() -> Any
- `trailing_whitespace`() -> Any
- `trailing_blank_lines`() -> Any
- `maximum_line_length`() -> Any
- `_is_one_liner`() -> Any
- `blank_lines`() -> Any
- `extraneous_whitespace`() -> Any
- `whitespace_around_keywords`() -> Any
- `missing_whitespace_after_keyword`() -> Any
- `indentation`() -> Any
- `continued_indentation`() -> Any
- `whitespace_before_parameters`() -> Any
- `whitespace_around_operator`() -> Any
- `missing_whitespace`() -> Any
- `whitespace_around_comma`() -> Any
- `whitespace_around_named_parameter_equals`() -> Any
- `whitespace_before_comment`() -> Any
- `imports_on_separate_lines`() -> Any
- `module_imports_on_top_of_file`() -> Any
- `compound_statements`() -> Any
- `explicit_line_join`() -> Any
- `_is_binary_operator`() -> Any
- `_break_around_binary_operators`() -> Any
- `break_before_binary_operator`() -> Any
- `break_after_binary_operator`() -> Any
- `comparison_to_singleton`() -> Any
- `comparison_negative`() -> Any
- `comparison_type`() -> Any
- `bare_except`() -> Any
- `ambiguous_identifier`() -> Any
- `python_3000_invalid_escape_sequence`() -> Any
- `maximum_doc_length`() -> Any
- `readlines`() -> Any
- `stdin_get_value`() -> Any
- `expand_indent`() -> Any
- `mute_string`() -> Any
- `parse_udiff`() -> Any
- `normalize_paths`() -> Any
- `filename_match`() -> Any
- `update_counts`() -> Any
- `_is_eol_token`() -> Any
- `get_parser`() -> Any
- `read_config`() -> Any
- `process_options`() -> Any
- `_parse_multi_options`() -> Any
- `_main`() -> Any
- `_add_check`() -> Any
- `is_string_literal`() -> Any
- `__init__`() -> Any
- `report_invalid_syntax`() -> Any
- `readline`() -> Any
- `run_check`() -> Any
- `init_checker_state`() -> Any
- `check_physical`() -> Any
- `build_tokens_line`() -> Any
- `check_logical`() -> Any
- `check_ast`() -> Any
- `generate_tokens`() -> Any
- `maybe_check_physical`() -> Any
- `check_all`() -> Any
- `start`() -> Any
- `stop`() -> Any
- `init_file`() -> Any
- `increment_logical_line`() -> Any
- `error`() -> Any
- `get_file_results`() -> Any
- `get_count`() -> Any
- `get_statistics`() -> Any
- `print_statistics`() -> Any
- `print_benchmark`() -> Any
- `init_report`() -> Any
- `check_files`() -> Any
- `input_file`() -> Any
- `input_dir`() -> Any
- `excluded`() -> Any
- `ignore_code`() -> Any
- `get_checks`() -> Any

### Implementation
**Checker**

**BaseReport**

**FileReport**

**StandardReport**

**DiffReport**

**StyleGuide**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pycodestyle.py`  
**Dependencies**: `bisect`, `configparser`, `inspect`, `io`, `keyword`, `os`, `re`, `sys`, `time`, `tokenize`, `warnings`, `fnmatch.fnmatch`, `functools.lru_cache`, `optparse.OptionParser`, `signal`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.mypy_extensions
:::{doc} Arg:107
A normal positional argument
:::
:::{doc} DefaultArg:112
A positional argument with a default value
:::
:::{doc} NamedArg:117
A keyword-only argument
:::
:::{doc} DefaultNamedArg:122
A keyword-only argument with a default value
:::
:::{doc} VarArg:127
A *args-style variadic positional argument
:::
:::{doc} KwArg:132
A **kwargs-style variadic keyword argument
:::
**Imports**: `typing.Any`, `sys`, `typing._type_check`
**Type References**: [[NoReturn]], [[_FlexibleAliasCls]], [[_FlexibleAliasClsApplied]], [[_NativeIntMeta]], [[_TypedDictMeta]], [[i16]], [[i32]], [[i64]], [[u8]]

### Interface
- `_check_fails`() -> Any
- `_dict_new`() -> Any
- `_typeddict_new`() -> Any
- `Arg`() -> Any
- `DefaultArg`() -> Any
- `NamedArg`() -> Any
- `DefaultNamedArg`() -> Any
- `VarArg`() -> Any
- `KwArg`() -> Any
- `trait`() -> Any
- `mypyc_attr`() -> Any
- `__new__`() -> Any
- `__init__`() -> Any
- `__getitem__`() -> Any
- `__instancecheck__`() -> Any

### Implementation
**_TypedDictMeta**

**NoReturn**

**_FlexibleAliasClsApplied**

**_FlexibleAliasCls**

**_NativeIntMeta**

**i64**

**i32**

**i16**

**u8**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/mypy_extensions.py`  
**Dependencies**: `typing.Any`, `sys`, `typing._type_check`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.py

**Imports**: `__future__.annotations`, `sys`, `_pytest._py.error`, `_pytest._py.path`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/py.py`  
**Dependencies**: `__future__.annotations`, `sys`, `_pytest._py.error`, `_pytest._py.path`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.mdurl._decode

**Imports**: `__future__.annotations`, `collections.abc.Sequence`, `functools`, `re`
### Interface
- `get_decode_cache`(exclude: str) -> Sequence[str]
- `decode`(string: str, exclude: str) -> str
- `repl_func_with_cache`(match: re.Match, cache: Sequence[str]) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/mdurl/_decode.py`  
**Dependencies**: `__future__.annotations`, `collections.abc.Sequence`, `functools`, `re`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.mdurl._url

**Imports**: `__future__.annotations`, `typing.NamedTuple`
**Type References**: [[None]], [[URL]]


### Implementation
**URL**
  - protocol: str | None
  - slashes: bool
  - auth: str | None
  - port: str | None
  - hostname: str | None
  - hash: str | None
  - search: str | None
  - pathname: str | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/mdurl/_url.py`  
**Dependencies**: `__future__.annotations`, `typing.NamedTuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.mdurl

**Imports**: `mdurl._decode.DECODE_COMPONENT_CHARS`, `mdurl._decode.DECODE_DEFAULT_CHARS`, `mdurl._decode.decode`, `mdurl._encode.ENCODE_COMPONENT_CHARS`, `mdurl._encode.ENCODE_DEFAULT_CHARS`, `mdurl._encode.encode`, `mdurl._format.format`, `mdurl._parse.url_parse`, `mdurl._url.URL`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/mdurl/__init__.py`  
**Dependencies**: `mdurl._decode.DECODE_COMPONENT_CHARS`, `mdurl._decode.DECODE_DEFAULT_CHARS`, `mdurl._decode.decode`, `mdurl._encode.ENCODE_COMPONENT_CHARS`, `mdurl._encode.ENCODE_DEFAULT_CHARS`, `mdurl._encode.encode`, `mdurl._format.format`, `mdurl._parse.url_parse`, `mdurl._url.URL`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.mdurl._format

**Imports**: `__future__.annotations`, `typing.TYPE_CHECKING`, `mdurl._url.URL`
### Interface
- `format`(url: URL) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/mdurl/_format.py`  
**Dependencies**: `__future__.annotations`, `typing.TYPE_CHECKING`, `mdurl._url.URL`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.mdurl._parse

**Imports**: `__future__.annotations`, `collections.defaultdict`, `re`, `mdurl._url.URL`
**Type References**: [[MutableURL]]

### Interface
- `url_parse`(url: URL | str) -> URL
- `__init__`() -> None
- `parse`(url: str, slashes_denote_host: bool) -> MutableURL
- `parse_host`(host: str) -> None

### Implementation
**MutableURL**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/mdurl/_parse.py`  
**Dependencies**: `__future__.annotations`, `collections.defaultdict`, `re`, `mdurl._url.URL`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.mdurl._encode

**Imports**: `__future__.annotations`, `collections.abc.Sequence`, `string.ascii_letters`, `string.digits`, `string.hexdigits`, `urllib.parse.quote`
### Interface
- `get_encode_cache`(exclude: str) -> Sequence[str]
- `encode`(string: str, exclude: str) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/mdurl/_encode.py`  
**Dependencies**: `__future__.annotations`, `collections.abc.Sequence`, `string.ascii_letters`, `string.digits`, `string.hexdigits`, `urllib.parse.quote`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging.tags
:::{doc} Tag:42
A representation of the tag triple for a wheel.

Instances are considered immutable and thus are hashable. Equality checking
is also supported.
:::
:::{doc} parse_tag:96
Parses the provided tag (e.g. `py3-none-any`) into a frozenset of Tag instances.

Returning a set is required due to the possibility that the tag is a
compressed tag set.
:::
:::{doc} _is_threaded_cpython:125
Determine if the ABI corresponds to a threaded (`--disable-gil`) build.

The threaded builds are indicated by a "t" in the abiflags.
:::
:::{doc} _abi3_applies:141
Determine if the Python version supports abi3.

PEP 384 was first implemented in Python 3.2. The threaded (`--disable-gil`)
builds do not support abi3.
:::
:::{doc} cpython_tags:184
Yields the tags for a CPython interpreter.

The tags consist of:
- cp<python_version>-<abi>-<platform>
- cp<python_version>-abi3-<platform>
- cp<python_version>-none-<platform>
- cp<less than python_version>-abi3-<platform>  # Older Python versions down to 3.2.

If python_version only specifies a major version then user-provided ABIs and
the 'none' ABItag will be used.

If 'abi3' or 'none' are specified in 'abis' then they will be yielded at
their normal position and not at the beginning.
:::
:::{doc} _generic_abi:243
Return the ABI tag based on EXT_SUFFIX.
:::
:::{doc} generic_tags:284
Yields the tags for a generic interpreter.

The tags consist of:
- <interpreter>-<abi>-<platform>

The "none" ABI will be added if it was not explicitly provided.
:::
:::{doc} _py_interpreter_range:315
Yields Python versions in descending order.

After the latest version, the major-only version will be yielded, and then
all previous versions of that major version.
:::
:::{doc} compatible_tags:330
Yields the sequence of tags that are compatible with a specific version of Python.

The tags consist of:
- py*-none-<platform>
- <interpreter>-none-any  # ... if `interpreter` is provided.
- py*-none-any
:::
:::{doc} mac_platforms:397
Yields the platform tags for a macOS system.

The `version` parameter is a two-item tuple specifying the macOS version to
generate platform tags for. The `arch` parameter is the CPU architecture to
generate platform tags for. Both parameters default to the appropriate value
for the current system.
:::
:::{doc} ios_platforms:476
Yields the platform tags for an iOS system.

:param version: A two-item tuple specifying the iOS version to generate
    platform tags for. Defaults to the current iOS version.
:param multiarch: The CPU architecture+ABI to generate platform tags for -
    (the value used by `sys.implementation._multiarch` e.g.,
    `arm64_iphoneos` or `x84_64_iphonesimulator`). Defaults to the current
    multiarch value.
:::
:::{doc} platform_tags:556
Provides the platform tags for this installation.
:::
:::{doc} interpreter_name:570
Returns the name of the running interpreter.

Some implementations have a reserved, two-letter abbreviation which will
be returned when appropriate.
:::
:::{doc} interpreter_version:581
Returns the version of the running interpreter.
:::
:::{doc} sys_tags:597
Returns the sequence of tag triples for the running interpreter.

The order of the sequence corresponds to priority order for the
interpreter, from most to least important.
:::
**Imports**: `__future__.annotations`, `logging`, `platform`, `re`, `struct`, `subprocess`, `sys`, `sysconfig`, `importlib.machinery.EXTENSION_SUFFIXES`, `typing.Iterable`, `typing.Iterator`, `typing.Sequence`, `typing.Tuple`, `typing.cast`, `_manylinux`, `_musllinux`
**Type References**: [[None]], [[Tag]]

### Interface
- `parse_tag`(tag: str) -> frozenset[Tag]
- `_get_config_var`(name: str, warn: bool) -> int | str | None
- `_normalize_string`(string: str) -> str
- `_is_threaded_cpython`(abis: list[str]) -> bool
- `_abi3_applies`(python_version: PythonVersion, threading: bool) -> bool
- `_cpython_abis`(py_version: PythonVersion, warn: bool) -> list[str]
- `cpython_tags`(python_version: PythonVersion | None, abis: Iterable[str] | None, platforms: Iterable[str] | None) -> Iterator[Tag]
- `_generic_abi`() -> list[str]
- `generic_tags`(interpreter: str | None, abis: Iterable[str] | None, platforms: Iterable[str] | None) -> Iterator[Tag]
- `_py_interpreter_range`(py_version: PythonVersion) -> Iterator[str]
- `compatible_tags`(python_version: PythonVersion | None, interpreter: str | None, platforms: Iterable[str] | None) -> Iterator[Tag]
- `_mac_arch`(arch: str, is_32bit: bool) -> str
- `_mac_binary_formats`(version: AppleVersion, cpu_arch: str) -> list[str]
- `mac_platforms`(version: AppleVersion | None, arch: str | None) -> Iterator[str]
- `ios_platforms`(version: AppleVersion | None, multiarch: str | None) -> Iterator[str]
- `_linux_platforms`(is_32bit: bool) -> Iterator[str]
- `_generic_platforms`() -> Iterator[str]
- `platform_tags`() -> Iterator[str]
- `interpreter_name`() -> str
- `interpreter_version`() -> str
- `_version_nodot`(version: PythonVersion) -> str
- `sys_tags`() -> Iterator[Tag]
- `__init__`(interpreter: str, abi: str, platform: str) -> None
- `interpreter`() -> str
- `abi`() -> str
- `platform`() -> str
- `__eq__`(other: object) -> bool
- `__hash__`() -> int
- `__str__`() -> str
- `__repr__`() -> str

### Implementation
**Tag**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/tags.py`  
**Dependencies**: `__future__.annotations`, `logging`, `platform`, `re`, `struct`, `subprocess`, `sys`, `sysconfig`, `importlib.machinery.EXTENSION_SUFFIXES`, `typing.Iterable`, `typing.Iterator`, `typing.Sequence`, `typing.Tuple`, `typing.cast`, `_manylinux`, `_musllinux`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging._musllinux
:::{doc} _get_musl_version:34
Detect currently-running musl runtime version.

This is done by checking the specified executable's dynamic linking
information, and invoking the loader to parse its output for a version
string. If the loader is musl, the output would be something like::

    musl libc (x86_64)
    Version 1.2.2
    Dynamic Program Loader
:::
:::{doc} platform_tags:56
Generate musllinux tags compatible to the current platform.

:param archs: Sequence of compatible architectures.
    The first one shall be the closest to the actual architecture and be the part of
    platform tag after the ``linux_`` prefix, e.g. ``x86_64``.
    The ``linux_`` prefix is assumed as a prerequisite for the current platform to
    be musllinux-compatible.

:returns: An iterator of compatible musllinux tags.
:::
**Imports**: `__future__.annotations`, `functools`, `re`, `subprocess`, `sys`, `typing.Iterator`, `typing.NamedTuple`, `typing.Sequence`, `_elffile.ELFFile`, `sysconfig`
**Type References**: [[_MuslVersion]]

### Interface
- `_parse_musl_version`(output: str) -> _MuslVersion | None
- `_get_musl_version`(executable: str) -> _MuslVersion | None
- `platform_tags`(archs: Sequence[str]) -> Iterator[str]

### Implementation
**_MuslVersion**
  - major: int
  - minor: int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/_musllinux.py`  
**Dependencies**: `__future__.annotations`, `functools`, `re`, `subprocess`, `sys`, `typing.Iterator`, `typing.NamedTuple`, `typing.Sequence`, `_elffile.ELFFile`, `sysconfig`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging.metadata
:::{doc} InvalidMetadata:49
A metadata field contains invalid data.
:::
:::{doc} RawMetadata:64
A dictionary of raw core metadata.

Each field in core metadata maps to a key of this dictionary (when data is
provided). The key is lower-case and underscores are used instead of dashes
compared to the equivalent core metadata field. Any core metadata field that
can be specified multiple times or can hold multiple values in a single
field have a key with a plural name. See :class:`Metadata` whose attributes
match the keys of this dictionary.

Core metadata fields that can be specified multiple times are stored as a
list or dict depending on which is appropriate for the field. Any fields
which hold multiple values in a single field are stored as a list.
:::
:::{doc} _parse_keywords:175
Split a string of comma-separated keywords into a list of keywords.
:::
:::{doc} _parse_project_urls:180
Parse a list of label/URL string pairings separated by a comma.
:::
:::{doc} _get_payload:220
Get the body of the message.
:::
:::{doc} parse_email:286
Parse a distribution's metadata stored as email headers (e.g. from ``METADATA``).

This function returns a two-item tuple of dicts. The first dict is of
recognized fields from the core metadata specification. Fields that can be
parsed and translated into Python's built-in types are converted
appropriately. All other fields are left as-is. Fields that are allowed to
appear multiple times are stored as lists.

The second dict contains all other fields from the metadata. This includes
any unrecognized fields. It also includes any fields which are expected to
be parsed into a built-in type but were not formatted appropriately. Finally,
any fields that are expected to appear only once but are repeated are
included in this dict.
:::
:::{doc} _Validator:472
Validate a metadata field.

All _process_*() methods correspond to a core metadata field. The method is
called with the field's raw value. If the raw value is valid it is returned
in its "enriched" form (e.g. ``version.Version`` for the ``Version`` field).
If the raw value is invalid, :exc:`InvalidMetadata` is raised (with a cause
as appropriate).
:::
:::{doc} Metadata:688
Representation of distribution metadata.

Compared to :class:`RawMetadata`, this class provides objects representing
metadata fields instead of only using built-in types. Any invalid metadata
will cause :exc:`InvalidMetadata` to be raised (with a
:py:attr:`~BaseException.__cause__` attribute as appropriate).
:::
**Imports**: `__future__.annotations`, `email.feedparser`, `email.header`, `email.message`, `email.parser`, `email.policy`, `pathlib`, `sys`, `typing`, `typing.Any`, `typing.Callable`, `typing.Generic`, `typing.Literal`, `typing.TypedDict`, `typing.cast`, `licenses`, `requirements`, `specifiers`, `utils`, `version`, `licenses.NormalizedLicenseExpression`
**Type References**: [[Callable]], [[Exception]], [[ExceptionGroup]], [[InvalidMetadata]], [[Metadata]], [[None]], [[NormalizedLicenseExpression]], [[NormalizedName]], [[RawMetadata]], [[Requirement]], [[SpecifierSet]], [[T]], [[Version]], [[_Validator]], [[requirements.Requirement]], [[specifiers.SpecifierSet]], [[utils.NormalizedName]], [[version_module.Version]]

### Interface
- `_parse_keywords`(data: str) -> list[str]
- `_parse_project_urls`(data: list[str]) -> dict[<ast.Tuple object at 0x1058a1590>]
- `_get_payload`(msg: email.message.Message, source: bytes | str) -> str
- `parse_email`(data: bytes | str) -> tuple[<ast.Tuple object at 0x1058f4850>]
- `__init__`(message: str, exceptions: list[Exception]) -> None
- `__set_name__`(_owner: Metadata, name: str) -> None
- `__get__`(instance: Metadata, _owner: type[Metadata]) -> T
- `_invalid_metadata`(msg: str, cause: Exception | None) -> InvalidMetadata
- `_process_metadata_version`(value: str) -> _MetadataVersion
- `_process_name`(value: str) -> str
- `_process_version`(value: str) -> version_module.Version
- `_process_summary`(value: str) -> str
- `_process_description_content_type`(value: str) -> str
- `_process_dynamic`(value: list[str]) -> list[str]
- `_process_provides_extra`(value: list[str]) -> list[utils.NormalizedName]
- `_process_requires_python`(value: str) -> specifiers.SpecifierSet
- `_process_requires_dist`(value: list[str]) -> list[requirements.Requirement]
- `_process_license_expression`(value: str) -> NormalizedLicenseExpression | None
- `_process_license_files`(value: list[str]) -> list[str]
- `from_raw`(data: RawMetadata) -> Metadata
- `from_email`(data: bytes | str) -> Metadata
- `__repr__`() -> str

### Implementation
**InvalidMetadata**
  - field: str
**RawMetadata**
  - metadata_version: str
  - name: str
  - version: str
  - platforms: list[str]
  - summary: str
  - description: str
  - keywords: list[str]
  - home_page: str
  - author: str
  - author_email: str
  - license: str
  - supported_platforms: list[str]
  - download_url: str
  - classifiers: list[str]
  - requires: list[str]
  - provides: list[str]
  - obsoletes: list[str]
  - maintainer: str
  - maintainer_email: str
  - requires_dist: list[str]
  - provides_dist: list[str]
  - obsoletes_dist: list[str]
  - requires_python: str
  - requires_external: list[str]
  - project_urls: dict[<ast.Tuple object at 0x1058abc50>]
  - description_content_type: str
  - provides_extra: list[str]
  - dynamic: list[str]
  - license_expression: str
  - license_files: list[str]
**_Validator**
  - name: str
  - raw_name: str
  - added: _MetadataVersion
  - converter: Callable[<ast.Tuple object at 0x1058fd310>]
**Metadata**
  - _raw: RawMetadata
  - metadata_version: _Validator[_MetadataVersion]
  - name: _Validator[str]
  - version: _Validator[version_module.Version]
  - dynamic: _Validator[list[str] | None]
  - platforms: _Validator[list[str] | None]
  - supported_platforms: _Validator[list[str] | None]
  - summary: _Validator[str | None]
  - description: _Validator[str | None]
  - description_content_type: _Validator[str | None]
  - keywords: _Validator[list[str] | None]
  - home_page: _Validator[str | None]
  - download_url: _Validator[str | None]
  - author: _Validator[str | None]
  - author_email: _Validator[str | None]
  - maintainer: _Validator[str | None]
  - maintainer_email: _Validator[str | None]
  - license: _Validator[str | None]
  - license_expression: _Validator[NormalizedLicenseExpression | None]
  - license_files: _Validator[list[str] | None]
  - classifiers: _Validator[list[str] | None]
  - requires_dist: _Validator[list[requirements.Requirement] | None]
  - requires_python: _Validator[specifiers.SpecifierSet | None]
  - requires_external: _Validator[list[str] | None]
  - project_urls: _Validator[dict[<ast.Tuple object at 0x105974550>] | None]
  - provides_extra: _Validator[list[utils.NormalizedName] | None]
  - provides_dist: _Validator[list[str] | None]
  - obsoletes_dist: _Validator[list[str] | None]
  - requires: _Validator[list[str] | None]
  - provides: _Validator[list[str] | None]
  - obsoletes: _Validator[list[str] | None]
  - exceptions: list[Exception]
**ExceptionGroup**
  - message: str
  - exceptions: list[Exception]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/metadata.py`  
**Dependencies**: `__future__.annotations`, `email.feedparser`, `email.header`, `email.message`, `email.parser`, `email.policy`, `pathlib`, `sys`, `typing`, `typing.Any`, `typing.Callable`, `typing.Generic`, `typing.Literal`, `typing.TypedDict`, `typing.cast`, `licenses`, `requirements`, `specifiers`, `utils`, `version`, `licenses.NormalizedLicenseExpression`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging.version
:::{doc} parse:47
Parse the given version string.

>>> parse('1.0.dev1')
<Version('1.0.dev1')>

:param version: The version string to parse.
:raises InvalidVersion: When the version string is not a valid version.
:::
:::{doc} InvalidVersion:59
Raised when a version string is not a valid version.

>>> Version("invalid")
Traceback (most recent call last):
    ...
packaging.version.InvalidVersion: Invalid version: 'invalid'
:::
:::{doc} Version:161
This class abstracts handling of a project's versions.

A :class:`Version` instance is comparison aware and can be compared and
sorted using the standard Python interfaces.

>>> v1 = Version("1.0a5")
>>> v2 = Version("1.0")
>>> v1
<Version('1.0a5')>
>>> v2
<Version('1.0')>
>>> v1 < v2
True
>>> v1 == v2
False
>>> v1 > v2
False
>>> v1 >= v2
False
>>> v1 <= v2
True
:::
:::{doc} _parse_local_version:511
Takes a string like abc.1.twelve and turns it into ("abc", 1, "twelve").
:::
**Imports**: `__future__.annotations`, `itertools`, `re`, `typing.Any`, `typing.Callable`, `typing.NamedTuple`, `typing.SupportsInt`, `typing.Tuple`, `typing.Union`, `_structures.Infinity`, `_structures.InfinityType`, `_structures.NegativeInfinity`, `_structures.NegativeInfinityType`
**Type References**: [[Any]], [[CmpKey]], [[CmpLocalType]], [[CmpPrePostDevType]], [[InvalidVersion]], [[LocalType]], [[None]], [[Version]], [[_BaseVersion]], [[_TrimmedRelease]], [[_Version]]

### Interface
- `parse`(version: str) -> Version
- `_parse_letter_version`(letter: str | None, number: str | bytes | SupportsInt | None) -> tuple[<ast.Tuple object at 0x1059e4850>] | None
- `_parse_local_version`(local: str | None) -> LocalType | None
- `_cmpkey`(epoch: int, release: tuple[<ast.Tuple object at 0x1059e6bd0>], pre: tuple[<ast.Tuple object at 0x1059e6f50>] | None, post: tuple[<ast.Tuple object at 0x1059e7390>] | None, dev: tuple[<ast.Tuple object at 0x1059e77d0>] | None, local: LocalType | None) -> CmpKey
- `__hash__`() -> int
- `__lt__`(other: _BaseVersion) -> bool
- `__le__`(other: _BaseVersion) -> bool
- `__eq__`(other: object) -> bool
- `__ge__`(other: _BaseVersion) -> bool
- `__gt__`(other: _BaseVersion) -> bool
- `__ne__`(other: object) -> bool
- `__init__`(version: str) -> None
- `__repr__`() -> str
- `__str__`() -> str
- `epoch`() -> int
- `release`() -> tuple[<ast.Tuple object at 0x1059d4ed0>]
- `pre`() -> tuple[<ast.Tuple object at 0x1059b9ad0>] | None
- `post`() -> int | None
- `dev`() -> int | None
- `local`() -> str | None
- `public`() -> str
- `base_version`() -> str
- `is_prerelease`() -> bool
- `is_postrelease`() -> bool
- `is_devrelease`() -> bool
- `major`() -> int
- `minor`() -> int
- `micro`() -> int

### Implementation
**_Version**
  - epoch: int
  - release: tuple[<ast.Tuple object at 0x10598bfd0>]
  - dev: tuple[<ast.Tuple object at 0x10598bbd0>] | None
  - pre: tuple[<ast.Tuple object at 0x10598b750>] | None
  - post: tuple[<ast.Tuple object at 0x10598b290>] | None
  - local: LocalType | None
**InvalidVersion**

**_BaseVersion**
  - _key: tuple[<ast.Tuple object at 0x105989e50>]
**Version**
  - _key: CmpKey
**_TrimmedRelease**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/version.py`  
**Dependencies**: `__future__.annotations`, `itertools`, `re`, `typing.Any`, `typing.Callable`, `typing.NamedTuple`, `typing.SupportsInt`, `typing.Tuple`, `typing.Union`, `_structures.Infinity`, `_structures.InfinityType`, `_structures.NegativeInfinity`, `_structures.NegativeInfinityType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging._parser
:::{doc} _parse_requirement:65
requirement = WS? IDENTIFIER WS? extras WS? requirement_details
:::
:::{doc} _parse_requirement_details:86
requirement_details = AT URL (WS requirement_marker?)?
                    | specifier WS? (requirement_marker)?
:::
:::{doc} _parse_requirement_marker:137
requirement_marker = SEMICOLON marker WS?
:::
:::{doc} _parse_extras:157
extras = (LEFT_BRACKET wsp* extras_list? wsp* RIGHT_BRACKET)?
:::
:::{doc} _parse_extras_list:176
extras_list = identifier (wsp* ',' wsp* identifier)*
:::
:::{doc} _parse_specifier:203
specifier = LEFT_PARENTHESIS WS? version_many WS? RIGHT_PARENTHESIS
          | WS? version_many WS?
:::
:::{doc} _parse_version_many:220
version_many = (SPECIFIER (WS? COMMA WS? SPECIFIER)*)?
:::
:::{doc} _parse_marker:262
marker = marker_atom (BOOLOP marker_atom)+
:::
:::{doc} _parse_marker_atom:274
marker_atom = WS? LEFT_PARENTHESIS WS? marker WS? RIGHT_PARENTHESIS WS?
            | WS? marker_item WS?
:::
:::{doc} _parse_marker_item:296
marker_item = WS? marker_var WS? marker_op WS? marker_var WS?
:::
:::{doc} _parse_marker_var:310
marker_var = VARIABLE | QUOTED_STRING
:::
:::{doc} _parse_marker_op:336
marker_op = IN | NOT IN | OP
:::
**Imports**: `__future__.annotations`, `ast`, `typing.NamedTuple`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `_tokenizer.DEFAULT_RULES`, `_tokenizer.Tokenizer`
**Type References**: [[MarkerAtom]], [[MarkerList]], [[Node]], [[None]], [[Op]], [[ParsedRequirement]], [[Value]], [[Variable]]

### Interface
- `parse_requirement`(source: str) -> ParsedRequirement
- `_parse_requirement`(tokenizer: Tokenizer) -> ParsedRequirement
- `_parse_requirement_details`(tokenizer: Tokenizer) -> tuple[<ast.Tuple object at 0x1059fd190>]
- `_parse_requirement_marker`(tokenizer: Tokenizer) -> MarkerList
- `_parse_extras`(tokenizer: Tokenizer) -> list[str]
- `_parse_extras_list`(tokenizer: Tokenizer) -> list[str]
- `_parse_specifier`(tokenizer: Tokenizer) -> str
- `_parse_version_many`(tokenizer: Tokenizer) -> str
- `parse_marker`(source: str) -> MarkerList
- `_parse_full_marker`(tokenizer: Tokenizer) -> MarkerList
- `_parse_marker`(tokenizer: Tokenizer) -> MarkerList
- `_parse_marker_atom`(tokenizer: Tokenizer) -> MarkerAtom
- `_parse_marker_item`(tokenizer: Tokenizer) -> MarkerItem
- `_parse_marker_var`(tokenizer: Tokenizer) -> MarkerVar
- `process_env_var`(env_var: str) -> Variable
- `process_python_str`(python_str: str) -> Value
- `_parse_marker_op`(tokenizer: Tokenizer) -> Op
- `__init__`(value: str) -> None
- `__str__`() -> str
- `__repr__`() -> str
- `serialize`() -> str

### Implementation
**Node**

**Variable**

**Value**

**Op**

**ParsedRequirement**
  - name: str
  - url: str
  - extras: list[str]
  - specifier: str
  - marker: MarkerList | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/_parser.py`  
**Dependencies**: `__future__.annotations`, `ast`, `typing.NamedTuple`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `_tokenizer.DEFAULT_RULES`, `_tokenizer.Tokenizer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging.utils
:::{doc} InvalidName:18
An invalid distribution name; users should refer to the packaging user guide.
:::
:::{doc} InvalidWheelFilename:24
An invalid wheel filename was found, users should refer to PEP 427.
:::
:::{doc} InvalidSdistFilename:30
An invalid sdist filename was found, users should refer to the packaging user guide.
:::
:::{doc} canonicalize_version:59
Return a canonical form of a version as a string.

>>> canonicalize_version('1.0.1')
'1.0.1'

Per PEP 625, versions may have multiple canonical forms, differing
only by trailing zeros.

>>> canonicalize_version('1.0.0')
'1'
>>> canonicalize_version('1.0.0', strip_trailing_zero=False)
'1.0.0'

Invalid versions are returned unaltered.

>>> canonicalize_version('foo bar baz')
'foo bar baz'
:::
**Imports**: `__future__.annotations`, `functools`, `re`, `typing.NewType`, `typing.Tuple`, `typing.Union`, `typing.cast`, `tags.Tag`, `tags.parse_tag`, `version.InvalidVersion`, `version.Version`, `version._TrimmedRelease`
**Type References**: [[InvalidName]], [[InvalidSdistFilename]], [[InvalidWheelFilename]]

### Interface
- `canonicalize_name`(name: str) -> NormalizedName
- `is_normalized_name`(name: str) -> bool
- `canonicalize_version`(version: Version | str) -> str
- `_`(version: str) -> str
- `parse_wheel_filename`(filename: str) -> tuple[<ast.Tuple object at 0x105a72450>]
- `parse_sdist_filename`(filename: str) -> tuple[<ast.Tuple object at 0x105a8df10>]

### Implementation
**InvalidName**

**InvalidWheelFilename**

**InvalidSdistFilename**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/utils.py`  
**Dependencies**: `__future__.annotations`, `functools`, `re`, `typing.NewType`, `typing.Tuple`, `typing.Union`, `typing.cast`, `tags.Tag`, `tags.parse_tag`, `version.InvalidVersion`, `version.Version`, `version._TrimmedRelease`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging.requirements
:::{doc} InvalidRequirement:15
An invalid requirement was found, users should refer to PEP 508.
:::
:::{doc} Requirement:21
Parse a requirement.

Parse a given requirement string into its parts, such as name, specifier,
URL, and extras. Raises InvalidRequirement on a badly-formed requirement
string.
:::
**Imports**: `__future__.annotations`, `typing.Any`, `typing.Iterator`, `_parser.parse_requirement`, `_tokenizer.ParserSyntaxError`, `markers.Marker`, `markers._normalize_extra_values`, `specifiers.SpecifierSet`, `utils.canonicalize_name`
**Type References**: [[InvalidRequirement]], [[Requirement]]

### Interface
- `__init__`(requirement_string: str) -> None
- `_iter_parts`(name: str) -> Iterator[str]
- `__str__`() -> str
- `__repr__`() -> str
- `__hash__`() -> int
- `__eq__`(other: Any) -> bool

### Implementation
**InvalidRequirement**

**Requirement**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/requirements.py`  
**Dependencies**: `__future__.annotations`, `typing.Any`, `typing.Iterator`, `_parser.parse_requirement`, `_tokenizer.ParserSyntaxError`, `markers.Marker`, `markers._normalize_extra_values`, `specifiers.SpecifierSet`, `utils.canonicalize_name`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging._structures


**Type References**: [[InfinityType]], [[NegativeInfinityType]]

### Interface
- `__repr__`() -> str
- `__hash__`() -> int
- `__lt__`(other: object) -> bool
- `__le__`(other: object) -> bool
- `__eq__`(other: object) -> bool
- `__gt__`(other: object) -> bool
- `__ge__`(other: object) -> bool
- `__neg__`(self: object) -> InfinityType

### Implementation
**InfinityType**

**NegativeInfinityType**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/_structures.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging.markers
:::{doc} InvalidMarker:30
An invalid marker was found, users should refer to PEP 508.
:::
:::{doc} UndefinedComparison:36
An invalid operation was attempted on a value that doesn't support it.
:::
:::{doc} UndefinedEnvironmentName:42
A name was attempted to be used that does not exist inside of the
environment.
:::
:::{doc} _normalize_extra_values:121
Normalize extra values.
:::
:::{doc} _repair_python_full_version:324
Work around platform.python_version() returning something that is not PEP 440
compliant for non-tagged Python builds.
:::
**Imports**: `__future__.annotations`, `operator`, `os`, `platform`, `sys`, `typing.Any`, `typing.Callable`, `typing.TypedDict`, `typing.cast`, `_parser.MarkerAtom`, `_parser.MarkerList`, `_parser.Op`, `_parser.Value`, `_parser.Variable`, `_parser.parse_marker`, `_tokenizer.ParserSyntaxError`, `specifiers.InvalidSpecifier`, `specifiers.Specifier`, `utils.canonicalize_name`
**Type References**: [[Environment]], [[InvalidMarker]], [[Marker]], [[None]], [[Operator]], [[UndefinedComparison]], [[UndefinedEnvironmentName]]

### Interface
- `_normalize_extra_values`(results: Any) -> Any
- `_format_marker`(marker: list[str] | MarkerAtom | str, first: bool | None) -> str
- `_eval_op`(lhs: str, op: Op, rhs: str) -> bool
- `_normalize`() -> tuple[<ast.Tuple object at 0x105aded90>]
- `_evaluate_markers`(markers: MarkerList, environment: dict[<ast.Tuple object at 0x105adf390>]) -> bool
- `format_full_version`(info: sys._version_info) -> str
- `default_environment`() -> Environment
- `_repair_python_full_version`(env: dict[<ast.Tuple object at 0x105b023d0>]) -> dict[<ast.Tuple object at 0x105b030d0>]
- `__init__`(marker: str) -> None
- `__str__`() -> str
- `__repr__`() -> str
- `__hash__`() -> int
- `__eq__`(other: Any) -> bool
- `evaluate`(environment: dict[<ast.Tuple object at 0x105b00110>] | None) -> bool

### Implementation
**InvalidMarker**

**UndefinedComparison**

**UndefinedEnvironmentName**

**Environment**
  - implementation_name: str
  - implementation_version: str
  - os_name: str
  - platform_machine: str
  - platform_release: str
  - platform_system: str
  - platform_version: str
  - python_full_version: str
  - platform_python_implementation: str
  - python_version: str
  - sys_platform: str
**Marker**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/markers.py`  
**Dependencies**: `__future__.annotations`, `operator`, `os`, `platform`, `sys`, `typing.Any`, `typing.Callable`, `typing.TypedDict`, `typing.cast`, `_parser.MarkerAtom`, `_parser.MarkerList`, `_parser.Op`, `_parser.Value`, `_parser.Variable`, `_parser.parse_marker`, `_tokenizer.ParserSyntaxError`, `specifiers.InvalidSpecifier`, `specifiers.Specifier`, `utils.canonicalize_name`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging._manylinux
:::{doc} _glibc_version_string_confstr:85
Primary implementation of glibc_version_string using os.confstr.
:::
:::{doc} _glibc_version_string_ctypes:104
Fallback implementation of glibc_version_string using ctypes.
:::
:::{doc} _glibc_version_string:148
Returns glibc version string, or None if not using glibc.
:::
:::{doc} _parse_glibc_version:153
Parse glibc version.

We use a regexp instead of str.split because we want to discard any
random junk that might come after the minor version -- this might happen
in patched/forked versions of glibc (e.g. Linaro's version of glibc
uses version strings like "2.20-2014.11"). See gh-3588.
:::
:::{doc} platform_tags:218
Generate manylinux tags compatible to the current platform.

:param archs: Sequence of compatible architectures.
    The first one shall be the closest to the actual architecture and be the part of
    platform tag after the ``linux_`` prefix, e.g. ``x86_64``.
    The ``linux_`` prefix is assumed as a prerequisite for the current platform to
    be manylinux-compatible.

:returns: An iterator of compatible manylinux tags.
:::
**Imports**: `__future__.annotations`, `collections`, `contextlib`, `functools`, `os`, `re`, `sys`, `warnings`, `typing.Generator`, `typing.Iterator`, `typing.NamedTuple`, `typing.Sequence`, `_elffile.EIClass`, `_elffile.EIData`, `_elffile.ELFFile`, `_elffile.EMachine`, `ctypes`, `_manylinux`
**Type References**: [[None]], [[_GLibCVersion]]

### Interface
- `_parse_elf`(path: str) -> Generator[<ast.Tuple object at 0x105b11850>]
- `_is_linux_armhf`(executable: str) -> bool
- `_is_linux_i686`(executable: str) -> bool
- `_have_compatible_abi`(executable: str, archs: Sequence[str]) -> bool
- `_glibc_version_string_confstr`() -> str | None
- `_glibc_version_string_ctypes`() -> str | None
- `_glibc_version_string`() -> str | None
- `_parse_glibc_version`(version_str: str) -> tuple[<ast.Tuple object at 0x105b19010>]
- `_get_glibc_version`() -> tuple[<ast.Tuple object at 0x105b28050>]
- `_is_compatible`(arch: str, version: _GLibCVersion) -> bool
- `platform_tags`(archs: Sequence[str]) -> Iterator[str]

### Implementation
**_GLibCVersion**
  - major: int
  - minor: int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/_manylinux.py`  
**Dependencies**: `__future__.annotations`, `collections`, `contextlib`, `functools`, `os`, `re`, `sys`, `warnings`, `typing.Generator`, `typing.Iterator`, `typing.NamedTuple`, `typing.Sequence`, `_elffile.EIClass`, `_elffile.EIData`, `_elffile.ELFFile`, `_elffile.EMachine`, `ctypes`, `_manylinux`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging._tokenizer
:::{doc} ParserSyntaxError:18
The provided source text could not be parsed correctly.
:::
:::{doc} Tokenizer:90
Context-sensitive token parsing.

Provides methods to examine the input stream to check whether the next token
matches.
:::
**Imports**: `__future__.annotations`, `contextlib`, `re`, `dataclasses.dataclass`, `typing.Iterator`, `typing.NoReturn`, `specifiers.Specifier`
**Type References**: [[ParserSyntaxError]], [[Pattern]], [[Token]], [[Tokenizer]], [[re.Pattern]]

### Interface
- `__init__`(source: str) -> None
- `__str__`() -> str
- `consume`(name: str) -> None
- `check`(name: str) -> bool
- `expect`(name: str) -> Token
- `read`() -> Token
- `raise_syntax_error`(message: str) -> NoReturn
- `enclosing_tokens`(open_token: str, close_token: str) -> Iterator[None]

### Implementation
**Token**
  - name: str
  - text: str
  - position: int
**ParserSyntaxError**

**Tokenizer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/_tokenizer.py`  
**Dependencies**: `__future__.annotations`, `contextlib`, `re`, `dataclasses.dataclass`, `typing.Iterator`, `typing.NoReturn`, `specifiers.Specifier`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging.specifiers
:::{doc} InvalidSpecifier:32
Raised when attempting to create a :class:`Specifier` with a specifier
string that is invalid.

>>> Specifier("lolwat")
Traceback (most recent call last):
    ...
packaging.specifiers.InvalidSpecifier: Invalid specifier: 'lolwat'
:::
:::{doc} Specifier:99
This class abstracts handling of version specifiers.

.. tip::

    It is generally not required to instantiate this manually. You should instead
    prefer to work with :class:`SpecifierSet` instead, which can parse
    comma-separated version specifiers (which is what package metadata contains).
:::
:::{doc} _version_split:630
Split version into components.

The split components are intended for version comparison. The logic does
not attempt to retain the original version string, so joining the
components back with :func:`_version_join` may not produce the original
version string.
:::
:::{doc} _version_join:652
Join split version components into a version string.

This function assumes the input came from :func:`_version_split`, where the
first component must be the epoch (either empty or numeric), and all other
components numeric.
:::
:::{doc} SpecifierSet:690
This class abstracts handling of a set of version specifiers.

It can be passed a single specifier (``>=3.0``), a comma-separated list of
specifiers (``>=3.0,!=3.1``), or no specifier at all.
:::
**Imports**: `__future__.annotations`, `abc`, `itertools`, `re`, `typing.Callable`, `typing.Iterable`, `typing.Iterator`, `typing.TypeVar`, `typing.Union`, `utils.canonicalize_version`, `version.Version`
**Type References**: [[BaseSpecifier]], [[CallableOperator]], [[InvalidSpecifier]], [[Specifier]], [[SpecifierSet]], [[UnparsedVersionVar]]

### Interface
- `_coerce_version`(version: UnparsedVersion) -> Version
- `_version_split`(version: str) -> list[str]
- `_version_join`(components: list[str]) -> str
- `_is_not_suffix`(segment: str) -> bool
- `_pad_version`(left: list[str], right: list[str]) -> tuple[<ast.Tuple object at 0x105becd10>]
- `__str__`() -> str
- `__hash__`() -> int
- `__eq__`(other: object) -> bool
- `prereleases`(value: bool) -> None
- `contains`(item: UnparsedVersion, prereleases: bool | None, installed: bool | None) -> bool
- `filter`(iterable: Iterable[UnparsedVersionVar], prereleases: bool | None) -> Iterator[UnparsedVersionVar]
- `__init__`(specifiers: str | Iterable[Specifier], prereleases: bool | None) -> None
- `operator`() -> str
- `version`() -> str
- `__repr__`() -> str
- `_canonical_spec`() -> tuple[<ast.Tuple object at 0x105b75c90>]
- `_get_operator`(op: str) -> CallableOperator
- `_compare_compatible`(prospective: Version, spec: str) -> bool
- `_compare_equal`(prospective: Version, spec: str) -> bool
- `_compare_not_equal`(prospective: Version, spec: str) -> bool
- `_compare_less_than_equal`(prospective: Version, spec: str) -> bool
- `_compare_greater_than_equal`(prospective: Version, spec: str) -> bool
- `_compare_less_than`(prospective: Version, spec_str: str) -> bool
- `_compare_greater_than`(prospective: Version, spec_str: str) -> bool
- `_compare_arbitrary`(prospective: Version, spec: str) -> bool
- `__contains__`(item: UnparsedVersion) -> bool
- `__and__`(other: SpecifierSet | str) -> SpecifierSet
- `__len__`() -> int
- `__iter__`() -> Iterator[Specifier]

### Implementation
**InvalidSpecifier**

**BaseSpecifier**

**Specifier**
  - operator_callable: CallableOperator
**SpecifierSet**
  - filtered: list[UnparsedVersionVar]
  - found_prereleases: list[UnparsedVersionVar]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/specifiers.py`  
**Dependencies**: `__future__.annotations`, `abc`, `itertools`, `re`, `typing.Callable`, `typing.Iterable`, `typing.Iterator`, `typing.TypeVar`, `typing.Union`, `utils.canonicalize_version`, `version.Version`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging._elffile
:::{doc} ELFFile:41
Representation of an ELF executable.
:::
**Imports**: `__future__.annotations`, `enum`, `os`, `struct`, `typing.IO`
**Type References**: [[EIClass]], [[EIData]], [[ELFFile]], [[ELFInvalid]], [[EMachine]]

### Interface
- `__init__`(f: IO[bytes]) -> None
- `_read`(fmt: str) -> tuple[<ast.Tuple object at 0x105c2aa10>]
- `interpreter`() -> str | None

### Implementation
**ELFInvalid**

**EIClass**

**EIData**

**EMachine**

**ELFFile**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/_elffile.py`  
**Dependencies**: `__future__.annotations`, `enum`, `os`, `struct`, `typing.IO`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.modeline
:::{doc} get_filetype_from_buffer:28
Scan the buffer for modelines and return filetype if one is found.
:::
**Imports**: `re`
### Interface
- `get_filetype_from_line`() -> Any
- `get_filetype_from_buffer`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/modeline.py`  
**Dependencies**: `re`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.console
:::{doc} ansiformat:48
Format ``text`` with a color and/or some attributes::

    color       normal color
    *color*     bold color
    _color_     underlined color
    +color+     blinking color
:::

### Interface
- `reset_color`() -> Any
- `colorize`() -> Any
- `ansiformat`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/console.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.scanner
:::{doc} EndOfText:20
Raise if end of text is reached and the user
tried to call a match function.
:::
:::{doc} Scanner:27
Simple scanner

All method patterns are regular expression strings (not
compiled expressions!)
:::
**Imports**: `re`
**Type References**: [[EndOfText]], [[Scanner]]

### Interface
- `__init__`() -> Any
- `eos`() -> Any
- `check`() -> Any
- `test`() -> Any
- `scan`() -> Any
- `get_char`() -> Any
- `__repr__`() -> Any

### Implementation
**EndOfText**

**Scanner**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/scanner.py`  
**Dependencies**: `re`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatter
:::{doc} Formatter:25
Converts a token stream to text.

Formatters should have attributes to help selecting them. These
are similar to the corresponding :class:`~pygments.lexer.Lexer`
attributes.

.. autoattribute:: name
   :no-value:

.. autoattribute:: aliases
   :no-value:

.. autoattribute:: filenames
   :no-value:

You can pass options as keyword arguments to the constructor.
All formatters accept these basic options:

``style``
    The style to use, can be a string or a Style subclass
    (default: "default"). Not used by e.g. the
    TerminalFormatter.
``full``
    Tells the formatter to output a "full" document, i.e.
    a complete self-contained document. This doesn't have
    any effect for some formatters (default: false).
``title``
    If ``full`` is true, the title that should be used to
    caption the document (default: '').
``encoding``
    If given, must be an encoding name. This will be used to
    convert the Unicode token strings to byte strings in the
    output. If it is "" or None, Unicode strings will be written
    to the output file, which most file-like objects do not
    support (default: None).
``outencoding``
    Overrides ``encoding`` if given.
:::
**Imports**: `codecs`, `pygments.util.get_bool_opt`, `pygments.styles.get_style_by_name`
**Type References**: [[Formatter]]

### Interface
- `_lookup_style`() -> Any
- `__init__`() -> Any
- `get_style_defs`() -> Any
- `format`() -> Any
- `__class_getitem__`() -> Any

### Implementation
**Formatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatter.py`  
**Dependencies**: `codecs`, `pygments.util.get_bool_opt`, `pygments.styles.get_style_by_name`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.token
:::{doc} is_token_subtype:85
Return True if ``ttype`` is a subtype of ``other``.

exists for backwards compatibility. use ``ttype in other`` now.
:::
:::{doc} string_to_tokentype:94
Convert a string into a token type::

    >>> string_to_token('String.Double')
    Token.Literal.String.Double
    >>> string_to_token('Token.Literal.Number')
    Token.Literal.Number
    >>> string_to_token('')
    Token

Tokens that are already tokens are returned unchanged:

    >>> string_to_token(String)
    Token.Literal.String
:::

**Type References**: [[_TokenType]]

### Interface
- `is_token_subtype`() -> Any
- `string_to_tokentype`() -> Any
- `split`() -> Any
- `__init__`() -> Any
- `__contains__`() -> Any
- `__getattr__`() -> Any
- `__repr__`() -> Any
- `__copy__`() -> Any
- `__deepcopy__`() -> Any

### Implementation
**_TokenType**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/token.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.style

**Imports**: `pygments.token.Token`, `pygments.token.STANDARD_TYPES`
**Type References**: [[Style]], [[StyleMeta]]

### Interface
- `__new__`() -> Any
- `style_for_token`() -> Any
- `list_styles`() -> Any
- `styles_token`() -> Any
- `__iter__`() -> Any
- `__len__`() -> Any
- `colorformat`() -> Any

### Implementation
**StyleMeta**

**Style**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/style.py`  
**Dependencies**: `pygments.token.Token`, `pygments.token.STANDARD_TYPES`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.util
:::{doc} ClassNotFound:30
Raised if one of the lookup functions didn't find a matching class.
:::
:::{doc} OptionError:34
This exception will be raised by all option processing functions if
the type or value of the argument is not correct.
:::
:::{doc} get_choice_opt:40
If the key `optname` from the dictionary is not in the sequence
`allowed`, raise an error, otherwise return it.
:::
:::{doc} get_bool_opt:53
Intuitively, this is `options.get(optname, default)`, but restricted to
Boolean value. The Booleans can be represented as string, in order to accept
Boolean value from the command line arguments. If the key `optname` is
present in the dictionary `options` and is not associated with a Boolean,
raise an `OptionError`. If it is absent, `default` is returned instead.

The valid string values for ``True`` are ``1``, ``yes``, ``true`` and
``on``, the ones for ``False`` are ``0``, ``no``, ``false`` and ``off``
(matched case-insensitively).
:::
:::{doc} get_int_opt:82
As :func:`get_bool_opt`, but interpret the value as an integer.
:::
:::{doc} get_list_opt:94
If the key `optname` from the dictionary `options` is a string,
split it at whitespace and return it. If it is already a list
or a tuple, it is returned as a list.
:::
:::{doc} make_analysator:122
Return a static text analyser function that returns float values.
:::
:::{doc} shebang_matches:139
Check if the given regular expression matches the last part of the
shebang if one exists.

    >>> from pygments.util import shebang_matches
    >>> shebang_matches('#!/usr/bin/env python', r'python(2\.\d)?')
    True
    >>> shebang_matches('#!/usr/bin/python2.4', r'python(2\.\d)?')
    True
    >>> shebang_matches('#!/usr/bin/python-ruby', r'python(2\.\d)?')
    False
    >>> shebang_matches('#!/usr/bin/python/ruby', r'python(2\.\d)?')
    False
    >>> shebang_matches('#!/usr/bin/startsomethingwith python',
    ...                 r'python(2\.\d)?')
    True

It also checks for common windows executable file extensions::

    >>> shebang_matches('#!C:\\Python2.4\\Python.exe', r'python(2\.\d)?')
    True

Parameters (``'-f'`` or ``'--foo'`` are ignored so ``'perl'`` does
the same as ``'perl -e'``)

Note that this method automatically searches the whole string (eg:
the regular expression is wrapped in ``'^$'``)
:::
:::{doc} doctype_matches:184
Check if the doctype matches a regular expression (if present).

Note that this method only checks the first part of a DOCTYPE.
eg: 'html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"'
:::
:::{doc} html_doctype_matches:197
Check if the file looks like it has a html doctype.
:::
:::{doc} looks_like_xml:205
Check if a doctype exists or if we have some tags.
:::
:::{doc} surrogatepair:221
Given a unicode character code with length greater than 16 bits,
return the two 16 bit surrogate pair.
:::
:::{doc} format_lines:230
Formats a sequence of strings for output.
:::
:::{doc} duplicates_removed:249
Returns a list with duplicates removed from the iterable `it`.

Order is preserved.
:::
:::{doc} Future:265
Generic class to defer some work.

Handled specially in RegexLexerMeta, to support regex string construction at
first use.
:::
:::{doc} guess_decode:275
Decode *text* with guessed encoding.

First try UTF-8; this should fail for non-UTF-8 encodings.
Then try the preferred locale encoding.
Fall back to latin-1, which always works.
:::
:::{doc} guess_decode_from_terminal:296
Decode *text* coming from terminal *term*.

First try the terminal encoding, if given.
Then try UTF-8.  Then try the preferred locale encoding.
Fall back to latin-1, which always works.
:::
:::{doc} terminal_encoding:313
Return our best guess of encoding for the given *term*.
:::
**Imports**: `re`, `io.TextIOWrapper`, `locale`, `locale`
**Type References**: [[ClassNotFound]], [[Future]], [[OptionError]], [[UnclosingTextIOWrapper]]

### Interface
- `get_choice_opt`() -> Any
- `get_bool_opt`() -> Any
- `get_int_opt`() -> Any
- `get_list_opt`() -> Any
- `docstring_headline`() -> Any
- `make_analysator`() -> Any
- `shebang_matches`() -> Any
- `doctype_matches`() -> Any
- `html_doctype_matches`() -> Any
- `looks_like_xml`() -> Any
- `surrogatepair`() -> Any
- `format_lines`() -> Any
- `duplicates_removed`() -> Any
- `guess_decode`() -> Any
- `guess_decode_from_terminal`() -> Any
- `terminal_encoding`() -> Any
- `text_analyse`() -> Any
- `get`() -> Any
- `close`() -> Any

### Implementation
**ClassNotFound**

**OptionError**

**Future**

**UnclosingTextIOWrapper**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/util.py`  
**Dependencies**: `re`, `io.TextIOWrapper`, `locale`, `locale`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.sphinxext
:::{doc} PygmentsDoc:60
A directive to collect all lexers/formatters/filters and generate
autoclass directives for them.
:::
**Imports**: `sys`, `docutils.nodes`, `docutils.statemachine.ViewList`, `docutils.parsers.rst.Directive`, `sphinx.util.nodes.nested_parse_with_titles`, `pygments.lexers._mapping.LEXERS`, `pygments.lexers`, `pygments.lexers._mapping.LEXERS`, `pygments`, `inspect`, `pathlib`, `pygments.formatters.FORMATTERS`, `pygments.filters.FILTERS`
**Type References**: [[PygmentsDoc]]

### Interface
- `setup`() -> Any
- `run`() -> Any
- `document_lexers_overview`() -> Any
- `document_lexers`() -> Any
- `document_formatters`() -> Any
- `document_filters`() -> Any
- `format_link`() -> Any
- `write_row`() -> Any
- `write_seperator`() -> Any

### Implementation
**PygmentsDoc**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/sphinxext.py`  
**Dependencies**: `sys`, `docutils.nodes`, `docutils.statemachine.ViewList`, `docutils.parsers.rst.Directive`, `sphinx.util.nodes.nested_parse_with_titles`, `pygments.lexers._mapping.LEXERS`, `pygments.lexers`, `pygments.lexers._mapping.LEXERS`, `pygments`, `inspect`, `pathlib`, `pygments.formatters.FORMATTERS`, `pygments.filters.FILTERS`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.cmdline
:::{doc} main:528
Main command line entry point.
:::
**Imports**: `os`, `sys`, `shutil`, `argparse`, `textwrap.dedent`, `pygments.__version__`, `pygments.highlight`, `pygments.util.ClassNotFound`, `pygments.util.OptionError`, `pygments.util.docstring_headline`, `pygments.util.guess_decode`, `pygments.util.guess_decode_from_terminal`, `pygments.util.terminal_encoding`, `pygments.util.UnclosingTextIOWrapper`, `pygments.lexers.get_all_lexers`, `pygments.lexers.get_lexer_by_name`, `pygments.lexers.guess_lexer`, `pygments.lexers.load_lexer_from_file`, `pygments.lexers.get_lexer_for_filename`, `pygments.lexers.find_lexer_class_for_filename`, `pygments.lexers.special.TextLexer`, `pygments.formatters.latex.LatexEmbeddedLexer`, `pygments.formatters.latex.LatexFormatter`, `pygments.formatters.get_all_formatters`, `pygments.formatters.get_formatter_by_name`, `pygments.formatters.load_formatter_from_file`, `pygments.formatters.get_formatter_for_filename`, `pygments.formatters.find_formatter_class`, `pygments.formatters.terminal.TerminalFormatter`, `pygments.formatters.terminal256.Terminal256Formatter`, `pygments.formatters.terminal256.TerminalTrueColorFormatter`, `pygments.filters.get_all_filters`, `pygments.filters.find_filter_class`, `pygments.styles.get_all_styles`, `pygments.styles.get_style_by_name`, `json`, `colorama.initialise`, `traceback`
**Type References**: [[HelpFormatter]]

### Interface
- `_parse_options`() -> Any
- `_parse_filters`() -> Any
- `_print_help`() -> Any
- `_print_list`() -> Any
- `_print_list_as_json`() -> Any
- `main_inner`() -> Any
- `main`() -> Any
- `is_only_option`() -> Any
- `__init__`() -> Any

### Implementation
**HelpFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/cmdline.py`  
**Dependencies**: `os`, `sys`, `shutil`, `argparse`, `textwrap.dedent`, `pygments.__version__`, `pygments.highlight`, `pygments.util.ClassNotFound`, `pygments.util.OptionError`, `pygments.util.docstring_headline`, `pygments.util.guess_decode`, `pygments.util.guess_decode_from_terminal`, `pygments.util.terminal_encoding`, `pygments.util.UnclosingTextIOWrapper`, `pygments.lexers.get_all_lexers`, `pygments.lexers.get_lexer_by_name`, `pygments.lexers.guess_lexer`, `pygments.lexers.load_lexer_from_file`, `pygments.lexers.get_lexer_for_filename`, `pygments.lexers.find_lexer_class_for_filename`, `pygments.lexers.special.TextLexer`, `pygments.formatters.latex.LatexEmbeddedLexer`, `pygments.formatters.latex.LatexFormatter`, `pygments.formatters.get_all_formatters`, `pygments.formatters.get_formatter_by_name`, `pygments.formatters.load_formatter_from_file`, `pygments.formatters.get_formatter_for_filename`, `pygments.formatters.find_formatter_class`, `pygments.formatters.terminal.TerminalFormatter`, `pygments.formatters.terminal256.Terminal256Formatter`, `pygments.formatters.terminal256.TerminalTrueColorFormatter`, `pygments.filters.get_all_filters`, `pygments.filters.find_filter_class`, `pygments.styles.get_all_styles`, `pygments.styles.get_style_by_name`, `json`, `colorama.initialise`, `traceback`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments
:::{doc} lex:35
Lex `code` with the `lexer` (must be a `Lexer` instance)
and return an iterable of tokens. Currently, this only calls
`lexer.get_tokens()`.
:::
:::{doc} format:52
Format ``tokens`` (an iterable of tokens) with the formatter ``formatter``
(a `Formatter` instance).

If ``outfile`` is given and a valid file object (an object with a
``write`` method), the result will be written to it, otherwise it
is returned as a string.
:::
:::{doc} highlight:77
This is the most high-level highlighting function. It combines `lex` and
`format` in one function.
:::
**Imports**: `io.StringIO`, `io.BytesIO`, `pygments.lexer.RegexLexer`, `pygments.formatter.Formatter`
### Interface
- `lex`() -> Any
- `format`() -> Any
- `highlight`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/__init__.py`  
**Dependencies**: `io.StringIO`, `io.BytesIO`, `pygments.lexer.RegexLexer`, `pygments.formatter.Formatter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.unistring

**Imports**: `unicodedata`
### Interface
- `combine`() -> Any
- `allexcept`() -> Any
- `_handle_runs`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/unistring.py`  
**Dependencies**: `unicodedata`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexer
:::{doc} LexerMeta:37
This metaclass automagically converts ``analyse_text`` methods into
static methods which always return float values.
:::
:::{doc} Lexer:49
Lexer for a specific language.

See also :doc:`lexerdevelopment`, a high-level guide to writing
lexers.

Lexer classes have attributes used for choosing the most appropriate
lexer based on various criteria.

.. autoattribute:: name
   :no-value:
.. autoattribute:: aliases
   :no-value:
.. autoattribute:: filenames
   :no-value:
.. autoattribute:: alias_filenames
.. autoattribute:: mimetypes
   :no-value:
.. autoattribute:: priority

Lexers included in Pygments should have two additional attributes:

.. autoattribute:: url
   :no-value:
.. autoattribute:: version_added
   :no-value:

Lexers included in Pygments may have additional attributes:

.. autoattribute:: _example
   :no-value:

You can pass options to the constructor. The basic options recognized
by all lexers and processed by the base `Lexer` class are:

``stripnl``
    Strip leading and trailing newlines from the input (default: True).
``stripall``
    Strip all leading and trailing whitespace from the input
    (default: False).
``ensurenl``
    Make sure that the input ends with a newline (default: True).  This
    is required for some lexers that consume input linewise.

    .. versionadded:: 1.3

``tabsize``
    If given and greater than 0, expand tabs in the input (default: 0).
``encoding``
    If given, must be an encoding name. This encoding will be used to
    convert the input string to Unicode, if it is not already a Unicode
    string (default: ``'guess'``, which uses a simple UTF-8 / Locale /
    Latin1 detection.  Can also be ``'chardet'`` to use the chardet
    library, if it is installed.
``inencoding``
    Overrides the ``encoding`` if given.
:::
:::{doc} DelegatingLexer:289
This lexer takes two lexer as arguments. A root lexer and
a language lexer. First everything is scanned using the language
lexer, afterwards all ``Other`` tokens are lexed using the root
lexer.

The lexers from the ``template`` lexer package use this base lexer.
:::
:::{doc} include:328
Indicates that a state should include rules from another state.
:::
:::{doc} _inherit:335
Indicates the a state should inherit from its superclass.
:::
:::{doc} combined:345
Indicates a state combined from multiple states.
:::
:::{doc} _PseudoMatch:358
A pseudo match object constructed from a string.
:::
:::{doc} bygroups:385
Callback that yields multiple actions for each group in the match.
:::
:::{doc} _This:411
Special singleton used for indicating the caller class.
Used by ``using``.
:::
:::{doc} using:420
Callback that processes the match with a different lexer.

The keyword arguments are forwarded to the lexer, except `state` which
is handled separately.

`state` specifies the state that the new lexer will start in, and can
be an enumerable such as ('root', 'inline', 'string') or a simple
string which is assumed to be on top of the root state.

Note: For that to work, `_other` must not be an `ExtendedRegexLexer`.
:::
:::{doc} default:470
Indicates a state or state action (e.g. #pop) to apply.
For example default('#pop') is equivalent to ('', Token, '#pop')
Note that state tuples may be used as well.

.. versionadded:: 2.0
:::
:::{doc} words:482
Indicates a list of literal words that is transformed into an optimized
regex that matches any of the words.

.. versionadded:: 2.0
:::
:::{doc} RegexLexerMeta:498
Metaclass for RegexLexer, creates the self._tokens attribute from
self.tokens on the first instantiation.
:::
:::{doc} RegexLexer:665
Base for simple stateful regular expression-based lexers.
Simplifies the lexing process so that you need only
provide a list of states and regular expressions.
:::
:::{doc} LexerContext:762
A helper object that holds lexer position data.
:::
:::{doc} ExtendedRegexLexer:777
A RegexLexer that uses a context object to store its state.
:::
:::{doc} do_insertions:849
Helper for lexers which must combine the results of several
sublexers.

``insertions`` is a list of ``(index, itokens)`` pairs.
Each ``itokens`` iterable should be inserted at position
``index`` into the token stream given by the ``tokens``
argument.

The result is a combined token stream.

TODO: clean up the code here.
:::
:::{doc} ProfilingRegexLexerMeta:913
Metaclass for ProfilingRegexLexer, collects regex timing info.
:::
:::{doc} ProfilingRegexLexer:935
Drop-in replacement for RegexLexer that does profiling of its regexes.
:::
**Imports**: `re`, `sys`, `time`, `pygments.filter.apply_filters`, `pygments.filter.Filter`, `pygments.filters.get_filter_by_name`, `pygments.token.Error`, `pygments.token.Text`, `pygments.token.Other`, `pygments.token.Whitespace`, `pygments.token._TokenType`, `pygments.util.get_bool_opt`, `pygments.util.get_int_opt`, `pygments.util.get_list_opt`, `pygments.util.make_analysator`, `pygments.util.Future`, `pygments.util.guess_decode`, `pygments.regexopt.regex_opt`, `chardet`
**Type References**: [[DelegatingLexer]], [[ExtendedRegexLexer]], [[Lexer]], [[LexerContext]], [[LexerMeta]], [[ProfilingRegexLexer]], [[ProfilingRegexLexerMeta]], [[RegexLexer]], [[RegexLexerMeta]], [[_PseudoMatch]], [[_This]], [[_inherit]], [[combined]], [[default]], [[include]], [[words]]

### Interface
- `bygroups`() -> Any
- `using`() -> Any
- `do_insertions`() -> Any
- `__new__`() -> Any
- `__init__`() -> Any
- `__repr__`() -> Any
- `add_filter`() -> Any
- `analyse_text`() -> Any
- `_preprocess_lexer_input`() -> Any
- `get_tokens`() -> Any
- `get_tokens_unprocessed`() -> Any
- `start`() -> Any
- `end`() -> Any
- `group`() -> Any
- `groups`() -> Any
- `groupdict`() -> Any
- `callback`() -> Any
- `get`() -> Any
- `_process_regex`() -> Any
- `_process_token`() -> Any
- `_process_new_state`() -> Any
- `_process_state`() -> Any
- `process_tokendef`() -> Any
- `get_tokendefs`() -> Any
- `__call__`() -> Any
- `streamer`() -> Any
- `match_func`() -> Any

### Implementation
**LexerMeta**

**Lexer**

**DelegatingLexer**

**include**

**_inherit**

**combined**

**_PseudoMatch**

**_This**

**default**

**words**

**RegexLexerMeta**

**RegexLexer**

**LexerContext**

**ExtendedRegexLexer**

**ProfilingRegexLexerMeta**

**ProfilingRegexLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexer.py`  
**Dependencies**: `re`, `sys`, `time`, `pygments.filter.apply_filters`, `pygments.filter.Filter`, `pygments.filters.get_filter_by_name`, `pygments.token.Error`, `pygments.token.Text`, `pygments.token.Other`, `pygments.token.Whitespace`, `pygments.token._TokenType`, `pygments.util.get_bool_opt`, `pygments.util.get_int_opt`, `pygments.util.get_list_opt`, `pygments.util.make_analysator`, `pygments.util.Future`, `pygments.util.guess_decode`, `pygments.regexopt.regex_opt`, `chardet`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.regexopt
:::{doc} regex_opt_inner:26
Return a regex that matches any string in the sorted list of strings.
:::
:::{doc} regex_opt:82
Return a compiled regex that matches any string in the given list.

The strings to match must be literal strings, not regexes.  They will be
regex-escaped.

*prefix* and *suffix* are pre- and appended to the final regex.
:::
**Imports**: `re`, `re.escape`, `os.path.commonprefix`, `itertools.groupby`, `operator.itemgetter`
### Interface
- `make_charset`() -> Any
- `regex_opt_inner`() -> Any
- `regex_opt`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/regexopt.py`  
**Dependencies**: `re`, `re.escape`, `os.path.commonprefix`, `itertools.groupby`, `operator.itemgetter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.plugin

**Imports**: `importlib.metadata.entry_points`
### Interface
- `iter_entry_points`() -> Any
- `find_plugin_lexers`() -> Any
- `find_plugin_formatters`() -> Any
- `find_plugin_styles`() -> Any
- `find_plugin_filters`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/plugin.py`  
**Dependencies**: `importlib.metadata.entry_points`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.filter
:::{doc} apply_filters:12
Use this method to apply an iterable of filters to
a stream. If lexer is given it's forwarded to the
filter, otherwise the filter receives `None`.
:::
:::{doc} simplefilter:25
Decorator that converts a function into a filter::

    @simplefilter
    def lowercase(self, lexer, stream, options):
        for ttype, value in stream:
            yield ttype, value.lower()
:::
:::{doc} Filter:41
Default filter. Subclass this class or use the `simplefilter`
decorator to create own filters.
:::
:::{doc} FunctionFilter:54
Abstract class used by `simplefilter` to create simple
function filters on the fly. The `simplefilter` decorator
automatically creates subclasses of this class for
functions passed to it.
:::

**Type References**: [[Filter]], [[FunctionFilter]]

### Interface
- `apply_filters`() -> Any
- `simplefilter`() -> Any
- `_apply`() -> Any
- `__init__`() -> Any
- `filter`() -> Any

### Implementation
**Filter**

**FunctionFilter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/filter.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.__main__

**Imports**: `sys`, `pygments.cmdline`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/__main__.py`  
**Dependencies**: `sys`, `pygments.cmdline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pytest

**Imports**: `__future__.annotations`, `_pytest.__version__`, `_pytest.version_tuple`, `_pytest._code.ExceptionInfo`, `_pytest.assertion.register_assert_rewrite`, `_pytest.cacheprovider.Cache`, `_pytest.capture.CaptureFixture`, `_pytest.config.cmdline`, `_pytest.config.Config`, `_pytest.config.console_main`, `_pytest.config.ExitCode`, `_pytest.config.hookimpl`, `_pytest.config.hookspec`, `_pytest.config.main`, `_pytest.config.PytestPluginManager`, `_pytest.config.UsageError`, `_pytest.config.argparsing.OptionGroup`, `_pytest.config.argparsing.Parser`, `_pytest.debugging.pytestPDB`, `_pytest.doctest.DoctestItem`, `_pytest.fixtures.fixture`, `_pytest.fixtures.FixtureDef`, `_pytest.fixtures.FixtureLookupError`, `_pytest.fixtures.FixtureRequest`, `_pytest.fixtures.yield_fixture`, `_pytest.freeze_support.freeze_includes`, `_pytest.legacypath.TempdirFactory`, `_pytest.legacypath.Testdir`, `_pytest.logging.LogCaptureFixture`, `_pytest.main.Dir`, `_pytest.main.Session`, `_pytest.mark.Mark`, `_pytest.mark.MARK_GEN`, `_pytest.mark.MarkDecorator`, `_pytest.mark.MarkGenerator`, `_pytest.mark.param`, `_pytest.monkeypatch.MonkeyPatch`, `_pytest.nodes.Collector`, `_pytest.nodes.Directory`, `_pytest.nodes.File`, `_pytest.nodes.Item`, `_pytest.outcomes.exit`, `_pytest.outcomes.fail`, `_pytest.outcomes.importorskip`, `_pytest.outcomes.skip`, `_pytest.outcomes.xfail`, `_pytest.pytester.HookRecorder`, `_pytest.pytester.LineMatcher`, `_pytest.pytester.Pytester`, `_pytest.pytester.RecordedHookCall`, `_pytest.pytester.RunResult`, `_pytest.python.Class`, `_pytest.python.Function`, `_pytest.python.Metafunc`, `_pytest.python.Module`, `_pytest.python.Package`, `_pytest.python_api.approx`, `_pytest.python_api.raises`, `_pytest.recwarn.deprecated_call`, `_pytest.recwarn.WarningsRecorder`, `_pytest.recwarn.warns`, `_pytest.reports.CollectReport`, `_pytest.reports.TestReport`, `_pytest.runner.CallInfo`, `_pytest.stash.Stash`, `_pytest.stash.StashKey`, `_pytest.terminal.TestShortLogReport`, `_pytest.tmpdir.TempPathFactory`, `_pytest.warning_types.PytestAssertRewriteWarning`, `_pytest.warning_types.PytestCacheWarning`, `_pytest.warning_types.PytestCollectionWarning`, `_pytest.warning_types.PytestConfigWarning`, `_pytest.warning_types.PytestDeprecationWarning`, `_pytest.warning_types.PytestExperimentalApiWarning`, `_pytest.warning_types.PytestRemovedIn9Warning`, `_pytest.warning_types.PytestReturnNotNoneWarning`, `_pytest.warning_types.PytestUnhandledCoroutineWarning`, `_pytest.warning_types.PytestUnhandledThreadExceptionWarning`, `_pytest.warning_types.PytestUnknownMarkWarning`, `_pytest.warning_types.PytestUnraisableExceptionWarning`, `_pytest.warning_types.PytestWarning`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pytest/__init__.py`  
**Dependencies**: `__future__.annotations`, `_pytest.__version__`, `_pytest.version_tuple`, `_pytest._code.ExceptionInfo`, `_pytest.assertion.register_assert_rewrite`, `_pytest.cacheprovider.Cache`, `_pytest.capture.CaptureFixture`, `_pytest.config.cmdline`, `_pytest.config.Config`, `_pytest.config.console_main`, `_pytest.config.ExitCode`, `_pytest.config.hookimpl`, `_pytest.config.hookspec`, `_pytest.config.main`, `_pytest.config.PytestPluginManager`, `_pytest.config.UsageError`, `_pytest.config.argparsing.OptionGroup`, `_pytest.config.argparsing.Parser`, `_pytest.debugging.pytestPDB`, `_pytest.doctest.DoctestItem`, `_pytest.fixtures.fixture`, `_pytest.fixtures.FixtureDef`, `_pytest.fixtures.FixtureLookupError`, `_pytest.fixtures.FixtureRequest`, `_pytest.fixtures.yield_fixture`, `_pytest.freeze_support.freeze_includes`, `_pytest.legacypath.TempdirFactory`, `_pytest.legacypath.Testdir`, `_pytest.logging.LogCaptureFixture`, `_pytest.main.Dir`, `_pytest.main.Session`, `_pytest.mark.Mark`, `_pytest.mark.MARK_GEN`, `_pytest.mark.MarkDecorator`, `_pytest.mark.MarkGenerator`, `_pytest.mark.param`, `_pytest.monkeypatch.MonkeyPatch`, `_pytest.nodes.Collector`, `_pytest.nodes.Directory`, `_pytest.nodes.File`, `_pytest.nodes.Item`, `_pytest.outcomes.exit`, `_pytest.outcomes.fail`, `_pytest.outcomes.importorskip`, `_pytest.outcomes.skip`, `_pytest.outcomes.xfail`, `_pytest.pytester.HookRecorder`, `_pytest.pytester.LineMatcher`, `_pytest.pytester.Pytester`, `_pytest.pytester.RecordedHookCall`, `_pytest.pytester.RunResult`, `_pytest.python.Class`, `_pytest.python.Function`, `_pytest.python.Metafunc`, `_pytest.python.Module`, `_pytest.python.Package`, `_pytest.python_api.approx`, `_pytest.python_api.raises`, `_pytest.recwarn.deprecated_call`, `_pytest.recwarn.WarningsRecorder`, `_pytest.recwarn.warns`, `_pytest.reports.CollectReport`, `_pytest.reports.TestReport`, `_pytest.runner.CallInfo`, `_pytest.stash.Stash`, `_pytest.stash.StashKey`, `_pytest.terminal.TestShortLogReport`, `_pytest.tmpdir.TempPathFactory`, `_pytest.warning_types.PytestAssertRewriteWarning`, `_pytest.warning_types.PytestCacheWarning`, `_pytest.warning_types.PytestCollectionWarning`, `_pytest.warning_types.PytestConfigWarning`, `_pytest.warning_types.PytestDeprecationWarning`, `_pytest.warning_types.PytestExperimentalApiWarning`, `_pytest.warning_types.PytestRemovedIn9Warning`, `_pytest.warning_types.PytestReturnNotNoneWarning`, `_pytest.warning_types.PytestUnhandledCoroutineWarning`, `_pytest.warning_types.PytestUnhandledThreadExceptionWarning`, `_pytest.warning_types.PytestUnknownMarkWarning`, `_pytest.warning_types.PytestUnraisableExceptionWarning`, `_pytest.warning_types.PytestWarning`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pytest.__main__

**Imports**: `__future__.annotations`, `pytest`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pytest/__main__.py`  
**Dependencies**: `__future__.annotations`, `pytest`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.violation
:::{doc} Violation:22
Class representing a violation reported by Flake8.
:::
**Imports**: `__future__.annotations`, `functools`, `linecache`, `logging`, `typing.Match`, `typing.NamedTuple`, `flake8.defaults`, `flake8.utils`
**Type References**: [[None]], [[Violation]]

### Interface
- `_find_noqa`(physical_line: str) -> Match[str] | None
- `is_inline_ignored`(disable_noqa: bool) -> bool

### Implementation
**Violation**
  - code: str
  - filename: str
  - line_number: int
  - column_number: int
  - text: str
  - physical_line: str | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/violation.py`  
**Dependencies**: `__future__.annotations`, `functools`, `linecache`, `logging`, `typing.Match`, `typing.NamedTuple`, `flake8.defaults`, `flake8.utils`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.discover_files
:::{doc} _filenames_from:15
Generate filenames from an argument.

:param arg:
    Parameter from the command-line.
:param predicate:
    Predicate to use to filter out filenames. If the predicate
    returns ``True`` we will exclude the filename, otherwise we
    will yield it. By default, we include every filename
    generated.
:returns:
    Generator of paths
:::
:::{doc} expand_paths:52
Expand out ``paths`` from commandline to the lintable files.
:::
**Imports**: `__future__.annotations`, `logging`, `os.path`, `typing.Callable`, `typing.Generator`, `typing.Sequence`, `flake8.utils`
### Interface
- `_filenames_from`(arg: str) -> Generator[<ast.Tuple object at 0x106027ed0>]
- `expand_paths`() -> Generator[<ast.Tuple object at 0x10602cb10>]
- `is_excluded`(arg: str) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/discover_files.py`  
**Dependencies**: `__future__.annotations`, `logging`, `os.path`, `typing.Callable`, `typing.Generator`, `typing.Sequence`, `flake8.utils`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8
:::{doc} configure_logging:36
Configure logging for flake8.

:param verbosity:
    How verbose to be in logging information.
:param filename:
    Name of the file to append log information to.
    If ``None`` this will log to ``sys.stderr``.
    If the name is "stdout" or "stderr" this will log to the appropriate
    stream.
:::
**Imports**: `__future__.annotations`, `logging`, `sys`
**Type References**: [[Handler]], [[logging.Handler]]

### Interface
- `configure_logging`(verbosity: int, filename: str | None, logformat: str) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/__init__.py`  
**Dependencies**: `__future__.annotations`, `logging`, `sys`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.processor
:::{doc} FileProcessor:31
Processes a file and holds state.

This processes a file by generating tokens, logical and physical lines,
and AST trees. This also provides a way of passing state about the file
to checks expecting that state. Any public attribute on this object can
be requested by a plugin. The known public attributes are:

- :attr:`blank_before`
- :attr:`blank_lines`
- :attr:`checker_state`
- :attr:`indent_char`
- :attr:`indent_level`
- :attr:`line_number`
- :attr:`logical_line`
- :attr:`max_line_length`
- :attr:`max_doc_length`
- :attr:`multiline`
- :attr:`noqa`
- :attr:`previous_indent_level`
- :attr:`previous_logical`
- :attr:`previous_unindented_logical_line`
- :attr:`tokens`
- :attr:`file_tokens`
- :attr:`total_lines`
- :attr:`verbose`
:::
:::{doc} is_eol_token:382
Check if the token is an end-of-line token.
:::
:::{doc} is_multiline_string:387
Check if this is a multiline string.
:::
:::{doc} token_is_newline:394
Check if the token type is a newline token type.
:::
:::{doc} count_parentheses:399
Count the number of parentheses.
:::
:::{doc} expand_indent:408
Return the amount of indentation.

Tabs are expanded to the next multiple of 8.

>>> expand_indent('    ')
4
>>> expand_indent('\t')
8
>>> expand_indent('       \t')
8
>>> expand_indent('        \t')
16
:::
:::{doc} mutate_string:428
Replace contents with 'xxx' to prevent syntax matching.

>>> mutate_string('"abc"')
'"xxx"'
>>> mutate_string("'''abc'''")
"'''xxx'''"
>>> mutate_string("r'abc'")
"r'xxx'"
:::
**Imports**: `__future__.annotations`, `argparse`, `ast`, `functools`, `logging`, `tokenize`, `typing.Any`, `typing.Generator`, `typing.List`, `typing.Tuple`, `flake8.defaults`, `flake8.utils`, `flake8._compat.FSTRING_END`, `flake8._compat.FSTRING_MIDDLE`, `flake8.plugins.finder.LoadedPlugin`
**Type References**: [[FileProcessor]]

### Interface
- `is_eol_token`(token: tokenize.TokenInfo) -> bool
- `is_multiline_string`(token: tokenize.TokenInfo) -> bool
- `token_is_newline`(token: tokenize.TokenInfo) -> bool
- `count_parentheses`(current_parentheses_count: int, token_text: str) -> int
- `expand_indent`(line: str) -> int
- `mutate_string`(text: str) -> str
- `__init__`(filename: str, options: argparse.Namespace, lines: list[str] | None) -> None
- `file_tokens`() -> list[tokenize.TokenInfo]
- `fstring_start`(lineno: int) -> None
- `multiline_string`(token: tokenize.TokenInfo) -> Generator[<ast.Tuple object at 0x106046110>]
- `reset_blank_before`() -> None
- `delete_first_token`() -> None
- `visited_new_blank_line`() -> None
- `update_state`(mapping: _LogicalMapping) -> None
- `update_checker_state_for`(plugin: LoadedPlugin) -> None
- `next_logical_line`() -> None
- `build_logical_line_tokens`() -> _Logical
- `build_ast`() -> ast.AST
- `build_logical_line`() -> tuple[<ast.Tuple object at 0x106091290>]
- `keyword_arguments_for`(parameters: dict[<ast.Tuple object at 0x106091890>], arguments: dict[<ast.Tuple object at 0x106091bd0>]) -> dict[<ast.Tuple object at 0x106093950>]
- `generate_tokens`() -> Generator[<ast.Tuple object at 0x106099050>]
- `_noqa_line_range`(min_line: int, max_line: int) -> dict[<ast.Tuple object at 0x10609a910>]
- `_noqa_line_mapping`() -> dict[<ast.Tuple object at 0x1060a2bd0>]
- `noqa_line_for`(line_number: int) -> str | None
- `next_line`() -> str
- `read_lines`() -> list[str]
- `read_lines_from_filename`() -> list[str]
- `read_lines_from_stdin`() -> list[str]
- `should_ignore_file`() -> bool
- `strip_utf_bom`() -> None

### Implementation
**FileProcessor**
  - mapping: _LogicalMapping
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/processor.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `ast`, `functools`, `logging`, `tokenize`, `typing.Any`, `typing.Generator`, `typing.List`, `typing.Tuple`, `flake8.defaults`, `flake8.utils`, `flake8._compat.FSTRING_END`, `flake8._compat.FSTRING_MIDDLE`, `flake8.plugins.finder.LoadedPlugin`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.utils
:::{doc} parse_comma_separated_list:25
Parse a comma-separated list.

:param value:
    String to be parsed and normalized.
:param regexp:
    Compiled regular expression used to split the value when it is a
    string.
:returns:
    List of values with whitespace stripped.
:::
:::{doc} parse_files_to_codes_mapping:78
Parse a files-to-codes mapping.

A files-to-codes mapping a sequence of values specified as
`filenames list:codes list ...`.  Each of the lists may be separated by
either comma or whitespace tokens.

:param value: String to be parsed and normalized.
:::
:::{doc} normalize_paths:152
Normalize a list of paths relative to a parent directory.

:returns:
    The normalized paths.
:::
:::{doc} normalize_path:164
Normalize a single-path.

:returns:
    The normalized path.
:::
:::{doc} stdin_get_value:186
Get and cache it so plugins can use it.
:::
:::{doc} stdin_get_lines:198
Return lines of stdin split according to file splitting.
:::
:::{doc} is_using_stdin:203
Determine if we're going to read from stdin.

:param paths:
    The paths that we're going to check.
:returns:
    True if stdin (-) is in the path, otherwise False
:::
:::{doc} fnmatch:214
Wrap :func:`fnmatch.fnmatch` to add some functionality.

:param filename:
    Name of the file we're trying to match.
:param patterns:
    Patterns we're using to try to match the filename.
:param default:
    The default value if patterns is empty
:returns:
    True if a pattern matches the filename, False if it doesn't.
    ``True`` if patterns is empty.
:::
:::{doc} matches_filename:232
Use fnmatch to discern if a path exists in patterns.

:param path:
    The path to the file under question
:param patterns:
    The patterns to match the path against.
:param log_message:
    The message used for logging purposes.
:returns:
    True if path matches patterns, False otherwise
:::
:::{doc} get_python_version:265
Find and format the python implementation and version.

:returns:
    Implementation name, version, and platform as a string.
:::
:::{doc} normalize_pypi_name:278
Normalize a distribution name according to PEP 503.
:::
**Imports**: `__future__.annotations`, `fnmatch`, `functools`, `io`, `logging`, `os`, `platform`, `re`, `sys`, `textwrap`, `tokenize`, `typing.NamedTuple`, `typing.Pattern`, `typing.Sequence`, `flake8.exceptions`
**Type References**: [[State]], [[_Token]]

### Interface
- `parse_comma_separated_list`(value: str, regexp: Pattern[str]) -> list[str]
- `_tokenize_files_to_codes_mapping`(value: str) -> list[_Token]
- `parse_files_to_codes_mapping`(value_: Sequence[str] | str) -> list[tuple[<ast.Tuple object at 0x1060f6810>]]
- `normalize_paths`(paths: Sequence[str], parent: str) -> list[str]
- `normalize_path`(path: str, parent: str) -> str
- `stdin_get_value`() -> str
- `stdin_get_lines`() -> list[str]
- `is_using_stdin`(paths: list[str]) -> bool
- `fnmatch`(filename: str, patterns: Sequence[str]) -> bool
- `matches_filename`(path: str, patterns: Sequence[str], log_message: str, logger: logging.Logger) -> bool
- `get_python_version`() -> str
- `normalize_pypi_name`(s: str) -> str
- `_reset`() -> None
- `_unexpected_token`() -> exceptions.ExecutionError

### Implementation
**_Token**
  - tp: str
  - src: str
**State**
  - filenames: list[str]
  - codes: list[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/utils.py`  
**Dependencies**: `__future__.annotations`, `fnmatch`, `functools`, `io`, `logging`, `os`, `platform`, `re`, `sys`, `textwrap`, `tokenize`, `typing.NamedTuple`, `typing.Pattern`, `typing.Sequence`, `flake8.exceptions`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.exceptions
:::{doc} Flake8Exception:5
Plain Flake8 exception.
:::
:::{doc} EarlyQuit:9
Except raised when encountering a KeyboardInterrupt.
:::
:::{doc} ExecutionError:13
Exception raised during execution of Flake8.
:::
:::{doc} FailedToLoadPlugin:17
Exception raised when a plugin fails to load.
:::
:::{doc} PluginRequestedUnknownParameters:36
The plugin requested unknown parameters.
:::
:::{doc} PluginExecutionFailed:55
The plugin failed during execution.
:::
**Imports**: `__future__.annotations`
**Type References**: [[EarlyQuit]], [[ExecutionError]], [[FailedToLoadPlugin]], [[Flake8Exception]], [[PluginExecutionFailed]], [[PluginRequestedUnknownParameters]]

### Interface
- `__init__`(filename: str, plugin_name: str, exception: Exception) -> None
- `__str__`() -> str

### Implementation
**Flake8Exception**

**EarlyQuit**

**ExecutionError**

**FailedToLoadPlugin**

**PluginRequestedUnknownParameters**

**PluginExecutionFailed**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/exceptions.py`  
**Dependencies**: `__future__.annotations`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.defaults

**Imports**: `__future__.annotations`, `re`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/defaults.py`  
**Dependencies**: `__future__.annotations`, `re`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.statistics
:::{doc} Statistics:10
Manager of aggregated statistics for a run of Flake8.
:::
:::{doc} Key:69
Simple key structure for the Statistics dictionary.

To make things clearer, easier to read, and more understandable, we use a
namedtuple here for all Keys in the underlying dictionary for the
Statistics object.
:::
:::{doc} Statistic:102
Simple wrapper around the logic of each statistic.

Instead of maintaining a simple but potentially hard to reason about
tuple, we create a class which has attributes and a couple
convenience methods on it.
:::
**Imports**: `__future__.annotations`, `typing.Generator`, `typing.NamedTuple`, `flake8.violation.Violation`
**Type References**: [[Key]], [[Statistic]], [[Statistics]]

### Interface
- `__init__`(error_code: str, filename: str, message: str, count: int) -> None
- `error_codes`() -> list[str]
- `record`(error: Violation) -> None
- `statistics_for`(prefix: str, filename: str | None) -> Generator[<ast.Tuple object at 0x10612b110>]
- `create_from`(error: Violation) -> Statistic
- `matches`(prefix: str, filename: str | None) -> bool
- `increment`() -> None

### Implementation
**Statistics**

**Key**
  - filename: str
  - code: str
**Statistic**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/statistics.py`  
**Dependencies**: `__future__.annotations`, `typing.Generator`, `typing.NamedTuple`, `flake8.violation.Violation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8._compat

**Imports**: `__future__.annotations`, `sys`, `tokenize`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/_compat.py`  
**Dependencies**: `__future__.annotations`, `sys`, `tokenize`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.style_guide
:::{doc} Selected:24
Enum representing an explicitly or implicitly selected code.
:::
:::{doc} Ignored:31
Enum representing an explicitly or implicitly ignored code.
:::
:::{doc} Decision:38
Enum representing whether a code should be ignored or selected.
:::
:::{doc} DecisionEngine:69
A class for managing the decision process around violations.

This contains the logic for whether a violation should be reported or
ignored.
:::
:::{doc} StyleGuideManager:202
Manage multiple style guides for a single run.
:::
:::{doc} StyleGuide:299
Manage a Flake8 user's style guide.
:::
**Imports**: `__future__.annotations`, `argparse`, `contextlib`, `copy`, `enum`, `functools`, `logging`, `typing.Generator`, `typing.Sequence`, `flake8.defaults`, `flake8.statistics`, `flake8.utils`, `flake8.formatting.base`, `flake8.violation.Violation`
**Type References**: [[Decision]], [[DecisionEngine]], [[Ignored]], [[Selected]], [[StyleGuide]], [[StyleGuideManager]]

### Interface
- `_explicitly_chosen`() -> tuple[<ast.Tuple object at 0x10615f8d0>]
- `_select_ignore`() -> tuple[<ast.Tuple object at 0x10615ced0>]
- `__init__`(options: argparse.Namespace, formatter: base_formatter.BaseFormatter, stats: statistics.Statistics, filename: str | None, decider: DecisionEngine | None) -> Any
- `was_selected`(code: str) -> Selected | Ignored
- `was_ignored`(code: str) -> Selected | Ignored
- `make_decision`(code: str) -> Decision
- `decision_for`(code: str) -> Decision
- `populate_style_guides_with`(options: argparse.Namespace) -> Generator[<ast.Tuple object at 0x1061909d0>]
- `_style_guide_for`(filename: str) -> StyleGuide
- `processing_file`(filename: str) -> Generator[<ast.Tuple object at 0x1061a2ad0>]
- `handle_error`(code: str, filename: str, line_number: int, column_number: int, text: str, physical_line: str | None) -> int
- `__repr__`() -> str
- `copy`(filename: str | None, extend_ignore_with: Sequence[str] | None) -> StyleGuide
- `applies_to`(filename: str) -> bool
- `should_report_error`(code: str) -> Decision

### Implementation
**Selected**

**Ignored**

**Decision**

**DecisionEngine**

**StyleGuideManager**

**StyleGuide**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/style_guide.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `contextlib`, `copy`, `enum`, `functools`, `logging`, `typing.Generator`, `typing.Sequence`, `flake8.defaults`, `flake8.statistics`, `flake8.utils`, `flake8.formatting.base`, `flake8.violation.Violation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.__main__

**Imports**: `__future__.annotations`, `flake8.main.cli.main`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/__main__.py`  
**Dependencies**: `__future__.annotations`, `flake8.main.cli.main`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.checker
:::{doc} Manager:86
Manage the parallelism and checker instances for each plugin and file.

This class will be responsible for the following:

- Determining the parallelism of Flake8, e.g.:

  * Do we use :mod:`multiprocessing` or is it unavailable?

  * Do we automatically decide on the number of jobs to use or did the
    user provide that?

- Falling back to a serial way of processing files if we run into an
  OSError related to :mod:`multiprocessing`

- Organizing the results of each checker so we can group the output
  together and make our output deterministic.
:::
:::{doc} FileChecker:265
Manage running checks for a file and aggregate the results.
:::
:::{doc} _try_initialize_processpool:583
Return a new process pool instance if we are able to create one.
:::
:::{doc} find_offset:599
Find the offset tuple for a single offset.
:::
**Imports**: `__future__.annotations`, `argparse`, `contextlib`, `errno`, `logging`, `multiprocessing.pool`, `operator`, `signal`, `tokenize`, `typing.Any`, `typing.Generator`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `flake8.defaults`, `flake8.exceptions`, `flake8.processor`, `flake8.utils`, `flake8._compat.FSTRING_START`, `flake8.discover_files.expand_paths`, `flake8.options.parse_args.parse_args`, `flake8.plugins.finder.Checkers`, `flake8.plugins.finder.LoadedPlugin`, `flake8.style_guide.StyleGuideManager`
**Type References**: [[Checkers]], [[FileChecker]], [[Manager]], [[Namespace]], [[argparse.Namespace]]

### Interface
- `_mp_prefork`(plugins: Checkers, options: argparse.Namespace) -> Generator[<ast.Tuple object at 0x1061cb550>]
- `_mp_init`(argv: Sequence[str]) -> None
- `_mp_run`(filename: str) -> tuple[<ast.Tuple object at 0x1061c8a10>]
- `_try_initialize_processpool`(job_count: int, argv: Sequence[str]) -> multiprocessing.pool.Pool | None
- `find_offset`(offset: int, mapping: processor._LogicalMapping) -> tuple[<ast.Tuple object at 0x106269710>]
- `__init__`() -> None
- `_process_statistics`() -> None
- `_job_count`() -> int
- `_handle_results`(filename: str, results: Results) -> int
- `report`(error_code: str | None, line_number: int, column: int, text: str) -> str
- `run_parallel`() -> None
- `run_serial`() -> None
- `run`() -> None
- `start`() -> None
- `stop`() -> None
- `__repr__`() -> str
- `_make_processor`() -> processor.FileProcessor | None
- `run_check`(plugin: LoadedPlugin) -> Any
- `_extract_syntax_information`(exception: Exception) -> tuple[<ast.Tuple object at 0x10621b610>]
- `run_ast_checks`() -> None
- `run_logical_checks`() -> None
- `run_physical_checks`(physical_line: str) -> None
- `process_tokens`() -> None
- `run_checks`() -> tuple[<ast.Tuple object at 0x106254b50>]
- `handle_newline`(token_type: int) -> None
- `check_physical_eol`(token: tokenize.TokenInfo, prev_physical: str) -> None

### Implementation
**Manager**

**FileChecker**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/checker.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `contextlib`, `errno`, `logging`, `multiprocessing.pool`, `operator`, `signal`, `tokenize`, `typing.Any`, `typing.Generator`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `flake8.defaults`, `flake8.exceptions`, `flake8.processor`, `flake8.utils`, `flake8._compat.FSTRING_START`, `flake8.discover_files.expand_paths`, `flake8.options.parse_args.parse_args`, `flake8.plugins.finder.Checkers`, `flake8.plugins.finder.LoadedPlugin`, `flake8.style_guide.StyleGuideManager`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pathspec._meta



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pathspec/_meta.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pathspec.util
:::{doc} append_dir_sep:68
Appends the path separator to the path if the path is a directory.
This can be used to aid in distinguishing between directories and
files on the file-system by relying on the presence of a trailing path
separator.

*path* (:class:`pathlib.Path`) is the path to use.

Returns the path (:class:`str`).
:::
:::{doc} check_match_file:86
Check the file against the patterns.

*patterns* (:class:`~collections.abc.Iterable`) yields each indexed pattern
(:class:`tuple`) which contains the pattern index (:class:`int`) and actual
pattern (:class:`~pathspec.pattern.Pattern`).

*file* (:class:`str`) is the normalized file path to be matched
against *patterns*.

Returns a :class:`tuple` containing whether to include *file* (:class:`bool`
or :data:`None`), and the index of the last matched pattern (:class:`int` or
:data:`None`).
:::
:::{doc} detailed_match_files:114
Matches the files to the patterns, and returns which patterns matched
the files.

*patterns* (:class:`~collections.abc.Iterable` of :class:`~pathspec.pattern.Pattern`)
contains the patterns to use.

*files* (:class:`~collections.abc.Iterable` of :class:`str`) contains
the normalized file paths to be matched against *patterns*.

*all_matches* (:class:`bool` or :data:`None`) is whether to return all
matches patterns (:data:`True`), or only the last matched pattern
(:data:`False`). Default is :data:`None` for :data:`False`.

Returns the matched files (:class:`dict`) which maps each matched file
(:class:`str`) to the patterns that matched in order (:class:`.MatchDetail`).
:::
:::{doc} _filter_check_patterns:160
Filters out null-patterns.

*patterns* (:class:`Iterable` of :class:`.Pattern`) contains the
patterns.

Returns a :class:`list` containing each indexed pattern (:class:`tuple`) which
contains the pattern index (:class:`int`) and the actual pattern
(:class:`~pathspec.pattern.Pattern`).
:::
:::{doc} _is_iterable:180
Check whether the value is an iterable (excludes strings).

*value* is the value to check,

Returns whether *value* is a iterable (:class:`bool`).
:::
:::{doc} iter_tree_entries:191
Walks the specified directory for all files and directories.

*root* (:class:`str` or :class:`os.PathLike`) is the root directory to
search.

*on_error* (:class:`~collections.abc.Callable` or :data:`None`)
optionally is the error handler for file-system exceptions. It will be
called with the exception (:exc:`OSError`). Reraise the exception to
abort the walk. Default is :data:`None` to ignore file-system
exceptions.

*follow_links* (:class:`bool` or :data:`None`) optionally is whether
to walk symbolic links that resolve to directories. Default is
:data:`None` for :data:`True`.

Raises :exc:`RecursionError` if recursion is detected.

Returns an :class:`~collections.abc.Iterator` yielding each file or
directory entry (:class:`.TreeEntry`) relative to *root*.
:::
:::{doc} _iter_tree_entries_next:226
Scan the directory for all descendant files.

*root_full* (:class:`str`) the absolute path to the root directory.

*dir_rel* (:class:`str`) the path to the directory to scan relative to
*root_full*.

*memo* (:class:`dict`) keeps track of ancestor directories
encountered. Maps each ancestor real path (:class:`str`) to relative
path (:class:`str`).

*on_error* (:class:`~collections.abc.Callable` or :data:`None`)
optionally is the error handler for file-system exceptions.

*follow_links* (:class:`bool`) is whether to walk symbolic links that
resolve to directories.

Yields each entry (:class:`.TreeEntry`).
:::
:::{doc} iter_tree_files:307
Walks the specified directory for all files.

*root* (:class:`str` or :class:`os.PathLike`) is the root directory to
search for files.

*on_error* (:class:`~collections.abc.Callable` or :data:`None`)
optionally is the error handler for file-system exceptions. It will be
called with the exception (:exc:`OSError`). Reraise the exception to
abort the walk. Default is :data:`None` to ignore file-system
exceptions.

*follow_links* (:class:`bool` or :data:`None`) optionally is whether
to walk symbolic links that resolve to directories. Default is
:data:`None` for :data:`True`.

Raises :exc:`RecursionError` if recursion is detected.

Returns an :class:`~collections.abc.Iterator` yielding the path to
each file (:class:`str`) relative to *root*.
:::
:::{doc} iter_tree:338
DEPRECATED: The :func:`.iter_tree` function is an alias for the
:func:`.iter_tree_files` function.
:::
:::{doc} lookup_pattern:349
Lookups a registered pattern factory by name.

*name* (:class:`str`) is the name of the pattern factory.

Returns the registered pattern factory (:class:`~collections.abc.Callable`).
If no pattern factory is registered, raises :exc:`KeyError`.
:::
:::{doc} match_file:361
Matches the file to the patterns.

*patterns* (:class:`~collections.abc.Iterable` of :class:`~pathspec.pattern.Pattern`)
contains the patterns to use.

*file* (:class:`str`) is the normalized file path to be matched
against *patterns*.

Returns :data:`True` if *file* matched; otherwise, :data:`False`.
:::
:::{doc} match_files:381
DEPRECATED: This is an old function no longer used. Use the
:func:`~pathspec.util.match_file` function with a loop for better results.

Matches the files to the patterns.

*patterns* (:class:`~collections.abc.Iterable` of :class:`~pathspec.pattern.Pattern`)
contains the patterns to use.

*files* (:class:`~collections.abc.Iterable` of :class:`str`) contains
the normalized file paths to be matched against *patterns*.

Returns the matched files (:class:`set` of :class:`str`).
:::
:::{doc} normalize_file:414
Normalizes the file path to use the POSIX path separator (i.e.,
``"/"``), and make the paths relative (remove leading ``"/"``).

*file* (:class:`str` or :class:`os.PathLike`) is the file path.

*separators* (:class:`~collections.abc.Collection` of :class:`str`; or
``None``) optionally contains the path separators to normalize.
This does not need to include the POSIX path separator (``"/"``),
but including it will not affect the results. Default is ``None``
for ``NORMALIZE_PATH_SEPS``. To prevent normalization, pass an
empty container (e.g., an empty tuple ``()``).

Returns the normalized file path (:class:`str`).
:::
:::{doc} normalize_files:454
DEPRECATED: This function is no longer used. Use the :func:`.normalize_file`
function with a loop for better results.

Normalizes the file paths to use the POSIX path separator.

*files* (:class:`~collections.abc.Iterable` of :class:`str` or
:class:`os.PathLike`) contains the file paths to be normalized.

*separators* (:class:`~collections.abc.Collection` of :class:`str`; or
:data:`None`) optionally contains the path separators to normalize.
See :func:`normalize_file` for more information.

Returns a :class:`dict` mapping each normalized file path (:class:`str`)
to the original file paths (:class:`list` of :class:`str` or
:class:`os.PathLike`).
:::
:::{doc} register_pattern:491
Registers the specified pattern factory.

*name* (:class:`str`) is the name to register the pattern factory
under.

*pattern_factory* (:class:`~collections.abc.Callable`) is used to
compile patterns. It must accept an uncompiled pattern (:class:`str`)
and return the compiled pattern (:class:`.Pattern`).

*override* (:class:`bool` or :data:`None`) optionally is whether to
allow overriding an already registered pattern under the same name
(:data:`True`), instead of raising an :exc:`AlreadyRegisteredError`
(:data:`False`). Default is :data:`None` for :data:`False`.
:::
:::{doc} AlreadyRegisteredError:523
The :exc:`AlreadyRegisteredError` exception is raised when a pattern
factory is registered under a name already in use.
:::
:::{doc} RecursionError:570
The :exc:`RecursionError` exception is raised when recursion is
detected.
:::
:::{doc} CheckResult:633
The :class:`CheckResult` class contains information about the file and which
pattern matched it.
:::
:::{doc} MatchDetail:664
The :class:`.MatchDetail` class contains information about
:::
:::{doc} TreeEntry:689
The :class:`.TreeEntry` class contains information about a file-system
entry.
:::
**Imports**: `os`, `os.path`, `pathlib`, `posixpath`, `stat`, `sys`, `warnings`, `collections.abc.Collection`, `collections.abc.Iterable`, `dataclasses.dataclass`, `os.PathLike`, `typing.Any`, `typing.AnyStr`, `typing.Callable`, `typing.Collection`, `typing.Dict`, `typing.Generic`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `typing.TypeVar`, `typing.Union`, `pattern.Pattern`
**Type References**: [[AlreadyRegisteredError]], [[CheckResult]], [[DirEntry]], [[MatchDetail]], [[Optional]], [[RecursionError]], [[TStrPath]], [[TreeEntry]], [[os.DirEntry]]

### Interface
- `append_dir_sep`(path: pathlib.Path) -> str
- `check_match_file`(patterns: Iterable[Tuple[<ast.Tuple object at 0x106282a10>]], file: str) -> Tuple[<ast.Tuple object at 0x106280510>]
- `detailed_match_files`(patterns: Iterable[Pattern], files: Iterable[str], all_matches: [Optional[bool]](#optional)) -> [Dict[<ast.Tuple object at 0x1062784d0>]](#dict)
- `_filter_check_patterns`(patterns: Iterable[Pattern]) -> [List[Tuple[<ast.Tuple object at 0x1062770d0>]]](#list)
- `_is_iterable`(value: Any) -> bool
- `iter_tree_entries`(root: StrPath, on_error: [Optional[Callable[<ast.Tuple object at 0x106275c50>]]](#optional), follow_links: [Optional[bool]](#optional)) -> Iterator[TreeEntry]
- `_iter_tree_entries_next`(root_full: str, dir_rel: str, memo: [Dict[<ast.Tuple object at 0x106273350>]](#dict), on_error: Callable[<ast.Tuple object at 0x106273010>], follow_links: bool) -> Iterator[TreeEntry]
- `iter_tree_files`(root: StrPath, on_error: [Optional[Callable[<ast.Tuple object at 0x1062b3d50>]]](#optional), follow_links: [Optional[bool]](#optional)) -> Iterator[str]
- `iter_tree`() -> Any
- `lookup_pattern`(name: str) -> Callable[<ast.Tuple object at 0x106285650>]
- `match_file`(patterns: Iterable[Pattern], file: str) -> bool
- `match_files`(patterns: Iterable[Pattern], files: Iterable[str]) -> Set[str]
- `normalize_file`(file: StrPath, separators: [Optional[Collection[str]]](#optional)) -> str
- `normalize_files`(files: Iterable[StrPath], separators: [Optional[Collection[str]]](#optional)) -> [Dict[<ast.Tuple object at 0x1062c31d0>]](#dict)
- `register_pattern`(name: str, pattern_factory: Callable[<ast.Tuple object at 0x1062c38d0>], override: [Optional[bool]](#optional)) -> None
- `__init__`(name: str, path: str, lstat: os.stat_result, stat: os.stat_result) -> None
- `message`() -> str
- `name`() -> str
- `pattern_factory`() -> Callable[<ast.Tuple object at 0x1062d4b50>]
- `first_path`() -> str
- `real_path`() -> str
- `second_path`() -> str
- `is_dir`(follow_links: [Optional[bool]](#optional)) -> bool
- `is_file`(follow_links: [Optional[bool]](#optional)) -> bool
- `is_symlink`() -> bool
- `stat`(follow_links: [Optional[bool]](#optional)) -> os.stat_result

### Implementation
**AlreadyRegisteredError**

**RecursionError**

**CheckResult**
  - file: TStrPath
  - include: Optional[bool]
  - index: Optional[int]
**MatchDetail**

**TreeEntry**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pathspec/util.py`  
**Dependencies**: `os`, `os.path`, `pathlib`, `posixpath`, `stat`, `sys`, `warnings`, `collections.abc.Collection`, `collections.abc.Iterable`, `dataclasses.dataclass`, `os.PathLike`, `typing.Any`, `typing.AnyStr`, `typing.Callable`, `typing.Collection`, `typing.Dict`, `typing.Generic`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `typing.TypeVar`, `typing.Union`, `pattern.Pattern`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pathspec

**Imports**: `gitignore.GitIgnoreSpec`, `pathspec.PathSpec`, `pattern.Pattern`, `pattern.RegexPattern`, `util.RecursionError`, `util.iter_tree`, `util.lookup_pattern`, `util.match_files`, `_meta.__author__`, `_meta.__copyright__`, `_meta.__credits__`, `_meta.__license__`, `_meta.__version__`, `patterns`, `patterns.gitwildmatch.GitIgnorePattern`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pathspec/__init__.py`  
**Dependencies**: `gitignore.GitIgnoreSpec`, `pathspec.PathSpec`, `pattern.Pattern`, `pattern.RegexPattern`, `util.RecursionError`, `util.iter_tree`, `util.lookup_pattern`, `util.match_files`, `_meta.__author__`, `_meta.__copyright__`, `_meta.__credits__`, `_meta.__license__`, `_meta.__version__`, `patterns`, `patterns.gitwildmatch.GitIgnorePattern`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pathspec.pattern
:::{doc} Pattern:20
The :class:`Pattern` class is the abstract definition of a pattern.
:::
:::{doc} RegexPattern:83
The :class:`RegexPattern` class is an implementation of a pattern using
regular expressions.
:::
:::{doc} RegexMatchResult:199
The :class:`RegexMatchResult` data class is used to return information about
the matched regular expression.
:::
**Imports**: `dataclasses`, `re`, `warnings`, `typing.Any`, `typing.AnyStr`, `typing.Iterable`, `typing.Iterator`, `typing.Match`, `typing.Optional`, `typing.Pattern`, `typing.Tuple`, `typing.Union`
**Type References**: [[MatchHint]], [[Pattern]], [[RegexMatchResult]], [[RegexPattern]]

### Interface
- `__init__`(pattern: [Union[<ast.Tuple object at 0x10630b3d0>]](#union), include: [Optional[bool]](#optional)) -> None
- `match`(files: Iterable[str]) -> Iterator[str]
- `match_file`(file: str) -> [Optional[RegexMatchResult]](#optional)
- `__eq__`(other: RegexPattern) -> bool
- `pattern_to_regex`(pattern: str) -> Tuple[<ast.Tuple object at 0x106318490>]

### Implementation
**Pattern**

**RegexPattern**

**RegexMatchResult**
  - match: MatchHint
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pathspec/pattern.py`  
**Dependencies**: `dataclasses`, `re`, `warnings`, `typing.Any`, `typing.AnyStr`, `typing.Iterable`, `typing.Iterator`, `typing.Match`, `typing.Optional`, `typing.Pattern`, `typing.Tuple`, `typing.Union`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pathspec.pathspec
:::{doc} PathSpec:39
The :class:`PathSpec` class is a wrapper around a list of compiled
:class:`.Pattern` instances.
:::
**Imports**: `collections.abc.Collection`, `itertools.zip_longest`, `typing.AnyStr`, `typing.Callable`, `typing.Collection`, `typing.Iterable`, `typing.Iterator`, `typing.Optional`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `util`, `pattern.Pattern`, `util.CheckResult`, `util.StrPath`, `util.TStrPath`, `util.TreeEntry`, `util._filter_check_patterns`, `util._is_iterable`, `util.normalize_file`
**Type References**: [[PathSpec]]

### Interface
- `__init__`(patterns: Iterable[Pattern]) -> None
- `__eq__`(other: object) -> bool
- `__len__`() -> int
- `__add__`(self: Self, other: PathSpec) -> Self
- `__iadd__`(self: Self, other: PathSpec) -> Self
- `check_file`(file: TStrPath, separators: [Optional[Collection[str]]](#optional)) -> CheckResult[TStrPath]
- `check_files`(files: Iterable[TStrPath], separators: [Optional[Collection[str]]](#optional)) -> Iterator[CheckResult[TStrPath]]
- `check_tree_files`(root: StrPath, on_error: [Optional[Callable[<ast.Tuple object at 0x106328910>]]](#optional), follow_links: [Optional[bool]](#optional)) -> Iterator[CheckResult[str]]
- `from_lines`(cls: Type[Self], pattern_factory: [Union[<ast.Tuple object at 0x10631afd0>]](#union), lines: Iterable[AnyStr]) -> Self
- `match_entries`(entries: Iterable[TreeEntry], separators: [Optional[Collection[str]]](#optional)) -> Iterator[TreeEntry]
- `match_file`(file: StrPath, separators: [Optional[Collection[str]]](#optional)) -> bool
- `match_files`(files: Iterable[StrPath], separators: [Optional[Collection[str]]](#optional)) -> Iterator[StrPath]
- `match_tree_entries`(root: StrPath, on_error: [Optional[Callable[<ast.Tuple object at 0x106359590>]]](#optional), follow_links: [Optional[bool]](#optional)) -> Iterator[TreeEntry]
- `match_tree_files`(root: StrPath, on_error: [Optional[Callable[<ast.Tuple object at 0x10635b150>]]](#optional), follow_links: [Optional[bool]](#optional)) -> Iterator[str]

### Implementation
**PathSpec**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pathspec/pathspec.py`  
**Dependencies**: `collections.abc.Collection`, `itertools.zip_longest`, `typing.AnyStr`, `typing.Callable`, `typing.Collection`, `typing.Iterable`, `typing.Iterator`, `typing.Optional`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `util`, `pattern.Pattern`, `util.CheckResult`, `util.StrPath`, `util.TStrPath`, `util.TreeEntry`, `util._filter_check_patterns`, `util._is_iterable`, `util.normalize_file`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pathspec.gitignore
:::{doc} GitIgnoreSpec:35
The :class:`GitIgnoreSpec` class extends :class:`pathspec.pathspec.PathSpec` to
replicate *.gitignore* behavior.
:::
**Imports**: `typing.AnyStr`, `typing.Callable`, `typing.Iterable`, `typing.Optional`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `typing.cast`, `typing.overload`, `pathspec.PathSpec`, `pattern.Pattern`, `patterns.gitwildmatch.GitWildMatchPattern`, `patterns.gitwildmatch._DIR_MARK`, `util._is_iterable`
**Type References**: [[GitIgnoreSpec]], [[Optional]]

### Interface
- `__eq__`(other: object) -> bool
- `from_lines`(cls: Type[Self], lines: Iterable[AnyStr], pattern_factory: [Union[<ast.Tuple object at 0x10636d9d0>]](#union)) -> Self
- `_match_file`(patterns: Iterable[Tuple[<ast.Tuple object at 0x106379050>]], file: str) -> Tuple[<ast.Tuple object at 0x106384b10>]

### Implementation
**GitIgnoreSpec**
  - out_include: Optional[bool]
  - out_index: Optional[int]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pathspec/gitignore.py`  
**Dependencies**: `typing.AnyStr`, `typing.Callable`, `typing.Iterable`, `typing.Optional`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `typing.cast`, `typing.overload`, `pathspec.PathSpec`, `pattern.Pattern`, `patterns.gitwildmatch.GitWildMatchPattern`, `patterns.gitwildmatch._DIR_MARK`, `util._is_iterable`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.parser_block
:::{doc} ParserBlock:46
ParserBlock#ruler -> Ruler

[[Ruler]] instance. Keep configuration of block rules.
:::
**Imports**: `__future__.annotations`, `logging`, `typing.TYPE_CHECKING`, `typing.Callable`, `rules_block`, `ruler.Ruler`, `rules_block.state_block.StateBlock`, `token.Token`, `utils.EnvType`, `markdown_it.MarkdownIt`
**Type References**: [[ParserBlock]], [[RuleFuncBlockType]]

### Interface
- `__init__`() -> None
- `tokenize`(state: StateBlock, startLine: int, endLine: int) -> None
- `parse`(src: str, md: MarkdownIt, env: EnvType, outTokens: list[Token]) -> list[Token] | None

### Implementation
**ParserBlock**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/parser_block.py`  
**Dependencies**: `__future__.annotations`, `logging`, `typing.TYPE_CHECKING`, `typing.Callable`, `rules_block`, `ruler.Ruler`, `rules_block.state_block.StateBlock`, `token.Token`, `utils.EnvType`, `markdown_it.MarkdownIt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.tree
:::{doc} SyntaxTreeNode:22
A Markdown syntax tree node.

A class that can be used to construct a tree representation of a linear
`markdown-it-py` token stream.

Each node in the tree represents either:
  - root of the Markdown document
  - a single unnested `Token`
  - a `Token` "_open" and "_close" token pair, and the tokens nested in
      between
:::
:::{doc} _removesuffix:337
Remove a suffix from a string.

Replace this with str.removesuffix() from stdlib when minimum Python
version is 3.9.
:::
**Imports**: `__future__.annotations`, `collections.abc.Generator`, `collections.abc.Sequence`, `textwrap`, `typing.Any`, `typing.NamedTuple`, `typing.TypeVar`, `typing.overload`, `token.Token`
**Type References**: [[SyntaxTreeNode]], [[Token]], [[_NesterTokens]]

### Interface
- `_removesuffix`(string: str, suffix: str) -> str
- `__init__`(tokens: Sequence[Token]) -> None
- `__repr__`() -> str
- `__getitem__`(self: _NodeType, item: int | slice) -> _NodeType | list[_NodeType]
- `to_tokens`(self: _NodeType) -> list[Token]
- `children`(self: _NodeType, value: list[_NodeType]) -> None
- `parent`(self: _NodeType, value: _NodeType | None) -> None
- `is_root`() -> bool
- `is_nested`() -> bool
- `siblings`(self: _NodeType) -> Sequence[_NodeType]
- `type`() -> str
- `next_sibling`(self: _NodeType) -> _NodeType | None
- `previous_sibling`(self: _NodeType) -> _NodeType | None
- `_add_child`(tokens: Sequence[Token]) -> None
- `_set_children_from_tokens`(tokens: Sequence[Token]) -> None
- `pretty`() -> str
- `walk`(self: _NodeType) -> Generator[<ast.Tuple object at 0x1063ec990>]
- `_attribute_token`() -> Token
- `tag`() -> str
- `attrs`() -> dict[<ast.Tuple object at 0x1063eec50>]
- `attrGet`(name: str) -> None | str | int | float
- `map`() -> tuple[<ast.Tuple object at 0x1063f4cd0>] | None
- `level`() -> int
- `content`() -> str
- `markup`() -> str
- `info`() -> str
- `meta`() -> dict[<ast.Tuple object at 0x1063f7a50>]
- `block`() -> bool
- `hidden`() -> bool
- `recursive_collect_tokens`(node: _NodeType, token_list: list[Token]) -> None

### Implementation
**_NesterTokens**
  - opening: Token
  - closing: Token
**SyntaxTreeNode**
  - tokens: list[Token]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/tree.py`  
**Dependencies**: `__future__.annotations`, `collections.abc.Generator`, `collections.abc.Sequence`, `textwrap`, `typing.Any`, `typing.NamedTuple`, `typing.TypeVar`, `typing.overload`, `token.Token`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.token
:::{doc} convert_attrs:11
Convert Token.attrs set as ``None`` or ``[[key, value], ...]`` to a dict.

This improves compatibility with upstream markdown-it.
:::
**Imports**: `__future__.annotations`, `collections.abc.Callable`, `collections.abc.MutableMapping`, `dataclasses`, `typing.Any`, `typing.Literal`, `warnings`, `markdown_it._compat.DATACLASS_KWARGS`
**Type References**: [[Any]], [[Literal]], [[None]], [[Token]]

### Interface
- `convert_attrs`(value: Any) -> Any
- `__post_init__`() -> None
- `attrIndex`(name: str) -> int
- `attrItems`() -> list[tuple[<ast.Tuple object at 0x10640c550>]]
- `attrPush`(attrData: tuple[<ast.Tuple object at 0x106403c90>]) -> None
- `attrSet`(name: str, value: str | int | float) -> None
- `attrGet`(name: str) -> None | str | int | float
- `attrJoin`(name: str, value: str) -> None
- `copy`() -> Token
- `as_dict`() -> MutableMapping[<ast.Tuple object at 0x10643ad90>]
- `from_dict`(dct: MutableMapping[<ast.Tuple object at 0x10643b310>]) -> Token

### Implementation
**Token**
  - type: str
  - tag: str
  - nesting: Literal[<ast.Tuple object at 0x106411ed0>]
  - attrs: dict[<ast.Tuple object at 0x106411910>]
  - map: list[int] | None
  - level: int
  - children: list[Token] | None
  - content: str
  - markup: str
  - info: str
  - meta: dict[<ast.Tuple object at 0x10640f910>]
  - block: bool
  - hidden: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/token.py`  
**Dependencies**: `__future__.annotations`, `collections.abc.Callable`, `collections.abc.MutableMapping`, `dataclasses`, `typing.Any`, `typing.Literal`, `warnings`, `markdown_it._compat.DATACLASS_KWARGS`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it._punycode

**Imports**: `codecs`, `re`, `typing.Callable`
### Interface
- `encode`(uni: str) -> str
- `decode`(ascii: str) -> str
- `map_domain`(string: str, fn: Callable[<ast.Tuple object at 0x106449e90>]) -> str
- `to_unicode`(obj: str) -> str
- `to_ascii`(obj: str) -> str
- `mapping`(obj: str) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/_punycode.py`  
**Dependencies**: `codecs`, `re`, `typing.Callable`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.renderer
:::{doc} RendererHTML:28
Contains render rules for tokens. Can be updated and extended.

Example:

Each rule is called as independent static function with fixed signature:

::

    class Renderer:
        def token_type_name(self, tokens, idx, options, env) {
            # ...
            return renderedHTML

::

    class CustomRenderer(RendererHTML):
        def strong_open(self, tokens, idx, options, env):
            return '<b>'
        def strong_close(self, tokens, idx, options, env):
            return '</b>'

    md = MarkdownIt(renderer_cls=CustomRenderer)

    result = md.render(...)

See https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js
for more details and examples.
:::
**Imports**: `__future__.annotations`, `collections.abc.Sequence`, `inspect`, `typing.Any`, `typing.ClassVar`, `typing.Protocol`, `common.utils.escapeHtml`, `common.utils.unescapeAll`, `token.Token`, `utils.EnvType`, `utils.OptionsDict`
**Type References**: [[ClassVar]], [[RendererHTML]], [[RendererProtocol]]

### Interface
- `render`(tokens: Sequence[Token], options: OptionsDict, env: EnvType) -> str
- `__init__`(parser: Any) -> Any
- `renderInline`(tokens: Sequence[Token], options: OptionsDict, env: EnvType) -> str
- `renderToken`(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType) -> str
- `renderAttrs`(token: Token) -> str
- `renderInlineAsText`(tokens: Sequence[Token] | None, options: OptionsDict, env: EnvType) -> str
- `code_inline`(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType) -> str
- `code_block`(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType) -> str
- `fence`(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType) -> str
- `image`(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType) -> str
- `hardbreak`(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType) -> str
- `softbreak`(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType) -> str
- `text`(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType) -> str
- `html_block`(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType) -> str
- `html_inline`(tokens: Sequence[Token], idx: int, options: OptionsDict, env: EnvType) -> str

### Implementation
**RendererProtocol**
  - __output__: ClassVar[str]
**RendererHTML**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/renderer.py`  
**Dependencies**: `__future__.annotations`, `collections.abc.Sequence`, `inspect`, `typing.Any`, `typing.ClassVar`, `typing.Protocol`, `common.utils.escapeHtml`, `common.utils.unescapeAll`, `token.Token`, `utils.EnvType`, `utils.OptionsDict`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.ruler

**Imports**: `__future__.annotations`, `collections.abc.Iterable`, `dataclasses.dataclass`, `dataclasses.field`, `typing.TYPE_CHECKING`, `typing.Generic`, `typing.TypedDict`, `typing.TypeVar`, `warnings`, `markdown_it._compat.DATACLASS_KWARGS`, `utils.EnvType`, `markdown_it.MarkdownIt`
**Type References**: [[Rule]], [[RuleFuncTv]], [[RuleOptionsType]], [[Ruler]], [[StateBase]]

### Interface
- `__init__`() -> None
- `src`(value: str) -> None
- `srcCharCode`() -> tuple[<ast.Tuple object at 0x1064af510>]
- `__find__`(name: str) -> int
- `__compile__`() -> None
- `at`(ruleName: str, fn: RuleFuncTv, options: RuleOptionsType | None) -> None
- `before`(beforeName: str, ruleName: str, fn: RuleFuncTv, options: RuleOptionsType | None) -> None
- `after`(afterName: str, ruleName: str, fn: RuleFuncTv, options: RuleOptionsType | None) -> None
- `push`(ruleName: str, fn: RuleFuncTv, options: RuleOptionsType | None) -> None
- `enable`(names: str | Iterable[str], ignoreInvalid: bool) -> list[str]
- `enableOnly`(names: str | Iterable[str], ignoreInvalid: bool) -> list[str]
- `disable`(names: str | Iterable[str], ignoreInvalid: bool) -> list[str]
- `getRules`(chainName: str) -> list[RuleFuncTv]
- `get_all_rules`() -> list[str]
- `get_active_rules`() -> list[str]

### Implementation
**StateBase**

**RuleOptionsType**
  - alt: list[str]
**Rule**
  - name: str
  - enabled: bool
  - fn: RuleFuncTv
  - alt: list[str]
**Ruler**
  - result: list[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/ruler.py`  
**Dependencies**: `__future__.annotations`, `collections.abc.Iterable`, `dataclasses.dataclass`, `dataclasses.field`, `typing.TYPE_CHECKING`, `typing.Generic`, `typing.TypedDict`, `typing.TypeVar`, `warnings`, `markdown_it._compat.DATACLASS_KWARGS`, `utils.EnvType`, `markdown_it.MarkdownIt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it

**Imports**: `main.MarkdownIt`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/__init__.py`  
**Dependencies**: `main.MarkdownIt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.parser_core

**Imports**: `__future__.annotations`, `typing.Callable`, `ruler.Ruler`, `rules_core.block`, `rules_core.inline`, `rules_core.linkify`, `rules_core.normalize`, `rules_core.replace`, `rules_core.smartquotes`, `rules_core.text_join`, `rules_core.state_core.StateCore`
**Type References**: [[ParserCore]], [[RuleFuncCoreType]]

### Interface
- `__init__`() -> None
- `process`(state: StateCore) -> None

### Implementation
**ParserCore**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/parser_core.py`  
**Dependencies**: `__future__.annotations`, `typing.Callable`, `ruler.Ruler`, `rules_core.block`, `rules_core.inline`, `rules_core.linkify`, `rules_core.normalize`, `rules_core.replace`, `rules_core.smartquotes`, `rules_core.text_join`, `rules_core.state_core.StateCore`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.utils
:::{doc} OptionsType:13
Options for parsing.
:::
:::{doc} PresetType:36
Preset configuration for markdown-it.
:::
:::{doc} OptionsDict:45
A dictionary, with attribute access to core markdownit configuration options.
:::
**Imports**: `__future__.annotations`, `collections.abc.MutableMapping`, `pathlib.Path`, `typing.Any`, `typing.Callable`, `typing.Iterable`, `typing.MutableMapping`, `typing.TypedDict`, `typing.cast`
**Type References**: [[Callable]], [[MutableMapping]], [[None]], [[OptionsDict]], [[OptionsType]], [[PresetType]]

### Interface
- `read_fixture_file`(path: str | Path) -> list[list[Any]]
- `__init__`(options: OptionsType) -> None
- `__getitem__`(key: str) -> Any
- `__setitem__`(key: str, value: Any) -> None
- `__delitem__`(key: str) -> None
- `__iter__`() -> Iterable[str]
- `__len__`() -> int
- `__repr__`() -> str
- `__str__`() -> str
- `maxNesting`(value: int) -> None
- `html`(value: bool) -> None
- `linkify`(value: bool) -> None
- `typographer`(value: bool) -> None
- `quotes`(value: str) -> None
- `xhtmlOut`(value: bool) -> None
- `breaks`(value: bool) -> None
- `langPrefix`(value: str) -> None
- `highlight`(value: Callable[<ast.Tuple object at 0x1065248d0>] | None) -> None

### Implementation
**OptionsType**
  - maxNesting: int
  - html: bool
  - linkify: bool
  - typographer: bool
  - quotes: str
  - xhtmlOut: bool
  - breaks: bool
  - langPrefix: str
  - highlight: Callable[<ast.Tuple object at 0x106501a50>] | None
**PresetType**
  - options: OptionsType
  - components: MutableMapping[<ast.Tuple object at 0x106500d50>]
**OptionsDict**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/utils.py`  
**Dependencies**: `__future__.annotations`, `collections.abc.MutableMapping`, `pathlib.Path`, `typing.Any`, `typing.Callable`, `typing.Iterable`, `typing.MutableMapping`, `typing.TypedDict`, `typing.cast`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it._compat

**Imports**: `__future__.annotations`, `collections.abc.Mapping`, `sys`, `typing.Any`
**Type References**: [[Mapping]]

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/_compat.py`  
**Dependencies**: `__future__.annotations`, `collections.abc.Mapping`, `sys`, `typing.Any`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.parser_inline

**Imports**: `__future__.annotations`, `typing.TYPE_CHECKING`, `typing.Callable`, `rules_inline`, `ruler.Ruler`, `rules_inline.state_inline.StateInline`, `token.Token`, `utils.EnvType`, `markdown_it.MarkdownIt`
**Type References**: [[ParserInline]], [[RuleFuncInline2Type]], [[RuleFuncInlineType]]

### Interface
- `__init__`() -> None
- `skipToken`(state: StateInline) -> None
- `tokenize`(state: StateInline) -> None
- `parse`(src: str, md: MarkdownIt, env: EnvType, tokens: list[Token]) -> list[Token]

### Implementation
**ParserInline**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/parser_inline.py`  
**Dependencies**: `__future__.annotations`, `typing.TYPE_CHECKING`, `typing.Callable`, `rules_inline`, `ruler.Ruler`, `rules_inline.state_inline.StateInline`, `token.Token`, `utils.EnvType`, `markdown_it.MarkdownIt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.main

**Imports**: `__future__.annotations`, `collections.abc.Callable`, `collections.abc.Generator`, `collections.abc.Iterable`, `collections.abc.Mapping`, `collections.abc.MutableMapping`, `contextlib.contextmanager`, `typing.Any`, `typing.Literal`, `typing.overload`, `helpers`, `presets`, `common.normalize_url`, `common.utils`, `parser_block.ParserBlock`, `parser_core.ParserCore`, `parser_inline.ParserInline`, `renderer.RendererHTML`, `renderer.RendererProtocol`, `rules_core.state_core.StateCore`, `token.Token`, `utils.EnvType`, `utils.OptionsDict`, `utils.OptionsType`, `utils.PresetType`, `linkify_it`
**Type References**: [[MarkdownIt]], [[PresetType]]

### Interface
- `__init__`(config: str | PresetType, options_update: Mapping[<ast.Tuple object at 0x10656c750>] | None) -> Any
- `__repr__`() -> str
- `__getitem__`(name: str) -> Any
- `set`(options: OptionsType) -> None
- `configure`(presets: str | PresetType, options_update: Mapping[<ast.Tuple object at 0x106560a10>] | None) -> MarkdownIt
- `get_all_rules`() -> dict[<ast.Tuple object at 0x106581b90>]
- `get_active_rules`() -> dict[<ast.Tuple object at 0x106583390>]
- `enable`(names: str | Iterable[str], ignoreInvalid: bool) -> MarkdownIt
- `disable`(names: str | Iterable[str], ignoreInvalid: bool) -> MarkdownIt
- `reset_rules`() -> Generator[<ast.Tuple object at 0x1065975d0>]
- `add_render_rule`(name: str, function: Callable[<ast.Tuple object at 0x106597cd0>], fmt: str) -> None
- `use`(plugin: Callable[<ast.Tuple object at 0x1065a5110>]) -> MarkdownIt
- `parse`(src: str, env: EnvType | None) -> list[Token]
- `render`(src: str, env: EnvType | None) -> Any
- `parseInline`(src: str, env: EnvType | None) -> list[Token]
- `renderInline`(src: str, env: EnvType | None) -> Any
- `validateLink`(url: str) -> bool
- `normalizeLink`(url: str) -> str
- `normalizeLinkText`(link: str) -> str

### Implementation
**MarkdownIt**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/main.py`  
**Dependencies**: `__future__.annotations`, `collections.abc.Callable`, `collections.abc.Generator`, `collections.abc.Iterable`, `collections.abc.Mapping`, `collections.abc.MutableMapping`, `contextlib.contextmanager`, `typing.Any`, `typing.Literal`, `typing.overload`, `helpers`, `presets`, `common.normalize_url`, `common.utils`, `parser_block.ParserBlock`, `parser_core.ParserCore`, `parser_inline.ParserInline`, `renderer.RendererHTML`, `renderer.RendererProtocol`, `rules_core.state_core.StateCore`, `token.Token`, `utils.EnvType`, `utils.OptionsDict`, `utils.OptionsType`, `utils.PresetType`, `linkify_it`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.idna.intranges
:::{doc} intranges_from_list:12
Represent a list of integers as a sequence of ranges:
((start_0, end_0), (start_1, end_1), ...), such that the original
integers are exactly those x such that start_i <= x < end_i for some i.

Ranges are encoded as single integers (start << 32 | end), not as tuples.
:::
:::{doc} intranges_contain:42
Determine if `int_` falls into one of the ranges in `ranges`.
:::
**Imports**: `bisect`, `typing.List`, `typing.Tuple`
### Interface
- `intranges_from_list`(list_: [List[int]](#list)) -> Tuple[<ast.Tuple object at 0x1065c7ad0>]
- `_encode_range`(start: int, end: int) -> int
- `_decode_range`(r: int) -> Tuple[<ast.Tuple object at 0x1065c6550>]
- `intranges_contain`(int_: int, ranges: Tuple[<ast.Tuple object at 0x1065c5f50>]) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/idna/intranges.py`  
**Dependencies**: `bisect`, `typing.List`, `typing.Tuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.idna.package_data



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/idna/package_data.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.idna.compat

**Imports**: `typing.Any`, `typing.Union`, `core.decode`, `core.encode`
### Interface
- `ToASCII`(label: str) -> bytes
- `ToUnicode`(label: [Union[<ast.Tuple object at 0x1065d2890>]](#union)) -> str
- `nameprep`(s: Any) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/idna/compat.py`  
**Dependencies**: `typing.Any`, `typing.Union`, `core.decode`, `core.encode`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.idna.idnadata



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/idna/idnadata.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.idna

**Imports**: `core.IDNABidiError`, `core.IDNAError`, `core.InvalidCodepoint`, `core.InvalidCodepointContext`, `core.alabel`, `core.check_bidi`, `core.check_hyphen_ok`, `core.check_initial_combiner`, `core.check_label`, `core.check_nfc`, `core.decode`, `core.encode`, `core.ulabel`, `core.uts46_remap`, `core.valid_contextj`, `core.valid_contexto`, `core.valid_label_length`, `core.valid_string_length`, `intranges.intranges_contain`, `package_data.__version__`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/idna/__init__.py`  
**Dependencies**: `core.IDNABidiError`, `core.IDNAError`, `core.InvalidCodepoint`, `core.InvalidCodepointContext`, `core.alabel`, `core.check_bidi`, `core.check_hyphen_ok`, `core.check_initial_combiner`, `core.check_label`, `core.check_nfc`, `core.decode`, `core.encode`, `core.ulabel`, `core.uts46_remap`, `core.valid_contextj`, `core.valid_contexto`, `core.valid_label_length`, `core.valid_string_length`, `intranges.intranges_contain`, `package_data.__version__`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.idna.core
:::{doc} IDNAError:14
Base exception for all IDNA-encoding related problems
:::
:::{doc} IDNABidiError:20
Exception when bidirectional requirements are not satisfied
:::
:::{doc} InvalidCodepoint:26
Exception when a disallowed or unallocated codepoint is used
:::
:::{doc} InvalidCodepointContext:32
Exception when the codepoint is not valid in the context it is used
:::
:::{doc} uts46_remap:332
Re-map the characters in the string according to UTS46 processing.
:::
**Imports**: `bisect`, `re`, `unicodedata`, `typing.Optional`, `typing.Union`, `idnadata`, `intranges.intranges_contain`, `uts46data.uts46data`
**Type References**: [[IDNABidiError]], [[IDNAError]], [[InvalidCodepoint]], [[InvalidCodepointContext]], [[Optional]]

### Interface
- `_combining_class`(cp: int) -> int
- `_is_script`(cp: str, script: str) -> bool
- `_punycode`(s: str) -> bytes
- `_unot`(s: int) -> str
- `valid_label_length`(label: [Union[<ast.Tuple object at 0x106902690>]](#union)) -> bool
- `valid_string_length`(label: [Union[<ast.Tuple object at 0x106901950>]](#union), trailing_dot: bool) -> bool
- `check_bidi`(label: str, check_ltr: bool) -> bool
- `check_initial_combiner`(label: str) -> bool
- `check_hyphen_ok`(label: str) -> bool
- `check_nfc`(label: str) -> None
- `valid_contextj`(label: str, pos: int) -> bool
- `valid_contexto`(label: str, pos: int, exception: bool) -> bool
- `check_label`(label: [Union[<ast.Tuple object at 0x1069314d0>]](#union)) -> None
- `alabel`(label: str) -> bytes
- `ulabel`(label: [Union[<ast.Tuple object at 0x106946150>]](#union)) -> str
- `uts46_remap`(domain: str, std3_rules: bool, transitional: bool) -> str
- `encode`(s: [Union[<ast.Tuple object at 0x10695c2d0>]](#union), strict: bool, uts46: bool, std3_rules: bool, transitional: bool) -> bytes
- `decode`(s: [Union[<ast.Tuple object at 0x106969cd0>]](#union), strict: bool, uts46: bool, std3_rules: bool) -> str

### Implementation
**IDNAError**

**IDNABidiError**

**InvalidCodepoint**

**InvalidCodepointContext**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/idna/core.py`  
**Dependencies**: `bisect`, `re`, `unicodedata`, `typing.Optional`, `typing.Union`, `idnadata`, `intranges.intranges_contain`, `uts46data.uts46data`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.idna.codec

**Imports**: `codecs`, `re`, `typing.Any`, `typing.Optional`, `typing.Tuple`, `core.IDNAError`, `core.alabel`, `core.decode`, `core.encode`, `core.ulabel`
**Type References**: [[Codec]], [[IncrementalDecoder]], [[IncrementalEncoder]], [[StreamReader]], [[StreamWriter]]

### Interface
- `search_function`(name: str) -> [Optional[codecs.CodecInfo]](#optional)
- `encode`(data: str, errors: str) -> Tuple[<ast.Tuple object at 0x10697da10>]
- `decode`(data: bytes, errors: str) -> Tuple[<ast.Tuple object at 0x10697c050>]
- `_buffer_encode`(data: str, errors: str, final: bool) -> Tuple[<ast.Tuple object at 0x106973550>]
- `_buffer_decode`(data: Any, errors: str, final: bool) -> Tuple[<ast.Tuple object at 0x106990f50>]

### Implementation
**Codec**

**IncrementalEncoder**

**IncrementalDecoder**

**StreamWriter**

**StreamReader**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/idna/codec.py`  
**Dependencies**: `codecs`, `re`, `typing.Any`, `typing.Optional`, `typing.Tuple`, `core.IDNAError`, `core.alabel`, `core.decode`, `core.encode`, `core.ulabel`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.idna.uts46data

**Imports**: `typing.List`, `typing.Tuple`, `typing.Union`
### Interface
- `_seg_0`() -> [List[Union[<ast.Tuple object at 0x106aa22d0>]]](#list)
- `_seg_1`() -> [List[Union[<ast.Tuple object at 0x1069bac90>]]](#list)
- `_seg_2`() -> [List[Union[<ast.Tuple object at 0x106e02490>]]](#list)
- `_seg_3`() -> [List[Union[<ast.Tuple object at 0x1069d8bd0>]]](#list)
- `_seg_4`() -> [List[Union[<ast.Tuple object at 0x1069a71d0>]]](#list)
- `_seg_5`() -> [List[Union[<ast.Tuple object at 0x106ce5690>]]](#list)
- `_seg_6`() -> [List[Union[<ast.Tuple object at 0x106cb3490>]]](#list)
- `_seg_7`() -> [List[Union[<ast.Tuple object at 0x106c913d0>]]](#list)
- `_seg_8`() -> [List[Union[<ast.Tuple object at 0x106c63dd0>]]](#list)
- `_seg_9`() -> [List[Union[<ast.Tuple object at 0x106bba290>]]](#list)
- `_seg_10`() -> [List[Union[<ast.Tuple object at 0x106b95bd0>]]](#list)
- `_seg_11`() -> [List[Union[<ast.Tuple object at 0x106b71d90>]]](#list)
- `_seg_12`() -> [List[Union[<ast.Tuple object at 0x106b51fd0>]]](#list)
- `_seg_13`() -> [List[Union[<ast.Tuple object at 0x106b2d690>]]](#list)
- `_seg_14`() -> [List[Union[<ast.Tuple object at 0x106b0d650>]]](#list)
- `_seg_15`() -> [List[Union[<ast.Tuple object at 0x106f513d0>]]](#list)
- `_seg_16`() -> [List[Union[<ast.Tuple object at 0x106f73810>]]](#list)
- `_seg_17`() -> [List[Union[<ast.Tuple object at 0x106fa0e10>]]](#list)
- `_seg_18`() -> [List[Union[<ast.Tuple object at 0x106fca450>]]](#list)
- `_seg_19`() -> [List[Union[<ast.Tuple object at 0x106ff8450>]]](#list)
- `_seg_20`() -> [List[Union[<ast.Tuple object at 0x106ae5410>]]](#list)
- `_seg_21`() -> [List[Union[<ast.Tuple object at 0x106a93390>]]](#list)
- `_seg_22`() -> [List[Union[<ast.Tuple object at 0x106a70b50>]]](#list)
- `_seg_23`() -> [List[Union[<ast.Tuple object at 0x106a422d0>]]](#list)
- `_seg_24`() -> [List[Union[<ast.Tuple object at 0x106a0f7d0>]]](#list)
- `_seg_25`() -> [List[Union[<ast.Tuple object at 0x106de5f10>]]](#list)
- `_seg_26`() -> [List[Union[<ast.Tuple object at 0x106dc4b50>]]](#list)
- `_seg_27`() -> [List[Union[<ast.Tuple object at 0x106d95c50>]]](#list)
- `_seg_28`() -> [List[Union[<ast.Tuple object at 0x106d6b050>]]](#list)
- `_seg_29`() -> [List[Union[<ast.Tuple object at 0x106d44610>]]](#list)
- `_seg_30`() -> [List[Union[<ast.Tuple object at 0x106d19a90>]]](#list)
- `_seg_31`() -> [List[Union[<ast.Tuple object at 0x107815410>]]](#list)
- `_seg_32`() -> [List[Union[<ast.Tuple object at 0x107844310>]]](#list)
- `_seg_33`() -> [List[Union[<ast.Tuple object at 0x10786b1d0>]]](#list)
- `_seg_34`() -> [List[Union[<ast.Tuple object at 0x107899f50>]]](#list)
- `_seg_35`() -> [List[Union[<ast.Tuple object at 0x1078bfb10>]]](#list)
- `_seg_36`() -> [List[Union[<ast.Tuple object at 0x1078ed110>]]](#list)
- `_seg_37`() -> [List[Union[<ast.Tuple object at 0x10790e650>]]](#list)
- `_seg_38`() -> [List[Union[<ast.Tuple object at 0x10793c550>]]](#list)
- `_seg_39`() -> [List[Union[<ast.Tuple object at 0x107962f10>]]](#list)
- `_seg_40`() -> [List[Union[<ast.Tuple object at 0x107991e10>]]](#list)
- `_seg_41`() -> [List[Union[<ast.Tuple object at 0x1079bcc10>]]](#list)
- `_seg_42`() -> [List[Union[<ast.Tuple object at 0x1079e37d0>]]](#list)
- `_seg_43`() -> [List[Union[<ast.Tuple object at 0x107a0e650>]]](#list)
- `_seg_44`() -> [List[Union[<ast.Tuple object at 0x107a3d050>]]](#list)
- `_seg_45`() -> [List[Union[<ast.Tuple object at 0x107a63f10>]]](#list)
- `_seg_46`() -> [List[Union[<ast.Tuple object at 0x107a92e10>]]](#list)
- `_seg_47`() -> [List[Union[<ast.Tuple object at 0x107ac1d10>]]](#list)
- `_seg_48`() -> [List[Union[<ast.Tuple object at 0x107aecb10>]]](#list)
- `_seg_49`() -> [List[Union[<ast.Tuple object at 0x107b13450>]]](#list)
- `_seg_50`() -> [List[Union[<ast.Tuple object at 0x107b41fd0>]]](#list)
- `_seg_51`() -> [List[Union[<ast.Tuple object at 0x107b6ced0>]]](#list)
- `_seg_52`() -> [List[Union[<ast.Tuple object at 0x107b93a10>]]](#list)
- `_seg_53`() -> [List[Union[<ast.Tuple object at 0x107bbd090>]]](#list)
- `_seg_54`() -> [List[Union[<ast.Tuple object at 0x107be7150>]]](#list)
- `_seg_55`() -> [List[Union[<ast.Tuple object at 0x107c104d0>]]](#list)
- `_seg_56`() -> [List[Union[<ast.Tuple object at 0x107c35b10>]]](#list)
- `_seg_57`() -> [List[Union[<ast.Tuple object at 0x107c55d50>]]](#list)
- `_seg_58`() -> [List[Union[<ast.Tuple object at 0x107c7e490>]]](#list)
- `_seg_59`() -> [List[Union[<ast.Tuple object at 0x107c9f150>]]](#list)
- `_seg_60`() -> [List[Union[<ast.Tuple object at 0x107ccc750>]]](#list)
- `_seg_61`() -> [List[Union[<ast.Tuple object at 0x107cef590>]]](#list)
- `_seg_62`() -> [List[Union[<ast.Tuple object at 0x107d1e090>]]](#list)
- `_seg_63`() -> [List[Union[<ast.Tuple object at 0x107d4cb10>]]](#list)
- `_seg_64`() -> [List[Union[<ast.Tuple object at 0x107d739d0>]]](#list)
- `_seg_65`() -> [List[Union[<ast.Tuple object at 0x107da28d0>]]](#list)
- `_seg_66`() -> [List[Union[<ast.Tuple object at 0x107dcd7d0>]]](#list)
- `_seg_67`() -> [List[Union[<ast.Tuple object at 0x107dfc650>]]](#list)
- `_seg_68`() -> [List[Union[<ast.Tuple object at 0x107e1f510>]]](#list)
- `_seg_69`() -> [List[Union[<ast.Tuple object at 0x107e4e410>]]](#list)
- `_seg_70`() -> [List[Union[<ast.Tuple object at 0x107e7c890>]]](#list)
- `_seg_71`() -> [List[Union[<ast.Tuple object at 0x107e9e7d0>]]](#list)
- `_seg_72`() -> [List[Union[<ast.Tuple object at 0x107eccb50>]]](#list)
- `_seg_73`() -> [List[Union[<ast.Tuple object at 0x107ef3090>]]](#list)
- `_seg_74`() -> [List[Union[<ast.Tuple object at 0x107f21590>]]](#list)
- `_seg_75`() -> [List[Union[<ast.Tuple object at 0x107f42f50>]]](#list)
- `_seg_76`() -> [List[Union[<ast.Tuple object at 0x107f710d0>]]](#list)
- `_seg_77`() -> [List[Union[<ast.Tuple object at 0x107f97e90>]]](#list)
- `_seg_78`() -> [List[Union[<ast.Tuple object at 0x107fc6d90>]]](#list)
- `_seg_79`() -> [List[Union[<ast.Tuple object at 0x107ff5b90>]]](#list)
- `_seg_80`() -> [List[Union[<ast.Tuple object at 0x118020a10>]]](#list)
- `_seg_81`() -> [List[Union[<ast.Tuple object at 0x11803bf10>]]](#list)
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/idna/uts46data.py`  
**Dependencies**: `typing.List`, `typing.Tuple`, `typing.Union`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click._winconsole

**Imports**: `io`, `sys`, `time`, `typing`, `ctypes.byref`, `ctypes.c_char`, `ctypes.c_char_p`, `ctypes.c_int`, `ctypes.c_ssize_t`, `ctypes.c_ulong`, `ctypes.c_void_p`, `ctypes.POINTER`, `ctypes.py_object`, `ctypes.Structure`, `ctypes.wintypes.DWORD`, `ctypes.wintypes.HANDLE`, `ctypes.wintypes.LPCWSTR`, `ctypes.wintypes.LPWSTR`, `_compat._NonClosingTextIOWrapper`, `msvcrt`, `ctypes.windll`, `ctypes.WINFUNCTYPE`, `ctypes.pythonapi`
**Type References**: [[ConsoleStream]], [[Mapping]], [[Py_buffer]], [[TextIO]], [[_WindowsConsoleRawIOBase]], [[_WindowsConsoleReader]], [[_WindowsConsoleWriter]], [[t.Mapping]], [[t.TextIO]]

### Interface
- `_get_text_stdin`(buffer_stream: t.BinaryIO) -> t.TextIO
- `_get_text_stdout`(buffer_stream: t.BinaryIO) -> t.TextIO
- `_get_text_stderr`(buffer_stream: t.BinaryIO) -> t.TextIO
- `_is_console`(f: t.TextIO) -> bool
- `_get_windows_console_stream`(f: t.TextIO, encoding: t.Optional[str], errors: t.Optional[str]) -> t.Optional[t.TextIO]
- `get_buffer`() -> Any
- `__init__`(text_stream: t.TextIO, byte_stream: t.BinaryIO) -> None
- `isatty`() -> bool
- `readable`() -> Any
- `readinto`() -> Any
- `writable`() -> Any
- `_get_error_message`() -> Any
- `write`(x: t.AnyStr) -> int
- `name`() -> str
- `writelines`(lines: t.Iterable[t.AnyStr]) -> None
- `__getattr__`(name: str) -> t.Any
- `__repr__`() -> Any

### Implementation
**_WindowsConsoleRawIOBase**

**_WindowsConsoleReader**

**_WindowsConsoleWriter**

**ConsoleStream**

**Py_buffer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/_winconsole.py`  
**Dependencies**: `io`, `sys`, `time`, `typing`, `ctypes.byref`, `ctypes.c_char`, `ctypes.c_char_p`, `ctypes.c_int`, `ctypes.c_ssize_t`, `ctypes.c_ulong`, `ctypes.c_void_p`, `ctypes.POINTER`, `ctypes.py_object`, `ctypes.Structure`, `ctypes.wintypes.DWORD`, `ctypes.wintypes.HANDLE`, `ctypes.wintypes.LPCWSTR`, `ctypes.wintypes.LPWSTR`, `_compat._NonClosingTextIOWrapper`, `msvcrt`, `ctypes.windll`, `ctypes.WINFUNCTYPE`, `ctypes.pythonapi`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click._textwrap

**Imports**: `textwrap`, `typing`, `contextlib.contextmanager`
**Type References**: [[TextWrapper]]

### Interface
- `_handle_long_word`(reversed_chunks: t.List[str], cur_line: t.List[str], cur_len: int, width: int) -> None
- `extra_indent`(indent: str) -> t.Iterator[None]
- `indent_only`(text: str) -> str

### Implementation
**TextWrapper**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/_textwrap.py`  
**Dependencies**: `textwrap`, `typing`, `contextlib.contextmanager`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click.globals
:::{doc} get_current_context:20
Returns the current click context.  This can be used as a way to
access the current context object from anywhere.  This is a more implicit
alternative to the :func:`pass_context` decorator.  This function is
primarily useful for helpers such as :func:`echo` which might be
interested in changing its behavior based on the current context.

To push the current context, :meth:`Context.scope` can be used.

.. versionadded:: 5.0

:param silent: if set to `True` the return value is `None` if no context
               is available.  The default behavior is to raise a
               :exc:`RuntimeError`.
:::
:::{doc} push_context:44
Pushes a new context to the current stack.
:::
:::{doc} pop_context:49
Removes the top level from the stack.
:::
:::{doc} resolve_color_default:54
Internal helper to get the default value of the color flag.  If a
value is passed it's returned unchanged, otherwise it's looked up from
the current context.
:::
**Imports**: `typing`, `threading.local`, `typing_extensions`, `core.Context`
### Interface
- `get_current_context`(silent: bool) -> t.Optional[Context]
- `push_context`(ctx: Context) -> None
- `pop_context`() -> None
- `resolve_color_default`(color: t.Optional[bool]) -> t.Optional[bool]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/globals.py`  
**Dependencies**: `typing`, `threading.local`, `typing_extensions`, `core.Context`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click

**Imports**: `core.Argument`, `core.BaseCommand`, `core.Command`, `core.CommandCollection`, `core.Context`, `core.Group`, `core.MultiCommand`, `core.Option`, `core.Parameter`, `decorators.argument`, `decorators.command`, `decorators.confirmation_option`, `decorators.group`, `decorators.help_option`, `decorators.HelpOption`, `decorators.make_pass_decorator`, `decorators.option`, `decorators.pass_context`, `decorators.pass_obj`, `decorators.password_option`, `decorators.version_option`, `exceptions.Abort`, `exceptions.BadArgumentUsage`, `exceptions.BadOptionUsage`, `exceptions.BadParameter`, `exceptions.ClickException`, `exceptions.FileError`, `exceptions.MissingParameter`, `exceptions.NoSuchOption`, `exceptions.UsageError`, `formatting.HelpFormatter`, `formatting.wrap_text`, `globals.get_current_context`, `parser.OptionParser`, `termui.clear`, `termui.confirm`, `termui.echo_via_pager`, `termui.edit`, `termui.getchar`, `termui.launch`, `termui.pause`, `termui.progressbar`, `termui.prompt`, `termui.secho`, `termui.style`, `termui.unstyle`, `types.BOOL`, `types.Choice`, `types.DateTime`, `types.File`, `types.FLOAT`, `types.FloatRange`, `types.INT`, `types.IntRange`, `types.ParamType`, `types.Path`, `types.STRING`, `types.Tuple`, `types.UNPROCESSED`, `types.UUID`, `utils.echo`, `utils.format_filename`, `utils.get_app_dir`, `utils.get_binary_stream`, `utils.get_text_stream`, `utils.open_file`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/__init__.py`  
**Dependencies**: `core.Argument`, `core.BaseCommand`, `core.Command`, `core.CommandCollection`, `core.Context`, `core.Group`, `core.MultiCommand`, `core.Option`, `core.Parameter`, `decorators.argument`, `decorators.command`, `decorators.confirmation_option`, `decorators.group`, `decorators.help_option`, `decorators.HelpOption`, `decorators.make_pass_decorator`, `decorators.option`, `decorators.pass_context`, `decorators.pass_obj`, `decorators.password_option`, `decorators.version_option`, `exceptions.Abort`, `exceptions.BadArgumentUsage`, `exceptions.BadOptionUsage`, `exceptions.BadParameter`, `exceptions.ClickException`, `exceptions.FileError`, `exceptions.MissingParameter`, `exceptions.NoSuchOption`, `exceptions.UsageError`, `formatting.HelpFormatter`, `formatting.wrap_text`, `globals.get_current_context`, `parser.OptionParser`, `termui.clear`, `termui.confirm`, `termui.echo_via_pager`, `termui.edit`, `termui.getchar`, `termui.launch`, `termui.pause`, `termui.progressbar`, `termui.prompt`, `termui.secho`, `termui.style`, `termui.unstyle`, `types.BOOL`, `types.Choice`, `types.DateTime`, `types.File`, `types.FLOAT`, `types.FloatRange`, `types.INT`, `types.IntRange`, `types.ParamType`, `types.Path`, `types.STRING`, `types.Tuple`, `types.UNPROCESSED`, `types.UUID`, `utils.echo`, `utils.format_filename`, `utils.get_app_dir`, `utils.get_binary_stream`, `utils.get_text_stream`, `utils.open_file`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click.core
:::{doc} _complete_visible_commands:50
List all the subcommands of a group that start with the
incomplete value and aren't hidden.

:param ctx: Invocation context for the group.
:param incomplete: Value being completed. May be empty.
:::
:::{doc} augment_usage_errors:98
Context manager that attaches extra information to exceptions.
:::
:::{doc} iter_params_for_processing:116
Returns all declared parameters in the order they should be processed.

The declared parameters are re-shuffled depending on the order in which
they were invoked, as well as the eagerness of each parameters.

The invocation order takes precedence over the declaration order. I.e. the
order in which the user provided them to the CLI is respected.

This behavior and its effect on callback evaluation is detailed at:
https://click.palletsprojects.com/en/stable/advanced/#callback-evaluation-order
:::
:::{doc} ParameterSource:143
This is an :class:`~enum.Enum` that indicates the source of a
parameter's value.

Use :meth:`click.Context.get_parameter_source` to get the
source for a parameter by name.

.. versionchanged:: 8.0
    Use :class:`~enum.Enum` and drop the ``validate`` method.

.. versionchanged:: 8.0
    Added the ``PROMPT`` value.
:::
:::{doc} Context:169
The context is a special internal object that holds state relevant
for the script execution at every single level.  It's normally invisible
to commands unless they opt-in to getting access to it.

The context is useful as it can pass internal objects around and can
control special execution features such as reading data from
environment variables.

A context can be used as context manager in which case it will call
:meth:`close` on teardown.

:param command: the command class for this context.
:param parent: the parent context.
:param info_name: the info name for this invocation.  Generally this
                  is the most descriptive name for the script or
                  command.  For the toplevel script it is usually
                  the name of the script, for commands below it it's
                  the name of the script.
:param obj: an arbitrary object of user data.
:param auto_envvar_prefix: the prefix to use for automatic environment
                           variables.  If this is `None` then reading
                           from environment variables is disabled.  This
                           does not affect manually set environment
                           variables which are always read.
:param default_map: a dictionary (like object) with default values
                    for parameters.
:param terminal_width: the width of the terminal.  The default is
                       inherit from parent context.  If no context
                       defines the terminal width then auto
                       detection will be applied.
:param max_content_width: the maximum width for content rendered by
                          Click (this currently only affects help
                          pages).  This defaults to 80 characters if
                          not overridden.  In other words: even if the
                          terminal is larger than that, Click will not
                          format things wider than 80 characters by
                          default.  In addition to that, formatters might
                          add some safety mapping on the right.
:param resilient_parsing: if this flag is enabled then Click will
                          parse without any interactivity or callback
                          invocation.  Default values will also be
                          ignored.  This is useful for implementing
                          things such as completion support.
:param allow_extra_args: if this is set to `True` then extra arguments
                         at the end will not raise an error and will be
                         kept on the context.  The default is to inherit
                         from the command.
:param allow_interspersed_args: if this is set to `False` then options
                                and arguments cannot be mixed.  The
                                default is to inherit from the command.
:param ignore_unknown_options: instructs click to ignore options it does
                               not know and keeps them for later
                               processing.
:param help_option_names: optionally a list of strings that define how
                          the default help parameter is named.  The
                          default is ``['--help']``.
:param token_normalize_func: an optional function that is used to
                             normalize tokens (options, choices,
                             etc.).  This for instance can be used to
                             implement case insensitive behavior.
:param color: controls if the terminal supports ANSI colors or not.  The
              default is autodetection.  This is only needed if ANSI
              codes are used in texts that Click prints which is by
              default not the case.  This for instance would affect
              help output.
:param show_default: Show the default value for commands. If this
    value is not set, it defaults to the value from the parent
    context. ``Command.show_default`` overrides this default for the
    specific command.

.. versionchanged:: 8.1
    The ``show_default`` parameter is overridden by
    ``Command.show_default``, instead of the other way around.

.. versionchanged:: 8.0
    The ``show_default`` parameter defaults to the value from the
    parent context.

.. versionchanged:: 7.1
   Added the ``show_default`` parameter.

.. versionchanged:: 4.0
    Added the ``color``, ``ignore_unknown_options``, and
    ``max_content_width`` parameters.

.. versionchanged:: 3.0
    Added the ``allow_extra_args`` and ``allow_interspersed_args``
    parameters.

.. versionchanged:: 2.0
    Added the ``resilient_parsing``, ``help_option_names``, and
    ``token_normalize_func`` parameters.
:::
:::{doc} BaseCommand:837
The base command implements the minimal API contract of commands.
Most code will never use this as it does not implement a lot of useful
functionality but it can act as the direct subclass of alternative
parsing methods that do not depend on the Click parser.

For instance, this can be used to bridge Click and other systems like
argparse or docopt.

Because base commands do not implement a lot of the API that other
parts of Click take for granted, they are not supported for all
operations.  For instance, they cannot be used with the decorators
usually and they have no built-in callback system.

.. versionchanged:: 2.0
   Added the `context_settings` parameter.

:param name: the name of the command to use unless a group overrides it.
:param context_settings: an optional dictionary with defaults that are
                         passed to the context object.
:::
:::{doc} Command:1164
Commands are the basic building block of command line interfaces in
Click.  A basic command handles command line parsing and might dispatch
more parsing to commands nested below it.

:param name: the name of the command to use unless a group overrides it.
:param context_settings: an optional dictionary with defaults that are
                         passed to the context object.
:param callback: the callback to invoke.  This is optional.
:param params: the parameters to register with this command.  This can
               be either :class:`Option` or :class:`Argument` objects.
:param help: the help string to use for this command.
:param epilog: like the help string but it's printed at the end of the
               help page after everything else.
:param short_help: the short help to use for this command.  This is
                   shown on the command listing of the parent command.
:param add_help_option: by default each command registers a ``--help``
                        option.  This can be disabled by this parameter.
:param no_args_is_help: this controls what happens if no arguments are
                        provided.  This option is disabled by default.
                        If enabled this will add ``--help`` as argument
                        if no arguments are passed
:param hidden: hide this command from help outputs.

:param deprecated: issues a message indicating that
                         the command is deprecated.

.. versionchanged:: 8.1
    ``help``, ``epilog``, and ``short_help`` are stored unprocessed,
    all formatting is done when outputting help text, not at init,
    and is done even if not using the ``@command`` decorator.

.. versionchanged:: 8.0
    Added a ``repr`` showing the command name.

.. versionchanged:: 7.1
    Added the ``no_args_is_help`` parameter.

.. versionchanged:: 2.0
    Added the ``context_settings`` parameter.
:::
:::{doc} MultiCommand:1481
A multi command is the basic implementation of a command that
dispatches to subcommands.  The most common version is the
:class:`Group`.

:param invoke_without_command: this controls how the multi command itself
                               is invoked.  By default it's only invoked
                               if a subcommand is provided.
:param no_args_is_help: this controls what happens if no arguments are
                        provided.  This option is enabled by default if
                        `invoke_without_command` is disabled or disabled
                        if it's enabled.  If enabled this will add
                        ``--help`` as argument if no arguments are
                        passed.
:param subcommand_metavar: the string that is used in the documentation
                           to indicate the subcommand place.
:param chain: if this is set to `True` chaining of multiple subcommands
              is enabled.  This restricts the form of commands in that
              they cannot have optional arguments but it allows
              multiple commands to be chained together.
:param result_callback: The result callback to attach to this multi
    command. This can be set or changed later with the
    :meth:`result_callback` decorator.
:param attrs: Other command arguments described in :class:`Command`.
:::
:::{doc} Group:1790
A group allows a command to have subcommands attached. This is
the most common way to implement nesting in Click.

:param name: The name of the group command.
:param commands: A dict mapping names to :class:`Command` objects.
    Can also be a list of :class:`Command`, which will use
    :attr:`Command.name` to create the dict.
:param attrs: Other command arguments described in
    :class:`MultiCommand`, :class:`Command`, and
    :class:`BaseCommand`.

.. versionchanged:: 8.0
    The ``commands`` argument can be a list of command objects.
:::
:::{doc} CommandCollection:1962
A command collection is a multi command that merges multiple multi
commands together into one.  This is a straightforward implementation
that accepts a list of different multi commands as sources and
provides all the commands for each of them.

See :class:`MultiCommand` and :class:`Command` for the description of
``name`` and ``attrs``.
:::
:::{doc} _check_iter:2007
Check if the value is iterable but not a string. Raises a type
error, or return an iterator over the value.
:::
:::{doc} Parameter:2017
A parameter to a command comes in two versions: they are either
:class:`Option`\s or :class:`Argument`\s.  Other subclasses are currently
not supported by design as some of the internals for parsing are
intentionally not finalized.

Some settings are supported by both options and arguments.

:param param_decls: the parameter declarations for this option or
                    argument.  This is a list of flags or argument
                    names.
:param type: the type that should be used.  Either a :class:`ParamType`
             or a Python type.  The latter is converted into the former
             automatically if supported.
:param required: controls if this is optional or not.
:param default: the default value if omitted.  This can also be a callable,
                in which case it's invoked when the default is needed
                without any arguments.
:param callback: A function to further process or validate the value
    after type conversion. It is called as ``f(ctx, param, value)``
    and must return the value. It is called for all sources,
    including prompts.
:param nargs: the number of arguments to match.  If not ``1`` the return
              value is a tuple instead of single value.  The default for
              nargs is ``1`` (except if the type is a tuple, then it's
              the arity of the tuple). If ``nargs=-1``, all remaining
              parameters are collected.
:param metavar: how the value is represented in the help page.
:param expose_value: if this is `True` then the value is passed onwards
                     to the command callback and stored on the context,
                     otherwise it's skipped.
:param is_eager: eager values are processed before non eager ones.  This
                 should not be set for arguments or it will inverse the
                 order of processing.
:param envvar: a string or list of strings that are environment variables
               that should be checked.
:param shell_complete: A function that returns custom shell
    completions. Used instead of the param's type completion if
    given. Takes ``ctx, param, incomplete`` and must return a list
    of :class:`~click.shell_completion.CompletionItem` or a list of
    strings.

.. versionchanged:: 8.0
    ``process_value`` validates required parameters and bounded
    ``nargs``, and invokes the parameter callback before returning
    the value. This allows the callback to validate prompts.
    ``full_process_value`` is removed.

.. versionchanged:: 8.0
    ``autocompletion`` is renamed to ``shell_complete`` and has new
    semantics described above. The old name is deprecated and will
    be removed in 8.1, until then it will be wrapped to match the
    new requirements.

.. versionchanged:: 8.0
    For ``multiple=True, nargs>1``, the default must be a list of
    tuples.

.. versionchanged:: 8.0
    Setting a default is no longer required for ``nargs>1``, it will
    default to ``None``. ``multiple=True`` or ``nargs=-1`` will
    default to ``()``.

.. versionchanged:: 7.1
    Empty environment variables are ignored rather than taking the
    empty string value. This makes it possible for scripts to clear
    variables if they can't unset them.

.. versionchanged:: 2.0
    Changed signature for parameter callback to also be passed the
    parameter. The old callback format will still work, but it will
    raise a warning to give you a chance to migrate the code easier.
:::
:::{doc} Option:2452
Options are usually optional values on the command line and
have some extra features that arguments don't have.

All other parameters are passed onwards to the parameter constructor.

:param show_default: Show the default value for this option in its
    help text. Values are not shown by default, unless
    :attr:`Context.show_default` is ``True``. If this value is a
    string, it shows that string in parentheses instead of the
    actual value. This is particularly useful for dynamic options.
    For single option boolean flags, the default remains hidden if
    its value is ``False``.
:param show_envvar: Controls if an environment variable should be
    shown on the help page. Normally, environment variables are not
    shown.
:param prompt: If set to ``True`` or a non empty string then the
    user will be prompted for input. If set to ``True`` the prompt
    will be the option name capitalized.
:param confirmation_prompt: Prompt a second time to confirm the
    value if it was prompted for. Can be set to a string instead of
    ``True`` to customize the message.
:param prompt_required: If set to ``False``, the user will be
    prompted for input only when the option was specified as a flag
    without a value.
:param hide_input: If this is ``True`` then the input on the prompt
    will be hidden from the user. This is useful for password input.
:param is_flag: forces this option to act as a flag.  The default is
                auto detection.
:param flag_value: which value should be used for this flag if it's
                   enabled.  This is set to a boolean automatically if
                   the option string contains a slash to mark two options.
:param multiple: if this is set to `True` then the argument is accepted
                 multiple times and recorded.  This is similar to ``nargs``
                 in how it works but supports arbitrary number of
                 arguments.
:param count: this flag makes an option increment an integer.
:param allow_from_autoenv: if this is enabled then the value of this
                           parameter will be pulled from an environment
                           variable in case a prefix is defined on the
                           context.
:param help: the help string.
:param hidden: hide this option from help outputs.
:param attrs: Other command arguments described in :class:`Parameter`.

.. versionchanged:: 8.1.0
    Help text indentation is cleaned here instead of only in the
    ``@option`` decorator.

.. versionchanged:: 8.1.0
    The ``show_default`` parameter overrides
    ``Context.show_default``.

.. versionchanged:: 8.1.0
    The default of a single option boolean flag is not shown if the
    default value is ``False``.

.. versionchanged:: 8.0.1
    ``type`` is detected from ``flag_value`` if given.
:::
:::{doc} Argument:2974
Arguments are positional parameters to a command.  They generally
provide fewer features than options but can have infinite ``nargs``
and are required by default.

All parameters are passed onwards to the constructor of :class:`Parameter`.
:::
**Imports**: `enum`, `errno`, `inspect`, `os`, `sys`, `typing`, `collections.abc`, `contextlib.contextmanager`, `contextlib.ExitStack`, `functools.update_wrapper`, `gettext.gettext`, `gettext.ngettext`, `itertools.repeat`, `types.TracebackType`, `types`, `exceptions.Abort`, `exceptions.BadParameter`, `exceptions.ClickException`, `exceptions.Exit`, `exceptions.MissingParameter`, `exceptions.UsageError`, `formatting.HelpFormatter`, `formatting.join_options`, `globals.pop_context`, `globals.push_context`, `parser._flag_needs_value`, `parser.OptionParser`, `parser.split_opt`, `termui.confirm`, `termui.prompt`, `termui.style`, `utils._detect_program_name`, `utils._expand_args`, `utils.echo`, `utils.make_default_short_help`, `utils.make_str`, `utils.PacifyFlushWrapper`, `typing_extensions`, `decorators.HelpOption`, `shell_completion.CompletionItem`, `click.shell_completion.CompletionItem`, `shell_completion.shell_complete`, `click.shell_completion.CompletionItem`, `click.shell_completion.CompletionItem`, `decorators.command`, `decorators.group`, `decorators.HelpOption`, `click.shell_completion.CompletionItem`
**Type References**: [[Argument]], [[BaseCommand]], [[Command]], [[CommandCollection]], [[Context]], [[Group]], [[List]], [[MultiCommand]], [[Option]], [[Optional]], [[Parameter]], [[ParameterSource]], [[Set]], [[Type]], [[t.List]], [[t.Optional]], [[t.Set]], [[t.Type]]

### Interface
- `_complete_visible_commands`(ctx: Context, incomplete: str) -> t.Iterator[t.Tuple[<ast.Tuple object at 0x1181688d0>]]
- `_check_multicommand`(base_command: MultiCommand, cmd_name: str, cmd: Command, register: bool) -> None
- `batch`(iterable: t.Iterable[V], batch_size: int) -> t.List[t.Tuple[<ast.Tuple object at 0x118120150>]]
- `augment_usage_errors`(ctx: Context, param: t.Optional[Parameter]) -> t.Iterator[None]
- `iter_params_for_processing`(invocation_order: t.Sequence[Parameter], declaration_order: t.Sequence[Parameter]) -> t.List[Parameter]
- `_check_iter`(value: t.Any) -> t.Iterator[t.Any]
- `sort_key`(item: Parameter) -> t.Tuple[<ast.Tuple object at 0x1180f3010>]
- `__init__`(param_decls: t.Sequence[str], required: t.Optional[bool]) -> None
- `to_info_dict`() -> t.Dict[<ast.Tuple object at 0x118356650>]
- `__enter__`() -> Context
- `__exit__`(exc_type: t.Optional[t.Type[BaseException]], exc_value: t.Optional[BaseException], tb: t.Optional[TracebackType]) -> None
- `scope`(cleanup: bool) -> t.Iterator[Context]
- `meta`() -> t.Dict[<ast.Tuple object at 0x1181c2390>]
- `make_formatter`() -> HelpFormatter
- `with_resource`(context_manager: t.ContextManager[V]) -> V
- `call_on_close`(f: t.Callable[<ast.Tuple object at 0x1181c0790>]) -> t.Callable[<ast.Tuple object at 0x1181bbdd0>]
- `close`() -> None
- `command_path`() -> str
- `find_root`() -> Context
- `find_object`(object_type: t.Type[V]) -> t.Optional[V]
- `ensure_object`(object_type: t.Type[V]) -> V
- `lookup_default`(name: str, call: bool) -> t.Optional[t.Any]
- `fail`(message: str) -> te.NoReturn
- `abort`() -> te.NoReturn
- `exit`(code: int) -> te.NoReturn
- `get_usage`(ctx: Context) -> str
- `get_help`(ctx: Context) -> str
- `_make_sub_context`(command: Command) -> Context
- `invoke`(ctx: Context) -> t.Any
- `forward`(__cmd: Command) -> t.Any
- `set_parameter_source`(name: str, source: ParameterSource) -> None
- `get_parameter_source`(name: str) -> t.Optional[ParameterSource]
- `__repr__`() -> str
- `make_context`(info_name: t.Optional[str], args: t.List[str], parent: t.Optional[Context]) -> Context
- `parse_args`(ctx: Context, args: t.List[str]) -> t.List[str]
- `shell_complete`(ctx: Context, incomplete: str) -> t.List[CompletionItem]
- `main`(args: t.Optional[t.Sequence[str]], prog_name: t.Optional[str], complete_var: t.Optional[str], standalone_mode: bool, windows_expand_args: bool) -> t.Any
- `_main_shell_completion`(ctx_args: t.MutableMapping[<ast.Tuple object at 0x11814b550>], prog_name: str, complete_var: t.Optional[str]) -> None
- `__call__`() -> t.Any
- `get_params`(ctx: Context) -> t.List[Parameter]
- `format_usage`(ctx: Context, formatter: HelpFormatter) -> None
- `collect_usage_pieces`(ctx: Context) -> t.List[str]
- `get_help_option_names`(ctx: Context) -> t.List[str]
- `get_help_option`(ctx: Context) -> t.Optional[Option]
- `make_parser`(ctx: Context) -> OptionParser
- `get_short_help_str`(limit: int) -> str
- `format_help`(ctx: Context, formatter: HelpFormatter) -> None
- `format_help_text`(ctx: Context, formatter: HelpFormatter) -> None
- `format_options`(ctx: Context, formatter: HelpFormatter) -> None
- `format_epilog`(ctx: Context, formatter: HelpFormatter) -> None
- `result_callback`(replace: bool) -> t.Callable[<ast.Tuple object at 0x118234410>]
- `format_commands`(ctx: Context, formatter: HelpFormatter) -> None
- `resolve_command`(ctx: Context, args: t.List[str]) -> t.Tuple[<ast.Tuple object at 0x118257850>]
- `get_command`(ctx: Context, cmd_name: str) -> t.Optional[Command]
- `list_commands`(ctx: Context) -> t.List[str]
- `add_command`(cmd: Command, name: t.Optional[str]) -> None
- `command`() -> t.Union[<ast.Tuple object at 0x11827a610>]
- `group`() -> t.Union[<ast.Tuple object at 0x118291650>]
- `add_source`(multi_cmd: MultiCommand) -> None
- `_parse_decls`(decls: t.Sequence[str], expose_value: bool) -> t.Tuple[<ast.Tuple object at 0x1183e78d0>]
- `human_readable_name`() -> str
- `make_metavar`() -> str
- `get_default`(ctx: Context, call: bool) -> t.Optional[t.Union[<ast.Tuple object at 0x1183ae490>]]
- `add_to_parser`(parser: OptionParser, ctx: Context) -> None
- `consume_value`(ctx: Context, opts: t.Mapping[<ast.Tuple object at 0x1183c6250>]) -> t.Tuple[<ast.Tuple object at 0x1183cea10>]
- `type_cast_value`(ctx: Context, value: t.Any) -> t.Any
- `value_is_missing`(value: t.Any) -> bool
- `process_value`(ctx: Context, value: t.Any) -> t.Any
- `resolve_envvar_value`(ctx: Context) -> t.Optional[str]
- `value_from_envvar`(ctx: Context) -> t.Optional[t.Any]
- `handle_parse_result`(ctx: Context, opts: t.Mapping[<ast.Tuple object at 0x118315810>], args: t.List[str]) -> t.Tuple[<ast.Tuple object at 0x11831c190>]
- `get_help_record`(ctx: Context) -> t.Optional[t.Tuple[<ast.Tuple object at 0x1183a6750>]]
- `get_usage_pieces`(ctx: Context) -> t.List[str]
- `get_error_hint`(ctx: Context) -> str
- `prompt_for_value`(ctx: Context) -> t.Any
- `decorator`(f: t.Callable[<ast.Tuple object at 0x118287f10>]) -> Group
- `_process_result`(value: t.Any) -> t.Any
- `check_iter`(value: t.Any) -> t.Iterator[t.Any]
- `_write_opts`(opts: t.Sequence[str]) -> str
- `function`() -> Any
- `convert`(value: t.Any) -> t.Any

### Implementation
**ParameterSource**

**Context**
  - formatter_class: t.Type[HelpFormatter]
  - node: t.Optional[Context]
**BaseCommand**
  - context_class: t.Type[Context]
  - results: t.List[CompletionItem]
**Command**
  - results: t.List[CompletionItem]
**MultiCommand**

**Group**
  - command_class: t.Optional[t.Type[Command]]
  - group_class: t.Optional[t.Union[<ast.Tuple object at 0x118263ad0>]]
  - func: t.Optional[t.Callable[<ast.Tuple object at 0x118285590>]]
  - cmd: Group
**CommandCollection**
  - rv: t.Set[str]
**Parameter**
  - rv: t.Optional[t.Any]
**Option**
  - rv: t.Optional[t.Any]
  - prompt_text: t.Optional[str]
**Argument**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/core.py`  
**Dependencies**: `enum`, `errno`, `inspect`, `os`, `sys`, `typing`, `collections.abc`, `contextlib.contextmanager`, `contextlib.ExitStack`, `functools.update_wrapper`, `gettext.gettext`, `gettext.ngettext`, `itertools.repeat`, `types.TracebackType`, `types`, `exceptions.Abort`, `exceptions.BadParameter`, `exceptions.ClickException`, `exceptions.Exit`, `exceptions.MissingParameter`, `exceptions.UsageError`, `formatting.HelpFormatter`, `formatting.join_options`, `globals.pop_context`, `globals.push_context`, `parser._flag_needs_value`, `parser.OptionParser`, `parser.split_opt`, `termui.confirm`, `termui.prompt`, `termui.style`, `utils._detect_program_name`, `utils._expand_args`, `utils.echo`, `utils.make_default_short_help`, `utils.make_str`, `utils.PacifyFlushWrapper`, `typing_extensions`, `decorators.HelpOption`, `shell_completion.CompletionItem`, `click.shell_completion.CompletionItem`, `shell_completion.shell_complete`, `click.shell_completion.CompletionItem`, `click.shell_completion.CompletionItem`, `decorators.command`, `decorators.group`, `decorators.HelpOption`, `click.shell_completion.CompletionItem`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click.types
:::{doc} ParamType:24
Represents the type of a parameter. Validates and converts values
from the command line or Python into the correct type.

To implement a custom type, subclass and implement at least the
following:

-   The :attr:`name` class attribute must be set.
-   Calling an instance of the type with ``None`` must return
    ``None``. This is already implemented by default.
-   :meth:`convert` must convert string values to the correct type.
-   :meth:`convert` must accept values that are already the correct
    type.
-   It must be able to convert a value if the ``ctx`` and ``param``
    arguments are ``None``. This can occur when converting prompt
    input.
:::
:::{doc} Choice:227
The choice type allows a value to be checked against a fixed set
of supported values. All of these values have to be strings.

You should only pass a list or tuple of choices. Other iterables
(like generators) may lead to surprising results.

The resulting value will always be one of the originally passed choices
regardless of ``case_sensitive`` or any ``ctx.token_normalize_func``
being specified.

See :ref:`choice-opts` for an example.

:param case_sensitive: Set to false to make choices case
    insensitive. Defaults to true.
:::
:::{doc} DateTime:334
The DateTime type converts date strings into `datetime` objects.

The format strings which are checked are configurable, but default to some
common (non-timezone aware) ISO 8601 formats.

When specifying *DateTime* formats, you should only pass a list or a tuple.
Other iterables, like generators, may lead to surprising results.

The format strings are processed using ``datetime.strptime``, and this
consequently defines the format strings which are allowed.

Parsing is tried using each format, in order, and the first format which
parses successfully is used.

:param formats: A list or tuple of date format strings, in the order in
                which they should be tried. Defaults to
                ``'%Y-%m-%d'``, ``'%Y-%m-%dT%H:%M:%S'``,
                ``'%Y-%m-%d %H:%M:%S'``.
:::
:::{doc} IntRange:517
Restrict an :data:`click.INT` value to a range of accepted
values. See :ref:`ranges`.

If ``min`` or ``max`` are not passed, any value is accepted in that
direction. If ``min_open`` or ``max_open`` are enabled, the
corresponding boundary is not included in the range.

If ``clamp`` is enabled, a value outside the range is clamped to the
boundary instead of failing.

.. versionchanged:: 8.0
    Added the ``min_open`` and ``max_open`` parameters.
:::
:::{doc} FloatRange:551
Restrict a :data:`click.FLOAT` value to a range of accepted
values. See :ref:`ranges`.

If ``min`` or ``max`` are not passed, any value is accepted in that
direction. If ``min_open`` or ``max_open`` are enabled, the
corresponding boundary is not included in the range.

If ``clamp`` is enabled, a value outside the range is clamped to the
boundary instead of failing. This is not supported if either
boundary is marked ``open``.

.. versionchanged:: 8.0
    Added the ``min_open`` and ``max_open`` parameters.
:::
:::{doc} File:643
Declares a parameter to be a file for reading or writing.  The file
is automatically closed once the context tears down (after the command
finished working).

Files can be opened for reading or writing.  The special value ``-``
indicates stdin or stdout depending on the mode.

By default, the file is opened for reading text data, but it can also be
opened in binary mode or for writing.  The encoding parameter can be used
to force a specific encoding.

The `lazy` flag controls if the file should be opened immediately or upon
first IO. The default is to be non-lazy for standard input and output
streams as well as files opened for reading, `lazy` otherwise. When opening a
file lazily for reading, it is still opened temporarily for validation, but
will not be held open until first IO. lazy is mainly useful when opening
for writing to avoid creating the file until it is needed.

Files can also be opened atomically in which case all writes go into a
separate file in the same folder and upon completion the file will
be moved over to the original location.  This is useful if a file
regularly read by other users is modified.

See :ref:`file-args` for more information.

.. versionchanged:: 2.0
    Added the ``atomic`` parameter.
:::
:::{doc} Path:768
The ``Path`` type is similar to the :class:`File` type, but
returns the filename instead of an open file. Various checks can be
enabled to validate the type of file and permissions.

:param exists: The file or directory needs to exist for the value to
    be valid. If this is not set to ``True``, and the file does not
    exist, then all further checks are silently skipped.
:param file_okay: Allow a file as a value.
:param dir_okay: Allow a directory as a value.
:param readable: if true, a readable check is performed.
:param writable: if true, a writable check is performed.
:param executable: if true, an executable check is performed.
:param resolve_path: Make the value absolute and resolve any
    symlinks. A ``~`` is not expanded, as this is supposed to be
    done by the shell only.
:param allow_dash: Allow a single dash as a value, which indicates
    a standard stream (but does not open it). Use
    :func:`~click.open_file` to handle opening this value.
:param path_type: Convert the incoming path value to this type. If
    ``None``, keep Python's default, which is ``str``. Useful to
    convert to :class:`pathlib.Path`.

.. versionchanged:: 8.1
    Added the ``executable`` parameter.

.. versionchanged:: 8.0
    Allow passing ``path_type=pathlib.Path``.

.. versionchanged:: 6.0
    Added the ``allow_dash`` parameter.
:::
:::{doc} Tuple:953
The default behavior of Click is to apply a type on a value directly.
This works well in most cases, except for when `nargs` is set to a fixed
count and different types should be used for different items.  In this
case the :class:`Tuple` type can be used.  This type can only be used
if `nargs` is set to a fixed number.

For more information see :ref:`tuple-type`.

This can be selected by using a Python tuple literal as a type.

:param types: a list of types that should be used for the tuple items.
:::
:::{doc} convert_type:1003
Find the most appropriate :class:`ParamType` for the given Python
type. If the type isn't provided, it can be inferred from a default
value.
:::
**Imports**: `os`, `stat`, `sys`, `typing`, `datetime.datetime`, `gettext.gettext`, `gettext.ngettext`, `_compat._get_argv_encoding`, `_compat.open_stream`, `exceptions.BadParameter`, `utils.format_filename`, `utils.LazyFile`, `utils.safecall`, `typing_extensions`, `core.Context`, `core.Parameter`, `shell_completion.CompletionItem`, `click.shell_completion.CompletionItem`, `operator`, `uuid`, `click.shell_completion.CompletionItem`, `click.shell_completion.CompletionItem`, `pathlib`
**Type References**: [[BoolParamType]], [[Choice]], [[ClassVar]], [[CompositeParamType]], [[DateTime]], [[File]], [[FloatParamType]], [[FloatRange]], [[FuncParamType]], [[IntParamType]], [[IntRange]], [[ParamType]], [[Path]], [[StringParamType]], [[Tuple]], [[UUIDParameterType]], [[UnprocessedParamType]], [[_NumberParamTypeBase]], [[_NumberRangeBase]], [[t.ClassVar]]

### Interface
- `_is_file_like`(value: t.Any) -> te.TypeGuard[t.IO[t.Any]]
- `convert_type`(ty: t.Optional[t.Any], default: t.Optional[t.Any]) -> ParamType
- `to_info_dict`() -> t.Dict[<ast.Tuple object at 0x1184f9250>]
- `__call__`(value: t.Any, param: t.Optional[Parameter], ctx: t.Optional[Context]) -> t.Any
- `get_metavar`(param: Parameter) -> str
- `get_missing_message`(param: Parameter) -> str
- `convert`(value: t.Any, param: t.Optional[Parameter], ctx: t.Optional[Context]) -> t.Any
- `split_envvar_value`(rv: str) -> t.Sequence[str]
- `fail`(message: str, param: t.Optional[Parameter], ctx: t.Optional[Context]) -> t.NoReturn
- `shell_complete`(ctx: Context, param: Parameter, incomplete: str) -> t.List[CompletionItem]
- `arity`() -> int
- `__init__`(types: t.Sequence[t.Union[<ast.Tuple object at 0x1184f3310>]]) -> None
- `__repr__`() -> str
- `_try_to_convert_date`(value: t.Any, format: str) -> t.Optional[datetime]
- `_clamp`(bound: float, dir: te.Literal[1, -1], open: bool) -> float
- `_describe_range`() -> str
- `resolve_lazy_flag`(value: t.Union[str, os.PathLike[str]]) -> bool
- `coerce_path_result`(value: t.Union[str, os.PathLike[str]]) -> t.Union[str, bytes, os.PathLike[str]]
- `name`() -> str

### Implementation
**ParamType**
  - is_composite: t.ClassVar[bool]
  - arity: t.ClassVar[int]
  - name: str
  - envvar_list_splitter: t.ClassVar[t.Optional[str]]
**CompositeParamType**

**FuncParamType**

**UnprocessedParamType**

**StringParamType**

**Choice**

**DateTime**

**_NumberParamTypeBase**
  - _number_class: t.ClassVar[t.Type[t.Any]]
**_NumberRangeBase**
  - lt_min: bool
  - gt_max: bool
**IntParamType**

**IntRange**

**FloatParamType**

**FloatRange**

**BoolParamType**

**UUIDParameterType**

**File**
  - envvar_list_splitter: t.ClassVar[str]
**Path**
  - envvar_list_splitter: t.ClassVar[str]
**Tuple**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/types.py`  
**Dependencies**: `os`, `stat`, `sys`, `typing`, `datetime.datetime`, `gettext.gettext`, `gettext.ngettext`, `_compat._get_argv_encoding`, `_compat.open_stream`, `exceptions.BadParameter`, `utils.format_filename`, `utils.LazyFile`, `utils.safecall`, `typing_extensions`, `core.Context`, `core.Parameter`, `shell_completion.CompletionItem`, `click.shell_completion.CompletionItem`, `operator`, `uuid`, `click.shell_completion.CompletionItem`, `click.shell_completion.CompletionItem`, `pathlib`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click.formatting
:::{doc} wrap_text:29
A helper function that intelligently wraps text.  By default, it
assumes that it operates on a single paragraph of text but if the
`preserve_paragraphs` parameter is provided it will intelligently
handle paragraphs (defined by two empty lines).

If paragraphs are handled, a paragraph can be prefixed with an empty
line containing the ``\b`` character (``\x08``) to indicate that
no rewrapping should happen in that block.

:param text: the text that should be rewrapped.
:param width: the maximum width for the text.
:param initial_indent: the initial indent that should be placed on the
                       first line as a string.
:param subsequent_indent: the indent string that should be placed on
                          each consecutive line.
:param preserve_paragraphs: if this flag is set then the wrapping will
                            intelligently handle paragraphs.
:::
:::{doc} HelpFormatter:102
This class helps with formatting text-based help pages.  It's
usually just needed for very special internal cases, but it's also
exposed so that developers can write their own fancy outputs.

At present, it always writes into memory.

:param indent_increment: the additional increment for each level.
:param width: the width for the text.  This defaults to the terminal
              width clamped to a maximum of 78.
:::
:::{doc} join_options:283
Given a list of option strings this joins them in the most appropriate
way and returns them in the form ``(formatted_string,
any_prefix_is_slash)`` where the second item in the tuple is a flag that
indicates if any of the option prefixes was a slash.
:::
**Imports**: `typing`, `contextlib.contextmanager`, `gettext.gettext`, `_compat.term_len`, `parser.split_opt`, `_textwrap.TextWrapper`, `shutil`
**Type References**: [[Dict]], [[HelpFormatter]], [[List]], [[Optional]], [[t.Dict]], [[t.List]], [[t.Optional]]

### Interface
- `measure_table`(rows: t.Iterable[t.Tuple[<ast.Tuple object at 0x11852f1d0>]]) -> t.Tuple[<ast.Tuple object at 0x11852cd50>]
- `iter_rows`(rows: t.Iterable[t.Tuple[<ast.Tuple object at 0x11852c650>]], col_count: int) -> t.Iterator[t.Tuple[<ast.Tuple object at 0x118527650>]]
- `wrap_text`(text: str, width: int, initial_indent: str, subsequent_indent: str, preserve_paragraphs: bool) -> str
- `join_options`(options: t.Sequence[str]) -> t.Tuple[<ast.Tuple object at 0x118576950>]
- `_flush_par`() -> None
- `__init__`(indent_increment: int, width: t.Optional[int], max_width: t.Optional[int]) -> None
- `write`(string: str) -> None
- `indent`() -> None
- `dedent`() -> None
- `write_usage`(prog: str, args: str, prefix: t.Optional[str]) -> None
- `write_heading`(heading: str) -> None
- `write_paragraph`() -> None
- `write_text`(text: str) -> None
- `write_dl`(rows: t.Sequence[t.Tuple[<ast.Tuple object at 0x11854e750>]], col_max: int, col_spacing: int) -> None
- `section`(name: str) -> t.Iterator[None]
- `indentation`() -> t.Iterator[None]
- `getvalue`() -> str

### Implementation
**HelpFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/formatting.py`  
**Dependencies**: `typing`, `contextlib.contextmanager`, `gettext.gettext`, `_compat.term_len`, `parser.split_opt`, `_textwrap.TextWrapper`, `shutil`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click.parser
:::{doc} _unpack_args:51
Given an iterable of arguments and an iterable of nargs specifications,
it returns a tuple with all the unpacked arguments at the first index
and all remaining arguments as the second.

The nargs specification is the number of arguments that should be consumed
or `-1` to indicate that this position should eat up all the remainders.

Missing items are filled with `None`.
:::
:::{doc} split_arg_string:127
Split an argument string as with :func:`shlex.split`, but don't
fail if the string is incomplete. Ignores a missing closing quote or
incomplete escape sequence and uses the partial token as-is.

.. code-block:: python

    split_arg_string("example 'my file")
    ["example", "my file"]

    split_arg_string("example my\")
    ["example", "my"]

:param string: String to split.
:::
:::{doc} OptionParser:255
The option parser is an internal class that is ultimately used to
parse options and arguments.  It's modelled after optparse and brings
a similar but vastly simplified API.  It should generally not be used
directly as the high level Click classes wrap it for you.

It's not nearly as extensible as optparse or argparse as it does not
implement features that are implemented on a higher level (such as
types or defaults).

:param ctx: optionally the :class:`~click.Context` where this parser
            should go with.
:::
**Imports**: `typing`, `collections.deque`, `gettext.gettext`, `gettext.ngettext`, `exceptions.BadArgumentUsage`, `exceptions.BadOptionUsage`, `exceptions.NoSuchOption`, `exceptions.UsageError`, `typing_extensions`, `core.Argument`, `core.Context`, `core.Option`, `core.Parameter`, `shlex`, `difflib.get_close_matches`
**Type References**: [[Argument]], [[List]], [[None]], [[Option]], [[OptionParser]], [[Optional]], [[ParsingState]], [[t.List]], [[t.Optional]]

### Interface
- `_unpack_args`(args: t.Sequence[str], nargs_spec: t.Sequence[int]) -> t.Tuple[<ast.Tuple object at 0x11858a410>]
- `split_opt`(opt: str) -> t.Tuple[<ast.Tuple object at 0x118583cd0>]
- `normalize_opt`(opt: str, ctx: t.Optional[Context]) -> str
- `split_arg_string`(string: str) -> t.List[str]
- `_fetch`(c: te.Deque[V]) -> t.Optional[V]
- `__init__`(ctx: t.Optional[Context]) -> None
- `takes_value`() -> bool
- `process`(value: t.Union[<ast.Tuple object at 0x118591690>], state: ParsingState) -> None
- `add_option`(obj: CoreOption, opts: t.Sequence[str], dest: t.Optional[str], action: t.Optional[str], nargs: int, const: t.Optional[t.Any]) -> None
- `add_argument`(obj: CoreArgument, dest: t.Optional[str], nargs: int) -> None
- `parse_args`(args: t.List[str]) -> t.Tuple[<ast.Tuple object at 0x1185dce10>]
- `_process_args_for_args`(state: ParsingState) -> None
- `_process_args_for_options`(state: ParsingState) -> None
- `_match_long_opt`(opt: str, explicit_value: t.Optional[str], state: ParsingState) -> None
- `_match_short_opt`(arg: str, state: ParsingState) -> None
- `_get_value_from_state`(option_name: str, option: Option, state: ParsingState) -> t.Any
- `_process_opts`(arg: str, state: ParsingState) -> None

### Implementation
**Option**

**Argument**

**ParsingState**

**OptionParser**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/parser.py`  
**Dependencies**: `typing`, `collections.deque`, `gettext.gettext`, `gettext.ngettext`, `exceptions.BadArgumentUsage`, `exceptions.BadOptionUsage`, `exceptions.NoSuchOption`, `exceptions.UsageError`, `typing_extensions`, `core.Argument`, `core.Context`, `core.Option`, `core.Parameter`, `shlex`, `difflib.get_close_matches`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click.termui
:::{doc} prompt:79
Prompts a user for input.  This is a convenience function that can
be used to prompt a user for input later.

If the user aborts the input by sending an interrupt signal, this
function will catch it and raise a :exc:`Abort` exception.

:param text: the text to show for the prompt.
:param default: the default value to use if no input happens.  If this
                is not given it will prompt until it's aborted.
:param hide_input: if this is set to true then the input value will
                   be hidden.
:param confirmation_prompt: Prompt a second time to confirm the
    value. Can be set to a string instead of ``True`` to customize
    the message.
:param type: the type to use to check the value against.
:param value_proc: if this parameter is provided it's a function that
                   is invoked instead of the type conversion to
                   convert a value.
:param prompt_suffix: a suffix that should be added to the prompt.
:param show_default: shows or hides the default value in the prompt.
:param err: if set to true the file defaults to ``stderr`` instead of
            ``stdout``, the same as with echo.
:param show_choices: Show or hide choices if the passed type is a Choice.
                     For example if type is a Choice of either day or week,
                     show_choices is true and text is "Group by" then the
                     prompt will be "Group by (day, week): ".

.. versionadded:: 8.0
    ``confirmation_prompt`` can be a custom string.

.. versionadded:: 7.0
    Added the ``show_choices`` parameter.

.. versionadded:: 6.0
    Added unicode support for cmd.exe on Windows.

.. versionadded:: 4.0
    Added the `err` parameter.
:::
:::{doc} confirm:190
Prompts for confirmation (yes/no question).

If the user aborts the input by sending a interrupt signal this
function will catch it and raise a :exc:`Abort` exception.

:param text: the question to ask.
:param default: The default value to use when no input is given. If
    ``None``, repeat until input is given.
:param abort: if this is set to `True` a negative answer aborts the
              exception by raising :exc:`Abort`.
:param prompt_suffix: a suffix that should be added to the prompt.
:param show_default: shows or hides the default value in the prompt.
:param err: if set to true the file defaults to ``stderr`` instead of
            ``stdout``, the same as with echo.

.. versionchanged:: 8.0
    Repeat until input is given if ``default`` is ``None``.

.. versionadded:: 4.0
    Added the ``err`` parameter.
:::
:::{doc} echo_via_pager:251
This function takes a text and shows it via an environment specific
pager on stdout.

.. versionchanged:: 3.0
   Added the `color` flag.

:param text_or_generator: the text to page, or alternatively, a
                          generator emitting the text to page.
:param color: controls if the pager supports ANSI colors or not.  The
              default is autodetection.
:::
:::{doc} progressbar:283
This function creates an iterable context manager that can be used
to iterate over something while showing a progress bar.  It will
either iterate over the `iterable` or `length` items (that are counted
up).  While iteration happens, this function will print a rendered
progress bar to the given `file` (defaults to stdout) and will attempt
to calculate remaining time and more.  By default, this progress bar
will not be rendered if the file is not a terminal.

The context manager creates the progress bar.  When the context
manager is entered the progress bar is already created.  With every
iteration over the progress bar, the iterable passed to the bar is
advanced and the bar is updated.  When the context manager exits,
a newline is printed and the progress bar is finalized on screen.

Note: The progress bar is currently designed for use cases where the
total progress can be expected to take at least several seconds.
Because of this, the ProgressBar class object won't display
progress that is considered too fast, and progress where the time
between steps is less than a second.

No printing must happen or the progress bar will be unintentionally
destroyed.

Example usage::

    with progressbar(items) as bar:
        for item in bar:
            do_something_with(item)

Alternatively, if no iterable is specified, one can manually update the
progress bar through the `update()` method instead of directly
iterating over the progress bar.  The update method accepts the number
of steps to increment the bar with::

    with progressbar(length=chunks.total_bytes) as bar:
        for chunk in chunks:
            process_chunk(chunk)
            bar.update(chunks.bytes)

The ``update()`` method also takes an optional value specifying the
``current_item`` at the new position. This is useful when used
together with ``item_show_func`` to customize the output for each
manual step::

    with click.progressbar(
        length=total_size,
        label='Unzipping archive',
        item_show_func=lambda a: a.filename
    ) as bar:
        for archive in zip_file:
            archive.extract()
            bar.update(archive.size, archive)

:param iterable: an iterable to iterate over.  If not provided the length
                 is required.
:param length: the number of items to iterate over.  By default the
               progressbar will attempt to ask the iterator about its
               length, which might or might not work.  If an iterable is
               also provided this parameter can be used to override the
               length.  If an iterable is not provided the progress bar
               will iterate over a range of that length.
:param label: the label to show next to the progress bar.
:param show_eta: enables or disables the estimated time display.  This is
                 automatically disabled if the length cannot be
                 determined.
:param show_percent: enables or disables the percentage display.  The
                     default is `True` if the iterable has a length or
                     `False` if not.
:param show_pos: enables or disables the absolute position display.  The
                 default is `False`.
:param item_show_func: A function called with the current item which
    can return a string to show next to the progress bar. If the
    function returns ``None`` nothing is shown. The current item can
    be ``None``, such as when entering and exiting the bar.
:param fill_char: the character to use to show the filled part of the
                  progress bar.
:param empty_char: the character to use to show the non-filled part of
                   the progress bar.
:param bar_template: the format string to use as template for the bar.
                     The parameters in it are ``label`` for the label,
                     ``bar`` for the progress bar and ``info`` for the
                     info section.
:param info_sep: the separator between multiple info items (eta etc.)
:param width: the width of the progress bar in characters, 0 means full
              terminal width
:param file: The file to write to. If this is not a terminal then
    only the label is printed.
:param color: controls if the terminal supports ANSI colors or not.  The
              default is autodetection.  This is only needed if ANSI
              codes are included anywhere in the progress bar output
              which is not the case by default.
:param update_min_steps: Render only when this many updates have
    completed. This allows tuning for very fast iterators.

.. versionchanged:: 8.0
    Output is shown even if execution time is less than 0.5 seconds.

.. versionchanged:: 8.0
    ``item_show_func`` shows the current item, not the previous one.

.. versionchanged:: 8.0
    Labels are echoed if the output is not a TTY. Reverts a change
    in 7.0 that removed all output.

.. versionadded:: 8.0
   Added the ``update_min_steps`` parameter.

.. versionchanged:: 4.0
    Added the ``color`` parameter. Added the ``update`` method to
    the object.

.. versionadded:: 2.0
:::
:::{doc} clear:435
Clears the terminal screen.  This will have the effect of clearing
the whole visible space of the terminal and moving the cursor to the
top left.  This does not do anything if not connected to a terminal.

.. versionadded:: 2.0
:::
:::{doc} style:462
Styles a text with ANSI styles and returns the new string.  By
default the styling is self contained which means that at the end
of the string a reset code is issued.  This can be prevented by
passing ``reset=False``.

Examples::

    click.echo(click.style('Hello World!', fg='green'))
    click.echo(click.style('ATTENTION!', blink=True))
    click.echo(click.style('Some things', reverse=True, fg='cyan'))
    click.echo(click.style('More colors', fg=(255, 12, 128), bg=117))

Supported color names:

* ``black`` (might be a gray)
* ``red``
* ``green``
* ``yellow`` (might be an orange)
* ``blue``
* ``magenta``
* ``cyan``
* ``white`` (might be light gray)
* ``bright_black``
* ``bright_red``
* ``bright_green``
* ``bright_yellow``
* ``bright_blue``
* ``bright_magenta``
* ``bright_cyan``
* ``bright_white``
* ``reset`` (reset the color code only)

If the terminal supports it, color may also be specified as:

-   An integer in the interval [0, 255]. The terminal must support
    8-bit/256-color mode.
-   An RGB tuple of three integers in [0, 255]. The terminal must
    support 24-bit/true-color mode.

See https://en.wikipedia.org/wiki/ANSI_color and
https://gist.github.com/XVilka/8346728 for more information.

:param text: the string to style with ansi codes.
:param fg: if provided this will become the foreground color.
:param bg: if provided this will become the background color.
:param bold: if provided this will enable or disable bold mode.
:param dim: if provided this will enable or disable dim mode.  This is
            badly supported.
:param underline: if provided this will enable or disable underline.
:param overline: if provided this will enable or disable overline.
:param italic: if provided this will enable or disable italic.
:param blink: if provided this will enable or disable blinking.
:param reverse: if provided this will enable or disable inverse
                rendering (foreground becomes background and the
                other way round).
:param strikethrough: if provided this will enable or disable
    striking through text.
:param reset: by default a reset-all code is added at the end of the
              string which means that styles do not carry over.  This
              can be disabled to compose styles.

.. versionchanged:: 8.0
    A non-string ``message`` is converted to a string.

.. versionchanged:: 8.0
   Added support for 256 and RGB color codes.

.. versionchanged:: 8.0
    Added the ``strikethrough``, ``italic``, and ``overline``
    parameters.

.. versionchanged:: 7.0
    Added support for bright colors.

.. versionadded:: 2.0
:::
:::{doc} unstyle:591
Removes ANSI styling information from a string.  Usually it's not
necessary to use this function as Click's echo function will
automatically remove styling if necessary.

.. versionadded:: 2.0

:param text: the text to remove style information from.
:::
:::{doc} secho:603
This function combines :func:`echo` and :func:`style` into one
call.  As such the following two calls are the same::

    click.secho('Hello World!', fg='green')
    click.echo(click.style('Hello World!', fg='green'))

All keyword arguments are forwarded to the underlying functions
depending on which one they go with.

Non-string types will be converted to :class:`str`. However,
:class:`bytes` are passed directly to :meth:`echo` without applying
style. If you want to style bytes that represent text, call
:meth:`bytes.decode` first.

.. versionchanged:: 8.0
    A non-string ``message`` is converted to a string. Bytes are
    passed through without style applied.

.. versionadded:: 2.0
:::
:::{doc} edit:637
Edits the given text in the defined editor.  If an editor is given
(should be the full path to the executable but the regular operating
system search path is used for finding the executable) it overrides
the detected editor.  Optionally, some environment variables can be
used.  If the editor is closed without changes, `None` is returned.  In
case a file is edited directly the return value is always `None` and
`require_save` and `extension` are ignored.

If the editor cannot be opened a :exc:`UsageError` is raised.

Note for Windows: to simplify cross-platform usage, the newlines are
automatically converted from POSIX to Windows and vice versa.  As such,
the message here will have ``\n`` as newline markers.

:param text: the text to edit.
:param editor: optionally the editor to use.  Defaults to automatic
               detection.
:param env: environment variables to forward to the editor.
:param require_save: if this is true, then not saving in the editor
                     will make the return value become `None`.
:param extension: the extension to tell the editor about.  This defaults
                  to `.txt` but changing this might change syntax
                  highlighting.
:param filename: if provided it will edit this file instead of the
                 provided text contents.  It will not use a temporary
                 file as an indirection in that case.
:::
:::{doc} launch:683
This function launches the given URL (or filename) in the default
viewer application for this file type.  If this is an executable, it
might launch the executable in a new session.  The return value is
the exit code of the launched application.  Usually, ``0`` indicates
success.

Examples::

    click.launch('https://click.palletsprojects.com/')
    click.launch('/my/downloaded/file', locate=True)

.. versionadded:: 2.0

:param url: URL or filename of the thing to launch.
:param wait: Wait for the program to exit before returning. This
    only works if the launched program blocks. In particular,
    ``xdg-open`` on Linux does not block.
:param locate: if this is set to `True` then instead of launching the
               application associated with the URL it will attempt to
               launch a file manager with the file located.  This
               might have weird effects if the URL does not point to
               the filesystem.
:::
:::{doc} getchar:717
Fetches a single character from the terminal and returns it.  This
will always return a unicode character and under certain rare
circumstances this might return more than one character.  The
situations which more than one character is returned is when for
whatever reason multiple characters end up in the terminal buffer or
standard input was not actually a terminal.

Note that this will always read from the terminal, even if something
is piped into the standard input.

Note for Windows: in rare cases when typing non-ASCII characters, this
function might wait for a second character and then return both at once.
This is because certain Unicode characters look like special-key markers.

.. versionadded:: 2.0

:param echo: if set to `True`, the character read will also show up on
             the terminal.  The default is to not show it.
:::
:::{doc} pause:753
This command stops execution and waits for the user to press any
key to continue.  This is similar to the Windows batch "pause"
command.  If the program is not run through a terminal, this command
will instead do nothing.

.. versionadded:: 2.0

.. versionadded:: 4.0
   Added the `err` parameter.

:param info: The message to print before pausing. Defaults to
    ``"Press any key to continue..."``.
:param err: if set to message goes to ``stderr`` instead of
            ``stdout``, the same as with echo.
:::
**Imports**: `inspect`, `io`, `itertools`, `sys`, `typing`, `gettext.gettext`, `_compat.isatty`, `_compat.strip_ansi`, `exceptions.Abort`, `exceptions.UsageError`, `globals.resolve_color_default`, `types.Choice`, `types.convert_type`, `types.ParamType`, `utils.echo`, `utils.LazyFile`, `_termui_impl.ProgressBar`, `getpass`, `_termui_impl.pager`, `_termui_impl.ProgressBar`, `_termui_impl.Editor`, `_termui_impl.open_url`, `_termui_impl.raw_terminal`, `_termui_impl.getchar`
**Type References**: [[Callable]], [[Optional]], [[t.Callable]], [[t.Optional]]

### Interface
- `hidden_prompt_func`(prompt: str) -> str
- `_build_prompt`(text: str, suffix: str, show_default: bool, default: t.Optional[t.Any], show_choices: bool, type: t.Optional[ParamType]) -> str
- `_format_default`(default: t.Any) -> t.Any
- `prompt`(text: str, default: t.Optional[t.Any], hide_input: bool, confirmation_prompt: t.Union[<ast.Tuple object at 0x11861f0d0>], type: t.Optional[t.Union[<ast.Tuple object at 0x11861eb90>]], value_proc: t.Optional[t.Callable[<ast.Tuple object at 0x11861e5d0>]], prompt_suffix: str, show_default: bool, err: bool, show_choices: bool) -> t.Any
- `confirm`(text: str, default: t.Optional[bool], abort: bool, prompt_suffix: str, show_default: bool, err: bool) -> bool
- `echo_via_pager`(text_or_generator: t.Union[<ast.Tuple object at 0x118633910>], color: t.Optional[bool]) -> None
- `progressbar`(iterable: t.Optional[t.Iterable[V]], length: t.Optional[int], label: t.Optional[str], show_eta: bool, show_percent: t.Optional[bool], show_pos: bool, item_show_func: t.Optional[t.Callable[<ast.Tuple object at 0x11862aa50>]], fill_char: str, empty_char: str, bar_template: str, info_sep: str, width: int, file: t.Optional[t.TextIO], color: t.Optional[bool], update_min_steps: int) -> ProgressBar[V]
- `clear`() -> None
- `_interpret_color`(color: t.Union[<ast.Tuple object at 0x118661710>], offset: int) -> str
- `style`(text: t.Any, fg: t.Optional[t.Union[<ast.Tuple object at 0x1186688d0>]], bg: t.Optional[t.Union[<ast.Tuple object at 0x1186691d0>]], bold: t.Optional[bool], dim: t.Optional[bool], underline: t.Optional[bool], overline: t.Optional[bool], italic: t.Optional[bool], blink: t.Optional[bool], reverse: t.Optional[bool], strikethrough: t.Optional[bool], reset: bool) -> str
- `unstyle`(text: str) -> str
- `secho`(message: t.Optional[t.Any], file: t.Optional[t.IO[t.AnyStr]], nl: bool, err: bool, color: t.Optional[bool]) -> None
- `edit`(text: t.Optional[t.AnyStr], editor: t.Optional[str], env: t.Optional[t.Mapping[<ast.Tuple object at 0x11868b110>]], require_save: bool, extension: str, filename: t.Optional[str]) -> t.Optional[t.AnyStr]
- `launch`(url: str, wait: bool, locate: bool) -> int
- `getchar`(echo: bool) -> str
- `raw_terminal`() -> t.ContextManager[int]
- `pause`(info: t.Optional[str], err: bool) -> None
- `prompt_func`(text: str) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/termui.py`  
**Dependencies**: `inspect`, `io`, `itertools`, `sys`, `typing`, `gettext.gettext`, `_compat.isatty`, `_compat.strip_ansi`, `exceptions.Abort`, `exceptions.UsageError`, `globals.resolve_color_default`, `types.Choice`, `types.convert_type`, `types.ParamType`, `utils.echo`, `utils.LazyFile`, `_termui_impl.ProgressBar`, `getpass`, `_termui_impl.pager`, `_termui_impl.ProgressBar`, `_termui_impl.Editor`, `_termui_impl.open_url`, `_termui_impl.raw_terminal`, `_termui_impl.getchar`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click.utils
:::{doc} safecall:33
Wraps a function so that it swallows exceptions.
:::
:::{doc} make_str:46
Converts a value into a valid string.
:::
:::{doc} make_default_short_help:56
Returns a condensed version of help string.
:::
:::{doc} LazyFile:106
A lazy file works like a regular file but it does not fully open
the file but it does perform some basic checks early to see if the
filename parameter does make sense.  This is useful for safely opening
files for writing.
:::
:::{doc} echo:219
Print a message and newline to stdout or a file. This should be
used instead of :func:`print` because it provides better support
for different data, files, and environments.

Compared to :func:`print`, this does the following:

-   Ensures that the output encoding is not misconfigured on Linux.
-   Supports Unicode in the Windows console.
-   Supports writing to binary outputs, and supports writing bytes
    to text outputs.
-   Supports colors and styles on Windows.
-   Removes ANSI color and style codes if the output does not look
    like an interactive terminal.
-   Always flushes the output.

:param message: The string or bytes to output. Other objects are
    converted to strings.
:param file: The file to write to. Defaults to ``stdout``.
:param err: Write to ``stderr`` instead of ``stdout``.
:param nl: Print a newline after the message. Enabled by default.
:param color: Force showing or hiding colors and other styles. By
    default Click will remove color if the output does not look like
    an interactive terminal.

.. versionchanged:: 6.0
    Support Unicode output on the Windows console. Click does not
    modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``
    will still not support Unicode.

.. versionchanged:: 4.0
    Added the ``color`` parameter.

.. versionadded:: 3.0
    Added the ``err`` parameter.

.. versionchanged:: 2.0
    Support colors on Windows if colorama is installed.
:::
:::{doc} get_binary_stream:322
Returns a system stream for byte processing.

:param name: the name of the stream to open.  Valid names are ``'stdin'``,
             ``'stdout'`` and ``'stderr'``
:::
:::{doc} get_text_stream:334
Returns a system stream for text processing.  This usually returns
a wrapped stream around a binary stream returned from
:func:`get_binary_stream` but it also can take shortcuts for already
correctly configured streams.

:param name: the name of the stream to open.  Valid names are ``'stdin'``,
             ``'stdout'`` and ``'stderr'``
:param encoding: overrides the detected default encoding.
:param errors: overrides the default error mode.
:::
:::{doc} open_file:355
Open a file, with extra behavior to handle ``'-'`` to indicate
a standard stream, lazy open on write, and atomic write. Similar to
the behavior of the :class:`~click.File` param type.

If ``'-'`` is given to open ``stdout`` or ``stdin``, the stream is
wrapped so that using it in a context manager will not close it.
This makes it possible to use the function without accidentally
closing a standard stream:

.. code-block:: python

    with open_file(filename) as f:
        ...

:param filename: The name or Path of the file to open, or ``'-'`` for
    ``stdin``/``stdout``.
:param mode: The mode in which to open the file.
:param encoding: The encoding to decode or encode a file opened in
    text mode.
:param errors: The error handling mode.
:param lazy: Wait to open the file until it is accessed. For read
    mode, the file is temporarily opened to raise access errors
    early, then closed until it is read again.
:param atomic: Write to a temporary file and replace the given file
    on close.

.. versionadded:: 3.0
:::
:::{doc} format_filename:404
Format a filename as a string for display. Ensures the filename can be
displayed by replacing any invalid bytes or surrogate escapes in the name
with the replacement character ``�``.

Invalid bytes or surrogate escapes will raise an error when written to a
stream with ``errors="strict"``. This will typically happen with ``stdout``
when the locale is something like ``en_GB.UTF-8``.

Many scenarios *are* safe to write surrogates though, due to PEP 538 and
PEP 540, including:

-   Writing to ``stderr``, which uses ``errors="backslashreplace"``.
-   The system has ``LANG=C.UTF-8``, ``C``, or ``POSIX``. Python opens
    stdout and stderr with ``errors="surrogateescape"``.
-   None of ``LANG/LC_*`` are set. Python assumes ``LANG=C.UTF-8``.
-   Python is started in UTF-8 mode  with  ``PYTHONUTF8=1`` or ``-X utf8``.
    Python opens stdout and stderr with ``errors="surrogateescape"``.

:param filename: formats a filename for UI display.  This will also convert
                 the filename into unicode without failing.
:param shorten: this optionally shortens the filename to strip of the
                path that leads up to it.
:::
:::{doc} get_app_dir:446
Returns the config folder for the application.  The default behavior
is to return whatever is most appropriate for the operating system.

To give you an idea, for an app called ``"Foo Bar"``, something like
the following folders could be returned:

Mac OS X:
  ``~/Library/Application Support/Foo Bar``
Mac OS X (POSIX):
  ``~/.foo-bar``
Unix:
  ``~/.config/foo-bar``
Unix (POSIX):
  ``~/.foo-bar``
Windows (roaming):
  ``C:\Users\<user>\AppData\Roaming\Foo Bar``
Windows (not roaming):
  ``C:\Users\<user>\AppData\Local\Foo Bar``

.. versionadded:: 2.0

:param app_name: the application name.  This should be properly capitalized
                 and can contain whitespace.
:param roaming: controls if the folder should be roaming or not on Windows.
                Has no effect otherwise.
:param force_posix: if this is set to `True` then on any POSIX system the
                    folder will be stored in the home folder with a leading
                    dot instead of the XDG config home or darwin's
                    application support folder.
:::
:::{doc} PacifyFlushWrapper:495
This wrapper is used to catch and suppress BrokenPipeErrors resulting
from ``.flush()`` being called on broken pipe during the shutdown/final-GC
of the Python interpreter. Notably ``.flush()`` is always called on
``sys.stdout`` and ``sys.stderr``. So as to have minimal impact on any
other cleanup code, and the case where the underlying file is not a broken
pipe, all calls and attributes are proxied.
:::
:::{doc} _detect_program_name:520
Determine the command used to run the program, for use in help
text. If a file or entry point was executed, the file name is
returned. If ``python -m`` was used to execute a module or package,
``python -m name`` is returned.

This doesn't try to be too precise, the goal is to give a concise
name for help text. Files are only shown as their name without the
path. ``python`` is only shown for modules, and the full path to
``sys.executable`` is not shown.

:param path: The Python file being executed. Python puts this in
    ``sys.argv[0]``, which is used by default.
:param _main: The ``__main__`` module. This should only be passed
    during internal testing.

.. versionadded:: 8.0
    Based on command args detection in the Werkzeug reloader.

:meta private:
:::
:::{doc} _expand_args:575
Simulate Unix shell expansion with Python functions.

See :func:`glob.glob`, :func:`os.path.expanduser`, and
:func:`os.path.expandvars`.

This is intended for use on Windows, where the shell does not do any
expansion. It may not exactly match what a Unix shell would do.

:param args: List of command line arguments to expand.
:param user: Expand user home directory.
:param env: Expand environment variables.
:param glob_recursive: ``**`` matches directories recursively.

.. versionchanged:: 8.1
    Invalid glob patterns are treated as empty expansions rather
    than raising an error.

.. versionadded:: 8.0

:meta private:
:::
**Imports**: `os`, `re`, `sys`, `typing`, `functools.update_wrapper`, `types.ModuleType`, `types.TracebackType`, `_compat._default_text_stderr`, `_compat._default_text_stdout`, `_compat._find_binary_writer`, `_compat.auto_wrap_for_ansi`, `_compat.binary_streams`, `_compat.open_stream`, `_compat.should_strip_ansi`, `_compat.strip_ansi`, `_compat.text_streams`, `_compat.WIN`, `globals.resolve_color_default`, `typing_extensions`, `glob.glob`, `exceptions.FileError`, `errno`
**Type References**: [[KeepOpenFile]], [[LazyFile]], [[Optional]], [[PacifyFlushWrapper]], [[t.Optional]]

### Interface
- `_posixify`(name: str) -> str
- `safecall`(func: t.Callable[P, R]) -> t.Callable[P, t.Optional[R]]
- `make_str`(value: t.Any) -> str
- `make_default_short_help`(help: str, max_length: int) -> str
- `echo`(message: t.Optional[t.Any], file: t.Optional[t.IO[t.Any]], nl: bool, err: bool, color: t.Optional[bool]) -> None
- `get_binary_stream`(name: te.Literal['stdin', 'stdout', 'stderr']) -> t.BinaryIO
- `get_text_stream`(name: te.Literal['stdin', 'stdout', 'stderr'], encoding: t.Optional[str], errors: t.Optional[str]) -> t.TextIO
- `open_file`(filename: t.Union[<ast.Tuple object at 0x1186fcd50>], mode: str, encoding: t.Optional[str], errors: t.Optional[str], lazy: bool, atomic: bool) -> t.IO[t.Any]
- `format_filename`(filename: t.Union[str, bytes, os.PathLike[str], os.PathLike[bytes]], shorten: bool) -> str
- `get_app_dir`(app_name: str, roaming: bool, force_posix: bool) -> str
- `_detect_program_name`(path: t.Optional[str], _main: t.Optional[ModuleType]) -> str
- `_expand_args`(args: t.Iterable[str]) -> t.List[str]
- `wrapper`() -> t.Optional[R]
- `__init__`(wrapped: t.IO[t.Any]) -> None
- `__getattr__`(attr: str) -> t.Any
- `__repr__`() -> str
- `open`() -> t.IO[t.Any]
- `close`() -> None
- `close_intelligently`() -> None
- `__enter__`() -> KeepOpenFile
- `__exit__`(exc_type: t.Optional[t.Type[BaseException]], exc_value: t.Optional[BaseException], tb: t.Optional[TracebackType]) -> None
- `__iter__`() -> t.Iterator[t.AnyStr]
- `flush`() -> None

### Implementation
**LazyFile**

**KeepOpenFile**

**PacifyFlushWrapper**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/utils.py`  
**Dependencies**: `os`, `re`, `sys`, `typing`, `functools.update_wrapper`, `types.ModuleType`, `types.TracebackType`, `_compat._default_text_stderr`, `_compat._default_text_stdout`, `_compat._find_binary_writer`, `_compat.auto_wrap_for_ansi`, `_compat.binary_streams`, `_compat.open_stream`, `_compat.should_strip_ansi`, `_compat.strip_ansi`, `_compat.text_streams`, `_compat.WIN`, `globals.resolve_color_default`, `typing_extensions`, `glob.glob`, `exceptions.FileError`, `errno`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click.exceptions
:::{doc} ClickException:25
An exception that Click can handle and show to the user.
:::
:::{doc} UsageError:55
An internal exception that signals a usage error.  This typically
aborts any further handling.

:param message: the error message to display.
:param ctx: optionally the context that caused this error.  Click will
            fill in the context automatically in some situations.
:::
:::{doc} BadParameter:94
An exception that formats out a standardized error message for a
bad parameter.  This is useful when thrown from a callback or type as
Click will attach contextual information to it (for instance, which
parameter it is).

.. versionadded:: 2.0

:param param: the parameter object that caused this error.  This can
              be left out, and Click will attach this info itself
              if possible.
:param param_hint: a string that shows up as parameter name.  This
                   can be used as alternative to `param` in cases
                   where custom validation should happen.  If it is
                   a string it's used as such, if it's a list then
                   each item is quoted and separated.
:::
:::{doc} MissingParameter:136
Raised if click required an option or argument but it was not
provided when invoking the script.

.. versionadded:: 4.0

:param param_type: a string that indicates the type of the parameter.
                   The default is to inherit the parameter type from
                   the given `param`.  Valid values are ``'parameter'``,
                   ``'option'`` or ``'argument'``.
:::
:::{doc} NoSuchOption:205
Raised if click attempted to handle an option that does not
exist.

.. versionadded:: 4.0
:::
:::{doc} BadOptionUsage:239
Raised if an option is generally supplied but the use of the option
was incorrect.  This is for instance raised if the number of arguments
for an option is not correct.

.. versionadded:: 4.0

:param option_name: the name of the option being used incorrectly.
:::
:::{doc} BadArgumentUsage:256
Raised if an argument is generally supplied but the use of the argument
was incorrect.  This is for instance raised if the number of values
for an argument is not correct.

.. versionadded:: 6.0
:::
:::{doc} FileError:265
Raised if a file cannot be opened.
:::
:::{doc} Abort:282
An internal signalling exception that signals Click to abort.
:::
:::{doc} Exit:286
An exception that indicates that the application should exit with some
status code.

:param code: the status code to exit with.
:::
**Imports**: `typing`, `gettext.gettext`, `gettext.ngettext`, `_compat.get_text_stderr`, `globals.resolve_color_default`, `utils.echo`, `utils.format_filename`, `core.Command`, `core.Context`, `core.Parameter`
**Type References**: [[Abort]], [[BadArgumentUsage]], [[BadOptionUsage]], [[BadParameter]], [[ClickException]], [[Exit]], [[FileError]], [[MissingParameter]], [[NoSuchOption]], [[Optional]], [[UsageError]], [[t.Optional]]

### Interface
- `_join_param_hints`(param_hint: t.Optional[t.Union[<ast.Tuple object at 0x11874ad90>]]) -> t.Optional[str]
- `__init__`(code: int) -> None
- `format_message`() -> str
- `__str__`() -> str
- `show`(file: t.Optional[t.IO[t.Any]]) -> None

### Implementation
**ClickException**

**UsageError**

**BadParameter**

**MissingParameter**
  - param_hint: t.Optional[str]
**NoSuchOption**

**BadOptionUsage**

**BadArgumentUsage**

**FileError**

**Abort**

**Exit**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/exceptions.py`  
**Dependencies**: `typing`, `gettext.gettext`, `gettext.ngettext`, `_compat.get_text_stderr`, `globals.resolve_color_default`, `utils.echo`, `utils.format_filename`, `core.Command`, `core.Context`, `core.Parameter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click.shell_completion
:::{doc} shell_complete:17
Perform shell completion for the given CLI program.

:param cli: Command being called.
:param ctx_args: Extra arguments to pass to
    ``cli.make_context``.
:param prog_name: Name of the executable in the shell.
:param complete_var: Name of the environment variable that holds
    the completion instruction.
:param instruction: Value of ``complete_var`` with the completion
    instruction and shell, in the form ``instruction_shell``.
:return: Status code to exit with.
:::
:::{doc} CompletionItem:55
Represents a completion value and metadata about the value. The
default metadata is ``type`` to indicate special shell handling,
and ``help`` if a shell supports showing a help string next to the
value.

Arbitrary parameters can be passed when creating the object, and
accessed using ``item.attr``. If an attribute wasn't passed,
accessing it returns ``None``.

:param value: The completion suggestion.
:param type: Tells the shell script to provide special completion
    support for the type. Click uses ``"dir"`` and ``"file"``.
:param help: String shown next to the value if supported.
:param kwargs: Arbitrary metadata. The built-in implementations
    don't use this, but custom type completions paired with custom
    shell support could use it.
:::
:::{doc} ShellComplete:192
Base class for providing shell completion support. A subclass for
a given shell will override attributes and methods to implement the
completion instructions (``source`` and ``complete``).

:param cli: Command being called.
:param prog_name: Name of the executable in the shell.
:param complete_var: Name of the environment variable that holds
    the completion instruction.

.. versionadded:: 8.0
:::
:::{doc} BashComplete:298
Shell completion for Bash.
:::
:::{doc} ZshComplete:357
Shell completion for Zsh.
:::
:::{doc} FishComplete:379
Shell completion for Fish.
:::
:::{doc} add_completion_class:414
Register a :class:`ShellComplete` subclass under the given name.
The name will be provided by the completion instruction environment
variable during completion.

:param cls: The completion class that will handle completion for the
    shell.
:param name: Name to register the class under. Defaults to the
    class's ``name`` attribute.
:::
:::{doc} get_completion_class:434
Look up a registered :class:`ShellComplete` subclass by the name
provided by the completion instruction environment variable. If the
name isn't registered, returns ``None``.

:param shell: Name the class is registered under.
:::
:::{doc} _is_incomplete_argument:444
Determine if the given parameter is an argument that can still
accept values.

:param ctx: Invocation context for the command represented by the
    parsed complete args.
:param param: Argument object being checked.
:::
:::{doc} _start_of_option:469
Check if the value looks like the start of an option.
:::
:::{doc} _is_incomplete_option:478
Determine if the given parameter is an option that needs a value.

:param args: List of complete args before the incomplete value.
:param param: Option object being checked.
:::
:::{doc} _resolve_context:502
Produce the context hierarchy starting with the command and
traversing the complete arguments. This only follows the commands,
it doesn't trigger input prompts or callbacks.

:param cli: Command being called.
:param prog_name: Name of the executable in the shell.
:param args: List of complete args before the incomplete value.
:::
:::{doc} _resolve_incomplete:559
Find the Click object that will handle the completion of the
incomplete value. Return the object and the incomplete value.

:param ctx: Invocation context for the command represented by
    the parsed complete args.
:param args: List of complete args before the incomplete value.
:param incomplete: Value being completed. May be empty.
:::
**Imports**: `os`, `re`, `typing`, `gettext.gettext`, `core.Argument`, `core.BaseCommand`, `core.Context`, `core.MultiCommand`, `core.Option`, `core.Parameter`, `core.ParameterSource`, `parser.split_arg_string`, `utils.echo`, `shutil`, `subprocess`
**Type References**: [[BashComplete]], [[ClassVar]], [[CompletionItem]], [[Dict]], [[FishComplete]], [[ShellComplete]], [[ZshComplete]], [[t.ClassVar]], [[t.Dict]]

### Interface
- `shell_complete`(cli: BaseCommand, ctx_args: t.MutableMapping[<ast.Tuple object at 0x1187aec50>], prog_name: str, complete_var: str, instruction: str) -> int
- `add_completion_class`(cls: ShellCompleteType, name: t.Optional[str]) -> ShellCompleteType
- `get_completion_class`(shell: str) -> t.Optional[t.Type[ShellComplete]]
- `_is_incomplete_argument`(ctx: Context, param: Parameter) -> bool
- `_start_of_option`(ctx: Context, value: str) -> bool
- `_is_incomplete_option`(ctx: Context, args: t.List[str], param: Parameter) -> bool
- `_resolve_context`(cli: BaseCommand, ctx_args: t.MutableMapping[<ast.Tuple object at 0x1187ef010>], prog_name: str, args: t.List[str]) -> Context
- `_resolve_incomplete`(ctx: Context, args: t.List[str], incomplete: str) -> t.Tuple[<ast.Tuple object at 0x118808210>]
- `__init__`(cli: BaseCommand, ctx_args: t.MutableMapping[<ast.Tuple object at 0x118793090>], prog_name: str, complete_var: str) -> None
- `__getattr__`(name: str) -> t.Any
- `func_name`() -> str
- `source_vars`() -> t.Dict[<ast.Tuple object at 0x118790390>]
- `source`() -> str
- `get_completion_args`() -> t.Tuple[<ast.Tuple object at 0x1187d0610>]
- `get_completions`(args: t.List[str], incomplete: str) -> t.List[CompletionItem]
- `format_completion`(item: CompletionItem) -> str
- `complete`() -> str
- `_check_version`() -> None

### Implementation
**CompletionItem**

**ShellComplete**
  - name: t.ClassVar[str]
  - source_template: t.ClassVar[str]
**BashComplete**

**ZshComplete**

**FishComplete**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/shell_completion.py`  
**Dependencies**: `os`, `re`, `typing`, `gettext.gettext`, `core.Argument`, `core.BaseCommand`, `core.Context`, `core.MultiCommand`, `core.Option`, `core.Parameter`, `core.ParameterSource`, `parser.split_arg_string`, `utils.echo`, `shutil`, `subprocess`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click._compat
:::{doc} is_ascii_encoding:36
Checks if a given encoding is ascii.
:::
:::{doc} get_best_encoding:44
Returns the default stream encoding if not found.
:::
:::{doc} _FixupStream:78
The new io interface needs more from streams than streams
traditionally implement.  As such, this fix-up code is necessary in
some circumstances.

The forcing of readable and writable flags are there because some tools
put badly patched objects on sys (one such offender are certain version
of jupyter notebook).
:::
:::{doc} _stream_is_misconfigured:205
A stream is misconfigured if its encoding is ASCII.
:::
:::{doc} _is_compat_stream_attr:214
A stream attribute is compatible if it is equal to the
desired value or the desired value is unset and the attribute
has a value.
:::
:::{doc} _is_compatible_text_stream:223
Check if a stream's encoding and errors attributes are
compatible with the desired values.
:::
:::{doc} _wrap_io_open:360
Handles not passing ``encoding`` and ``errors`` in binary mode.
:::
**Imports**: `codecs`, `io`, `os`, `re`, `sys`, `typing`, `weakref.WeakKeyDictionary`, `errno`, `random`, `_winconsole._get_windows_console_stream`, `locale`, `colorama`
**Type References**: [[BinaryIO]], [[Mapping]], [[MutableMapping]], [[Optional]], [[TextIO]], [[_AtomicFile]], [[_FixupStream]], [[_NonClosingTextIOWrapper]], [[t.BinaryIO]], [[t.Mapping]], [[t.MutableMapping]], [[t.Optional]], [[t.TextIO]]

### Interface
- `_make_text_stream`(stream: t.BinaryIO, encoding: t.Optional[str], errors: t.Optional[str], force_readable: bool, force_writable: bool) -> t.TextIO
- `is_ascii_encoding`(encoding: str) -> bool
- `get_best_encoding`(stream: t.IO[t.Any]) -> str
- `_is_binary_reader`(stream: t.IO[t.Any], default: bool) -> bool
- `_is_binary_writer`(stream: t.IO[t.Any], default: bool) -> bool
- `_find_binary_reader`(stream: t.IO[t.Any]) -> t.Optional[t.BinaryIO]
- `_find_binary_writer`(stream: t.IO[t.Any]) -> t.Optional[t.BinaryIO]
- `_stream_is_misconfigured`(stream: t.TextIO) -> bool
- `_is_compat_stream_attr`(stream: t.TextIO, attr: str, value: t.Optional[str]) -> bool
- `_is_compatible_text_stream`(stream: t.TextIO, encoding: t.Optional[str], errors: t.Optional[str]) -> bool
- `_force_correct_text_stream`(text_stream: t.IO[t.Any], encoding: t.Optional[str], errors: t.Optional[str], is_binary: t.Callable[<ast.Tuple object at 0x118821890>], find_binary: t.Callable[<ast.Tuple object at 0x118821190>], force_readable: bool, force_writable: bool) -> t.TextIO
- `_force_correct_text_reader`(text_reader: t.IO[t.Any], encoding: t.Optional[str], errors: t.Optional[str], force_readable: bool) -> t.TextIO
- `_force_correct_text_writer`(text_writer: t.IO[t.Any], encoding: t.Optional[str], errors: t.Optional[str], force_writable: bool) -> t.TextIO
- `get_binary_stdin`() -> t.BinaryIO
- `get_binary_stdout`() -> t.BinaryIO
- `get_binary_stderr`() -> t.BinaryIO
- `get_text_stdin`(encoding: t.Optional[str], errors: t.Optional[str]) -> t.TextIO
- `get_text_stdout`(encoding: t.Optional[str], errors: t.Optional[str]) -> t.TextIO
- `get_text_stderr`(encoding: t.Optional[str], errors: t.Optional[str]) -> t.TextIO
- `_wrap_io_open`(file: t.Union[<ast.Tuple object at 0x118870250>], mode: str, encoding: t.Optional[str], errors: t.Optional[str]) -> t.IO[t.Any]
- `open_stream`(filename: t.Union[str, os.PathLike[str]], mode: str, encoding: t.Optional[str], errors: t.Optional[str], atomic: bool) -> t.Tuple[<ast.Tuple object at 0x11888c7d0>]
- `strip_ansi`(value: str) -> str
- `_is_jupyter_kernel_output`(stream: t.IO[t.Any]) -> bool
- `should_strip_ansi`(stream: t.Optional[t.IO[t.Any]], color: t.Optional[bool]) -> bool
- `term_len`(x: str) -> int
- `isatty`() -> bool
- `_make_cached_stream_func`(src_func: t.Callable[<ast.Tuple object at 0x1188bd190>], wrapper_func: t.Callable[<ast.Tuple object at 0x1188bd790>]) -> t.Callable[<ast.Tuple object at 0x1188c4750>]
- `__init__`(f: t.IO[t.Any], tmp_filename: str, real_filename: str) -> None
- `__del__`() -> None
- `__getattr__`(name: str) -> t.Any
- `read1`(size: int) -> bytes
- `readable`() -> bool
- `writable`() -> bool
- `seekable`() -> bool
- `name`() -> str
- `close`(delete: bool) -> None
- `__enter__`() -> _AtomicFile
- `__exit__`(exc_type: t.Optional[t.Type[BaseException]]) -> None
- `__repr__`() -> str
- `_get_argv_encoding`() -> str
- `auto_wrap_for_ansi`(stream: t.TextIO, color: t.Optional[bool]) -> t.TextIO
- `_get_windows_console_stream`(f: t.TextIO, encoding: t.Optional[str], errors: t.Optional[str]) -> t.Optional[t.TextIO]
- `func`() -> t.Optional[t.TextIO]
- `_safe_write`() -> Any

### Implementation
**_NonClosingTextIOWrapper**

**_FixupStream**

**_AtomicFile**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/_compat.py`  
**Dependencies**: `codecs`, `io`, `os`, `re`, `sys`, `typing`, `weakref.WeakKeyDictionary`, `errno`, `random`, `_winconsole._get_windows_console_stream`, `locale`, `colorama`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click._termui_impl
:::{doc} pager:362
Decide what method to use for paging through text.
:::
:::{doc} _pipepager:401
Page through text by feeding it to another program.  Invoking a
pager through this might support colors.

Returns True if the command was found, False otherwise and thus another
pager should be attempted.
:::
:::{doc} _tempfilepager:466
Page through text by invoking a program on a temporary file.

Returns True if the command was found, False otherwise and thus another
pager should be attempted.
:::
:::{doc} _nullpager:504
Simply print unformatted text.  This is the ultimate fallback.
:::
**Imports**: `contextlib`, `math`, `os`, `sys`, `time`, `typing`, `gettext.gettext`, `io.StringIO`, `shutil.which`, `types.TracebackType`, `_compat._default_text_stdout`, `_compat.CYGWIN`, `_compat.get_best_encoding`, `_compat.isatty`, `_compat.open_stream`, `_compat.strip_ansi`, `_compat.term_len`, `_compat.WIN`, `exceptions.ClickException`, `utils.echo`, `tempfile`, `subprocess`, `subprocess`, `tempfile`, `subprocess`, `msvcrt`, `termios`, `tty`, `shutil`, `subprocess`, `tempfile`, `urllib.parse.unquote`, `operator.length_hint`, `webbrowser`
**Type References**: [[BinaryIO]], [[Callable]], [[Editor]], [[Optional]], [[ProgressBar]], [[t.BinaryIO]], [[t.Callable]], [[t.Optional]]

### Interface
- `pager`(generator: t.Iterable[str], color: t.Optional[bool]) -> None
- `_pipepager`(generator: t.Iterable[str], cmd: str, color: t.Optional[bool]) -> bool
- `_tempfilepager`(generator: t.Iterable[str], cmd: str, color: t.Optional[bool]) -> bool
- `_nullpager`(stream: t.TextIO, generator: t.Iterable[str], color: t.Optional[bool]) -> None
- `open_url`(url: str, wait: bool, locate: bool) -> int
- `_translate_ch_to_exc`(ch: str) -> t.Optional[BaseException]
- `__init__`(editor: t.Optional[str], env: t.Optional[t.Mapping[<ast.Tuple object at 0x118973fd0>]], require_save: bool, extension: str) -> None
- `__enter__`() -> ProgressBar[V]
- `__exit__`(exc_type: t.Optional[t.Type[BaseException]], exc_value: t.Optional[BaseException], tb: t.Optional[TracebackType]) -> None
- `__iter__`() -> t.Iterator[V]
- `__next__`() -> V
- `render_finish`() -> None
- `pct`() -> float
- `time_per_iteration`() -> float
- `eta`() -> float
- `format_eta`() -> str
- `format_pos`() -> str
- `format_pct`() -> str
- `format_bar`() -> str
- `format_progress_line`() -> str
- `render_progress`() -> None
- `make_step`(n_steps: int) -> None
- `update`(n_steps: int, current_item: t.Optional[V]) -> None
- `finish`() -> None
- `generator`() -> t.Iterator[V]
- `get_editor`() -> str
- `edit_file`(filename: str) -> None
- `edit`(text: t.Optional[t.AnyStr]) -> t.Optional[t.AnyStr]
- `_unquote_file`(url: str) -> str
- `raw_terminal`() -> t.Iterator[int]
- `getchar`(echo: bool) -> str

### Implementation
**ProgressBar**

**Editor**
  - environ: t.Optional[t.Dict[<ast.Tuple object at 0x11897fd10>]]
  - f: t.BinaryIO
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/_termui_impl.py`  
**Dependencies**: `contextlib`, `math`, `os`, `sys`, `time`, `typing`, `gettext.gettext`, `io.StringIO`, `shutil.which`, `types.TracebackType`, `_compat._default_text_stdout`, `_compat.CYGWIN`, `_compat.get_best_encoding`, `_compat.isatty`, `_compat.open_stream`, `_compat.strip_ansi`, `_compat.term_len`, `_compat.WIN`, `exceptions.ClickException`, `utils.echo`, `tempfile`, `subprocess`, `subprocess`, `tempfile`, `subprocess`, `msvcrt`, `termios`, `tty`, `shutil`, `subprocess`, `tempfile`, `urllib.parse.unquote`, `operator.length_hint`, `webbrowser`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click.testing
:::{doc} Result:102
Holds the captured result of an invoked CLI script.
:::
:::{doc} CliRunner:160
The CLI runner provides functionality to invoke a Click command line
script for unittesting purposes in a isolated environment.  This only
works in single-threaded systems without any concurrency as it changes the
global interpreter state.

:param charset: the character set for the input and output data.
:param env: a dictionary with environment variables for overriding.
:param echo_stdin: if this is set to `True`, then reading from stdin writes
                   to stdout.  This is useful for showing examples in
                   some circumstances.  Note that regular prompts
                   will automatically echo the input.
:param mix_stderr: if this is set to `False`, then stdout and stderr are
                   preserved as independent streams.  This is useful for
                   Unix-philosophy apps that have predictable stdout and
                   noisy stderr, such that each may be measured
                   independently
:::
**Imports**: `contextlib`, `io`, `os`, `shlex`, `shutil`, `sys`, `tempfile`, `typing`, `types.TracebackType`, `_compat`, `formatting`, `termui`, `utils`, `_compat._find_binary_reader`, `core.BaseCommand`
**Type References**: [[CliRunner]], [[EchoingStdin]], [[Optional]], [[Result]], [[_NamedTextIOWrapper]], [[t.Optional]]

### Interface
- `_pause_echo`(stream: t.Optional[EchoingStdin]) -> t.Iterator[None]
- `make_input_stream`(input: t.Optional[t.Union[<ast.Tuple object at 0x1189dc910>]], charset: str) -> t.BinaryIO
- `__init__`(charset: str, env: t.Optional[t.Mapping[<ast.Tuple object at 0x118a1b490>]], echo_stdin: bool, mix_stderr: bool) -> None
- `__getattr__`(x: str) -> t.Any
- `_echo`(rv: bytes) -> bytes
- `read`(n: int) -> bytes
- `read1`(n: int) -> bytes
- `readline`(n: int) -> bytes
- `readlines`() -> t.List[bytes]
- `__iter__`() -> t.Iterator[bytes]
- `__repr__`() -> str
- `name`() -> str
- `mode`() -> str
- `output`() -> str
- `stdout`() -> str
- `stderr`() -> str
- `get_default_prog_name`(cli: BaseCommand) -> str
- `make_env`(overrides: t.Optional[t.Mapping[<ast.Tuple object at 0x118a16490>]]) -> t.Mapping[<ast.Tuple object at 0x118a153d0>]
- `isolation`(input: t.Optional[t.Union[<ast.Tuple object at 0x118a14ad0>]], env: t.Optional[t.Mapping[<ast.Tuple object at 0x118a14310>]], color: bool) -> t.Iterator[t.Tuple[<ast.Tuple object at 0x118a382d0>]]
- `invoke`(cli: BaseCommand, args: t.Optional[t.Union[<ast.Tuple object at 0x118a38e10>]], input: t.Optional[t.Union[<ast.Tuple object at 0x118a394d0>]], env: t.Optional[t.Mapping[<ast.Tuple object at 0x118a39c90>]], catch_exceptions: bool, color: bool) -> Result
- `isolated_filesystem`(temp_dir: t.Optional[t.Union[<ast.Tuple object at 0x118a4e3d0>]]) -> t.Iterator[str]
- `visible_input`(prompt: t.Optional[str]) -> str
- `hidden_input`(prompt: t.Optional[str]) -> str
- `_getchar`(echo: bool) -> str
- `should_strip_ansi`(stream: t.Optional[t.IO[t.Any]], color: t.Optional[bool]) -> bool

### Implementation
**EchoingStdin**

**_NamedTextIOWrapper**

**Result**

**CliRunner**
  - exception: t.Optional[BaseException]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/testing.py`  
**Dependencies**: `contextlib`, `io`, `os`, `shlex`, `shutil`, `sys`, `tempfile`, `typing`, `types.TracebackType`, `_compat`, `formatting`, `termui`, `utils`, `_compat._find_binary_reader`, `core.BaseCommand`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.click.decorators
:::{doc} pass_context:27
Marks a callback as wanting to receive the current context
object as first argument.
:::
:::{doc} pass_obj:38
Similar to :func:`pass_context`, but only pass the object on the
context onwards (:attr:`Context.obj`).  This is useful if that object
represents the state of a nested system.
:::
:::{doc} make_pass_decorator:50
Given an object type this creates a decorator that will work
similar to :func:`pass_obj` but instead of passing the object of the
current context, it will find the innermost context of type
:func:`object_type`.

This generates a decorator that works roughly like this::

    from functools import update_wrapper

    def decorator(f):
        @pass_context
        def new_func(ctx, *args, **kwargs):
            obj = ctx.find_object(object_type)
            return ctx.invoke(f, obj, *args, **kwargs)
        return update_wrapper(new_func, f)
    return decorator

:param object_type: the type of the object to pass.
:param ensure: if set to `True`, a new object will be created and
               remembered on the context if it's not there yet.
:::
:::{doc} pass_meta_key:99
Create a decorator that passes a key from
:attr:`click.Context.meta` as the first argument to the decorated
function.

:param key: Key in ``Context.meta`` to pass.
:param doc_description: Description of the object being passed,
    inserted into the decorator's docstring. Defaults to "the 'key'
    key from Context.meta".

.. versionadded:: 8.0
:::
:::{doc} command:167
Creates a new :class:`Command` and uses the decorated function as
callback.  This will also automatically attach all decorated
:func:`option`\s and :func:`argument`\s as parameters to the command.

The name of the command defaults to the name of the function with
underscores replaced by dashes.  If you want to change that, you can
pass the intended name as the first argument.

All keyword arguments are forwarded to the underlying command class.
For the ``params`` argument, any decorated params are appended to
the end of the list.

Once decorated the function turns into a :class:`Command` instance
that can be invoked as a command line utility or be attached to a
command :class:`Group`.

:param name: the name of the command.  This defaults to the function
             name with underscores replaced by dashes.
:param cls: the command class to instantiate.  This defaults to
            :class:`Command`.

.. versionchanged:: 8.1
    This decorator can be applied without parentheses.

.. versionchanged:: 8.1
    The ``params`` argument can be used. Decorated params are
    appended to the end of the list.
:::
:::{doc} group:284
Creates a new :class:`Group` with a function as callback.  This
works otherwise the same as :func:`command` just that the `cls`
parameter is set to :class:`Group`.

.. versionchanged:: 8.1
    This decorator can be applied without parentheses.
:::
:::{doc} argument:315
Attaches an argument to the command.  All positional arguments are
passed as parameter declarations to :class:`Argument`; all keyword
arguments are forwarded unchanged (except ``cls``).
This is equivalent to creating an :class:`Argument` instance manually
and attaching it to the :attr:`Command.params` list.

For the default argument class, refer to :class:`Argument` and
:class:`Parameter` for descriptions of parameters.

:param cls: the argument class to instantiate.  This defaults to
            :class:`Argument`.
:param param_decls: Passed as positional arguments to the constructor of
    ``cls``.
:param attrs: Passed as keyword arguments to the constructor of ``cls``.
:::
:::{doc} option:343
Attaches an option to the command.  All positional arguments are
passed as parameter declarations to :class:`Option`; all keyword
arguments are forwarded unchanged (except ``cls``).
This is equivalent to creating an :class:`Option` instance manually
and attaching it to the :attr:`Command.params` list.

For the default option class, refer to :class:`Option` and
:class:`Parameter` for descriptions of parameters.

:param cls: the option class to instantiate.  This defaults to
            :class:`Option`.
:param param_decls: Passed as positional arguments to the constructor of
    ``cls``.
:param attrs: Passed as keyword arguments to the constructor of ``cls``.
:::
:::{doc} confirmation_option:371
Add a ``--yes`` option which shows a prompt before continuing if
not passed. If the prompt is declined, the program will exit.

:param param_decls: One or more option names. Defaults to the single
    value ``"--yes"``.
:param kwargs: Extra arguments are passed to :func:`option`.
:::
:::{doc} password_option:395
Add a ``--password`` option which prompts for a password, hiding
input and asking to enter the value again for confirmation.

:param param_decls: One or more option names. Defaults to the single
    value ``"--password"``.
:param kwargs: Extra arguments are passed to :func:`option`.
:::
:::{doc} version_option:412
Add a ``--version`` option which immediately prints the version
number and exits the program.

If ``version`` is not provided, Click will try to detect it using
:func:`importlib.metadata.version` to get the version for the
``package_name``. On Python < 3.8, the ``importlib_metadata``
backport must be installed.

If ``package_name`` is not provided, Click will try to detect it by
inspecting the stack frames. This will be used to detect the
version, so it must match the name of the installed package.

:param version: The version number to show. If not provided, Click
    will try to detect it.
:param param_decls: One or more option names. Defaults to the single
    value ``"--version"``.
:param package_name: The package name to detect the version from. If
    not provided, Click will try to detect it.
:param prog_name: The name of the CLI to show in the message. If not
    provided, it will be detected from the command.
:param message: The message to show. The values ``%(prog)s``,
    ``%(package)s``, and ``%(version)s`` are available. Defaults to
    ``"%(prog)s, version %(version)s"``.
:param kwargs: Extra arguments are passed to :func:`option`.
:raise RuntimeError: ``version`` could not be detected.

.. versionchanged:: 8.0
    Add the ``package_name`` parameter, and the ``%(package)s``
    value for messages.

.. versionchanged:: 8.0
    Use :mod:`importlib.metadata` instead of ``pkg_resources``. The
    version is detected based on the package name, not the entry
    point name. The Python package name must match the installed
    package name, or be passed with ``package_name=``.
:::
:::{doc} HelpOption:525
Pre-configured ``--help`` option which immediately prints the help page
and exits the program.
:::
:::{doc} help_option:554
Decorator for the pre-configured ``--help`` option defined above.

:param param_decls: One or more option names. Defaults to the single
    value ``"--help"``.
:param kwargs: Extra arguments are passed to :func:`option`.
:::
**Imports**: `inspect`, `types`, `typing`, `functools.update_wrapper`, `gettext.gettext`, `core.Argument`, `core.Command`, `core.Context`, `core.Group`, `core.Option`, `core.Parameter`, `globals.get_current_context`, `utils.echo`, `typing_extensions`, `importlib.metadata`, `importlib_metadata`
**Type References**: [[Any]], [[HelpOption]], [[Optional]], [[t.Any]], [[t.Optional]]

### Interface
- `pass_context`(f: t.Callable[te.Concatenate[Context, P], R]) -> t.Callable[P, R]
- `pass_obj`(f: t.Callable[te.Concatenate[t.Any, P], R]) -> t.Callable[P, R]
- `make_pass_decorator`(object_type: t.Type[T], ensure: bool) -> t.Callable[<ast.Tuple object at 0x118a67350>]
- `pass_meta_key`(key: str) -> t.Callable[[t.Callable[te.Concatenate[t.Any, P], R]], t.Callable[P, R]]
- `command`(name: t.Union[<ast.Tuple object at 0x118a60150>], cls: t.Optional[t.Type[CmdType]]) -> t.Union[<ast.Tuple object at 0x118a77ad0>]
- `group`(name: t.Union[<ast.Tuple object at 0x118aa4990>], cls: t.Optional[t.Type[GrpType]]) -> t.Union[<ast.Tuple object at 0x118aa6b50>]
- `_param_memo`(f: t.Callable[<ast.Tuple object at 0x118aa7710>], param: Parameter) -> None
- `argument`() -> t.Callable[<ast.Tuple object at 0x118aaea90>]
- `option`() -> t.Callable[<ast.Tuple object at 0x118ab4a90>]
- `confirmation_option`() -> t.Callable[<ast.Tuple object at 0x118ab7a10>]
- `password_option`() -> t.Callable[<ast.Tuple object at 0x118ac17d0>]
- `version_option`(version: t.Optional[str]) -> t.Callable[<ast.Tuple object at 0x118adb850>]
- `help_option`() -> t.Callable[<ast.Tuple object at 0x118ae8910>]
- `new_func`() -> R
- `decorator`(f: FC) -> FC
- `callback`(ctx: Context, param: Parameter, value: bool) -> None
- `__init__`(param_decls: t.Optional[t.Sequence[str]]) -> None
- `show_help`(ctx: Context, param: Parameter, value: bool) -> None

### Implementation
**HelpOption**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/click/decorators.py`  
**Dependencies**: `inspect`, `types`, `typing`, `functools.update_wrapper`, `gettext.gettext`, `core.Argument`, `core.Command`, `core.Context`, `core.Group`, `core.Option`, `core.Parameter`, `globals.get_current_context`, `utils.echo`, `typing_extensions`, `importlib.metadata`, `importlib_metadata`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.charset_normalizer.md
:::{doc} MessDetectorPlugin:32
Base abstract class used for mess detection plugins.
All detectors MUST extend and implement given methods.
:::
:::{doc} CjkInvalidStopPlugin:368
GB(Chinese) based encoding often render the stop incorrectly when the content does not fit and
can be easily detected. Searching for the overuse of '丅' and '丄'.
:::
:::{doc} is_suspiciously_successive_range:504
Determine if two Unicode range seen next to each other can be considered as suspicious.
:::
:::{doc} mess_ratio:578
Compute a mess ratio given a decoded bytes sequence. The maximum threshold does stop the computation earlier.
:::
**Imports**: `__future__.annotations`, `functools.lru_cache`, `logging.getLogger`, `constant.COMMON_SAFE_ASCII_CHARACTERS`, `constant.TRACE`, `constant.UNICODE_SECONDARY_RANGE_KEYWORD`, `utils.is_accentuated`, `utils.is_arabic`, `utils.is_arabic_isolated_form`, `utils.is_case_variable`, `utils.is_cjk`, `utils.is_emoticon`, `utils.is_hangul`, `utils.is_hiragana`, `utils.is_katakana`, `utils.is_latin`, `utils.is_punctuation`, `utils.is_separator`, `utils.is_symbol`, `utils.is_thai`, `utils.is_unprintable`, `utils.remove_accent`, `utils.unicode_range`
**Type References**: [[ArabicIsolatedFormPlugin]], [[ArchaicUpperLowerPlugin]], [[CjkInvalidStopPlugin]], [[MessDetectorPlugin]], [[None]], [[SuperWeirdWordPlugin]], [[SuspiciousDuplicateAccentPlugin]], [[SuspiciousRange]], [[TooManyAccentuatedPlugin]], [[TooManySymbolOrPunctuationPlugin]], [[UnprintablePlugin]]

### Interface
- `is_suspiciously_successive_range`(unicode_range_a: str | None, unicode_range_b: str | None) -> bool
- `mess_ratio`(decoded_sequence: str, maximum_threshold: float, debug: bool) -> float
- `eligible`(character: str) -> bool
- `feed`(character: str) -> None
- `reset`() -> None
- `ratio`() -> float
- `__init__`() -> None

### Implementation
**MessDetectorPlugin**

**TooManySymbolOrPunctuationPlugin**
  - ratio_of_punctuation: float
**TooManyAccentuatedPlugin**
  - ratio_of_accentuation: float
**UnprintablePlugin**

**SuspiciousDuplicateAccentPlugin**

**SuspiciousRange**
  - unicode_range_a: str | None
  - unicode_range_b: str | None
  - ratio_of_suspicious_range_usage: float
**SuperWeirdWordPlugin**
  - buffer_length: int
  - probable_camel_cased: bool
**CjkInvalidStopPlugin**

**ArchaicUpperLowerPlugin**

**ArabicIsolatedFormPlugin**
  - isolated_form_usage: float
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/charset_normalizer/md.py`  
**Dependencies**: `__future__.annotations`, `functools.lru_cache`, `logging.getLogger`, `constant.COMMON_SAFE_ASCII_CHARACTERS`, `constant.TRACE`, `constant.UNICODE_SECONDARY_RANGE_KEYWORD`, `utils.is_accentuated`, `utils.is_arabic`, `utils.is_arabic_isolated_form`, `utils.is_case_variable`, `utils.is_cjk`, `utils.is_emoticon`, `utils.is_hangul`, `utils.is_hiragana`, `utils.is_katakana`, `utils.is_latin`, `utils.is_punctuation`, `utils.is_separator`, `utils.is_symbol`, `utils.is_thai`, `utils.is_unprintable`, `utils.remove_accent`, `utils.unicode_range`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.charset_normalizer.version

**Imports**: `__future__.annotations`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/charset_normalizer/version.py`  
**Dependencies**: `__future__.annotations`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.charset_normalizer.legacy
:::{doc} detect:19
chardet legacy method
Detect the encoding of the given byte string. It should be mostly backward-compatible.
Encoding name will match Chardet own writing whenever possible. (Not on encoding name unsupported by it)
This function is deprecated and should be used to migrate your project easily, consult the documentation for
further information. Not planned for removal.

:param byte_str:     The byte sequence to examine.
:param should_rename_legacy:  Should we rename legacy encodings
                              to their more modern equivalents?
:::
**Imports**: `__future__.annotations`, `typing.TYPE_CHECKING`, `typing.Any`, `warnings.warn`, `api.from_bytes`, `constant.CHARDET_CORRESPONDENCE`, `typing_extensions.TypedDict`
**Type References**: [[None]], [[ResultDict]]

### Interface
- `detect`(byte_str: bytes, should_rename_legacy: bool) -> ResultDict

### Implementation
**ResultDict**
  - encoding: str | None
  - language: str
  - confidence: float | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/charset_normalizer/legacy.py`  
**Dependencies**: `__future__.annotations`, `typing.TYPE_CHECKING`, `typing.Any`, `warnings.warn`, `api.from_bytes`, `constant.CHARDET_CORRESPONDENCE`, `typing_extensions.TypedDict`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.charset_normalizer.models
:::{doc} CharsetMatches:245
Container with every CharsetMatch items ordered by default from most probable to the less one.
Act like a list(iterable) but does not implements all related methods.
:::
**Imports**: `__future__.annotations`, `encodings.aliases.aliases`, `hashlib.sha256`, `json.dumps`, `re.sub`, `typing.Any`, `typing.Iterator`, `typing.List`, `typing.Tuple`, `constant.RE_POSSIBLE_ENCODING_INDICATION`, `constant.TOO_BIG_SEQUENCE`, `utils.iana_name`, `utils.is_multi_byte_encoding`, `utils.unicode_range`, `charset_normalizer.cd.encoding_languages`, `charset_normalizer.cd.mb_encoding_languages`
**Type References**: [[CharsetMatch]], [[CharsetMatches]], [[CliDetectionResult]], [[None]]

### Interface
- `__init__`(path: str, encoding: str | None, encoding_aliases: list[str], alternative_encodings: list[str], language: str, alphabets: list[str], has_sig_or_bom: bool, chaos: float, coherence: float, unicode_path: str | None, is_preferred: bool) -> Any
- `__eq__`(other: object) -> bool
- `__lt__`(other: object) -> bool
- `multi_byte_usage`() -> float
- `__str__`() -> str
- `__repr__`() -> str
- `add_submatch`(other: CharsetMatch) -> None
- `encoding`() -> str
- `encoding_aliases`() -> list[str]
- `bom`() -> bool
- `byte_order_mark`() -> bool
- `languages`() -> list[str]
- `language`() -> str
- `chaos`() -> float
- `coherence`() -> float
- `percent_chaos`() -> float
- `percent_coherence`() -> float
- `raw`() -> bytes
- `submatch`() -> list[CharsetMatch]
- `has_submatch`() -> bool
- `alphabets`() -> list[str]
- `could_be_from_charset`() -> list[str]
- `output`(encoding: str) -> bytes
- `fingerprint`() -> str
- `__iter__`() -> Iterator[CharsetMatch]
- `__getitem__`(item: int | str) -> CharsetMatch
- `__len__`() -> int
- `__bool__`() -> bool
- `append`(item: CharsetMatch) -> None
- `best`() -> CharsetMatch | None
- `first`() -> CharsetMatch | None
- `__dict__`() -> dict[<ast.Tuple object at 0x118c2fcd0>]
- `to_json`() -> str

### Implementation
**CharsetMatch**
  - chaos_difference: float
  - coherence_difference: float
  - also_known_as: list[str]
  - detected_ranges: list[str | None]
**CharsetMatches**

**CliDetectionResult**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/charset_normalizer/models.py`  
**Dependencies**: `__future__.annotations`, `encodings.aliases.aliases`, `hashlib.sha256`, `json.dumps`, `re.sub`, `typing.Any`, `typing.Iterator`, `typing.List`, `typing.Tuple`, `constant.RE_POSSIBLE_ENCODING_INDICATION`, `constant.TOO_BIG_SEQUENCE`, `utils.iana_name`, `utils.is_multi_byte_encoding`, `utils.unicode_range`, `charset_normalizer.cd.encoding_languages`, `charset_normalizer.cd.mb_encoding_languages`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.charset_normalizer

**Imports**: `__future__.annotations`, `logging`, `api.from_bytes`, `api.from_fp`, `api.from_path`, `api.is_binary`, `legacy.detect`, `models.CharsetMatch`, `models.CharsetMatches`, `utils.set_logging_handler`, `version.VERSION`, `version.__version__`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/charset_normalizer/__init__.py`  
**Dependencies**: `__future__.annotations`, `logging`, `api.from_bytes`, `api.from_fp`, `api.from_path`, `api.is_binary`, `legacy.detect`, `models.CharsetMatch`, `models.CharsetMatches`, `utils.set_logging_handler`, `version.VERSION`, `version.__version__`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.charset_normalizer.api
:::{doc} from_bytes:33
Given a raw bytes sequence, return the best possibles charset usable to render str objects.
If there is no results, it is a strong indicator that the source is binary/not text.
By default, the process will extract 5 blocks of 512o each to assess the mess and coherence of a given sequence.
And will give up a particular code page after 20% of measured mess. Those criteria are customizable at will.

The preemptive behavior DOES NOT replace the traditional detection workflow, it prioritize a particular code page
but never take it for granted. Can improve the performance.

You may want to focus your attention to some code page or/and not others, use cp_isolation and cp_exclusion for that
purpose.

This function will strip the SIG in the payload/sequence every time except on UTF-16, UTF-32.
By default the library does not setup any handler other than the NullHandler, if you choose to set the 'explain'
toggle to True it will alter the logger configuration to add a StreamHandler that is suitable for debugging.
Custom logging format and handler can be set manually.
:::
:::{doc} from_fp:544
Same thing than the function from_bytes but using a file pointer that is already ready.
Will not close the file pointer.
:::
:::{doc} from_path:574
Same thing than the function from_bytes but with one extra step. Opening and reading given file path in binary mode.
Can raise IOError.
:::
:::{doc} is_binary:605
Detect if the given input (file, bytes, or path) points to a binary file. aka. not a string.
Based on the same main heuristic algorithms and default kwargs at the sole exception that fallbacks match
are disabled to be stricter around ASCII-compatible but unlikely to be a string.
:::
**Imports**: `__future__.annotations`, `logging`, `os.PathLike`, `typing.BinaryIO`, `cd.coherence_ratio`, `cd.encoding_languages`, `cd.mb_encoding_languages`, `cd.merge_coherence_ratios`, `constant.IANA_SUPPORTED`, `constant.TOO_BIG_SEQUENCE`, `constant.TOO_SMALL_SEQUENCE`, `constant.TRACE`, `md.mess_ratio`, `models.CharsetMatch`, `models.CharsetMatches`, `utils.any_specified_encoding`, `utils.cut_sequence_chunks`, `utils.iana_name`, `utils.identify_sig_or_bom`, `utils.is_cp_similar`, `utils.is_multi_byte_encoding`, `utils.should_strip_sig_or_bom`
**Type References**: [[CharsetMatch]], [[CharsetMatches]], [[None]]

### Interface
- `from_bytes`(sequences: bytes | bytearray, steps: int, chunk_size: int, threshold: float, cp_isolation: list[str] | None, cp_exclusion: list[str] | None, preemptive_behaviour: bool, explain: bool, language_threshold: float, enable_fallback: bool) -> CharsetMatches
- `from_fp`(fp: BinaryIO, steps: int, chunk_size: int, threshold: float, cp_isolation: list[str] | None, cp_exclusion: list[str] | None, preemptive_behaviour: bool, explain: bool, language_threshold: float, enable_fallback: bool) -> CharsetMatches
- `from_path`(path: str | bytes | PathLike, steps: int, chunk_size: int, threshold: float, cp_isolation: list[str] | None, cp_exclusion: list[str] | None, preemptive_behaviour: bool, explain: bool, language_threshold: float, enable_fallback: bool) -> CharsetMatches
- `is_binary`(fp_or_path_or_payload: PathLike | str | BinaryIO | bytes, steps: int, chunk_size: int, threshold: float, cp_isolation: list[str] | None, cp_exclusion: list[str] | None, preemptive_behaviour: bool, explain: bool, language_threshold: float, enable_fallback: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/charset_normalizer/api.py`  
**Dependencies**: `__future__.annotations`, `logging`, `os.PathLike`, `typing.BinaryIO`, `cd.coherence_ratio`, `cd.encoding_languages`, `cd.mb_encoding_languages`, `cd.merge_coherence_ratios`, `constant.IANA_SUPPORTED`, `constant.TOO_BIG_SEQUENCE`, `constant.TOO_SMALL_SEQUENCE`, `constant.TRACE`, `md.mess_ratio`, `models.CharsetMatch`, `models.CharsetMatches`, `utils.any_specified_encoding`, `utils.cut_sequence_chunks`, `utils.iana_name`, `utils.identify_sig_or_bom`, `utils.is_cp_similar`, `utils.is_multi_byte_encoding`, `utils.should_strip_sig_or_bom`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.charset_normalizer.utils
:::{doc} unicode_range:56
Retrieve the Unicode range official name from a single character.
:::
:::{doc} any_specified_encoding:219
Extract using ASCII-only decoder any specified encoding in the first n-bytes.
:::
:::{doc} is_multi_byte_encoding:252
Verify is a specific encoding is a multi byte one based on it IANA name
:::
:::{doc} identify_sig_or_bom:272
Identify and extract SIG/BOM in given sequence.
:::
:::{doc} iana_name:294
Returns the Python normalized encoding name (Not the IANA official name).
:::
:::{doc} is_cp_similar:331
Determine if two code page are at least 80% similar. IANA_SUPPORTED_SIMILAR dict was generated using
the function cp_similarity.
:::
**Imports**: `__future__.annotations`, `importlib`, `logging`, `unicodedata`, `codecs.IncrementalDecoder`, `encodings.aliases.aliases`, `functools.lru_cache`, `re.findall`, `typing.Generator`, `_multibytecodec.MultibyteIncrementalDecoder`, `constant.ENCODING_MARKS`, `constant.IANA_SUPPORTED_SIMILAR`, `constant.RE_POSSIBLE_ENCODING_INDICATION`, `constant.UNICODE_RANGES_COMBINED`, `constant.UNICODE_SECONDARY_RANGE_KEYWORD`, `constant.UTF8_MAXIMAL_ALLOCATION`
**Type References**: [[IncrementalDecoder]], [[None]]

### Interface
- `is_accentuated`(character: str) -> bool
- `remove_accent`(character: str) -> str
- `unicode_range`(character: str) -> str | None
- `is_latin`(character: str) -> bool
- `is_punctuation`(character: str) -> bool
- `is_symbol`(character: str) -> bool
- `is_emoticon`(character: str) -> bool
- `is_separator`(character: str) -> bool
- `is_case_variable`(character: str) -> bool
- `is_cjk`(character: str) -> bool
- `is_hiragana`(character: str) -> bool
- `is_katakana`(character: str) -> bool
- `is_hangul`(character: str) -> bool
- `is_thai`(character: str) -> bool
- `is_arabic`(character: str) -> bool
- `is_arabic_isolated_form`(character: str) -> bool
- `is_unicode_range_secondary`(range_name: str) -> bool
- `is_unprintable`(character: str) -> bool
- `any_specified_encoding`(sequence: bytes, search_zone: int) -> str | None
- `is_multi_byte_encoding`(name: str) -> bool
- `identify_sig_or_bom`(sequence: bytes) -> tuple[<ast.Tuple object at 0x118d1ef10>]
- `should_strip_sig_or_bom`(iana_encoding: str) -> bool
- `iana_name`(cp_name: str, strict: bool) -> str
- `cp_similarity`(iana_name_a: str, iana_name_b: str) -> float
- `is_cp_similar`(iana_name_a: str, iana_name_b: str) -> bool
- `set_logging_handler`(name: str, level: int, format_string: str) -> None
- `cut_sequence_chunks`(sequences: bytes, encoding_iana: str, offsets: range, chunk_size: int, bom_or_sig_available: bool, strip_sig_or_bom: bool, sig_payload: bytes, is_multi_byte_decoder: bool, decoded_payload: str | None) -> Generator[<ast.Tuple object at 0x118d45cd0>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/charset_normalizer/utils.py`  
**Dependencies**: `__future__.annotations`, `importlib`, `logging`, `unicodedata`, `codecs.IncrementalDecoder`, `encodings.aliases.aliases`, `functools.lru_cache`, `re.findall`, `typing.Generator`, `_multibytecodec.MultibyteIncrementalDecoder`, `constant.ENCODING_MARKS`, `constant.IANA_SUPPORTED_SIMILAR`, `constant.RE_POSSIBLE_ENCODING_INDICATION`, `constant.UNICODE_RANGES_COMBINED`, `constant.UNICODE_SECONDARY_RANGE_KEYWORD`, `constant.UTF8_MAXIMAL_ALLOCATION`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.charset_normalizer.constant

**Imports**: `__future__.annotations`, `codecs.BOM_UTF8`, `codecs.BOM_UTF16_BE`, `codecs.BOM_UTF16_LE`, `codecs.BOM_UTF32_BE`, `codecs.BOM_UTF32_LE`, `encodings.aliases.aliases`, `re.IGNORECASE`, `re.compile`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/charset_normalizer/constant.py`  
**Dependencies**: `__future__.annotations`, `codecs.BOM_UTF8`, `codecs.BOM_UTF16_BE`, `codecs.BOM_UTF16_LE`, `codecs.BOM_UTF32_BE`, `codecs.BOM_UTF32_LE`, `encodings.aliases.aliases`, `re.IGNORECASE`, `re.compile`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.charset_normalizer.__main__

**Imports**: `__future__.annotations`, `cli.cli_detect`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/charset_normalizer/__main__.py`  
**Dependencies**: `__future__.annotations`, `cli.cli_detect`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.charset_normalizer.cd
:::{doc} encoding_unicode_range:27
Return associated unicode ranges in a single byte code page.
:::
:::{doc} unicode_range_languages:64
Return inferred languages used with a unicode range.
:::
:::{doc} encoding_languages:80
Single-byte encoding language association. Some code page are heavily linked to particular language(s).
This function does the correspondence.
:::
:::{doc} mb_encoding_languages:100
Multi-byte encoding language association. Some code page are heavily linked to particular language(s).
This function does the correspondence.
:::
:::{doc} get_target_features:121
Determine main aspects from a supported language if it contains accents and if is pure Latin.
:::
:::{doc} alphabet_languages:137
Return associated languages associated to given characters.
:::
:::{doc} characters_popularity_compare:172
Determine if a ordered characters list (by occurrence from most appearance to rarest) match a particular language.
The result is a ratio between 0. (absolutely no correspondence) and 1. (near perfect fit).
Beware that is function is not strict on the match in order to ease the detection. (Meaning close match is 1.)
:::
:::{doc} alpha_unicode_split:252
Given a decoded text sequence, return a list of str. Unicode range / alphabet separation.
Ex. a text containing English/Latin with a bit a Hebrew will return two items in the resulting list;
One containing the latin letters and the other hebrew.
:::
:::{doc} merge_coherence_ratios:291
This function merge results previously given by the function coherence_ratio.
The return type is the same as coherence_ratio.
:::
:::{doc} filter_alt_coherence_matches:319
We shall NOT return "English—" in CoherenceMatches because it is an alternative
of "English". This function only keeps the best match and remove the em-dash in it.
:::
:::{doc} coherence_ratio:347
Detect ANY language that can be identified in given sequence. The sequence will be analysed by layers.
A layer = Character extraction by alphabets/ranges.
:::
**Imports**: `__future__.annotations`, `importlib`, `codecs.IncrementalDecoder`, `collections.Counter`, `functools.lru_cache`, `typing.Counter`, `constant.FREQUENCIES`, `constant.KO_NAMES`, `constant.LANGUAGE_SUPPORTED_COUNT`, `constant.TOO_SMALL_SEQUENCE`, `constant.ZH_NAMES`, `md.is_suspiciously_successive_range`, `models.CoherenceMatches`, `utils.is_accentuated`, `utils.is_latin`, `utils.is_multi_byte_encoding`, `utils.is_unicode_range_secondary`, `utils.unicode_range`
**Type References**: [[CoherenceMatches]], [[IncrementalDecoder]], [[None]], [[TypeCounter]]

### Interface
- `encoding_unicode_range`(iana_name: str) -> list[str]
- `unicode_range_languages`(primary_range: str) -> list[str]
- `encoding_languages`(iana_name: str) -> list[str]
- `mb_encoding_languages`(iana_name: str) -> list[str]
- `get_target_features`(language: str) -> tuple[<ast.Tuple object at 0x118d75150>]
- `alphabet_languages`(characters: list[str], ignore_non_latin: bool) -> list[str]
- `characters_popularity_compare`(language: str, ordered_characters: list[str]) -> float
- `alpha_unicode_split`(decoded_sequence: str) -> list[str]
- `merge_coherence_ratios`(results: list[CoherenceMatches]) -> CoherenceMatches
- `filter_alt_coherence_matches`(results: CoherenceMatches) -> CoherenceMatches
- `coherence_ratio`(decoded_sequence: str, threshold: float, lg_inclusion: str | None) -> CoherenceMatches
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/charset_normalizer/cd.py`  
**Dependencies**: `__future__.annotations`, `importlib`, `codecs.IncrementalDecoder`, `collections.Counter`, `functools.lru_cache`, `typing.Counter`, `constant.FREQUENCIES`, `constant.KO_NAMES`, `constant.LANGUAGE_SUPPORTED_COUNT`, `constant.TOO_SMALL_SEQUENCE`, `constant.ZH_NAMES`, `md.is_suspiciously_successive_range`, `models.CoherenceMatches`, `utils.is_accentuated`, `utils.is_latin`, `utils.is_multi_byte_encoding`, `utils.is_unicode_range_secondary`, `utils.unicode_range`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.cookies
:::{doc} MockRequest:23
Wraps a `requests.Request` to mimic a `urllib2.Request`.

The code in `http.cookiejar.CookieJar` expects this interface in order to correctly
manage cookie policies, i.e., determine whether a cookie can be set, given the
domains of the request and the cookie.

The original request object is read-only. The client is responsible for collecting
the new headers via `get_new_headers()` and interpreting them appropriately. You
probably want `get_cookie_header`, defined below.
:::
:::{doc} MockResponse:103
Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.

...what? Basically, expose the parsed HTTP headers from the server response
the way `http.cookiejar` expects to see them.
:::
:::{doc} extract_cookies_to_jar:124
Extract the cookies from the response into a CookieJar.

:param jar: http.cookiejar.CookieJar (not necessarily a RequestsCookieJar)
:param request: our own requests.Request object
:param response: urllib3.HTTPResponse object
:::
:::{doc} get_cookie_header:140
Produce an appropriate Cookie header string to be sent with `request`, or None.

:rtype: str
:::
:::{doc} remove_cookie_by_name:151
Unsets a cookie by name, by default over all domains and paths.

Wraps CookieJar.clear(), is O(n).
:::
:::{doc} CookieConflictError:170
There are two cookies that meet the criteria specified in the cookie jar.
Use .get and .set and include domain and path args in order to be more specific.
:::
:::{doc} RequestsCookieJar:176
Compatibility class; is a http.cookiejar.CookieJar, but exposes a dict
interface.

This is the CookieJar we create by default for requests and sessions that
don't specify one, since some clients may expect response.cookies and
session.cookies to support dict operations.

Requests does not use the dict interface internally; it's just for
compatibility with external client code. All requests code should work
out of the box with externally provided instances of ``CookieJar``, e.g.
``LWPCookieJar`` and ``FileCookieJar``.

Unlike a regular CookieJar, this class is pickleable.

.. warning:: dictionary operations that are normally O(1) may be O(n).
:::
:::{doc} create_cookie:455
Make a cookie from underspecified parameters.

By default, the pair of `name` and `value` will be set for the domain ''
and sent on every request (this is sometimes called a "supercookie").
:::
:::{doc} morsel_to_cookie:492
Convert a Morsel object into a Cookie containing the one k/v pair.
:::
:::{doc} cookiejar_from_dict:521
Returns a CookieJar from a key/value dictionary.

:param cookie_dict: Dict of key/values to insert into CookieJar.
:param cookiejar: (optional) A cookiejar to add the cookies to.
:param overwrite: (optional) If False, will not replace cookies
    already in the jar with new ones.
:rtype: CookieJar
:::
:::{doc} merge_cookies:542
Add cookies to cookiejar and returns a merged CookieJar.

:param cookiejar: CookieJar object to add the cookies to.
:param cookies: Dictionary or CookieJar object to be added.
:rtype: CookieJar
:::
**Imports**: `calendar`, `copy`, `time`, `_internal_utils.to_native_string`, `compat.Morsel`, `compat.MutableMapping`, `compat.cookielib`, `compat.urlparse`, `compat.urlunparse`, `threading`, `dummy_threading`
**Type References**: [[CookieConflictError]], [[MockRequest]], [[MockResponse]], [[RequestsCookieJar]]

### Interface
- `extract_cookies_to_jar`() -> Any
- `get_cookie_header`() -> Any
- `remove_cookie_by_name`() -> Any
- `_copy_cookie_jar`() -> Any
- `create_cookie`() -> Any
- `morsel_to_cookie`() -> Any
- `cookiejar_from_dict`() -> Any
- `merge_cookies`() -> Any
- `__init__`() -> Any
- `get_type`() -> Any
- `get_host`() -> Any
- `get_origin_req_host`() -> Any
- `get_full_url`() -> Any
- `is_unverifiable`() -> Any
- `has_header`() -> Any
- `get_header`() -> Any
- `add_header`() -> Any
- `add_unredirected_header`() -> Any
- `get_new_headers`() -> Any
- `unverifiable`() -> Any
- `origin_req_host`() -> Any
- `host`() -> Any
- `info`() -> Any
- `getheaders`() -> Any
- `get`() -> Any
- `set`() -> Any
- `iterkeys`() -> Any
- `keys`() -> Any
- `itervalues`() -> Any
- `values`() -> Any
- `iteritems`() -> Any
- `items`() -> Any
- `list_domains`() -> Any
- `list_paths`() -> Any
- `multiple_domains`() -> Any
- `get_dict`() -> Any
- `__contains__`() -> Any
- `__getitem__`() -> Any
- `__setitem__`() -> Any
- `__delitem__`() -> Any
- `set_cookie`() -> Any
- `update`() -> Any
- `_find`() -> Any
- `_find_no_duplicates`() -> Any
- `__getstate__`() -> Any
- `__setstate__`() -> Any
- `copy`() -> Any
- `get_policy`() -> Any

### Implementation
**MockRequest**

**MockResponse**

**CookieConflictError**

**RequestsCookieJar**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/cookies.py`  
**Dependencies**: `calendar`, `copy`, `time`, `_internal_utils.to_native_string`, `compat.Morsel`, `compat.MutableMapping`, `compat.cookielib`, `compat.urlparse`, `compat.urlunparse`, `threading`, `dummy_threading`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.auth
:::{doc} _basic_auth_str:25
Returns a Basic Auth string.
:::
:::{doc} AuthBase:69
Base class that all auth implementations derive from
:::
:::{doc} HTTPBasicAuth:76
Attaches HTTP Basic Authentication to the given Request object.
:::
:::{doc} HTTPProxyAuth:99
Attaches HTTP Proxy Authentication to a given Request object.
:::
:::{doc} HTTPDigestAuth:107
Attaches HTTP Digest Authentication to the given Request object.
:::
**Imports**: `hashlib`, `os`, `re`, `threading`, `time`, `warnings`, `base64.b64encode`, `_internal_utils.to_native_string`, `compat.basestring`, `compat.str`, `compat.urlparse`, `cookies.extract_cookies_to_jar`, `utils.parse_dict_header`
**Type References**: [[AuthBase]], [[HTTPBasicAuth]], [[HTTPDigestAuth]], [[HTTPProxyAuth]]

### Interface
- `_basic_auth_str`() -> Any
- `__call__`() -> Any
- `__init__`() -> Any
- `__eq__`() -> Any
- `__ne__`() -> Any
- `init_per_thread_state`() -> Any
- `build_digest_header`() -> Any
- `handle_redirect`() -> Any
- `handle_401`() -> Any
- `md5_utf8`() -> Any
- `sha_utf8`() -> Any
- `sha256_utf8`() -> Any
- `sha512_utf8`() -> Any

### Implementation
**AuthBase**

**HTTPBasicAuth**

**HTTPProxyAuth**

**HTTPDigestAuth**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/auth.py`  
**Dependencies**: `hashlib`, `os`, `re`, `threading`, `time`, `warnings`, `base64.b64encode`, `_internal_utils.to_native_string`, `compat.basestring`, `compat.str`, `compat.urlparse`, `cookies.extract_cookies_to_jar`, `utils.parse_dict_header`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.sessions
:::{doc} merge_setting:61
Determines appropriate setting for a given request, taking into account
the explicit setting on that request, and the setting in the session. If a
setting is a dictionary, they will be merged together using `dict_class`
:::
:::{doc} merge_hooks:91
Properly merges both requests and session hooks.

This is necessary because when request_hooks == {'response': []}, the
merge breaks Session hooks entirely.
:::
:::{doc} Session:356
A Requests session.

Provides cookie persistence, connection-pooling, and configuration.

Basic Usage::

  >>> import requests
  >>> s = requests.Session()
  >>> s.get('https://httpbin.org/get')
  <Response [200]>

Or as a context manager::

  >>> with requests.Session() as s:
  ...     s.get('https://httpbin.org/get')
  <Response [200]>
:::
:::{doc} session:819
Returns a :class:`Session` for context-management.

.. deprecated:: 1.0.0

    This method has been deprecated since version 1.0.0 and is only kept for
    backwards compatibility. New code should use :class:`~requests.sessions.Session`
    to create a session. This may be removed at a future date.

:rtype: Session
:::
**Imports**: `os`, `sys`, `time`, `collections.OrderedDict`, `datetime.timedelta`, `_internal_utils.to_native_string`, `adapters.HTTPAdapter`, `auth._basic_auth_str`, `compat.Mapping`, `compat.cookielib`, `compat.urljoin`, `compat.urlparse`, `cookies.RequestsCookieJar`, `cookies.cookiejar_from_dict`, `cookies.extract_cookies_to_jar`, `cookies.merge_cookies`, `exceptions.ChunkedEncodingError`, `exceptions.ContentDecodingError`, `exceptions.InvalidSchema`, `exceptions.TooManyRedirects`, `hooks.default_hooks`, `hooks.dispatch_hook`, `models.DEFAULT_REDIRECT_LIMIT`, `models.REDIRECT_STATI`, `models.PreparedRequest`, `models.Request`, `status_codes.codes`, `structures.CaseInsensitiveDict`, `utils.DEFAULT_PORTS`, `utils.default_headers`, `utils.get_auth_from_url`, `utils.get_environ_proxies`, `utils.get_netrc_auth`, `utils.requote_uri`, `utils.resolve_proxies`, `utils.rewind_body`, `utils.should_bypass_proxies`, `utils.to_key_val_list`
**Type References**: [[Session]], [[SessionRedirectMixin]]

### Interface
- `merge_setting`() -> Any
- `merge_hooks`() -> Any
- `session`() -> Any
- `get_redirect_target`() -> Any
- `should_strip_auth`() -> Any
- `resolve_redirects`() -> Any
- `rebuild_auth`() -> Any
- `rebuild_proxies`() -> Any
- `rebuild_method`() -> Any
- `__init__`() -> Any
- `__enter__`() -> Any
- `__exit__`() -> Any
- `prepare_request`() -> Any
- `request`() -> Any
- `get`() -> Any
- `options`() -> Any
- `head`() -> Any
- `post`() -> Any
- `put`() -> Any
- `patch`() -> Any
- `delete`() -> Any
- `send`() -> Any
- `merge_environment_settings`() -> Any
- `get_adapter`() -> Any
- `close`() -> Any
- `mount`() -> Any
- `__getstate__`() -> Any
- `__setstate__`() -> Any

### Implementation
**SessionRedirectMixin**

**Session**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/sessions.py`  
**Dependencies**: `os`, `sys`, `time`, `collections.OrderedDict`, `datetime.timedelta`, `_internal_utils.to_native_string`, `adapters.HTTPAdapter`, `auth._basic_auth_str`, `compat.Mapping`, `compat.cookielib`, `compat.urljoin`, `compat.urlparse`, `cookies.RequestsCookieJar`, `cookies.cookiejar_from_dict`, `cookies.extract_cookies_to_jar`, `cookies.merge_cookies`, `exceptions.ChunkedEncodingError`, `exceptions.ContentDecodingError`, `exceptions.InvalidSchema`, `exceptions.TooManyRedirects`, `hooks.default_hooks`, `hooks.dispatch_hook`, `models.DEFAULT_REDIRECT_LIMIT`, `models.REDIRECT_STATI`, `models.PreparedRequest`, `models.Request`, `status_codes.codes`, `structures.CaseInsensitiveDict`, `utils.DEFAULT_PORTS`, `utils.default_headers`, `utils.get_auth_from_url`, `utils.get_environ_proxies`, `utils.get_netrc_auth`, `utils.requote_uri`, `utils.resolve_proxies`, `utils.rewind_body`, `utils.should_bypass_proxies`, `utils.to_key_val_list`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.hooks
:::{doc} dispatch_hook:22
Dispatches a hook dictionary on a given piece of data.
:::

### Interface
- `default_hooks`() -> Any
- `dispatch_hook`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/hooks.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.compat
:::{doc} _resolve_char_detection:18
Find supported character detection libraries.
:::
**Imports**: `importlib`, `sys`, `collections.OrderedDict`, `collections.abc.Callable`, `collections.abc.Mapping`, `collections.abc.MutableMapping`, `http.cookiejar`, `http.cookies.Morsel`, `io.StringIO`, `urllib.parse.quote`, `urllib.parse.quote_plus`, `urllib.parse.unquote`, `urllib.parse.unquote_plus`, `urllib.parse.urldefrag`, `urllib.parse.urlencode`, `urllib.parse.urljoin`, `urllib.parse.urlparse`, `urllib.parse.urlsplit`, `urllib.parse.urlunparse`, `urllib.request.getproxies`, `urllib.request.getproxies_environment`, `urllib.request.parse_http_list`, `urllib.request.proxy_bypass`, `urllib.request.proxy_bypass_environment`, `simplejson`, `simplejson.JSONDecodeError`, `json.JSONDecodeError`, `json`
### Interface
- `_resolve_char_detection`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/compat.py`  
**Dependencies**: `importlib`, `sys`, `collections.OrderedDict`, `collections.abc.Callable`, `collections.abc.Mapping`, `collections.abc.MutableMapping`, `http.cookiejar`, `http.cookies.Morsel`, `io.StringIO`, `urllib.parse.quote`, `urllib.parse.quote_plus`, `urllib.parse.unquote`, `urllib.parse.unquote_plus`, `urllib.parse.urldefrag`, `urllib.parse.urlencode`, `urllib.parse.urljoin`, `urllib.parse.urlparse`, `urllib.parse.urlsplit`, `urllib.parse.urlunparse`, `urllib.request.getproxies`, `urllib.request.getproxies_environment`, `urllib.request.parse_http_list`, `urllib.request.proxy_bypass`, `urllib.request.proxy_bypass_environment`, `simplejson`, `simplejson.JSONDecodeError`, `json.JSONDecodeError`, `json`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.models
:::{doc} Request:230
A user-created :class:`Request <Request>` object.

Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.

:param method: HTTP method to use.
:param url: URL to send.
:param headers: dictionary of headers to send.
:param files: dictionary of {filename: fileobject} files to multipart upload.
:param data: the body to attach to the request. If a dictionary or
    list of tuples ``[(key, value)]`` is provided, form-encoding will
    take place.
:param json: json for the body to attach to the request (if files or data is not specified).
:param params: URL parameters to append to the URL. If a dictionary or
    list of tuples ``[(key, value)]`` is provided, form-encoding will
    take place.
:param auth: Auth handler or (user, pass) tuple.
:param cookies: dictionary or CookieJar of cookies to attach to this request.
:param hooks: dictionary of callback hooks, for internal usage.

Usage::

  >>> import requests
  >>> req = requests.Request('GET', 'https://httpbin.org/get')
  >>> req.prepare()
  <PreparedRequest [GET]>
:::
:::{doc} PreparedRequest:313
The fully mutable :class:`PreparedRequest <PreparedRequest>` object,
containing the exact bytes that will be sent to the server.

Instances are generated from a :class:`Request <Request>` object, and
should not be instantiated manually; doing so may produce undesirable
effects.

Usage::

  >>> import requests
  >>> req = requests.Request('GET', 'https://httpbin.org/get')
  >>> r = req.prepare()
  >>> r
  <PreparedRequest [GET]>

  >>> s = requests.Session()
  >>> s.send(r)
  <Response [200]>
:::
:::{doc} Response:640
The :class:`Response <Response>` object, which contains a
server's response to an HTTP request.
:::
**Imports**: `datetime`, `encodings.idna`, `io.UnsupportedOperation`, `urllib3.exceptions.DecodeError`, `urllib3.exceptions.LocationParseError`, `urllib3.exceptions.ProtocolError`, `urllib3.exceptions.ReadTimeoutError`, `urllib3.exceptions.SSLError`, `urllib3.fields.RequestField`, `urllib3.filepost.encode_multipart_formdata`, `urllib3.util.parse_url`, `_internal_utils.to_native_string`, `_internal_utils.unicode_is_ascii`, `auth.HTTPBasicAuth`, `compat.Callable`, `compat.JSONDecodeError`, `compat.Mapping`, `compat.basestring`, `compat.builtin_str`, `compat.chardet`, `compat.cookielib`, `compat.json`, `compat.urlencode`, `compat.urlsplit`, `compat.urlunparse`, `cookies._copy_cookie_jar`, `cookies.cookiejar_from_dict`, `cookies.get_cookie_header`, `exceptions.ChunkedEncodingError`, `exceptions.ConnectionError`, `exceptions.ContentDecodingError`, `exceptions.HTTPError`, `exceptions.InvalidJSONError`, `exceptions.InvalidURL`, `exceptions.JSONDecodeError`, `exceptions.MissingSchema`, `exceptions.SSLError`, `exceptions.StreamConsumedError`, `hooks.default_hooks`, `status_codes.codes`, `structures.CaseInsensitiveDict`, `utils.check_header_validity`, `utils.get_auth_from_url`, `utils.guess_filename`, `utils.guess_json_utf`, `utils.iter_slices`, `utils.parse_header_links`, `utils.requote_uri`, `utils.stream_decode_response_unicode`, `utils.super_len`, `utils.to_key_val_list`, `idna`
**Type References**: [[PreparedRequest]], [[Request]], [[RequestEncodingMixin]], [[RequestHooksMixin]], [[Response]]

### Interface
- `path_url`() -> Any
- `_encode_params`() -> Any
- `_encode_files`() -> Any
- `register_hook`() -> Any
- `deregister_hook`() -> Any
- `__init__`() -> Any
- `__repr__`() -> Any
- `prepare`() -> Any
- `copy`() -> Any
- `prepare_method`() -> Any
- `_get_idna_encoded_host`() -> Any
- `prepare_url`() -> Any
- `prepare_headers`() -> Any
- `prepare_body`() -> Any
- `prepare_content_length`() -> Any
- `prepare_auth`() -> Any
- `prepare_cookies`() -> Any
- `prepare_hooks`() -> Any
- `__enter__`() -> Any
- `__exit__`() -> Any
- `__getstate__`() -> Any
- `__setstate__`() -> Any
- `__bool__`() -> Any
- `__nonzero__`() -> Any
- `__iter__`() -> Any
- `ok`() -> Any
- `is_redirect`() -> Any
- `is_permanent_redirect`() -> Any
- `next`() -> Any
- `apparent_encoding`() -> Any
- `iter_content`() -> Any
- `iter_lines`() -> Any
- `content`() -> Any
- `text`() -> Any
- `json`() -> Any
- `links`() -> Any
- `raise_for_status`() -> Any
- `close`() -> Any
- `generate`() -> Any

### Implementation
**RequestEncodingMixin**

**RequestHooksMixin**

**Request**

**PreparedRequest**

**Response**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/models.py`  
**Dependencies**: `datetime`, `encodings.idna`, `io.UnsupportedOperation`, `urllib3.exceptions.DecodeError`, `urllib3.exceptions.LocationParseError`, `urllib3.exceptions.ProtocolError`, `urllib3.exceptions.ReadTimeoutError`, `urllib3.exceptions.SSLError`, `urllib3.fields.RequestField`, `urllib3.filepost.encode_multipart_formdata`, `urllib3.util.parse_url`, `_internal_utils.to_native_string`, `_internal_utils.unicode_is_ascii`, `auth.HTTPBasicAuth`, `compat.Callable`, `compat.JSONDecodeError`, `compat.Mapping`, `compat.basestring`, `compat.builtin_str`, `compat.chardet`, `compat.cookielib`, `compat.json`, `compat.urlencode`, `compat.urlsplit`, `compat.urlunparse`, `cookies._copy_cookie_jar`, `cookies.cookiejar_from_dict`, `cookies.get_cookie_header`, `exceptions.ChunkedEncodingError`, `exceptions.ConnectionError`, `exceptions.ContentDecodingError`, `exceptions.HTTPError`, `exceptions.InvalidJSONError`, `exceptions.InvalidURL`, `exceptions.JSONDecodeError`, `exceptions.MissingSchema`, `exceptions.SSLError`, `exceptions.StreamConsumedError`, `hooks.default_hooks`, `status_codes.codes`, `structures.CaseInsensitiveDict`, `utils.check_header_validity`, `utils.get_auth_from_url`, `utils.guess_filename`, `utils.guess_json_utf`, `utils.iter_slices`, `utils.parse_header_links`, `utils.requote_uri`, `utils.stream_decode_response_unicode`, `utils.super_len`, `utils.to_key_val_list`, `idna`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.certs

**Imports**: `certifi.where`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/certs.py`  
**Dependencies**: `certifi.where`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests

**Imports**: `warnings`, `urllib3`, `exceptions.RequestsDependencyWarning`, `urllib3.exceptions.DependencyWarning`, `logging`, `logging.NullHandler`, `packages`, `utils`, `__version__.__author__`, `__version__.__author_email__`, `__version__.__build__`, `__version__.__cake__`, `__version__.__copyright__`, `__version__.__description__`, `__version__.__license__`, `__version__.__title__`, `__version__.__url__`, `__version__.__version__`, `api.delete`, `api.get`, `api.head`, `api.options`, `api.patch`, `api.post`, `api.put`, `api.request`, `exceptions.ConnectionError`, `exceptions.ConnectTimeout`, `exceptions.FileModeWarning`, `exceptions.HTTPError`, `exceptions.JSONDecodeError`, `exceptions.ReadTimeout`, `exceptions.RequestException`, `exceptions.Timeout`, `exceptions.TooManyRedirects`, `exceptions.URLRequired`, `models.PreparedRequest`, `models.Request`, `models.Response`, `sessions.Session`, `sessions.session`, `status_codes.codes`, `charset_normalizer.__version__`, `chardet.__version__`, `ssl`, `urllib3.contrib.pyopenssl`, `cryptography.__version__`
### Interface
- `check_compatibility`() -> Any
- `_check_cryptography`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/__init__.py`  
**Dependencies**: `warnings`, `urllib3`, `exceptions.RequestsDependencyWarning`, `urllib3.exceptions.DependencyWarning`, `logging`, `logging.NullHandler`, `packages`, `utils`, `__version__.__author__`, `__version__.__author_email__`, `__version__.__build__`, `__version__.__cake__`, `__version__.__copyright__`, `__version__.__description__`, `__version__.__license__`, `__version__.__title__`, `__version__.__url__`, `__version__.__version__`, `api.delete`, `api.get`, `api.head`, `api.options`, `api.patch`, `api.post`, `api.put`, `api.request`, `exceptions.ConnectionError`, `exceptions.ConnectTimeout`, `exceptions.FileModeWarning`, `exceptions.HTTPError`, `exceptions.JSONDecodeError`, `exceptions.ReadTimeout`, `exceptions.RequestException`, `exceptions.Timeout`, `exceptions.TooManyRedirects`, `exceptions.URLRequired`, `models.PreparedRequest`, `models.Request`, `models.Response`, `sessions.Session`, `sessions.session`, `status_codes.codes`, `charset_normalizer.__version__`, `chardet.__version__`, `ssl`, `urllib3.contrib.pyopenssl`, `cryptography.__version__`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.status_codes

**Imports**: `structures.LookupDict`
### Interface
- `_init`() -> Any
- `doc`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/status_codes.py`  
**Dependencies**: `structures.LookupDict`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.packages

**Imports**: `sys`, `compat.chardet`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/packages.py`  
**Dependencies**: `sys`, `compat.chardet`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.__version__



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/__version__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.api
:::{doc} request:14
Constructs and sends a :class:`Request <Request>`.

:param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.
:param url: URL for the new :class:`Request` object.
:param params: (optional) Dictionary, list of tuples or bytes to send
    in the query string for the :class:`Request`.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
:param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.
:param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.
:param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.
    ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``
    or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content_type'`` is a string
    defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers
    to add for the file.
:param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.
:param timeout: (optional) How many seconds to wait for the server to send data
    before giving up, as a float, or a :ref:`(connect timeout, read
    timeout) <timeouts>` tuple.
:type timeout: float or tuple
:param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.
:type allow_redirects: bool
:param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
:param verify: (optional) Either a boolean, in which case it controls whether we verify
        the server's TLS certificate, or a string, in which case it must be a path
        to a CA bundle to use. Defaults to ``True``.
:param stream: (optional) if ``False``, the response content will be immediately downloaded.
:param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.
:return: :class:`Response <Response>` object
:rtype: requests.Response

Usage::

  >>> import requests
  >>> req = requests.request('GET', 'https://httpbin.org/get')
  >>> req
  <Response [200]>
:::
:::{doc} get:62
Sends a GET request.

:param url: URL for the new :class:`Request` object.
:param params: (optional) Dictionary, list of tuples or bytes to send
    in the query string for the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
:::
:::{doc} options:76
Sends an OPTIONS request.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
:::
:::{doc} head:88
Sends a HEAD request.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes. If
    `allow_redirects` is not provided, it will be set to `False` (as
    opposed to the default :meth:`request` behavior).
:return: :class:`Response <Response>` object
:rtype: requests.Response
:::
:::{doc} post:103
Sends a POST request.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
:::
:::{doc} put:118
Sends a PUT request.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
:::
:::{doc} patch:133
Sends a PATCH request.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
:::
:::{doc} delete:148
Sends a DELETE request.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
:::
**Imports**: `sessions`
### Interface
- `request`() -> Any
- `get`() -> Any
- `options`() -> Any
- `head`() -> Any
- `post`() -> Any
- `put`() -> Any
- `patch`() -> Any
- `delete`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/api.py`  
**Dependencies**: `sessions`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests._internal_utils
:::{doc} to_native_string:25
Given a string object, regardless of type, returns a representation of
that string in the native string type, encoding and decoding where
necessary. This assumes ASCII unless told otherwise.
:::
:::{doc} unicode_is_ascii:38
Determine if unicode string only contains ASCII characters.

:param str u_string: unicode string to check. Must be unicode
    and not Python 2 `str`.
:rtype: bool
:::
**Imports**: `re`, `compat.builtin_str`
### Interface
- `to_native_string`() -> Any
- `unicode_is_ascii`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/_internal_utils.py`  
**Dependencies**: `re`, `compat.builtin_str`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.utils
:::{doc} dict_to_sequence:126
Returns an internal sequence dictionary update.
:::
:::{doc} get_netrc_auth:204
Returns the Requests tuple auth for a given url from netrc.
:::
:::{doc} guess_filename:261
Tries to guess the filename of the given object.
:::
:::{doc} extract_zipped_paths:268
Replace nonexistent paths that look like they refer to a member of a zip
archive with the location of an extracted copy of the target, or else
just return the provided path unchanged.
:::
:::{doc} atomic_open:306
Write a file to the disk in an atomic fashion
:::
:::{doc} from_key_val_list:318
Take an object and test to see if it can be represented as a
dictionary. Unless it can not be represented as such, return an
OrderedDict, e.g.,

::

    >>> from_key_val_list([('key', 'val')])
    OrderedDict([('key', 'val')])
    >>> from_key_val_list('string')
    Traceback (most recent call last):
    ...
    ValueError: cannot encode objects that are not 2-tuples
    >>> from_key_val_list({'key': 'val'})
    OrderedDict([('key', 'val')])

:rtype: OrderedDict
:::
:::{doc} to_key_val_list:345
Take an object and test to see if it can be represented as a
dictionary. If it can be, return a list of tuples, e.g.,

::

    >>> to_key_val_list([('key', 'val')])
    [('key', 'val')]
    >>> to_key_val_list({'key': 'val'})
    [('key', 'val')]
    >>> to_key_val_list('string')
    Traceback (most recent call last):
    ...
    ValueError: cannot encode objects that are not 2-tuples

:rtype: list
:::
:::{doc} parse_list_header:375
Parse lists as described by RFC 2068 Section 2.

In particular, parse comma-separated lists where the elements of
the list may include quoted-strings.  A quoted-string could
contain a comma.  A non-quoted string could have quotes in the
middle.  Quotes are removed automatically after parsing.

It basically works like :func:`parse_set_header` just that items
may appear multiple times and case sensitivity is preserved.

The return value is a standard :class:`list`:

>>> parse_list_header('token, "quoted value"')
['token', 'quoted value']

To create a header from the :class:`list` again, use the
:func:`dump_header` function.

:param value: a string with a list header.
:return: :class:`list`
:rtype: list
:::
:::{doc} parse_dict_header:407
Parse lists of key, value pairs as described by RFC 2068 Section 2 and
convert them into a python dict:

>>> d = parse_dict_header('foo="is a fish", bar="as well"')
>>> type(d) is dict
True
>>> sorted(d.items())
[('bar', 'as well'), ('foo', 'is a fish')]

If there is no value for a key it will be `None`:

>>> parse_dict_header('key_without_value')
{'key_without_value': None}

To create a header from the :class:`dict` again, use the
:func:`dump_header` function.

:param value: a string with a dict header.
:return: :class:`dict`
:rtype: dict
:::
:::{doc} unquote_header_value:442
Unquotes a header value.  (Reversal of :func:`quote_header_value`).
This does not use the real unquoting but what browsers are actually
using for quoting.

:param value: the header value to unquote.
:rtype: str
:::
:::{doc} dict_from_cookiejar:467
Returns a key/value dictionary from a CookieJar.

:param cj: CookieJar object to extract cookies from.
:rtype: dict
:::
:::{doc} add_dict_to_cookiejar:478
Returns a CookieJar from a key/value dictionary.

:param cj: CookieJar to insert cookies into.
:param cookie_dict: Dict of key/values to insert into CookieJar.
:rtype: CookieJar
:::
:::{doc} get_encodings_from_content:489
Returns encodings from given content string.

:param content: bytestring to extract encodings from.
:::
:::{doc} _parse_content_type_header:514
Returns content type and parameters from given header

:param header: string
:return: tuple containing content type and dictionary of
     parameters
:::
:::{doc} get_encoding_from_headers:539
Returns encodings from given HTTP Header Dict.

:param headers: dictionary to extract encoding from.
:rtype: str
:::
:::{doc} stream_decode_response_unicode:564
Stream decodes an iterator.
:::
:::{doc} iter_slices:581
Iterate over slices of a string.
:::
:::{doc} get_unicode_from_response:591
Returns the requested content back in unicode.

:param r: Response object to get unicode content from.

Tried:

1. charset from content-type
2. fall back and replace all unicode characters

:rtype: str
:::
:::{doc} unquote_unreserved:636
Un-escape any percent-escape sequences in a URI that are unreserved
characters. This leaves all reserved, illegal and non-ASCII bytes encoded.

:rtype: str
:::
:::{doc} requote_uri:660
Re-quote the given URI.

This function passes the given URI through an unquote/quote cycle to
ensure that it is fully and consistently quoted.

:rtype: str
:::
:::{doc} address_in_network:682
This function allows you to check if an IP belongs to a network subnet

Example: returns True if ip = 192.168.1.1 and net = 192.168.1.0/24
         returns False if ip = 192.168.1.1 and net = 192.168.100.0/24

:rtype: bool
:::
:::{doc} dotted_netmask:697
Converts mask from /xx format to xxx.xxx.xxx.xxx

Example: if mask is 24 function returns 255.255.255.0

:rtype: str
:::
:::{doc} is_ipv4_address:708
:rtype: bool
:::
:::{doc} is_valid_cidr:719
Very simple check of the cidr format in no_proxy variable.

:rtype: bool
:::
:::{doc} set_environ:744
Set the environment variable 'env_name' to 'value'

Save previous value, yield, and then restore the previous value stored in
the environment variable 'env_name'.

If 'value' is None, do nothing
:::
:::{doc} should_bypass_proxies:765
Returns whether we should bypass proxies or not.

:rtype: bool
:::
:::{doc} get_environ_proxies:826
Return a dict of environment proxies.

:rtype: dict
:::
:::{doc} select_proxy:838
Select a proxy for the url, if applicable.

:param url: The url being for the request
:param proxies: A dictionary of schemes or schemes and hosts to proxy URLs
:::
:::{doc} resolve_proxies:864
This method takes proxy information from a request and configuration
input to resolve a mapping of target proxies. This will consider settings
such as NO_PROXY to strip proxy configurations.

:param request: Request or PreparedRequest
:param proxies: A dictionary of schemes or schemes and hosts to proxy URLs
:param trust_env: Boolean declaring whether to trust environment configs

:rtype: dict
:::
:::{doc} default_user_agent:891
Return a string representing the default user agent.

:rtype: str
:::
:::{doc} default_headers:900
:rtype: requests.structures.CaseInsensitiveDict
:::
:::{doc} parse_header_links:914
Return a list of parsed link headers proxies.

i.e. Link: <http:/.../front.jpeg>; rel=front; type="image/jpeg",<http://.../back.jpeg>; rel=back;type="image/jpeg"

:rtype: list
:::
:::{doc} guess_json_utf:957
:rtype: str
:::
:::{doc} prepend_scheme_if_needed:989
Given a URL that may or may not have a scheme, prepend the given scheme.
Does not replace a present scheme with the one provided as an argument.

:rtype: str
:::
:::{doc} get_auth_from_url:1018
Given a url with authentication components, extract them into a tuple of
username,password.

:rtype: (str,str)
:::
:::{doc} check_header_validity:1034
Verifies that header parts don't contain leading whitespace
reserved characters, or return characters.

:param header: tuple, in the format (name, value).
:::
:::{doc} urldefragauth:1064
Given a url remove the fragment and the authentication part.

:rtype: str
:::
:::{doc} rewind_body:1081
Move file pointer back to its recorded starting position
so it can be read again on redirect.
:::
**Imports**: `codecs`, `contextlib`, `io`, `os`, `re`, `socket`, `struct`, `sys`, `tempfile`, `warnings`, `zipfile`, `collections.OrderedDict`, `urllib3.util.make_headers`, `urllib3.util.parse_url`, `certs`, `__version__.__version__`, `_internal_utils._HEADER_VALIDATORS_BYTE`, `_internal_utils._HEADER_VALIDATORS_STR`, `_internal_utils.HEADER_VALIDATORS`, `_internal_utils.to_native_string`, `compat.Mapping`, `compat.basestring`, `compat.bytes`, `compat.getproxies`, `compat.getproxies_environment`, `compat.integer_types`, `compat.parse_http_list`, `compat.proxy_bypass`, `compat.proxy_bypass_environment`, `compat.quote`, `compat.str`, `compat.unquote`, `compat.urlparse`, `compat.urlunparse`, `cookies.cookiejar_from_dict`, `exceptions.FileModeWarning`, `exceptions.InvalidHeader`, `exceptions.InvalidURL`, `exceptions.UnrewindableBodyError`, `structures.CaseInsensitiveDict`, `netrc.NetrcParseError`, `netrc.netrc`, `winreg`
### Interface
- `dict_to_sequence`() -> Any
- `super_len`() -> Any
- `get_netrc_auth`() -> Any
- `guess_filename`() -> Any
- `extract_zipped_paths`() -> Any
- `atomic_open`() -> Any
- `from_key_val_list`() -> Any
- `to_key_val_list`() -> Any
- `parse_list_header`() -> Any
- `parse_dict_header`() -> Any
- `unquote_header_value`() -> Any
- `dict_from_cookiejar`() -> Any
- `add_dict_to_cookiejar`() -> Any
- `get_encodings_from_content`() -> Any
- `_parse_content_type_header`() -> Any
- `get_encoding_from_headers`() -> Any
- `stream_decode_response_unicode`() -> Any
- `iter_slices`() -> Any
- `get_unicode_from_response`() -> Any
- `unquote_unreserved`() -> Any
- `requote_uri`() -> Any
- `address_in_network`() -> Any
- `dotted_netmask`() -> Any
- `is_ipv4_address`() -> Any
- `is_valid_cidr`() -> Any
- `set_environ`() -> Any
- `should_bypass_proxies`() -> Any
- `get_environ_proxies`() -> Any
- `select_proxy`() -> Any
- `resolve_proxies`() -> Any
- `default_user_agent`() -> Any
- `default_headers`() -> Any
- `parse_header_links`() -> Any
- `guess_json_utf`() -> Any
- `prepend_scheme_if_needed`() -> Any
- `get_auth_from_url`() -> Any
- `check_header_validity`() -> Any
- `_validate_header_part`() -> Any
- `urldefragauth`() -> Any
- `rewind_body`() -> Any
- `proxy_bypass_registry`() -> Any
- `proxy_bypass`() -> Any
- `get_proxy`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/utils.py`  
**Dependencies**: `codecs`, `contextlib`, `io`, `os`, `re`, `socket`, `struct`, `sys`, `tempfile`, `warnings`, `zipfile`, `collections.OrderedDict`, `urllib3.util.make_headers`, `urllib3.util.parse_url`, `certs`, `__version__.__version__`, `_internal_utils._HEADER_VALIDATORS_BYTE`, `_internal_utils._HEADER_VALIDATORS_STR`, `_internal_utils.HEADER_VALIDATORS`, `_internal_utils.to_native_string`, `compat.Mapping`, `compat.basestring`, `compat.bytes`, `compat.getproxies`, `compat.getproxies_environment`, `compat.integer_types`, `compat.parse_http_list`, `compat.proxy_bypass`, `compat.proxy_bypass_environment`, `compat.quote`, `compat.str`, `compat.unquote`, `compat.urlparse`, `compat.urlunparse`, `cookies.cookiejar_from_dict`, `exceptions.FileModeWarning`, `exceptions.InvalidHeader`, `exceptions.InvalidURL`, `exceptions.UnrewindableBodyError`, `structures.CaseInsensitiveDict`, `netrc.NetrcParseError`, `netrc.netrc`, `winreg`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.exceptions
:::{doc} RequestException:12
There was an ambiguous exception that occurred while handling your
request.
:::
:::{doc} InvalidJSONError:27
A JSON error occurred.
:::
:::{doc} JSONDecodeError:31
Couldn't decode the text into json
:::
:::{doc} HTTPError:55
An HTTP error occurred.
:::
:::{doc} ConnectionError:59
A Connection error occurred.
:::
:::{doc} ProxyError:63
A proxy error occurred.
:::
:::{doc} SSLError:67
An SSL error occurred.
:::
:::{doc} Timeout:71
The request timed out.

Catching this error will catch both
:exc:`~requests.exceptions.ConnectTimeout` and
:exc:`~requests.exceptions.ReadTimeout` errors.
:::
:::{doc} ConnectTimeout:80
The request timed out while trying to connect to the remote server.

Requests that produced this error are safe to retry.
:::
:::{doc} ReadTimeout:87
The server did not send any data in the allotted amount of time.
:::
:::{doc} URLRequired:91
A valid URL is required to make a request.
:::
:::{doc} TooManyRedirects:95
Too many redirects.
:::
:::{doc} MissingSchema:99
The URL scheme (e.g. http or https) is missing.
:::
:::{doc} InvalidSchema:103
The URL scheme provided is either invalid or unsupported.
:::
:::{doc} InvalidURL:107
The URL provided was somehow invalid.
:::
:::{doc} InvalidHeader:111
The header value provided was somehow invalid.
:::
:::{doc} InvalidProxyURL:115
The proxy URL provided is invalid.
:::
:::{doc} ChunkedEncodingError:119
The server declared chunked encoding but sent an invalid chunk.
:::
:::{doc} ContentDecodingError:123
Failed to decode response content.
:::
:::{doc} StreamConsumedError:127
The content for this response was already consumed.
:::
:::{doc} RetryError:131
Custom retries logic failed
:::
:::{doc} UnrewindableBodyError:135
Requests encountered an error when trying to rewind a body.
:::
:::{doc} RequestsWarning:142
Base warning for Requests.
:::
:::{doc} FileModeWarning:146
A file was opened in text mode, but Requests determined its binary length.
:::
:::{doc} RequestsDependencyWarning:150
An imported dependency doesn't match the expected version range.
:::
**Imports**: `urllib3.exceptions.HTTPError`, `compat.JSONDecodeError`
**Type References**: [[ChunkedEncodingError]], [[ConnectTimeout]], [[ConnectionError]], [[ContentDecodingError]], [[FileModeWarning]], [[HTTPError]], [[InvalidHeader]], [[InvalidJSONError]], [[InvalidProxyURL]], [[InvalidSchema]], [[InvalidURL]], [[JSONDecodeError]], [[MissingSchema]], [[ProxyError]], [[ReadTimeout]], [[RequestException]], [[RequestsDependencyWarning]], [[RequestsWarning]], [[RetryError]], [[SSLError]], [[StreamConsumedError]], [[Timeout]], [[TooManyRedirects]], [[URLRequired]], [[UnrewindableBodyError]]

### Interface
- `__init__`() -> Any
- `__reduce__`() -> Any

### Implementation
**RequestException**

**InvalidJSONError**

**JSONDecodeError**

**HTTPError**

**ConnectionError**

**ProxyError**

**SSLError**

**Timeout**

**ConnectTimeout**

**ReadTimeout**

**URLRequired**

**TooManyRedirects**

**MissingSchema**

**InvalidSchema**

**InvalidURL**

**InvalidHeader**

**InvalidProxyURL**

**ChunkedEncodingError**

**ContentDecodingError**

**StreamConsumedError**

**RetryError**

**UnrewindableBodyError**

**RequestsWarning**

**FileModeWarning**

**RequestsDependencyWarning**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/exceptions.py`  
**Dependencies**: `urllib3.exceptions.HTTPError`, `compat.JSONDecodeError`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.structures
:::{doc} CaseInsensitiveDict:13
A case-insensitive ``dict``-like object.

Implements all methods and operations of
``MutableMapping`` as well as dict's ``copy``. Also
provides ``lower_items``.

All keys are expected to be strings. The structure remembers the
case of the last key to be set, and ``iter(instance)``,
``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``
will contain case-sensitive keys. However, querying and contains
testing is case insensitive::

    cid = CaseInsensitiveDict()
    cid['Accept'] = 'application/json'
    cid['aCCEPT'] == 'application/json'  # True
    list(cid) == ['Accept']  # True

For example, ``headers['content-encoding']`` will return the
value of a ``'Content-Encoding'`` response header, regardless
of how the header name was originally stored.

If the constructor, ``.update``, or equality comparison
operations are given keys that have equal ``.lower()``s, the
behavior is undefined.
:::
:::{doc} LookupDict:83
Dictionary lookup object.
:::
**Imports**: `collections.OrderedDict`, `compat.Mapping`, `compat.MutableMapping`
**Type References**: [[CaseInsensitiveDict]], [[LookupDict]]

### Interface
- `__init__`() -> Any
- `__setitem__`() -> Any
- `__getitem__`() -> Any
- `__delitem__`() -> Any
- `__iter__`() -> Any
- `__len__`() -> Any
- `lower_items`() -> Any
- `__eq__`() -> Any
- `copy`() -> Any
- `__repr__`() -> Any
- `get`() -> Any

### Implementation
**CaseInsensitiveDict**

**LookupDict**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/structures.py`  
**Dependencies**: `collections.OrderedDict`, `compat.Mapping`, `compat.MutableMapping`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.help
:::{doc} _implementation:34
Return a dict with the Python implementation and version.

Provide both the name and the version of the Python implementation
currently running. For example, on CPython 3.10.3 it will return
{'name': 'CPython', 'version': '3.10.3'}.

This function works best on CPython and PyPy: in particular, it probably
doesn't work for Jython or IronPython. Future investigation should be done
to work out the correct shape of the code for those platforms.
:::
:::{doc} info:69
Generate information for a bug report.
:::
:::{doc} main:128
Pretty-print the bug information as JSON.
:::
**Imports**: `json`, `platform`, `ssl`, `sys`, `idna`, `urllib3`, `__version__`, `charset_normalizer`, `chardet`, `urllib3.contrib.pyopenssl`, `cryptography`, `OpenSSL`
### Interface
- `_implementation`() -> Any
- `info`() -> Any
- `main`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/help.py`  
**Dependencies**: `json`, `platform`, `ssl`, `sys`, `idna`, `urllib3`, `__version__`, `charset_normalizer`, `chardet`, `urllib3.contrib.pyopenssl`, `cryptography`, `OpenSSL`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.requests.adapters
:::{doc} BaseAdapter:137
The Base Transport Adapter
:::
:::{doc} HTTPAdapter:167
The built-in HTTP Adapter for urllib3.

Provides a general-case interface for Requests sessions to contact HTTP and
HTTPS urls by implementing the Transport Adapter interface. This class will
usually be created by the :class:`Session <Session>` class under the
covers.

:param pool_connections: The number of urllib3 connection pools to cache.
:param pool_maxsize: The maximum number of connections to save in the pool.
:param max_retries: The maximum number of retries each connection
    should attempt. Note, this applies only to failed DNS lookups, socket
    connections and connection timeouts, never to requests where data has
    made it to the server. By default, Requests does not retry failed
    connections. If you need granular control over the conditions under
    which we retry a request, import urllib3's ``Retry`` class and pass
    that instead.
:param pool_block: Whether the connection pool should block for connections.

Usage::

  >>> import requests
  >>> s = requests.Session()
  >>> a = requests.adapters.HTTPAdapter(max_retries=3)
  >>> s.mount('http://', a)
:::
**Imports**: `os.path`, `socket`, `typing`, `warnings`, `urllib3.exceptions.ClosedPoolError`, `urllib3.exceptions.ConnectTimeoutError`, `urllib3.exceptions.HTTPError`, `urllib3.exceptions.InvalidHeader`, `urllib3.exceptions.LocationValueError`, `urllib3.exceptions.MaxRetryError`, `urllib3.exceptions.NewConnectionError`, `urllib3.exceptions.ProtocolError`, `urllib3.exceptions.ProxyError`, `urllib3.exceptions.ReadTimeoutError`, `urllib3.exceptions.ResponseError`, `urllib3.exceptions.SSLError`, `urllib3.poolmanager.PoolManager`, `urllib3.poolmanager.proxy_from_url`, `urllib3.util.Timeout`, `urllib3.util.parse_url`, `urllib3.util.retry.Retry`, `urllib3.util.ssl_.create_urllib3_context`, `auth._basic_auth_str`, `compat.basestring`, `compat.urlparse`, `cookies.extract_cookies_to_jar`, `exceptions.ConnectionError`, `exceptions.ConnectTimeout`, `exceptions.InvalidHeader`, `exceptions.InvalidProxyURL`, `exceptions.InvalidSchema`, `exceptions.InvalidURL`, `exceptions.ProxyError`, `exceptions.ReadTimeout`, `exceptions.RetryError`, `exceptions.SSLError`, `models.Response`, `structures.CaseInsensitiveDict`, `utils.DEFAULT_CA_BUNDLE_PATH`, `utils.extract_zipped_paths`, `utils.get_auth_from_url`, `utils.get_encoding_from_headers`, `utils.prepend_scheme_if_needed`, `utils.select_proxy`, `utils.urldefragauth`, `urllib3.contrib.socks.SOCKSProxyManager`, `models.PreparedRequest`, `ssl`
**Type References**: [[BaseAdapter]], [[HTTPAdapter]]

### Interface
- `_urllib3_request_context`(request: PreparedRequest, verify: bool | str | None, client_cert: typing.Tuple[str, str] | str | None, poolmanager: PoolManager) -> (typing.Dict[str, typing.Any], typing.Dict[str, typing.Any])
- `__init__`() -> Any
- `send`() -> Any
- `close`() -> Any
- `__getstate__`() -> Any
- `__setstate__`() -> Any
- `init_poolmanager`() -> Any
- `proxy_manager_for`() -> Any
- `cert_verify`() -> Any
- `build_response`() -> Any
- `build_connection_pool_key_attributes`() -> Any
- `get_connection_with_tls_context`() -> Any
- `get_connection`() -> Any
- `request_url`() -> Any
- `add_headers`() -> Any
- `proxy_headers`() -> Any
- `SOCKSProxyManager`() -> Any

### Implementation
**BaseAdapter**

**HTTPAdapter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/requests/adapters.py`  
**Dependencies**: `os.path`, `socket`, `typing`, `warnings`, `urllib3.exceptions.ClosedPoolError`, `urllib3.exceptions.ConnectTimeoutError`, `urllib3.exceptions.HTTPError`, `urllib3.exceptions.InvalidHeader`, `urllib3.exceptions.LocationValueError`, `urllib3.exceptions.MaxRetryError`, `urllib3.exceptions.NewConnectionError`, `urllib3.exceptions.ProtocolError`, `urllib3.exceptions.ProxyError`, `urllib3.exceptions.ReadTimeoutError`, `urllib3.exceptions.ResponseError`, `urllib3.exceptions.SSLError`, `urllib3.poolmanager.PoolManager`, `urllib3.poolmanager.proxy_from_url`, `urllib3.util.Timeout`, `urllib3.util.parse_url`, `urllib3.util.retry.Retry`, `urllib3.util.ssl_.create_urllib3_context`, `auth._basic_auth_str`, `compat.basestring`, `compat.urlparse`, `cookies.extract_cookies_to_jar`, `exceptions.ConnectionError`, `exceptions.ConnectTimeout`, `exceptions.InvalidHeader`, `exceptions.InvalidProxyURL`, `exceptions.InvalidSchema`, `exceptions.InvalidURL`, `exceptions.ProxyError`, `exceptions.ReadTimeout`, `exceptions.RetryError`, `exceptions.SSLError`, `models.Response`, `structures.CaseInsensitiveDict`, `utils.DEFAULT_CA_BUNDLE_PATH`, `utils.extract_zipped_paths`, `utils.get_auth_from_url`, `utils.get_encoding_from_headers`, `utils.prepend_scheme_if_needed`, `utils.select_proxy`, `utils.urldefragauth`, `urllib3.contrib.socks.SOCKSProxyManager`, `models.PreparedRequest`, `ssl`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip
:::{doc} main:6
This is an internal API only meant for use by pip's own console scripts.

For additional details, see https://github.com/pypa/pip/issues/7498.
:::
**Imports**: `typing.List`, `typing.Optional`, `pip._internal.utils.entrypoints._wrapper`
### Interface
- `main`(args: [Optional[List[str]]](#optional)) -> int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/__init__.py`  
**Dependencies**: `typing.List`, `typing.Optional`, `pip._internal.utils.entrypoints._wrapper`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip.__pip-runner__

**Imports**: `sys`, `runpy`, `importlib.machinery.PathFinder`, `os.path.dirname`
**Type References**: [[PipImportRedirectingFinder]]

### Interface
- `version_str`() -> Any
- `find_spec`() -> Any

### Implementation
**PipImportRedirectingFinder**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/__pip-runner__.py`  
**Dependencies**: `sys`, `runpy`, `importlib.machinery.PathFinder`, `os.path.dirname`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip.__main__

**Imports**: `os`, `sys`, `pip._internal.cli.main.main`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/__main__.py`  
**Dependencies**: `os`, `sys`, `pip._internal.cli.main.main`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.uv._find_uv
:::{doc} find_uv_bin:8
Return the uv binary path.
:::
**Imports**: `__future__.annotations`, `os`, `sys`, `sysconfig`
### Interface
- `find_uv_bin`() -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/uv/_find_uv.py`  
**Dependencies**: `__future__.annotations`, `os`, `sys`, `sysconfig`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.uv

**Imports**: `__future__.annotations`, `os`, `_find_uv.find_uv_bin`, `_build_backend.*`
### Interface
- `__getattr__`(attr_name: str) -> object
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/uv/__init__.py`  
**Dependencies**: `__future__.annotations`, `os`, `_find_uv.find_uv_bin`, `_build_backend.*`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.uv._build_backend
:::{doc} call:32
Invoke a uv subprocess and return the filename from stdout.
:::
:::{doc} build_sdist:59
PEP 517 hook `build_sdist`.
:::
:::{doc} build_wheel:67
PEP 517 hook `build_wheel`.
:::
:::{doc} get_requires_for_build_sdist:79
PEP 517 hook `get_requires_for_build_sdist`.
:::
:::{doc} get_requires_for_build_wheel:87
PEP 517 hook `get_requires_for_build_wheel`.
:::
:::{doc} prepare_metadata_for_build_wheel:95
PEP 517 hook `prepare_metadata_for_build_wheel`.
:::
:::{doc} build_editable:103
PEP 660 hook `build_editable`.
:::
:::{doc} get_requires_for_build_editable:115
PEP 660 hook `get_requires_for_build_editable`.
:::
:::{doc} prepare_metadata_for_build_editable:123
PEP 660 hook `prepare_metadata_for_build_editable`.
:::
**Imports**: `collections.abc.Mapping`, `collections.abc.Sequence`, `typing.Any`, `sys`, `shutil`, `subprocess`, `sys`
### Interface
- `warn_config_settings`(config_settings: Mapping[Any, Any] | None) -> None
- `call`(args: Sequence[str], config_settings: Mapping[Any, Any] | None) -> str
- `build_sdist`(sdist_directory: str, config_settings: Mapping[Any, Any] | None) -> str
- `build_wheel`(wheel_directory: str, config_settings: Mapping[Any, Any] | None, metadata_directory: str | None) -> str
- `get_requires_for_build_sdist`(config_settings: Mapping[Any, Any] | None) -> Sequence[str]
- `get_requires_for_build_wheel`(config_settings: Mapping[Any, Any] | None) -> Sequence[str]
- `prepare_metadata_for_build_wheel`(metadata_directory: str, config_settings: Mapping[Any, Any] | None) -> str
- `build_editable`(wheel_directory: str, config_settings: Mapping[Any, Any] | None, metadata_directory: str | None) -> str
- `get_requires_for_build_editable`(config_settings: Mapping[Any, Any] | None) -> Sequence[str]
- `prepare_metadata_for_build_editable`(metadata_directory: str, config_settings: Mapping[Any, Any] | None) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/uv/_build_backend.py`  
**Dependencies**: `collections.abc.Mapping`, `collections.abc.Sequence`, `typing.Any`, `sys`, `shutil`, `subprocess`, `sys`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.uv.__main__
:::{doc} _detect_virtualenv:7
Find the virtual environment path for the current Python executable.
:::
**Imports**: `os`, `sys`, `uv.find_uv_bin`, `subprocess`
### Interface
- `_detect_virtualenv`() -> str
- `_run`() -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/uv/__main__.py`  
**Dependencies**: `os`, `sys`, `uv.find_uv_bin`, `subprocess`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.tomli._types

**Imports**: `typing.Any`, `typing.Callable`, `typing.Tuple`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/tomli/_types.py`  
**Dependencies**: `typing.Any`, `typing.Callable`, `typing.Tuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.tomli

**Imports**: `_parser.TOMLDecodeError`, `_parser.load`, `_parser.loads`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/tomli/__init__.py`  
**Dependencies**: `_parser.TOMLDecodeError`, `_parser.load`, `_parser.loads`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.tomli._parser
:::{doc} DEPRECATED_DEFAULT:66
Sentinel to be used as default arg during deprecation
period of TOMLDecodeError's free-form arguments.
:::
:::{doc} TOMLDecodeError:71
An error raised if a document is not valid TOML.

Adds the following attributes to ValueError:
msg: The unformatted error message
doc: The TOML document being parsed
pos: The index of doc where parsing failed
lineno: The line corresponding to pos
colno: The column corresponding to pos
:::
:::{doc} load:130
Parse TOML from a binary file object.
:::
:::{doc} loads:142
Parse TOML from a string.
:::
:::{doc} Flags:213
Flags that map to parsed keys/namespaces.
:::
:::{doc} make_safe_parse_float:752
A decorator to make `parse_float` safe.

`parse_float` must not return dicts or lists, because these types
would be mixed with parsed TOML tables and arrays, thus confusing
the parser. The returned decorated callable raises `ValueError`
instead of returning illegal types.
:::
**Imports**: `__future__.annotations`, `collections.abc.Iterable`, `string`, `sys`, `types.MappingProxyType`, `typing.IO`, `typing.Any`, `typing.Final`, `typing.NamedTuple`, `warnings`, `_re.RE_DATETIME`, `_re.RE_LOCALTIME`, `_re.RE_NUMBER`, `_re.match_to_datetime`, `_re.match_to_localtime`, `_re.match_to_number`, `_types.Key`, `_types.ParseFloat`, `_types.Pos`
**Type References**: [[Any]], [[DEPRECATED_DEFAULT]], [[Final]], [[Flags]], [[Key]], [[NestedDict]], [[None]], [[Output]], [[TOMLDecodeError]]

### Interface
- `load`(__fp: IO[bytes]) -> dict[<ast.Tuple object at 0x1194a11d0>]
- `loads`(__s: str) -> dict[<ast.Tuple object at 0x119494b10>]
- `skip_chars`(src: str, pos: Pos, chars: Iterable[str]) -> Pos
- `skip_until`(src: str, pos: Pos, expect: str) -> Pos
- `skip_comment`(src: str, pos: Pos) -> Pos
- `skip_comments_and_array_ws`(src: str, pos: Pos) -> Pos
- `create_dict_rule`(src: str, pos: Pos, out: Output) -> tuple[<ast.Tuple object at 0x119506950>]
- `create_list_rule`(src: str, pos: Pos, out: Output) -> tuple[<ast.Tuple object at 0x119519350>]
- `key_value_rule`(src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat) -> Pos
- `parse_key_value_pair`(src: str, pos: Pos, parse_float: ParseFloat, nest_lvl: int) -> tuple[<ast.Tuple object at 0x11952e010>]
- `parse_key`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x11953d550>]
- `parse_key_part`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x119544290>]
- `parse_one_line_basic_str`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x119544fd0>]
- `parse_array`(src: str, pos: Pos, parse_float: ParseFloat, nest_lvl: int) -> tuple[<ast.Tuple object at 0x11954d4d0>]
- `parse_inline_table`(src: str, pos: Pos, parse_float: ParseFloat, nest_lvl: int) -> tuple[<ast.Tuple object at 0x1195647d0>]
- `parse_basic_str_escape`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x119571210>]
- `parse_basic_str_escape_multiline`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x119571dd0>]
- `parse_hex_char`(src: str, pos: Pos, hex_len: int) -> tuple[<ast.Tuple object at 0x119578750>]
- `parse_literal_str`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x119579dd0>]
- `parse_multiline_str`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x119585b90>]
- `parse_basic_str`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x119592c10>]
- `parse_value`(src: str, pos: Pos, parse_float: ParseFloat, nest_lvl: int) -> tuple[<ast.Tuple object at 0x1195b1150>]
- `is_unicode_scalar_value`(codepoint: int) -> bool
- `make_safe_parse_float`(parse_float: ParseFloat) -> ParseFloat
- `__init__`() -> None
- `add_pending`(key: Key, flag: int) -> None
- `finalize_pending`() -> None
- `unset_all`(key: Key) -> None
- `set`(key: Key, flag: int) -> None
- `is_`(key: Key, flag: int) -> bool
- `get_or_create_nest`(key: Key) -> dict
- `append_nest_to_list`(key: Key) -> None
- `safe_parse_float`(float_str: str) -> Any

### Implementation
**DEPRECATED_DEFAULT**

**TOMLDecodeError**

**Flags**
  - FROZEN: Final
  - EXPLICIT_NEST: Final
**NestedDict**
  - cont: Any
**Output**
  - data: NestedDict
  - flags: Flags
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/tomli/_parser.py`  
**Dependencies**: `__future__.annotations`, `collections.abc.Iterable`, `string`, `sys`, `types.MappingProxyType`, `typing.IO`, `typing.Any`, `typing.Final`, `typing.NamedTuple`, `warnings`, `_re.RE_DATETIME`, `_re.RE_LOCALTIME`, `_re.RE_NUMBER`, `_re.match_to_datetime`, `_re.match_to_localtime`, `_re.match_to_number`, `_types.Key`, `_types.ParseFloat`, `_types.Pos`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.tomli._re
:::{doc} match_to_datetime:54
Convert a `RE_DATETIME` match to `datetime.datetime` or `datetime.date`.

Raises ValueError if the match does not correspond to a valid date
or datetime.
:::
**Imports**: `__future__.annotations`, `datetime.date`, `datetime.datetime`, `datetime.time`, `datetime.timedelta`, `datetime.timezone`, `datetime.tzinfo`, `functools.lru_cache`, `re`, `typing.Any`, `typing.Final`, `_types.ParseFloat`
**Type References**: [[Final]], [[None]]

### Interface
- `match_to_datetime`(match: re.Match) -> datetime | date
- `cached_tz`(hour_str: str, minute_str: str, sign_str: str) -> timezone
- `match_to_localtime`(match: re.Match) -> time
- `match_to_number`(match: re.Match, parse_float: ParseFloat) -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/tomli/_re.py`  
**Dependencies**: `__future__.annotations`, `datetime.date`, `datetime.datetime`, `datetime.time`, `datetime.timedelta`, `datetime.timezone`, `datetime.tzinfo`, `functools.lru_cache`, `re`, `typing.Any`, `typing.Final`, `_types.ParseFloat`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.certifi

**Imports**: `core.contents`, `core.where`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/certifi/__init__.py`  
**Dependencies**: `core.contents`, `core.where`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.certifi.core

**Imports**: `sys`, `atexit`, `importlib.resources.as_file`, `importlib.resources.files`, `importlib.resources.path`, `importlib.resources.read_text`, `os`, `types`, `typing.Union`
### Interface
- `exit_cacert_ctx`() -> None
- `where`() -> str
- `contents`() -> str
- `read_text`(package: Package, resource: Resource, encoding: str, errors: str) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/certifi/core.py`  
**Dependencies**: `sys`, `atexit`, `importlib.resources.as_file`, `importlib.resources.files`, `importlib.resources.path`, `importlib.resources.read_text`, `os`, `types`, `typing.Union`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.certifi.__main__

**Imports**: `argparse`, `certifi.contents`, `certifi.where`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/certifi/__main__.py`  
**Dependencies**: `argparse`, `certifi.contents`, `certifi.where`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pytest_cov.compat


**Type References**: [[SessionWrapper]]

### Interface
- `__init__`() -> Any
- `testsfailed`() -> Any

### Implementation
**SessionWrapper**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pytest_cov/compat.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pytest_cov.embed

**Imports**: `atexit`, `os`, `signal`, `coverage`
### Interface
- `init`() -> Any
- `_cleanup`() -> Any
- `cleanup`() -> Any
- `_signal_cleanup_handler`() -> Any
- `cleanup_on_signal`() -> Any
- `cleanup_on_sigterm`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pytest_cov/embed.py`  
**Dependencies**: `atexit`, `os`, `signal`, `coverage`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pytest_cov
:::{doc} CoverageError:8
Indicates that our coverage is too low
:::
:::{doc} PytestCovWarning:12
The base for all pytest-cov warnings, never raised directly.
:::
:::{doc} CovDisabledWarning:18
Indicates that Coverage was manually disabled.
:::
:::{doc} CovReportWarning:24
Indicates that we failed to generate a report.
:::
:::{doc} CovFailUnderWarning:30
Indicates that we failed to generate a report.
:::
:::{doc} CentralCovContextWarning:36
Indicates that dynamic_context was set to test_function instead of using the builtin --cov-context.
:::
:::{doc} DistCovError:42
Raised when dynamic_context is set to test_function and xdist is also used.

See: https://github.com/pytest-dev/pytest-cov/issues/604
:::
**Imports**: `pytest`
**Type References**: [[CentralCovContextWarning]], [[CovDisabledWarning]], [[CovFailUnderWarning]], [[CovReportWarning]], [[CoverageError]], [[DistCovError]], [[PytestCovWarning]]


### Implementation
**CoverageError**

**PytestCovWarning**

**CovDisabledWarning**

**CovReportWarning**

**CovFailUnderWarning**

**CentralCovContextWarning**

**DistCovError**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pytest_cov/__init__.py`  
**Dependencies**: `pytest`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pytest_cov.engine
:::{doc} CovController:66
Base class for different plugin implementations.
:::
:::{doc} Central:235
Implementation for centralised operation.
:::
:::{doc} DistMaster:286
Implementation for distributed master.
:::
:::{doc} DistWorker:384
Implementation for distributed workers.
:::
**Imports**: `contextlib`, `copy`, `functools`, `os`, `random`, `socket`, `sys`, `warnings`, `io.StringIO`, `pathlib.Path`, `coverage`, `coverage.data.CoverageData`, `coverage.sqldata.filename_suffix`, `CentralCovContextWarning`, `DistCovError`, `embed.cleanup`
**Type References**: [[BrokenCovConfigError]], [[Central]], [[CovController]], [[DistMaster]], [[DistWorker]], [[_NullFile]]

### Interface
- `_backup`() -> Any
- `_ensure_topdir`() -> Any
- `_data_suffix`() -> Any
- `write`() -> Any
- `ensure_topdir_wrapper`() -> Any
- `__init__`() -> Any
- `ensure_topdir`() -> Any
- `pause`() -> Any
- `resume`() -> Any
- `set_env`() -> Any
- `unset_env`() -> Any
- `get_node_desc`() -> Any
- `sep`() -> Any
- `summary`() -> Any
- `start`() -> Any
- `finish`() -> Any
- `configure_node`() -> Any
- `testnodedown`() -> Any

### Implementation
**BrokenCovConfigError**

**_NullFile**

**CovController**

**Central**

**DistMaster**

**DistWorker**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pytest_cov/engine.py`  
**Dependencies**: `contextlib`, `copy`, `functools`, `os`, `random`, `socket`, `sys`, `warnings`, `io.StringIO`, `pathlib.Path`, `coverage`, `coverage.data.CoverageData`, `coverage.sqldata.filename_suffix`, `CentralCovContextWarning`, `DistCovError`, `embed.cleanup`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pytest_cov.plugin
:::{doc} pytest_addoption:79
Add options to control coverage.
:::
:::{doc} _prepare_cov_source:167
Prepare cov_source so that:

 --cov --cov=foobar is equivalent to --cov (cov_source=None)
 --cov=foo --cov=bar is equivalent to cov_source=['foo', 'bar']
:::
:::{doc} CovPlugin:194
Use coverage package to produce code coverage reports.

Delegates all work to a particular implementation based on whether
this test process is centralised, a distributed master or a
distributed worker.
:::
:::{doc} no_cover:429
A pytest fixture to disable coverage.
:::
:::{doc} cov:434
A pytest fixture to provide access to the underlying coverage object.
:::
**Imports**: `argparse`, `os`, `warnings`, `io.StringIO`, `pathlib.Path`, `coverage`, `pytest`, `coverage.results.display_covered`, `coverage.results.should_fail_under`, `CovDisabledWarning`, `CovFailUnderWarning`, `CovReportWarning`, `compat`, `embed`, `engine`, `engine`, `coverage.misc.CoverageException`
**Type References**: [[Config]], [[CovPlugin]], [[StoreReport]], [[TestContextPlugin]]

### Interface
- `validate_report`() -> Any
- `validate_fail_under`() -> Any
- `validate_context`() -> Any
- `pytest_addoption`() -> Any
- `_prepare_cov_source`() -> Any
- `pytest_load_initial_conftests`() -> Any
- `no_cover`() -> Any
- `cov`() -> Any
- `pytest_configure`() -> Any
- `__call__`() -> Any
- `__init__`() -> Any
- `start`() -> Any
- `_is_worker`() -> Any
- `pytest_sessionstart`() -> Any
- `pytest_configure_node`() -> Any
- `pytest_testnodedown`() -> Any
- `_should_report`() -> Any
- `pytest_runtestloop`() -> Any
- `pytest_terminal_summary`() -> Any
- `pytest_runtest_setup`() -> Any
- `pytest_runtest_teardown`() -> Any
- `pytest_runtest_call`() -> Any
- `switch_context`() -> Any

### Implementation
**StoreReport**

**CovPlugin**

**TestContextPlugin**

**Config**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pytest_cov/plugin.py`  
**Dependencies**: `argparse`, `os`, `warnings`, `io.StringIO`, `pathlib.Path`, `coverage`, `pytest`, `coverage.results.display_covered`, `coverage.results.should_fail_under`, `CovDisabledWarning`, `CovFailUnderWarning`, `CovReportWarning`, `compat`, `embed`, `engine`, `engine`, `coverage.misc.CoverageException`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.themes

**Imports**: `default_styles.DEFAULT_STYLES`, `theme.Theme`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/themes.py`  
**Dependencies**: `default_styles.DEFAULT_STYLES`, `theme.Theme`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.screen
:::{doc} Screen:18
A renderable that fills the terminal screen and crops excess.

Args:
    renderable (RenderableType): Child renderable.
    style (StyleType, optional): Optional background style. Defaults to None.
:::
**Imports**: `typing.Optional`, `typing.TYPE_CHECKING`, `segment.Segment`, `style.StyleType`, `_loop.loop_last`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `console.RenderableType`, `console.Group`, `rich.console.Group`
**Type References**: [[RenderableType]], [[Screen]]

### Interface
- `__init__`() -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult

### Implementation
**Screen**
  - renderable: RenderableType
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/screen.py`  
**Dependencies**: `typing.Optional`, `typing.TYPE_CHECKING`, `segment.Segment`, `style.StyleType`, `_loop.loop_last`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `console.RenderableType`, `console.Group`, `rich.console.Group`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.logging
:::{doc} RichHandler:18
A logging handler that renders output with Rich. The time / level / message and file are displayed in columns.
The level is color coded, and the message is syntax highlighted.

Note:
    Be careful when enabling console markup in log messages if you have configured logging for libraries not
    under your control. If a dependency writes messages containing square brackets, it may not produce the intended output.

Args:
    level (Union[int, str], optional): Log level. Defaults to logging.NOTSET.
    console (:class:`~rich.console.Console`, optional): Optional console instance to write logs.
        Default will use a global console instance writing to stdout.
    show_time (bool, optional): Show a column for the time. Defaults to True.
    omit_repeated_times (bool, optional): Omit repetition of the same time. Defaults to True.
    show_level (bool, optional): Show a column for the level. Defaults to True.
    show_path (bool, optional): Show the path to the original log call. Defaults to True.
    enable_link_path (bool, optional): Enable terminal link of path column to file. Defaults to True.
    highlighter (Highlighter, optional): Highlighter to style log messages, or None to use ReprHighlighter. Defaults to None.
    markup (bool, optional): Enable console markup in log messages. Defaults to False.
    rich_tracebacks (bool, optional): Enable rich tracebacks with syntax highlighting and formatting. Defaults to False.
    tracebacks_width (Optional[int], optional): Number of characters used to render tracebacks, or None for full width. Defaults to None.
    tracebacks_code_width (int, optional): Number of code characters used to render tracebacks, or None for full width. Defaults to 88.
    tracebacks_extra_lines (int, optional): Additional lines of code to render tracebacks, or None for full width. Defaults to None.
    tracebacks_theme (str, optional): Override pygments theme used in traceback.
    tracebacks_word_wrap (bool, optional): Enable word wrapping of long tracebacks lines. Defaults to True.
    tracebacks_show_locals (bool, optional): Enable display of locals in tracebacks. Defaults to False.
    tracebacks_suppress (Sequence[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.
    tracebacks_max_frames (int, optional): Optional maximum number of frames returned by traceback.
    locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to 10.
    locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.
    log_time_format (Union[str, TimeFormatterCallable], optional): If ``log_time`` is enabled, either string for strftime or callable that formats the time. Defaults to "[%x %X] ".
    keywords (List[str], optional): List of words to highlight instead of ``RichHandler.KEYWORDS``.
:::
**Imports**: `logging`, `datetime.datetime`, `logging.Handler`, `logging.LogRecord`, `pathlib.Path`, `types.ModuleType`, `typing.ClassVar`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Type`, `typing.Union`, `rich._null_file.NullFile`, `get_console`, `_log_render.FormatTimeCallable`, `_log_render.LogRender`, `console.Console`, `console.ConsoleRenderable`, `highlighter.Highlighter`, `highlighter.ReprHighlighter`, `text.Text`, `traceback.Traceback`, `time.sleep`
**Type References**: [[ClassVar]], [[RichHandler]]

### Interface
- `__init__`(level: [Union[<ast.Tuple object at 0x119761790>]](#union), console: [Optional[Console]](#optional)) -> None
- `get_level_text`(record: LogRecord) -> Text
- `emit`(record: LogRecord) -> None
- `render_message`(record: LogRecord, message: str) -> ConsoleRenderable
- `render`() -> ConsoleRenderable
- `divide`() -> None

### Implementation
**RichHandler**
  - KEYWORDS: ClassVar[Optional[List[str]]]
  - HIGHLIGHTER_CLASS: ClassVar[Type[Highlighter]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/logging.py`  
**Dependencies**: `logging`, `datetime.datetime`, `logging.Handler`, `logging.LogRecord`, `pathlib.Path`, `types.ModuleType`, `typing.ClassVar`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Type`, `typing.Union`, `rich._null_file.NullFile`, `get_console`, `_log_render.FormatTimeCallable`, `_log_render.LogRender`, `console.Console`, `console.ConsoleRenderable`, `highlighter.Highlighter`, `highlighter.ReprHighlighter`, `text.Text`, `traceback.Traceback`, `time.sleep`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.measure
:::{doc} Measurement:11
Stores the minimum and maximum widths (in characters) required to render an object.
:::
:::{doc} measure_renderables:125
Get a measurement that would fit a number of renderables.

Args:
    console (~rich.console.Console): Console instance.
    options (~rich.console.ConsoleOptions): Console options.
    renderables (Iterable[RenderableType]): One or more renderable objects.

Returns:
    Measurement: Measurement object containing range of character widths required to
        contain all given renderables.
:::
**Imports**: `operator.itemgetter`, `typing.TYPE_CHECKING`, `typing.Callable`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `errors`, `protocol.is_renderable`, `protocol.rich_cast`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`
**Type References**: [[Measurement]], [[Optional]]

### Interface
- `measure_renderables`(console: Console, options: ConsoleOptions, renderables: Sequence[RenderableType]) -> Measurement
- `span`() -> int
- `normalize`() -> Measurement
- `with_maximum`(width: int) -> Measurement
- `with_minimum`(width: int) -> Measurement
- `clamp`(min_width: [Optional[int]](#optional), max_width: [Optional[int]](#optional)) -> Measurement
- `get`(console: Console, options: ConsoleOptions, renderable: RenderableType) -> Measurement

### Implementation
**Measurement**
  - minimum: int
  - maximum: int
  - get_console_width: Optional[Callable[<ast.Tuple object at 0x1197aaed0>]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/measure.py`  
**Dependencies**: `operator.itemgetter`, `typing.TYPE_CHECKING`, `typing.Callable`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `errors`, `protocol.is_renderable`, `protocol.rich_cast`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.tree
:::{doc} Tree:14
A renderable for a tree structure.

Attributes:
    ASCII_GUIDES (GuideType): Guide lines used when Console.ascii_only is True.
    TREE_GUIDES (List[GuideType, GuideType, GuideType]): Default guide lines.

Args:
    label (RenderableType): The renderable or str for the tree label.
    style (StyleType, optional): Style of this tree. Defaults to "tree".
    guide_style (StyleType, optional): Style of the guide lines. Defaults to "tree.line".
    expanded (bool, optional): Also display children. Defaults to True.
    highlight (bool, optional): Highlight renderable (if str). Defaults to False.
    hide_root (bool, optional): Hide the root node. Defaults to False.
:::
**Imports**: `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.Tuple`, `_loop.loop_first`, `_loop.loop_last`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`, `style.StyleStack`, `style.StyleType`, `styled.Styled`, `rich.console.Group`, `rich.markdown.Markdown`, `rich.panel.Panel`, `rich.syntax.Syntax`, `rich.table.Table`
**Type References**: [[List]], [[Tree]]

### Interface
- `__init__`(label: RenderableType) -> None
- `add`(label: RenderableType) -> Tree
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `make_guide`(index: int, style: Style) -> Segment

### Implementation
**Tree**
  - stack: List[Iterator[Tree]]
  - levels: List[Segment]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/tree.py`  
**Dependencies**: `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.Tuple`, `_loop.loop_first`, `_loop.loop_last`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`, `style.StyleStack`, `style.StyleType`, `styled.Styled`, `rich.console.Group`, `rich.markdown.Markdown`, `rich.panel.Panel`, `rich.syntax.Syntax`, `rich.table.Table`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.console
:::{doc} ConsoleDimensions:115
Size of the terminal.
:::
:::{doc} ConsoleOptions:125
Options for __rich_console__ method.
:::
:::{doc} RichCast:259
An object that may be 'cast' to a console renderable.
:::
:::{doc} ConsoleRenderable:269
An object that supports the console protocol.
:::
:::{doc} CaptureError:288
An error in the Capture context manager.
:::
:::{doc} NewLine:292
A renderable to generate new line(s)
:::
:::{doc} ScreenUpdate:304
Render a list of lines at a given offset.
:::
:::{doc} Capture:322
Context manager to capture the result of printing to the console.
See :meth:`~rich.console.Console.capture` for how to use.

Args:
    console (Console): A console instance to capture output.
:::
:::{doc} ThemeContext:355
A context manager to use a temporary theme. See :meth:`~rich.console.Console.use_theme` for usage.
:::
:::{doc} PagerContext:376
A context manager that 'pages' content. See :meth:`~rich.console.Console.pager` for usage.
:::
:::{doc} ScreenContext:415
A context manager that enables an alternative screen. See :meth:`~rich.console.Console.screen` for usage.
:::
:::{doc} Group:462
Takes a group of renderables and returns a renderable object that renders the group.

Args:
    renderables (Iterable[RenderableType]): An iterable of renderable objects.
    fit (bool, optional): Fit dimension of group to contents, or fill available space. Defaults to True.
:::
:::{doc} group:495
A decorator that turns an iterable of renderables in to a group.

Args:
    fit (bool, optional): Fit dimension of group to contents, or fill available space. Defaults to True.
:::
:::{doc} _is_jupyter:517
Check if we're running in a Jupyter notebook.
:::
:::{doc} ConsoleThreadLocals:548
Thread local values for Console context.
:::
:::{doc} RenderHook:556
Provides hooks in to the render process.
:::
:::{doc} detect_legacy_windows:588
Detect legacy Windows.
:::
:::{doc} Console:593
A high level console interface.

Args:
    color_system (str, optional): The color system supported by your terminal,
        either ``"standard"``, ``"256"`` or ``"truecolor"``. Leave as ``"auto"`` to autodetect.
    force_terminal (Optional[bool], optional): Enable/disable terminal control codes, or None to auto-detect terminal. Defaults to None.
    force_jupyter (Optional[bool], optional): Enable/disable Jupyter rendering, or None to auto-detect Jupyter. Defaults to None.
    force_interactive (Optional[bool], optional): Enable/disable interactive mode, or None to auto detect. Defaults to None.
    soft_wrap (Optional[bool], optional): Set soft wrap default on print method. Defaults to False.
    theme (Theme, optional): An optional style theme object, or ``None`` for default theme.
    stderr (bool, optional): Use stderr rather than stdout if ``file`` is not specified. Defaults to False.
    file (IO, optional): A file object where the console should write to. Defaults to stdout.
    quiet (bool, Optional): Boolean to suppress all output. Defaults to False.
    width (int, optional): The width of the terminal. Leave as default to auto-detect width.
    height (int, optional): The height of the terminal. Leave as default to auto-detect height.
    style (StyleType, optional): Style to apply to all output, or None for no style. Defaults to None.
    no_color (Optional[bool], optional): Enabled no color mode, or None to auto detect. Defaults to None.
    tab_size (int, optional): Number of spaces used to replace a tab character. Defaults to 8.
    record (bool, optional): Boolean to enable recording of terminal output,
        required to call :meth:`export_html`, :meth:`export_svg`, and :meth:`export_text`. Defaults to False.
    markup (bool, optional): Boolean to enable :ref:`console_markup`. Defaults to True.
    emoji (bool, optional): Enable emoji code. Defaults to True.
    emoji_variant (str, optional): Optional emoji variant, either "text" or "emoji". Defaults to None.
    highlight (bool, optional): Enable automatic highlighting. Defaults to True.
    log_time (bool, optional): Boolean to enable logging of time by :meth:`log` methods. Defaults to True.
    log_path (bool, optional): Boolean to enable the logging of the caller by :meth:`log`. Defaults to True.
    log_time_format (Union[str, TimeFormatterCallable], optional): If ``log_time`` is enabled, either string for strftime or callable that formats the time. Defaults to "[%X] ".
    highlighter (HighlighterType, optional): Default highlighter.
    legacy_windows (bool, optional): Enable legacy Windows mode, or ``None`` to auto detect. Defaults to ``None``.
    safe_box (bool, optional): Restrict box options that don't render on legacy Windows.
    get_datetime (Callable[[], datetime], optional): Callable that gets the current time as a datetime.datetime object (used by Console.log),
        or None for datetime.now.
    get_time (Callable[[], time], optional): Callable that gets the current time in seconds, default uses time.monotonic.
:::
:::{doc} _svg_hash:2596
Returns a unique hash for the given SVG main code.

Args:
    svg_main_code (str): The content we're going to inject in the SVG envelope.

Returns:
    str: a hash of the given content
:::
**Imports**: `inspect`, `os`, `sys`, `threading`, `zlib`, `abc.ABC`, `abc.abstractmethod`, `dataclasses.dataclass`, `dataclasses.field`, `datetime.datetime`, `functools.wraps`, `getpass.getpass`, `html.escape`, `inspect.isclass`, `itertools.islice`, `math.ceil`, `time.monotonic`, `types.FrameType`, `types.ModuleType`, `types.TracebackType`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Mapping`, `typing.NamedTuple`, `typing.Optional`, `typing.TextIO`, `typing.Tuple`, `typing.Type`, `typing.Union`, `typing.cast`, `rich._null_file.NULL_FILE`, `errors`, `themes`, `_emoji_replace._emoji_replace`, `_export_format.CONSOLE_HTML_FORMAT`, `_export_format.CONSOLE_SVG_FORMAT`, `_fileno.get_fileno`, `_log_render.FormatTimeCallable`, `_log_render.LogRender`, `align.Align`, `align.AlignMethod`, `color.ColorSystem`, `color.blend_rgb`, `control.Control`, `emoji.EmojiVariant`, `highlighter.NullHighlighter`, `highlighter.ReprHighlighter`, `markup.render`, `measure.Measurement`, `measure.measure_renderables`, `pager.Pager`, `pager.SystemPager`, `pretty.Pretty`, `pretty.is_expandable`, `protocol.rich_cast`, `region.Region`, `scope.render_scope`, `screen.Screen`, `segment.Segment`, `style.Style`, `style.StyleType`, `styled.Styled`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `terminal_theme.SVG_EXPORT_THEME`, `terminal_theme.TerminalTheme`, `text.Text`, `text.TextType`, `theme.Theme`, `theme.ThemeStack`, `typing.Literal`, `typing.Protocol`, `typing.runtime_checkable`, `typing_extensions.Literal`, `typing_extensions.Protocol`, `typing_extensions.runtime_checkable`, `_windows.WindowsConsoleFeatures`, `live.Live`, `status.Status`, `_windows.get_windows_console_features`, `status.Status`, `rule.Rule`, `rich.json.JSON`, `traceback.Traceback`, `rich.cells.cell_len`, `jupyter.display`, `rich._win32_console.LegacyWindowsTerm`, `rich._windows_renderer.legacy_windows_render`
**Type References**: [[Capture]], [[CaptureError]], [[Console]], [[ConsoleDimensions]], [[ConsoleOptions]], [[ConsoleRenderable]], [[ConsoleThreadLocals]], [[Dict]], [[Group]], [[HighlighterType]], [[Iterable]], [[List]], [[Mapping]], [[NewLine]], [[NoChange]], [[Optional]], [[PagerContext]], [[RenderHook]], [[RenderResult]], [[RichCast]], [[ScreenContext]], [[ScreenUpdate]], [[ThemeContext]], [[ThemeStack]]

### Interface
- `group`(fit: bool) -> Callable[<ast.Tuple object at 0x11989c8d0>]
- `_is_jupyter`() -> bool
- `get_windows_console_features`() -> WindowsConsoleFeatures
- `detect_legacy_windows`() -> bool
- `_svg_hash`(svg_main_code: str) -> str
- `ascii_only`() -> bool
- `copy`() -> ConsoleOptions
- `update`() -> None
- `update_width`(width: int) -> ConsoleOptions
- `update_height`(height: int) -> ConsoleOptions
- `reset_height`() -> ConsoleOptions
- `update_dimensions`(width: int, height: int) -> ConsoleOptions
- `__rich__`() -> [Union[<ast.Tuple object at 0x11980fa10>]](#union)
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__init__`() -> Any
- `__enter__`() -> Console
- `__exit__`(exc_type: Any, exc_value: Any, traceback: Any) -> None
- `get`() -> str
- `renderables`() -> [List[RenderableType]](#list)
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `decorator`(method: Callable[<ast.Tuple object at 0x11989e450>]) -> Callable[<ast.Tuple object at 0x11989cd10>]
- `process_renderables`(renderables: [List[ConsoleRenderable]](#list)) -> [List[ConsoleRenderable]](#list)
- `__repr__`() -> str
- `file`(new_file: IO[str]) -> None
- `_buffer`() -> [List[Segment]](#list)
- `_buffer_index`(value: int) -> None
- `_theme_stack`() -> ThemeStack
- `_detect_color_system`() -> [Optional[ColorSystem]](#optional)
- `_enter_buffer`() -> None
- `_exit_buffer`() -> None
- `set_live`(live: Live) -> None
- `clear_live`() -> None
- `push_render_hook`(hook: RenderHook) -> None
- `pop_render_hook`() -> None
- `begin_capture`() -> None
- `end_capture`() -> str
- `push_theme`(theme: Theme) -> None
- `pop_theme`() -> None
- `use_theme`(theme: Theme) -> ThemeContext
- `color_system`() -> [Optional[str]](#optional)
- `encoding`() -> str
- `is_terminal`() -> bool
- `is_dumb_terminal`() -> bool
- `options`() -> ConsoleOptions
- `size`(new_size: Tuple[<ast.Tuple object at 0x119936850>]) -> None
- `width`(width: int) -> None
- `height`(height: int) -> None
- `bell`() -> None
- `capture`() -> Capture
- `pager`(pager: [Optional[Pager]](#optional), styles: bool, links: bool) -> PagerContext
- `line`(count: int) -> None
- `clear`(home: bool) -> None
- `status`(status: RenderableType) -> Status
- `show_cursor`(show: bool) -> bool
- `set_alt_screen`(enable: bool) -> bool
- `is_alt_screen`() -> bool
- `set_window_title`(title: str) -> bool
- `screen`(hide_cursor: bool, style: [Optional[StyleType]](#optional)) -> ScreenContext
- `measure`(renderable: RenderableType) -> Measurement
- `render`(renderable: RenderableType, options: [Optional[ConsoleOptions]](#optional)) -> Iterable[Segment]
- `render_lines`(renderable: RenderableType, options: [Optional[ConsoleOptions]](#optional)) -> [List[List[Segment]]](#list)
- `render_str`(text: str) -> Text
- `get_style`(name: [Union[<ast.Tuple object at 0x11998ca90>]](#union)) -> Style
- `_collect_renderables`(objects: Iterable[Any], sep: str, end: str) -> [List[ConsoleRenderable]](#list)
- `rule`(title: TextType) -> None
- `control`() -> None
- `out`() -> None
- `print`() -> None
- `print_json`(json: [Optional[str]](#optional)) -> None
- `update_screen`(renderable: RenderableType) -> None
- `update_screen_lines`(lines: [List[List[Segment]]](#list), x: int, y: int) -> None
- `print_exception`() -> None
- `_caller_frame_info`(offset: int, currentframe: Callable[<ast.Tuple object at 0x1199f7150>]) -> Tuple[<ast.Tuple object at 0x119a018d0>]
- `log`() -> None
- `on_broken_pipe`() -> None
- `_check_buffer`() -> None
- `_write_buffer`() -> None
- `_render_buffer`(buffer: Iterable[Segment]) -> str
- `input`(prompt: TextType) -> str
- `export_text`() -> str
- `save_text`(path: str) -> None
- `export_html`() -> str
- `save_html`(path: str) -> None
- `export_svg`() -> str
- `save_svg`(path: str) -> None
- `_replace`() -> Group
- `check_text`() -> None
- `get_svg_style`(style: Style) -> str
- `escape_text`(text: str) -> str
- `make_tag`(name: str, content: [Optional[str]](#optional)) -> str
- `align_append`(renderable: RenderableType) -> None
- `stringify`(value: object) -> str

### Implementation
**NoChange**

**ConsoleDimensions**
  - width: int
  - height: int
**ConsoleOptions**
  - size: ConsoleDimensions
  - legacy_windows: bool
  - min_width: int
  - max_width: int
  - is_terminal: bool
  - encoding: str
  - max_height: int
  - justify: Optional[JustifyMethod]
  - overflow: Optional[OverflowMethod]
  - no_wrap: Optional[bool]
  - highlight: Optional[bool]
  - markup: Optional[bool]
  - height: Optional[int]
  - options: ConsoleOptions
**RichCast**

**ConsoleRenderable**

**CaptureError**

**NewLine**

**ScreenUpdate**

**Capture**

**ThemeContext**

**PagerContext**
  - buffer: List[Segment]
  - segments: Iterable[Segment]
**ScreenContext**

**Group**

**ConsoleThreadLocals**
  - theme_stack: ThemeStack
  - buffer: List[Segment]
  - buffer_index: int
**RenderHook**

**Console**
  - _environ: Mapping[<ast.Tuple object at 0x119885fd0>]
  - isatty: Optional[Callable[<ast.Tuple object at 0x1199215d0>]]
  - width: Optional[int]
  - height: Optional[int]
  - render_iterable: RenderResult
  - renderables: List[ConsoleRenderable]
  - text: List[Text]
  - _highlighter: HighlighterType
  - raw_output: str
  - output: List[str]
  - fragments: List[str]
  - style_cache: Dict[<ast.Tuple object at 0x119a74b10>]
  - text_backgrounds: List[str]
  - text_group: List[str]
  - classes: Dict[<ast.Tuple object at 0x119a8cb10>]
  - new_segments: List[Segment]
  - styles: Dict[<ast.Tuple object at 0x119a5c850>]
  - stylesheet_rules: List[str]
  - batch: List[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/console.py`  
**Dependencies**: `inspect`, `os`, `sys`, `threading`, `zlib`, `abc.ABC`, `abc.abstractmethod`, `dataclasses.dataclass`, `dataclasses.field`, `datetime.datetime`, `functools.wraps`, `getpass.getpass`, `html.escape`, `inspect.isclass`, `itertools.islice`, `math.ceil`, `time.monotonic`, `types.FrameType`, `types.ModuleType`, `types.TracebackType`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Mapping`, `typing.NamedTuple`, `typing.Optional`, `typing.TextIO`, `typing.Tuple`, `typing.Type`, `typing.Union`, `typing.cast`, `rich._null_file.NULL_FILE`, `errors`, `themes`, `_emoji_replace._emoji_replace`, `_export_format.CONSOLE_HTML_FORMAT`, `_export_format.CONSOLE_SVG_FORMAT`, `_fileno.get_fileno`, `_log_render.FormatTimeCallable`, `_log_render.LogRender`, `align.Align`, `align.AlignMethod`, `color.ColorSystem`, `color.blend_rgb`, `control.Control`, `emoji.EmojiVariant`, `highlighter.NullHighlighter`, `highlighter.ReprHighlighter`, `markup.render`, `measure.Measurement`, `measure.measure_renderables`, `pager.Pager`, `pager.SystemPager`, `pretty.Pretty`, `pretty.is_expandable`, `protocol.rich_cast`, `region.Region`, `scope.render_scope`, `screen.Screen`, `segment.Segment`, `style.Style`, `style.StyleType`, `styled.Styled`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `terminal_theme.SVG_EXPORT_THEME`, `terminal_theme.TerminalTheme`, `text.Text`, `text.TextType`, `theme.Theme`, `theme.ThemeStack`, `typing.Literal`, `typing.Protocol`, `typing.runtime_checkable`, `typing_extensions.Literal`, `typing_extensions.Protocol`, `typing_extensions.runtime_checkable`, `_windows.WindowsConsoleFeatures`, `live.Live`, `status.Status`, `_windows.get_windows_console_features`, `status.Status`, `rule.Rule`, `rich.json.JSON`, `traceback.Traceback`, `rich.cells.cell_len`, `jupyter.display`, `rich._win32_console.LegacyWindowsTerm`, `rich._windows_renderer.legacy_windows_render`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.live_render
:::{doc} LiveRender:20
Creates a renderable that may be updated.

Args:
    renderable (RenderableType): Any renderable object.
    style (StyleType, optional): An optional style to apply to the renderable. Defaults to "".
:::
**Imports**: `sys`, `typing.Optional`, `typing.Tuple`, `_loop.loop_last`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `control.Control`, `segment.ControlType`, `segment.Segment`, `style.StyleType`, `text.Text`, `typing.Literal`, `typing_extensions.Literal`
**Type References**: [[LiveRender]]

### Interface
- `__init__`(renderable: RenderableType, style: StyleType, vertical_overflow: VerticalOverflowMethod) -> None
- `set_renderable`(renderable: RenderableType) -> None
- `position_cursor`() -> Control
- `restore_cursor`() -> Control
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult

### Implementation
**LiveRender**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/live_render.py`  
**Dependencies**: `sys`, `typing.Optional`, `typing.Tuple`, `_loop.loop_last`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `control.Control`, `segment.ControlType`, `segment.Segment`, `style.StyleType`, `text.Text`, `typing.Literal`, `typing_extensions.Literal`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._emoji_codes



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_emoji_codes.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.box
:::{doc} Box:16
Defines characters to render boxes.

┌─┬┐ top
│ ││ head
├─┼┤ head_row
│ ││ mid
├─┼┤ row
├─┼┤ foot_row
│ ││ foot
└─┴┘ bottom

Args:
    box (str): Characters making up box.
    ascii (bool, optional): True if this box uses ascii characters only. Default is False.
:::
**Imports**: `sys`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.List`, `_loop.loop_last`, `typing.Literal`, `typing_extensions.Literal`, `rich.console.ConsoleOptions`, `rich.columns.Columns`, `rich.panel.Panel`, `box`, `console.Console`, `table.Table`, `text.Text`
**Type References**: [[Box]], [[List]]

### Interface
- `__init__`(box: str) -> None
- `__repr__`() -> str
- `__str__`() -> str
- `substitute`(options: ConsoleOptions, safe: bool) -> Box
- `get_plain_headed_box`() -> Box
- `get_top`(widths: Iterable[int]) -> str
- `get_row`(widths: Iterable[int], level: Literal[<ast.Tuple object at 0x119c75f10>], edge: bool) -> str
- `get_bottom`(widths: Iterable[int]) -> str

### Implementation
**Box**
  - parts: List[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/box.py`  
**Dependencies**: `sys`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.List`, `_loop.loop_last`, `typing.Literal`, `typing_extensions.Literal`, `rich.console.ConsoleOptions`, `rich.columns.Columns`, `rich.panel.Panel`, `box`, `console.Console`, `table.Table`, `text.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.color
:::{doc} ColorSystem:21
One of the 3 color system supported by terminals.
:::
:::{doc} ColorType:36
Type of color stored in Color class.
:::
:::{doc} ColorParseError:288
The color could not be parsed.
:::
:::{doc} Color:303
Terminal color definition.
:::
:::{doc} parse_rgb_hex:571
Parse six hex characters in to RGB triplet.
:::
:::{doc} blend_rgb:580
Blend one RGB color in to another.
:::
**Imports**: `re`, `sys`, `colorsys.rgb_to_hls`, `enum.IntEnum`, `functools.lru_cache`, `typing.TYPE_CHECKING`, `typing.NamedTuple`, `typing.Optional`, `typing.Tuple`, `_palettes.EIGHT_BIT_PALETTE`, `_palettes.STANDARD_PALETTE`, `_palettes.WINDOWS_PALETTE`, `color_triplet.ColorTriplet`, `repr.Result`, `repr.rich_repr`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `terminal_theme.TerminalTheme`, `text.Text`, `console.Console`, `table.Table`, `text.Text`, `style.Style`, `text.Text`
**Type References**: [[Color]], [[ColorParseError]], [[ColorSystem]], [[ColorType]], [[Optional]]

### Interface
- `parse_rgb_hex`(hex_color: str) -> ColorTriplet
- `blend_rgb`(color1: ColorTriplet, color2: ColorTriplet, cross_fade: float) -> ColorTriplet
- `__repr__`() -> str
- `__str__`() -> str
- `__rich__`() -> Text
- `__rich_repr__`() -> Result
- `system`() -> ColorSystem
- `is_system_defined`() -> bool
- `is_default`() -> bool
- `get_truecolor`(theme: [Optional[TerminalTheme]](#optional), foreground: bool) -> ColorTriplet
- `from_ansi`(number: int) -> Color
- `from_triplet`(triplet: ColorTriplet) -> Color
- `from_rgb`(red: float, green: float, blue: float) -> Color
- `default`() -> Color
- `parse`(color: str) -> Color
- `get_ansi_codes`(foreground: bool) -> Tuple[<ast.Tuple object at 0x119f0b350>]
- `downgrade`(system: ColorSystem) -> Color

### Implementation
**ColorSystem**

**ColorType**

**ColorParseError**

**Color**
  - name: str
  - type: ColorType
  - number: Optional[int]
  - triplet: Optional[ColorTriplet]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/color.py`  
**Dependencies**: `re`, `sys`, `colorsys.rgb_to_hls`, `enum.IntEnum`, `functools.lru_cache`, `typing.TYPE_CHECKING`, `typing.NamedTuple`, `typing.Optional`, `typing.Tuple`, `_palettes.EIGHT_BIT_PALETTE`, `_palettes.STANDARD_PALETTE`, `_palettes.WINDOWS_PALETTE`, `color_triplet.ColorTriplet`, `repr.Result`, `repr.rich_repr`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `terminal_theme.TerminalTheme`, `text.Text`, `console.Console`, `table.Table`, `text.Text`, `style.Style`, `text.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._timer
:::{doc} timer:13
print the elapsed time. (only used in debugging)
:::
**Imports**: `time.time`, `contextlib`, `typing.Generator`
### Interface
- `timer`(subject: str) -> Generator[<ast.Tuple object at 0x119f50350>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_timer.py`  
**Dependencies**: `time.time`, `contextlib`, `typing.Generator`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._fileno
:::{doc} get_fileno:6
Get fileno() from a file, accounting for poorly implemented file-like objects.

Args:
    file_like (IO): A file-like object.

Returns:
    int | None: The result of fileno if available, or None if operation failed.
:::
**Imports**: `__future__.annotations`, `typing.IO`, `typing.Callable`
**Type References**: [[Callable]], [[None]]

### Interface
- `get_fileno`(file_like: IO[str]) -> int | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_fileno.py`  
**Dependencies**: `__future__.annotations`, `typing.IO`, `typing.Callable`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.align
:::{doc} Align:23
Align a renderable by adding spaces if necessary.

Args:
    renderable (RenderableType): A console renderable.
    align (AlignMethod): One of "left", "center", or "right""
    style (StyleType, optional): An optional style to apply to the background.
    vertical (Optional[VerticalAlignMethod], optional): Optional vertical align, one of "top", "middle", or "bottom". Defaults to None.
    pad (bool, optional): Pad the right with spaces. Defaults to True.
    width (int, optional): Restrict contents to given width, or None to use default width. Defaults to None.
    height (int, optional): Set height of align renderable, or None to fit to contents. Defaults to None.

Raises:
    ValueError: if ``align`` is not one of the expected values.
:::
:::{doc} VerticalCenter:234
Vertically aligns a renderable.

Warn:
    This class is deprecated and may be removed in a future version. Use Align class with
    `vertical="middle"`.

Args:
    renderable (RenderableType): A renderable object.
    style (StyleType, optional): An optional style to apply to the background. Defaults to None.
:::
**Imports**: `sys`, `itertools.chain`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.Optional`, `constrain.Constrain`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.StyleType`, `typing.Literal`, `typing_extensions.Literal`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `rich.console.Console`, `rich.console.Group`, `rich.highlighter.ReprHighlighter`, `rich.panel.Panel`
**Type References**: [[Align]], [[Iterable]], [[VerticalCenter]]

### Interface
- `__init__`(renderable: RenderableType, style: [Optional[StyleType]](#optional)) -> None
- `__repr__`() -> str
- `left`(renderable: RenderableType, style: [Optional[StyleType]](#optional)) -> Align
- `center`(renderable: RenderableType, style: [Optional[StyleType]](#optional)) -> Align
- `right`(renderable: RenderableType, style: [Optional[StyleType]](#optional)) -> Align
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `generate_segments`() -> Iterable[Segment]
- `blank_lines`(count: int) -> Iterable[Segment]

### Implementation
**Align**
  - iter_segments: Iterable[Segment]
**VerticalCenter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/align.py`  
**Dependencies**: `sys`, `itertools.chain`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.Optional`, `constrain.Constrain`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.StyleType`, `typing.Literal`, `typing_extensions.Literal`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `rich.console.Console`, `rich.console.Group`, `rich.highlighter.ReprHighlighter`, `rich.panel.Panel`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.theme
:::{doc} Theme:8
A container for style information, used by :class:`~rich.console.Console`.

Args:
    styles (Dict[str, Style], optional): A mapping of style names on to styles. Defaults to None for a theme with no styles.
    inherit (bool, optional): Inherit default styles. Defaults to True.
:::
:::{doc} ThemeStackError:76
Base exception for errors related to the theme stack.
:::
:::{doc} ThemeStack:80
A stack of themes.

Args:
    theme (Theme): A theme instance
:::
**Imports**: `configparser`, `typing.IO`, `typing.Dict`, `typing.List`, `typing.Mapping`, `typing.Optional`, `default_styles.DEFAULT_STYLES`, `style.Style`, `style.StyleType`
**Type References**: [[Dict]], [[Theme]], [[ThemeStack]], [[ThemeStackError]]

### Interface
- `__init__`(theme: Theme) -> None
- `config`() -> str
- `from_file`(config_file: IO[str], source: [Optional[str]](#optional), inherit: bool) -> Theme
- `read`(path: str, inherit: bool, encoding: [Optional[str]](#optional)) -> Theme
- `push_theme`(theme: Theme, inherit: bool) -> None
- `pop_theme`() -> None

### Implementation
**Theme**
  - styles: Dict[<ast.Tuple object at 0x119fb7510>]
**ThemeStackError**

**ThemeStack**
  - styles: Dict[<ast.Tuple object at 0x119fb8d90>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/theme.py`  
**Dependencies**: `configparser`, `typing.IO`, `typing.Dict`, `typing.List`, `typing.Mapping`, `typing.Optional`, `default_styles.DEFAULT_STYLES`, `style.Style`, `style.StyleType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.style
:::{doc} _Bit:16
A descriptor to get/set a style attribute bit.
:::
:::{doc} Style:31
A terminal style.

A terminal style consists of a color (`color`), a background color (`bgcolor`), and a number of attributes, such
as bold, italic etc. The attributes have 3 states: they can either be on
(``True``), off (``False``), or not set (``None``).

Args:
    color (Union[Color, str], optional): Color of terminal text. Defaults to None.
    bgcolor (Union[Color, str], optional): Color of terminal background. Defaults to None.
    bold (bool, optional): Enable bold text. Defaults to None.
    dim (bool, optional): Enable dim text. Defaults to None.
    italic (bool, optional): Enable italic text. Defaults to None.
    underline (bool, optional): Enable underlined text. Defaults to None.
    blink (bool, optional): Enabled blinking text. Defaults to None.
    blink2 (bool, optional): Enable fast blinking text. Defaults to None.
    reverse (bool, optional): Enabled reverse text. Defaults to None.
    conceal (bool, optional): Enable concealed text. Defaults to None.
    strike (bool, optional): Enable strikethrough text. Defaults to None.
    underline2 (bool, optional): Enable doubly underlined text. Defaults to None.
    frame (bool, optional): Enable framed text. Defaults to None.
    encircle (bool, optional): Enable encircled text. Defaults to None.
    overline (bool, optional): Enable overlined text. Defaults to None.
    link (str, link): Link URL. Defaults to None.
:::
:::{doc} StyleStack:765
A stack of styles.
:::
**Imports**: `sys`, `functools.lru_cache`, `marshal.dumps`, `marshal.loads`, `random.randint`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Type`, `typing.Union`, `typing.cast`, `errors`, `color.Color`, `color.ColorParseError`, `color.ColorSystem`, `color.blend_rgb`, `repr.Result`, `repr.rich_repr`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `terminal_theme.TerminalTheme`
**Type References**: [[Dict]], [[List]], [[Optional]], [[Style]], [[StyleStack]], [[_Bit]]

### Interface
- `__init__`(default_style: Style) -> None
- `__get__`(obj: Style, objtype: Type[Style]) -> [Optional[bool]](#optional)
- `null`() -> Style
- `from_color`(color: [Optional[Color]](#optional), bgcolor: [Optional[Color]](#optional)) -> Style
- `from_meta`(meta: [Optional[Dict[<ast.Tuple object at 0x11a059050>]]](#optional)) -> Style
- `on`(meta: [Optional[Dict[<ast.Tuple object at 0x11a05ba90>]]](#optional)) -> Style
- `link_id`() -> str
- `__str__`() -> str
- `__bool__`() -> bool
- `_make_ansi_codes`(color_system: ColorSystem) -> str
- `normalize`(style: str) -> str
- `pick_first`() -> StyleType
- `__rich_repr__`() -> Result
- `__eq__`(other: Any) -> bool
- `__ne__`(other: Any) -> bool
- `__hash__`() -> int
- `color`() -> [Optional[Color]](#optional)
- `bgcolor`() -> [Optional[Color]](#optional)
- `link`() -> [Optional[str]](#optional)
- `transparent_background`() -> bool
- `background_style`() -> Style
- `meta`() -> [Dict[<ast.Tuple object at 0x11a072850>]](#dict)
- `without_color`() -> Style
- `parse`(style_definition: str) -> Style
- `get_html_style`(theme: [Optional[TerminalTheme]](#optional)) -> str
- `combine`(styles: Iterable[Style]) -> Style
- `chain`() -> Style
- `copy`() -> Style
- `clear_meta_and_links`() -> Style
- `update_link`(link: [Optional[str]](#optional)) -> Style
- `render`(text: str) -> str
- `test`(text: [Optional[str]](#optional)) -> None
- `_add`(style: [Optional[Style]](#optional)) -> Style
- `__add__`(style: [Optional[Style]](#optional)) -> Style
- `__repr__`() -> str
- `current`() -> Style
- `push`(style: Style) -> None
- `pop`() -> Style
- `_make_color`(color: [Union[<ast.Tuple object at 0x119fe3390>]](#union)) -> Color

### Implementation
**_Bit**

**Style**
  - _color: Optional[Color]
  - _bgcolor: Optional[Color]
  - _attributes: int
  - _set_attributes: int
  - _hash: Optional[int]
  - _null: bool
  - _meta: Optional[bytes]
  - style: Style
  - color: Optional[str]
  - bgcolor: Optional[str]
  - attributes: List[str]
  - link: Optional[str]
  - css: List[str]
  - new_style: Style
  - sgr: List[str]
**StyleStack**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/style.py`  
**Dependencies**: `sys`, `functools.lru_cache`, `marshal.dumps`, `marshal.loads`, `random.randint`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Type`, `typing.Union`, `typing.cast`, `errors`, `color.Color`, `color.ColorParseError`, `color.ColorSystem`, `color.blend_rgb`, `repr.Result`, `repr.rich_repr`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `terminal_theme.TerminalTheme`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.default_styles

**Imports**: `typing.Dict`, `style.Style`, `argparse`, `io`, `rich.console.Console`, `rich.table.Table`, `rich.text.Text`
**Type References**: [[Dict]]

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/default_styles.py`  
**Dependencies**: `typing.Dict`, `style.Style`, `argparse`, `io`, `rich.console.Console`, `rich.table.Table`, `rich.text.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._wrap
:::{doc} words:12
Yields each word from the text as a tuple
containing (start_index, end_index, word). A "word" in this context may
include the actual word and any whitespace to the right.
:::
:::{doc} divide_line:26
Given a string of text, and a width (measured in cells), return a list
of cell offsets which the string should be split at in order for it to fit
within the given width.

Args:
    text: The text to examine.
    width: The available cell width.
    fold: If True, words longer than `width` will be folded onto a new line.

Returns:
    A list of indices to break the line at.
:::
**Imports**: `__future__.annotations`, `re`, `typing.Iterable`, `_loop.loop_last`, `cells.cell_len`, `cells.chop_cells`, `console.Console`
### Interface
- `words`(text: str) -> Iterable[tuple[<ast.Tuple object at 0x11a14d710>]]
- `divide_line`(text: str, width: int, fold: bool) -> list[int]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_wrap.py`  
**Dependencies**: `__future__.annotations`, `re`, `typing.Iterable`, `_loop.loop_last`, `cells.cell_len`, `cells.chop_cells`, `console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._log_render

**Imports**: `datetime.datetime`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.TYPE_CHECKING`, `typing.Union`, `typing.Callable`, `text.Text`, `text.TextType`, `console.Console`, `console.ConsoleRenderable`, `console.RenderableType`, `table.Table`, `rich.console.Console`, `containers.Renderables`, `table.Table`
**Type References**: [[List]], [[LogRender]]

### Interface
- `__init__`(show_time: bool, show_level: bool, show_path: bool, time_format: [Union[<ast.Tuple object at 0x11a166490>]](#union), omit_repeated_times: bool, level_width: [Optional[int]](#optional)) -> None
- `__call__`(console: Console, renderables: Iterable[ConsoleRenderable], log_time: [Optional[datetime]](#optional), time_format: [Optional[Union[<ast.Tuple object at 0x11a163fd0>]]](#optional), level: TextType, path: [Optional[str]](#optional), line_no: [Optional[int]](#optional), link_path: [Optional[str]](#optional)) -> Table

### Implementation
**LogRender**
  - row: List[RenderableType]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_log_render.py`  
**Dependencies**: `datetime.datetime`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.TYPE_CHECKING`, `typing.Union`, `typing.Callable`, `text.Text`, `text.TextType`, `console.Console`, `console.ConsoleRenderable`, `console.RenderableType`, `table.Table`, `rich.console.Console`, `containers.Renderables`, `table.Table`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.emoji
:::{doc} NoEmoji:23
No emoji by that name.
:::
**Imports**: `sys`, `typing.TYPE_CHECKING`, `typing.Optional`, `typing.Union`, `jupyter.JupyterMixin`, `segment.Segment`, `style.Style`, `_emoji_codes.EMOJI`, `_emoji_replace._emoji_replace`, `typing.Literal`, `typing_extensions.Literal`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `sys`, `rich.columns.Columns`, `rich.console.Console`
**Type References**: [[Emoji]], [[NoEmoji]]

### Interface
- `__init__`(name: str, style: [Union[<ast.Tuple object at 0x11a181650>]](#union), variant: [Optional[EmojiVariant]](#optional)) -> None
- `replace`(text: str) -> str
- `__repr__`() -> str
- `__str__`() -> str
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult

### Implementation
**NoEmoji**

**Emoji**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/emoji.py`  
**Dependencies**: `sys`, `typing.TYPE_CHECKING`, `typing.Optional`, `typing.Union`, `jupyter.JupyterMixin`, `segment.Segment`, `style.Style`, `_emoji_codes.EMOJI`, `_emoji_replace._emoji_replace`, `typing.Literal`, `typing_extensions.Literal`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `sys`, `rich.columns.Columns`, `rich.console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.layout
:::{doc} LayoutRender:32
An individual layout render.
:::
:::{doc} LayoutError:43
Layout related error.
:::
:::{doc} NoSplitter:47
Requested splitter does not exist.
:::
:::{doc} _Placeholder:51
An internal renderable used as a Layout placeholder.
:::
:::{doc} Splitter:80
Base class for a splitter.
:::
:::{doc} RowSplitter:101
Split a layout region in to rows.
:::
:::{doc} ColumnSplitter:121
Split a layout region in to columns.
:::
:::{doc} Layout:142
A renderable to divide a fixed height in to rows or columns.

Args:
    renderable (RenderableType, optional): Renderable content, or None for placeholder. Defaults to None.
    name (str, optional): Optional identifier for Layout. Defaults to None.
    size (int, optional): Optional fixed size of layout. Defaults to None.
    minimum_size (int, optional): Minimum size of layout. Defaults to 1.
    ratio (int, optional): Optional ratio for flexible layout. Defaults to 1.
    visible (bool, optional): Visibility of layout. Defaults to True.
:::
**Imports**: `abc.ABC`, `abc.abstractmethod`, `itertools.islice`, `operator.itemgetter`, `threading.RLock`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `_ratio.ratio_resolve`, `align.Align`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `highlighter.ReprHighlighter`, `panel.Panel`, `pretty.Pretty`, `region.Region`, `repr.Result`, `repr.rich_repr`, `segment.Segment`, `style.StyleType`, `rich.tree.Tree`, `rich.console.Console`, `rich.styled.Styled`, `rich.table.Table`, `rich.tree.Tree`
**Type References**: [[ColumnSplitter]], [[Dict]], [[Layout]], [[LayoutError]], [[LayoutRender]], [[List]], [[NoSplitter]], [[Region]], [[RenderableType]], [[RowSplitter]], [[Splitter]], [[_Placeholder]]

### Interface
- `__init__`(renderable: [Optional[RenderableType]](#optional)) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `get_tree_icon`() -> str
- `divide`(children: Sequence[Layout], region: Region) -> Iterable[Tuple[<ast.Tuple object at 0x11a19d690>]]
- `__rich_repr__`() -> Result
- `renderable`() -> RenderableType
- `children`() -> [List[Layout]](#list)
- `map`() -> RenderMap
- `get`(name: str) -> [Optional[Layout]](#optional)
- `__getitem__`(name: str) -> Layout
- `tree`() -> Tree
- `split`() -> None
- `add_split`() -> None
- `split_row`() -> None
- `split_column`() -> None
- `unsplit`() -> None
- `update`(renderable: RenderableType) -> None
- `refresh_screen`(console: Console, layout_name: str) -> None
- `_make_region_map`(width: int, height: int) -> RegionMap
- `render`(console: Console, options: ConsoleOptions) -> RenderMap
- `summary`(layout: Layout) -> Table
- `recurse`(tree: Tree, layout: Layout) -> None

### Implementation
**LayoutRender**
  - region: Region
  - render: List[List[Segment]]
**LayoutError**

**NoSplitter**

**_Placeholder**

**Splitter**
  - name: str
**RowSplitter**

**ColumnSplitter**

**Layout**
  - stack: List[Tuple[<ast.Tuple object at 0x11a1f4b50>]]
  - layout_regions: List[Tuple[<ast.Tuple object at 0x11a1f5a10>]]
  - render_map: Dict[<ast.Tuple object at 0x11a201c10>]
  - text: RenderableType
  - layout_lines: List[List[Segment]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/layout.py`  
**Dependencies**: `abc.ABC`, `abc.abstractmethod`, `itertools.islice`, `operator.itemgetter`, `threading.RLock`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `_ratio.ratio_resolve`, `align.Align`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `highlighter.ReprHighlighter`, `panel.Panel`, `pretty.Pretty`, `region.Region`, `repr.Result`, `repr.rich_repr`, `segment.Segment`, `style.StyleType`, `rich.tree.Tree`, `rich.console.Console`, `rich.styled.Styled`, `rich.table.Table`, `rich.tree.Tree`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.containers
:::{doc} Renderables:30
A list subclass which renders its contents to the console.
:::
:::{doc} Lines:66
A list subclass which can render to the console.
:::
**Imports**: `itertools.zip_longest`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.TypeVar`, `typing.Union`, `typing.overload`, `cells.cell_len`, `measure.Measurement`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.OverflowMethod`, `console.RenderResult`, `console.RenderableType`, `text.Text`, `text.Text`
**Type References**: [[Lines]], [[List]], [[Renderables]]

### Interface
- `__init__`(lines: Iterable[Text]) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `append`(line: Text) -> None
- `__iter__`() -> Iterator[Text]
- `__repr__`() -> str
- `__getitem__`(index: [Union[<ast.Tuple object at 0x11a222b90>]](#union)) -> [Union[<ast.Tuple object at 0x11a222510>]](#union)
- `__setitem__`(index: int, value: Text) -> Lines
- `__len__`() -> int
- `extend`(lines: Iterable[Text]) -> None
- `pop`(index: int) -> Text
- `justify`(console: Console, width: int, justify: JustifyMethod, overflow: OverflowMethod) -> None

### Implementation
**Renderables**

**Lines**
  - tokens: List[Text]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/containers.py`  
**Dependencies**: `itertools.zip_longest`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.TypeVar`, `typing.Union`, `typing.overload`, `cells.cell_len`, `measure.Measurement`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.OverflowMethod`, `console.RenderResult`, `console.RenderableType`, `text.Text`, `text.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._emoji_replace
:::{doc} _emoji_replace:12
Replace emoji code in text.
:::
**Imports**: `typing.Callable`, `typing.Match`, `typing.Optional`, `re`, `_emoji_codes.EMOJI`
### Interface
- `_emoji_replace`(text: str, default_variant: [Optional[str]](#optional), _emoji_sub: _EmojiSubMethod) -> str
- `do_replace`(match: Match[str]) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_emoji_replace.py`  
**Dependencies**: `typing.Callable`, `typing.Match`, `typing.Optional`, `re`, `_emoji_codes.EMOJI`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.traceback
:::{doc} install:47
Install a rich traceback handler.

Once installed, any tracebacks will be printed with syntax highlighting and rich formatting.


Args:
    console (Optional[Console], optional): Console to write exception to. Default uses internal Console instance.
    width (Optional[int], optional): Width (in characters) of traceback. Defaults to 100.
    code_width (Optional[int], optional): Code width (in characters) of traceback. Defaults to 88.
    extra_lines (int, optional): Extra lines of code. Defaults to 3.
    theme (Optional[str], optional): Pygments theme to use in traceback. Defaults to ``None`` which will pick
        a theme appropriate for the platform.
    word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.
    show_locals (bool, optional): Enable display of local variables. Defaults to False.
    locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to 10.
    locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.
    locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.
    locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.
    indent_guides (bool, optional): Enable indent guides in code and locals. Defaults to True.
    suppress (Sequence[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.

Returns:
    Callable: The previous exception handler that was replaced.
:::
:::{doc} Traceback:214
A Console renderable that renders a traceback.

Args:
    trace (Trace, optional): A `Trace` object produced from `extract`. Defaults to None, which uses
        the last exception.
    width (Optional[int], optional): Number of characters used to traceback. Defaults to 100.
    code_width (Optional[int], optional): Number of code characters used to traceback. Defaults to 88.
    extra_lines (int, optional): Additional lines of code to render. Defaults to 3.
    theme (str, optional): Override pygments theme used in traceback.
    word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.
    show_locals (bool, optional): Enable display of local variables. Defaults to False.
    indent_guides (bool, optional): Enable indent guides in code and locals. Defaults to True.
    locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to 10.
    locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.
    locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.
    locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.
    suppress (Sequence[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.
    max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.
:::
**Imports**: `inspect`, `linecache`, `os`, `sys`, `dataclasses.dataclass`, `dataclasses.field`, `itertools.islice`, `traceback.walk_tb`, `types.ModuleType`, `types.TracebackType`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Type`, `typing.Union`, `pygments.lexers.guess_lexer_for_filename`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Token`, `pygments.util.ClassNotFound`, `pretty`, `_loop.loop_last`, `columns.Columns`, `console.Console`, `console.ConsoleOptions`, `console.ConsoleRenderable`, `console.RenderResult`, `console.group`, `constrain.Constrain`, `highlighter.RegexHighlighter`, `highlighter.ReprHighlighter`, `panel.Panel`, `scope.render_scope`, `style.Style`, `syntax.Syntax`, `text.Text`, `theme.Theme`, `sys`, `rich._IMPORT_CWD`
**Type References**: [[ConsoleRenderable]], [[Frame]], [[List]], [[Optional]], [[PathHighlighter]], [[Stack]], [[Trace]], [[Traceback]], [[Tuple]], [[_SyntaxError]]

### Interface
- `install`() -> Callable[<ast.Tuple object at 0x11a268110>]
- `excepthook`(type_: Type[BaseException], value: BaseException, traceback: [Optional[TracebackType]](#optional)) -> None
- `ipy_excepthook_closure`(ip: Any) -> None
- `__init__`(trace: [Optional[Trace]](#optional)) -> Any
- `from_exception`(exc_type: Type[Any], exc_value: BaseException, traceback: [Optional[TracebackType]](#optional)) -> Traceback
- `extract`(exc_type: Type[BaseException], exc_value: BaseException, traceback: [Optional[TracebackType]](#optional)) -> Trace
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `_render_syntax_error`(syntax_error: _SyntaxError) -> RenderResult
- `_guess_lexer`(filename: str, code: str) -> str
- `_render_stack`(stack: Stack) -> RenderResult
- `bar`(a: Any) -> None
- `foo`(a: Any) -> None
- `error`() -> None
- `ipy_show_traceback`() -> None
- `ipy_display_traceback`() -> None
- `safe_str`(_object: Any) -> str
- `read_code`(filename: str) -> str
- `render_locals`(frame: Frame) -> Iterable[ConsoleRenderable]
- `get_locals`(iter_locals: Iterable[Tuple[<ast.Tuple object at 0x11a2be5d0>]]) -> Iterable[Tuple[<ast.Tuple object at 0x11a2c81d0>]]

### Implementation
**Frame**
  - filename: str
  - lineno: int
  - name: str
  - line: str
  - locals: Optional[Dict[<ast.Tuple object at 0x11a266e50>]]
  - last_instruction: Optional[Tuple[<ast.Tuple object at 0x11a266890>]]
**_SyntaxError**
  - offset: int
  - filename: str
  - line: str
  - lineno: int
  - msg: str
**Stack**
  - exc_type: str
  - exc_value: str
  - syntax_error: Optional[_SyntaxError]
  - is_cause: bool
  - frames: List[Frame]
**Trace**
  - stacks: List[Stack]
**PathHighlighter**

**Traceback**
  - stacks: List[Stack]
  - exclude_frames: Optional[range]
  - last_instruction: Optional[Tuple[<ast.Tuple object at 0x11a2c8e10>]]
  - stack_renderable: ConsoleRenderable
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/traceback.py`  
**Dependencies**: `inspect`, `linecache`, `os`, `sys`, `dataclasses.dataclass`, `dataclasses.field`, `itertools.islice`, `traceback.walk_tb`, `types.ModuleType`, `types.TracebackType`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Type`, `typing.Union`, `pygments.lexers.guess_lexer_for_filename`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Token`, `pygments.util.ClassNotFound`, `pretty`, `_loop.loop_last`, `columns.Columns`, `console.Console`, `console.ConsoleOptions`, `console.ConsoleRenderable`, `console.RenderResult`, `console.group`, `constrain.Constrain`, `highlighter.RegexHighlighter`, `highlighter.ReprHighlighter`, `panel.Panel`, `scope.render_scope`, `style.Style`, `syntax.Syntax`, `text.Text`, `theme.Theme`, `sys`, `rich._IMPORT_CWD`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.region
:::{doc} Region:4
Defines a rectangular region of the screen.
:::
**Imports**: `typing.NamedTuple`
**Type References**: [[Region]]


### Implementation
**Region**
  - x: int
  - y: int
  - width: int
  - height: int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/region.py`  
**Dependencies**: `typing.NamedTuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.protocol
:::{doc} is_renderable:10
Check if an object may be rendered by Rich.
:::
:::{doc} rich_cast:19
Cast an object to a renderable by calling __rich__ if present.

Args:
    renderable (object): A potentially renderable object

Returns:
    object: The result of recursively calling __rich__.
:::
**Imports**: `typing.Any`, `typing.cast`, `typing.Set`, `typing.TYPE_CHECKING`, `inspect.isclass`, `rich.console.RenderableType`, `rich.console.RenderableType`
**Type References**: [[Set]]

### Interface
- `is_renderable`(check_object: Any) -> bool
- `rich_cast`(renderable: object) -> RenderableType
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/protocol.py`  
**Dependencies**: `typing.Any`, `typing.cast`, `typing.Set`, `typing.TYPE_CHECKING`, `inspect.isclass`, `rich.console.RenderableType`, `rich.console.RenderableType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._loop
:::{doc} loop_first:6
Iterate and generate a tuple with a flag for first value.
:::
:::{doc} loop_last:18
Iterate and generate a tuple with a flag for last value.
:::
:::{doc} loop_first_last:31
Iterate and generate a tuple with a flag for first and last value.
:::
**Imports**: `typing.Iterable`, `typing.Tuple`, `typing.TypeVar`
### Interface
- `loop_first`(values: Iterable[T]) -> Iterable[Tuple[<ast.Tuple object at 0x11a34e290>]]
- `loop_last`(values: Iterable[T]) -> Iterable[Tuple[<ast.Tuple object at 0x11a34c550>]]
- `loop_first_last`(values: Iterable[T]) -> Iterable[Tuple[<ast.Tuple object at 0x11a351cd0>]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_loop.py`  
**Dependencies**: `typing.Iterable`, `typing.Tuple`, `typing.TypeVar`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.control
:::{doc} Control:54
A renderable that inserts a control code (non printable but may move cursor).

Args:
    *codes (str): Positional arguments are either a :class:`~rich.segment.ControlType` enum or a
        tuple of ControlType and an integer parameter
:::
:::{doc} strip_control_codes:187
Remove control codes from text.

Args:
    text (str): A string possibly contain control codes.

Returns:
    str: String with control codes removed.
:::
:::{doc} escape_control_codes:201
Replace control codes with their "escaped" equivalent in the given text.
(e.g. "" becomes "\b")

Args:
    text (str): A string possibly containing control codes.

Returns:
    str: String with control codes replaced with their escaped version.
:::
**Imports**: `sys`, `time`, `typing.TYPE_CHECKING`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Union`, `segment.ControlCode`, `segment.ControlType`, `segment.Segment`, `typing.Final`, `typing_extensions.Final`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `rich.console.Console`
**Type References**: [[Control]], [[Dict]], [[Final]], [[List]]

### Interface
- `strip_control_codes`(text: str, _translate_table: [Dict[<ast.Tuple object at 0x11a383e90>]](#dict)) -> str
- `escape_control_codes`(text: str, _translate_table: [Dict[<ast.Tuple object at 0x11a388b10>]](#dict)) -> str
- `__init__`() -> None
- `bell`() -> Control
- `home`() -> Control
- `move`(x: int, y: int) -> Control
- `move_to_column`(x: int, y: int) -> Control
- `move_to`(x: int, y: int) -> Control
- `clear`() -> Control
- `show_cursor`(show: bool) -> Control
- `alt_screen`(enable: bool) -> Control
- `title`(title: str) -> Control
- `__str__`() -> str
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `get_codes`() -> Iterable[ControlCode]

### Implementation
**Control**
  - control_codes: List[ControlCode]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/control.py`  
**Dependencies**: `sys`, `time`, `typing.TYPE_CHECKING`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Union`, `segment.ControlCode`, `segment.ControlType`, `segment.Segment`, `typing.Final`, `typing_extensions.Final`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `rich.console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.filesize
:::{doc} pick_unit_and_suffix:43
Pick a suffix and base for the given size.
:::
:::{doc} decimal:52
Convert a filesize in to a string (powers of 1000, SI prefixes).

In this convention, ``1000 B = 1 kB``.

This is typically the format used to advertise the storage
capacity of USB flash drives and the like (*256 MB* meaning
actually a storage capacity of more than *256 000 000 B*),
or used by **Mac OS X** since v10.6 to report file sizes.

Arguments:
    int (size): A file size.
    int (precision): The number of decimal places to include (default = 1).
    str (separator): The string to separate the value from the units (default = " ").

Returns:
    `str`: A string containing a abbreviated file size and units.

Example:
    >>> filesize.decimal(30000)
    '30.0 kB'
    >>> filesize.decimal(30000, precision=2, separator="")
    '30.00kB'
:::
**Imports**: `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`
### Interface
- `_to_str`(size: int, suffixes: Iterable[str], base: int) -> str
- `pick_unit_and_suffix`(size: int, suffixes: [List[str]](#list), base: int) -> Tuple[<ast.Tuple object at 0x11a390690>]
- `decimal`(size: int) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/filesize.py`  
**Dependencies**: `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._null_file

**Imports**: `types.TracebackType`, `typing.IO`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.Type`
**Type References**: [[NullFile]]

### Interface
- `close`() -> None
- `isatty`() -> bool
- `read`(__n: int) -> str
- `readable`() -> bool
- `readline`(__limit: int) -> str
- `readlines`(__hint: int) -> [List[str]](#list)
- `seek`(__offset: int, __whence: int) -> int
- `seekable`() -> bool
- `tell`() -> int
- `truncate`(__size: [Optional[int]](#optional)) -> int
- `writable`() -> bool
- `writelines`(__lines: Iterable[str]) -> None
- `__next__`() -> str
- `__iter__`() -> Iterator[str]
- `__enter__`() -> IO[str]
- `__exit__`(__t: [Optional[Type[BaseException]]](#optional), __value: [Optional[BaseException]](#optional), __traceback: [Optional[TracebackType]](#optional)) -> None
- `write`(text: str) -> int
- `flush`() -> None
- `fileno`() -> int

### Implementation
**NullFile**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_null_file.py`  
**Dependencies**: `types.TracebackType`, `typing.IO`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.Type`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._palettes

**Imports**: `palette.Palette`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_palettes.py`  
**Dependencies**: `palette.Palette`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich
:::{doc} get_console:23
Get a global :class:`~rich.console.Console` instance. This function is used when Rich requires a Console,
and hasn't been explicitly given one.

Returns:
    Console: A console instance.
:::
:::{doc} reconfigure:39
Reconfigures the global console by replacing it with another.

Args:
    *args (Any): Positional arguments for the replacement :class:`~rich.console.Console`.
    **kwargs (Any): Keyword arguments for the replacement :class:`~rich.console.Console`.
:::
:::{doc} print:53
Print object(s) supplied via positional arguments.
This function has an identical signature to the built-in print.
For more advanced features, see the :class:`~rich.console.Console` class.

Args:
    sep (str, optional): Separator between printed objects. Defaults to " ".
    end (str, optional): Character to write at end of output. Defaults to "\\n".
    file (IO[str], optional): File to write to, or None for stdout. Defaults to None.
    flush (bool, optional): Has no effect as Rich always flushes output. Defaults to False.
:::
:::{doc} print_json:77
Pretty prints JSON. Output will be valid JSON.

Args:
    json (str): A string containing JSON.
    data (Any): If json is not supplied, then encode this data.
    indent (int, optional): Number of spaces to indent. Defaults to 2.
    highlight (bool, optional): Enable highlighting of output: Defaults to True.
    skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.
    ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.
    check_circular (bool, optional): Check for circular references. Defaults to True.
    allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.
    default (Callable, optional): A callable that converts values that can not be encoded
        in to something that can be JSON encoded. Defaults to None.
    sort_keys (bool, optional): Sort dictionary keys. Defaults to False.
:::
:::{doc} inspect:120
Inspect any Python object.

* inspect(<OBJECT>) to see summarized info.
* inspect(<OBJECT>, methods=True) to see methods.
* inspect(<OBJECT>, help=True) to see full (non-abbreviated) help.
* inspect(<OBJECT>, private=True) to see private attributes (single underscore).
* inspect(<OBJECT>, dunder=True) to see attributes beginning with double underscore.
* inspect(<OBJECT>, all=True) to see all attributes.

Args:
    obj (Any): An object to inspect.
    title (str, optional): Title to display over inspect result, or None use type. Defaults to None.
    help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.
    methods (bool, optional): Enable inspection of callables. Defaults to False.
    docs (bool, optional): Also render doc strings. Defaults to True.
    private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.
    dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.
    sort (bool, optional): Sort attributes alphabetically. Defaults to True.
    all (bool, optional): Show all attributes. Defaults to False.
    value (bool, optional): Pretty print value. Defaults to True.
:::
**Imports**: `os`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Optional`, `typing.Union`, `_extension.load_ipython_extension`, `console.Console`, `rich.console.Console`, `console.Console`, `rich._inspect.Inspect`, `console.Console`
**Type References**: [[Optional]]

### Interface
- `get_console`() -> Console
- `reconfigure`() -> None
- `print`() -> None
- `print_json`(json: [Optional[str]](#optional)) -> None
- `inspect`(obj: Any) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/__init__.py`  
**Dependencies**: `os`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Optional`, `typing.Union`, `_extension.load_ipython_extension`, `console.Console`, `rich.console.Console`, `console.Console`, `rich._inspect.Inspect`, `console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._pick
:::{doc} pick_bool:4
Pick the first non-none bool or return the last value.

Args:
    *values (bool): Any number of boolean or None values.

Returns:
    bool: First non-none boolean.
:::
**Imports**: `typing.Optional`
### Interface
- `pick_bool`() -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_pick.py`  
**Dependencies**: `typing.Optional`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.file_proxy
:::{doc} FileProxy:11
Wraps a file (e.g. sys.stdout) and redirects writes to a console.
:::
**Imports**: `io`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.List`, `ansi.AnsiDecoder`, `text.Text`, `console.Console`
**Type References**: [[FileProxy]], [[List]]

### Interface
- `__init__`(console: Console, file: IO[str]) -> None
- `rich_proxied_file`() -> IO[str]
- `__getattr__`(name: str) -> Any
- `write`(text: str) -> int
- `flush`() -> None
- `fileno`() -> int

### Implementation
**FileProxy**
  - lines: List[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/file_proxy.py`  
**Dependencies**: `io`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.List`, `ansi.AnsiDecoder`, `text.Text`, `console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.palette
:::{doc} Palette:11
A palette of available colors.
:::
**Imports**: `math.sqrt`, `functools.lru_cache`, `typing.Sequence`, `typing.Tuple`, `typing.TYPE_CHECKING`, `color_triplet.ColorTriplet`, `rich.table.Table`, `colorsys`, `typing.Iterable`, `rich.color.Color`, `rich.console.Console`, `rich.console.ConsoleOptions`, `rich.segment.Segment`, `rich.style.Style`, `rich.color.Color`, `rich.style.Style`, `rich.text.Text`, `rich.table.Table`
**Type References**: [[ColorBox]], [[Palette]]

### Interface
- `__init__`(colors: Sequence[Tuple[<ast.Tuple object at 0x11a453150>]]) -> Any
- `__getitem__`(number: int) -> ColorTriplet
- `__rich__`() -> Table
- `match`(color: Tuple[<ast.Tuple object at 0x11a44b290>]) -> int
- `get_color_distance`(index: int) -> float
- `__rich_console__`(console: Console, options: ConsoleOptions) -> Iterable[Segment]

### Implementation
**Palette**

**ColorBox**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/palette.py`  
**Dependencies**: `math.sqrt`, `functools.lru_cache`, `typing.Sequence`, `typing.Tuple`, `typing.TYPE_CHECKING`, `color_triplet.ColorTriplet`, `rich.table.Table`, `colorsys`, `typing.Iterable`, `rich.color.Color`, `rich.console.Console`, `rich.console.ConsoleOptions`, `rich.segment.Segment`, `rich.style.Style`, `rich.color.Color`, `rich.style.Style`, `rich.text.Text`, `rich.table.Table`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.markup
:::{doc} Tag:20
A tag in console markup.
:::
:::{doc} escape:48
Escapes text so that it won't be interpreted as markup.

Args:
    markup (str): Content to be inserted in to markup.

Returns:
    str: Markup with square brackets escaped.
:::
:::{doc} _parse:73
Parse markup in to an iterable of tuples of (position, text, tag).

Args:
    markup (str): A string containing console markup
:::
:::{doc} render:106
Render console markup in to a Text instance.

Args:
    markup (str): A string containing console markup.
    style: (Union[str, Style]): The style to use.
    emoji (bool, optional): Also render emoji code. Defaults to True.
    emoji_variant (str, optional): Optional emoji variant, either "text" or "emoji". Defaults to None.


Raises:
    MarkupError: If there is a syntax error in the markup.

Returns:
    Text: A test instance.
:::
**Imports**: `re`, `ast.literal_eval`, `operator.attrgetter`, `typing.Callable`, `typing.Iterable`, `typing.List`, `typing.Match`, `typing.NamedTuple`, `typing.Optional`, `typing.Tuple`, `typing.Union`, `_emoji_replace._emoji_replace`, `emoji.EmojiVariant`, `errors.MarkupError`, `style.Style`, `text.Span`, `text.Text`, `rich.print`, `rich.table.Table`
**Type References**: [[List]], [[Optional]], [[Tag]]

### Interface
- `escape`(markup: str, _escape: _EscapeSubMethod) -> str
- `_parse`(markup: str) -> Iterable[Tuple[<ast.Tuple object at 0x11a472e10>]]
- `render`(markup: str, style: [Union[<ast.Tuple object at 0x11a472590>]](#union), emoji: bool, emoji_variant: [Optional[EmojiVariant]](#optional)) -> Text
- `__str__`() -> str
- `markup`() -> str
- `escape_backslashes`(match: Match[str]) -> str
- `pop_style`(style_name: str) -> Tuple[<ast.Tuple object at 0x11a497f50>]

### Implementation
**Tag**
  - name: str
  - parameters: Optional[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/markup.py`  
**Dependencies**: `re`, `ast.literal_eval`, `operator.attrgetter`, `typing.Callable`, `typing.Iterable`, `typing.List`, `typing.Match`, `typing.NamedTuple`, `typing.Optional`, `typing.Tuple`, `typing.Union`, `_emoji_replace._emoji_replace`, `emoji.EmojiVariant`, `errors.MarkupError`, `style.Style`, `text.Span`, `text.Text`, `rich.print`, `rich.table.Table`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._ratio
:::{doc} Edge:12
Any object that defines an edge (such as Layout).
:::
:::{doc} ratio_resolve:20
Divide total space to satisfy size, ratio, and minimum_size, constraints.

The returned list of integers should add up to total in most cases, unless it is
impossible to satisfy all the constraints. For instance, if there are two edges
with a minimum size of 20 each and `total` is 30 then the returned list will be
greater than total. In practice, this would mean that a Layout object would
clip the rows that would overflow the screen height.

Args:
    total (int): Total number of characters.
    edges (List[Edge]): Edges within total space.

Returns:
    List[int]: Number of characters for each edge.
:::
:::{doc} ratio_reduce:81
Divide an integer total in to parts based on ratios.

Args:
    total (int): The total to divide.
    ratios (List[int]): A list of integer ratios.
    maximums (List[int]): List of maximums values for each slot.
    values (List[int]): List of values

Returns:
    List[int]: A list of integers guaranteed to sum to total.
:::
:::{doc} ratio_distribute:113
Distribute an integer total in to parts based on ratios.

Args:
    total (int): The total to divide.
    ratios (List[int]): A list of integer ratios.
    minimums (List[int]): List of minimum values for each slot.

Returns:
    List[int]: A list of integers guaranteed to sum to total.
:::
**Imports**: `sys`, `fractions.Fraction`, `math.ceil`, `typing.cast`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Protocol`, `typing_extensions.Protocol`, `dataclasses.dataclass`
**Type References**: [[E]], [[Edge]], [[List]], [[Optional]]

### Interface
- `ratio_resolve`(total: int, edges: Sequence[Edge]) -> [List[int]](#list)
- `ratio_reduce`(total: int, ratios: [List[int]](#list), maximums: [List[int]](#list), values: [List[int]](#list)) -> [List[int]](#list)
- `ratio_distribute`(total: int, ratios: [List[int]](#list), minimums: [Optional[List[int]]](#optional)) -> [List[int]](#list)

### Implementation
**Edge**
  - size: Optional[int]
  - ratio: int
  - minimum_size: int
**E**
  - size: Optional[int]
  - ratio: int
  - minimum_size: int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_ratio.py`  
**Dependencies**: `sys`, `fractions.Fraction`, `math.ceil`, `typing.cast`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Protocol`, `typing_extensions.Protocol`, `dataclasses.dataclass`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.repr
:::{doc} ReprError:23
An error occurred when attempting to build a repr.
:::
:::{doc} auto:37
Class decorator to create __repr__ from __rich_repr__
:::
**Imports**: `inspect`, `functools.partial`, `typing.Any`, `typing.Callable`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `typing.overload`, `rich.console.Console`
**Type References**: [[Foo]], [[List]], [[ReprError]]

### Interface
- `auto`(cls: [Optional[Type[T]]](#optional)) -> [Union[<ast.Tuple object at 0x11a512ed0>]](#union)
- `rich_repr`(cls: [Optional[Type[T]]](#optional)) -> [Union[<ast.Tuple object at 0x11a519cd0>]](#union)
- `do_replace`(cls: Type[T], angular: [Optional[bool]](#optional)) -> Type[T]
- `auto_repr`(self: T) -> str
- `auto_rich_repr`(self: Type[T]) -> Result
- `__rich_repr__`() -> Result

### Implementation
**ReprError**

**Foo**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/repr.py`  
**Dependencies**: `inspect`, `functools.partial`, `typing.Any`, `typing.Callable`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `typing.overload`, `rich.console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.constrain
:::{doc} Constrain:10
Constrain the width of a renderable to a given number of characters.

Args:
    renderable (RenderableType): A renderable object.
    width (int, optional): The maximum width (in characters) to render. Defaults to 80.
:::
**Imports**: `typing.Optional`, `typing.TYPE_CHECKING`, `jupyter.JupyterMixin`, `measure.Measurement`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`
**Type References**: [[Constrain]]

### Interface
- `__init__`(renderable: RenderableType, width: [Optional[int]](#optional)) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement

### Implementation
**Constrain**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/constrain.py`  
**Dependencies**: `typing.Optional`, `typing.TYPE_CHECKING`, `jupyter.JupyterMixin`, `measure.Measurement`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.pretty
:::{doc} _is_attr_object:60
Check if an object was created with attrs module.
:::
:::{doc} _get_attr_fields:65
Get fields for an attrs object.
:::
:::{doc} _is_dataclass_repr:70
Check if an instance of a dataclass contains the default repr.

Args:
    obj (object): A dataclass instance.

Returns:
    bool: True if the default repr is used, False if there is a custom repr.
:::
:::{doc} _has_default_namedtuple_repr:93
Check if an instance of namedtuple contains the default repr

Args:
    obj (object): A namedtuple

Returns:
    bool: True if the default repr is used, False if there's a custom repr.
:::
:::{doc} _safe_isinstance:161
isinstance can fail in rare cases, for example types with no __class__
:::
:::{doc} install:171
Install automatic pretty printing in the Python REPL.

Args:
    console (Console, optional): Console instance or ``None`` to use global console. Defaults to None.
    overflow (Optional[OverflowMethod], optional): Overflow method. Defaults to "ignore".
    crop (Optional[bool], optional): Enable cropping of long lines. Defaults to False.
    indent_guides (bool, optional): Enable indentation guides. Defaults to False.
    max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to None.
    max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.
    max_depth (int, optional): Maximum depth of nested data structures, or None for no maximum. Defaults to None.
    expand_all (bool, optional): Expand all containers. Defaults to False.
    max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.
:::
:::{doc} Pretty:253
A rich renderable that pretty prints an object.

Args:
    _object (Any): An object to pretty print.
    highlighter (HighlighterType, optional): Highlighter object to apply to result, or None for ReprHighlighter. Defaults to None.
    indent_size (int, optional): Number of spaces in indent. Defaults to 4.
    justify (JustifyMethod, optional): Justify method, or None for default. Defaults to None.
    overflow (OverflowMethod, optional): Overflow method, or None for default. Defaults to None.
    no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to False.
    indent_guides (bool, optional): Enable indentation guides. Defaults to False.
    max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to None.
    max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.
    max_depth (int, optional): Maximum depth of nested data structures, or None for no maximum. Defaults to None.
    expand_all (bool, optional): Expand all containers. Defaults to False.
    margin (int, optional): Subtrace a margin from width to force containers to expand earlier. Defaults to 0.
    insert_line (bool, optional): Insert a new line if the output has multiple new lines. Defaults to False.
:::
:::{doc} is_expandable:398
Check if an object may be expanded by pretty print.
:::
:::{doc} Node:409
A node in a repr tree. May be atomic or a container.
:::
:::{doc} _Line:494
A line in repr output.
:::
:::{doc} _is_namedtuple:561
Checks if an object is most likely a namedtuple. It is possible
to craft an object that passes this check and isn't a namedtuple, but
there is only a minuscule chance of this happening unintentionally.

Args:
    obj (Any): The object to test

Returns:
    bool: True if the object is a namedtuple. False otherwise.
:::
:::{doc} traverse:580
Traverse object and generate a tree.

Args:
    _object (Any): Object to be traversed.
    max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to None.
    max_string (int, optional): Maximum length of string before truncating, or None to disable truncating.
        Defaults to None.
    max_depth (int, optional): Maximum depth of data structures, or None for no maximum.
        Defaults to None.

Returns:
    Node: The root of a tree structure which can be used to render a pretty repr.
:::
:::{doc} pretty_repr:878
Prettify repr string by expanding on to new lines to fit within a given width.

Args:
    _object (Any): Object to repr.
    max_width (int, optional): Desired maximum width of repr string. Defaults to 80.
    indent_size (int, optional): Number of spaces to indent. Defaults to 4.
    max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to None.
    max_string (int, optional): Maximum length of string before truncating, or None to disable truncating.
        Defaults to None.
    max_depth (int, optional): Maximum depth of nested data structure, or None for no depth.
        Defaults to None.
    expand_all (bool, optional): Expand all containers regardless of available width. Defaults to False.

Returns:
    str: A possibly multi-line representation of the object.
:::
:::{doc} pprint:918
A convenience function for pretty printing.

Args:
    _object (Any): Object to pretty print.
    console (Console, optional): Console instance, or None to use default. Defaults to None.
    max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to None.
    max_string (int, optional): Maximum length of strings before truncating, or None to disable. Defaults to None.
    max_depth (int, optional): Maximum depth for nested data structures, or None for unlimited depth. Defaults to None.
    indent_guides (bool, optional): Enable indentation guides. Defaults to True.
    expand_all (bool, optional): Expand all containers. Defaults to False.
:::
**Imports**: `builtins`, `collections`, `dataclasses`, `inspect`, `os`, `reprlib`, `sys`, `array.array`, `collections.Counter`, `collections.UserDict`, `collections.UserList`, `collections.defaultdict`, `collections.deque`, `dataclasses.dataclass`, `dataclasses.fields`, `dataclasses.is_dataclass`, `inspect.isclass`, `itertools.islice`, `types.MappingProxyType`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.DefaultDict`, `typing.Deque`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `typing.Union`, `rich.repr.RichReprResult`, `get_console`, `_loop.loop_last`, `_pick.pick_bool`, `abc.RichRenderable`, `cells.cell_len`, `highlighter.ReprHighlighter`, `jupyter.JupyterMixin`, `jupyter.JupyterRenderable`, `measure.Measurement`, `text.Text`, `attr`, `console.Console`, `console.ConsoleOptions`, `console.HighlighterType`, `console.JustifyMethod`, `console.OverflowMethod`, `console.RenderResult`, `console.ConsoleRenderable`, `rich.get_console`, `typing.NamedTuple`, `rich.print`, `IPython.core.formatters.BaseFormatter`
**Type References**: [[BrokenRepr]], [[Dict]], [[List]], [[Node]], [[Optional]], [[Pretty]], [[RichFormatter]], [[Set]], [[StockKeepingUnit]], [[Thing]], [[Tuple]], [[_Line]]

### Interface
- `_is_attr_object`(obj: Any) -> bool
- `_get_attr_fields`(obj: Any) -> Sequence[_attr_module.Attribute[Any]]
- `_is_dataclass_repr`(obj: object) -> bool
- `_has_default_namedtuple_repr`(obj: object) -> bool
- `_ipy_display_hook`(value: Any, console: [Optional[Console]](#optional), overflow: OverflowMethod, crop: bool, indent_guides: bool, max_length: [Optional[int]](#optional), max_string: [Optional[int]](#optional), max_depth: [Optional[int]](#optional), expand_all: bool) -> [Union[<ast.Tuple object at 0x11a53e390>]](#union)
- `_safe_isinstance`(obj: object, class_or_tuple: [Union[<ast.Tuple object at 0x11a53dd90>]](#union)) -> bool
- `install`(console: [Optional[Console]](#optional), overflow: OverflowMethod, crop: bool, indent_guides: bool, max_length: [Optional[int]](#optional), max_string: [Optional[int]](#optional), max_depth: [Optional[int]](#optional), expand_all: bool) -> None
- `_get_braces_for_defaultdict`(_object: DefaultDict[<ast.Tuple object at 0x11a590210>]) -> Tuple[<ast.Tuple object at 0x11a583590>]
- `_get_braces_for_deque`(_object: Deque[Any]) -> Tuple[<ast.Tuple object at 0x11a581ed0>]
- `_get_braces_for_array`(_object: array[Any]) -> Tuple[<ast.Tuple object at 0x11a580f50>]
- `is_expandable`(obj: Any) -> bool
- `_is_namedtuple`(obj: Any) -> bool
- `traverse`(_object: Any, max_length: [Optional[int]](#optional), max_string: [Optional[int]](#optional), max_depth: [Optional[int]](#optional)) -> Node
- `pretty_repr`(_object: Any) -> str
- `pprint`(_object: Any) -> None
- `display_hook`(value: Any) -> None
- `__init__`(_object: Any, highlighter: [Optional[HighlighterType]](#optional)) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `iter_tokens`() -> Iterable[str]
- `check_length`(max_length: int) -> bool
- `__str__`() -> str
- `render`(max_width: int, indent_size: int, expand_all: bool) -> str
- `expandable`() -> bool
- `expand`(indent_size: int) -> Iterable[_Line]
- `to_repr`(obj: Any) -> str
- `_traverse`(obj: Any, root: bool, depth: int) -> Node
- `iter_rich_args`(rich_args: Any) -> Iterable[Union[<ast.Tuple object at 0x11a5e2710>]]
- `__repr__`() -> str
- `__call__`(value: Any) -> Any
- `iter_attrs`() -> Iterable[Tuple[<ast.Tuple object at 0x11a606fd0>]]

### Implementation
**Pretty**

**Node**
  - key_repr: str
  - value_repr: str
  - open_brace: str
  - close_brace: str
  - empty: str
  - last: bool
  - is_tuple: bool
  - is_namedtuple: bool
  - children: Optional[List[Node]]
  - key_separator: str
  - separator: str
**_Line**
  - parent: Optional[_Line]
  - is_root: bool
  - node: Optional[Node]
  - text: str
  - suffix: str
  - whitespace: str
  - expanded: bool
  - last: bool
**BrokenRepr**

**StockKeepingUnit**
  - name: str
  - description: str
  - price: float
  - category: str
  - reviews: List[str]
**Thing**

**RichFormatter**
  - pprint: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/pretty.py`  
**Dependencies**: `builtins`, `collections`, `dataclasses`, `inspect`, `os`, `reprlib`, `sys`, `array.array`, `collections.Counter`, `collections.UserDict`, `collections.UserList`, `collections.defaultdict`, `collections.deque`, `dataclasses.dataclass`, `dataclasses.fields`, `dataclasses.is_dataclass`, `inspect.isclass`, `itertools.islice`, `types.MappingProxyType`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.DefaultDict`, `typing.Deque`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `typing.Union`, `rich.repr.RichReprResult`, `get_console`, `_loop.loop_last`, `_pick.pick_bool`, `abc.RichRenderable`, `cells.cell_len`, `highlighter.ReprHighlighter`, `jupyter.JupyterMixin`, `jupyter.JupyterRenderable`, `measure.Measurement`, `text.Text`, `attr`, `console.Console`, `console.ConsoleOptions`, `console.HighlighterType`, `console.JustifyMethod`, `console.OverflowMethod`, `console.RenderResult`, `console.ConsoleRenderable`, `rich.get_console`, `typing.NamedTuple`, `rich.print`, `IPython.core.formatters.BaseFormatter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.diagnose
:::{doc} report:10
Print a report to the terminal with debugging information
:::
**Imports**: `os`, `platform`, `rich.inspect`, `rich.console.Console`, `rich.console.get_windows_console_features`, `rich.panel.Panel`, `rich.pretty.Pretty`
### Interface
- `report`() -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/diagnose.py`  
**Dependencies**: `os`, `platform`, `rich.inspect`, `rich.console.Console`, `rich.console.get_windows_console_features`, `rich.panel.Panel`, `rich.pretty.Pretty`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.columns
:::{doc} Columns:16
Display renderables in neat columns.

Args:
    renderables (Iterable[RenderableType]): Any number of Rich renderables (including str).
    width (int, optional): The desired width of the columns, or None to auto detect. Defaults to None.
    padding (PaddingDimensions, optional): Optional padding around cells. Defaults to (0, 1).
    expand (bool, optional): Expand columns to full width. Defaults to False.
    equal (bool, optional): Arrange in to equal sized columns. Defaults to False.
    column_first (bool, optional): Align items from top to bottom (rather than left to right). Defaults to False.
    right_to_left (bool, optional): Start column from right hand side. Defaults to False.
    align (str, optional): Align value ("left", "right", or "center") or None for default. Defaults to None.
    title (TextType, optional): Optional title for Columns.
:::
**Imports**: `collections.defaultdict`, `itertools.chain`, `operator.itemgetter`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`, `align.Align`, `align.AlignMethod`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `constrain.Constrain`, `measure.Measurement`, `padding.Padding`, `padding.PaddingDimensions`, `table.Table`, `text.TextType`, `jupyter.JupyterMixin`, `os`
**Type References**: [[Columns]], [[Dict]], [[List]]

### Interface
- `__init__`(renderables: [Optional[Iterable[RenderableType]]](#optional), padding: PaddingDimensions) -> None
- `add_renderable`(renderable: RenderableType) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `iter_renderables`(column_count: int) -> Iterable[Tuple[<ast.Tuple object at 0x11a669650>]]

### Implementation
**Columns**
  - widths: Dict[<ast.Tuple object at 0x11a674a10>]
  - column_lengths: List[int]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/columns.py`  
**Dependencies**: `collections.defaultdict`, `itertools.chain`, `operator.itemgetter`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`, `align.Align`, `align.AlignMethod`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `constrain.Constrain`, `measure.Measurement`, `padding.Padding`, `padding.PaddingDimensions`, `table.Table`, `text.TextType`, `jupyter.JupyterMixin`, `os`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.rule
:::{doc} Rule:12
A console renderable to draw a horizontal rule (line).

Args:
    title (Union[str, Text], optional): Text to render in the rule. Defaults to "".
    characters (str, optional): Character(s) used to draw the line. Defaults to "─".
    style (StyleType, optional): Style of Rule. Defaults to "rule.line".
    end (str, optional): Character at end of Rule. defaults to "\\n"
    align (str, optional): How to align the title, one of "left", "center", or "right". Defaults to "center".
:::
**Imports**: `typing.Union`, `align.AlignMethod`, `cells.cell_len`, `cells.set_cell_size`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `style.Style`, `text.Text`, `sys`, `rich.console.Console`
**Type References**: [[Rule]]

### Interface
- `__init__`(title: [Union[<ast.Tuple object at 0x11a6b2c90>]](#union)) -> None
- `__repr__`() -> str
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `_rule_line`(chars_len: int, width: int) -> Text
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement

### Implementation
**Rule**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/rule.py`  
**Dependencies**: `typing.Union`, `align.AlignMethod`, `cells.cell_len`, `cells.set_cell_size`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `style.Style`, `text.Text`, `sys`, `rich.console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._inspect
:::{doc} _first_paragraph:15
Get the first paragraph from a docstring.
:::
:::{doc} Inspect:21
A renderable to inspect any Python Object.

Args:
    obj (Any): An object to inspect.
    title (str, optional): Title to display over inspect result, or None use type. Defaults to None.
    help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.
    methods (bool, optional): Enable inspection of callables. Defaults to False.
    docs (bool, optional): Also render doc strings. Defaults to True.
    private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.
    dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.
    sort (bool, optional): Sort attributes alphabetically. Defaults to True.
    all (bool, optional): Show all attributes. Defaults to False.
    value (bool, optional): Pretty print value of object. Defaults to True.
:::
:::{doc} get_object_types_mro:236
Returns the MRO of an object's class, or of the object itself if it's a class.
:::
:::{doc} get_object_types_mro_as_strings:245
Returns the MRO of an object's class as full qualified names, or of the object itself if it's a class.

Examples:
    `object_types_mro_as_strings(JSONDecoder)` will return `['json.decoder.JSONDecoder', 'builtins.object']`
:::
:::{doc} is_object_one_of_types:258
Returns `True` if the given object's class (or the object itself, if it's a class) has one of the
fully qualified names in its MRO.
:::
**Imports**: `inspect`, `inspect.cleandoc`, `inspect.getdoc`, `inspect.getfile`, `inspect.isclass`, `inspect.ismodule`, `inspect.signature`, `typing.Any`, `typing.Collection`, `typing.Iterable`, `typing.Optional`, `typing.Tuple`, `typing.Type`, `typing.Union`, `console.Group`, `console.RenderableType`, `control.escape_control_codes`, `highlighter.ReprHighlighter`, `jupyter.JupyterMixin`, `panel.Panel`, `pretty.Pretty`, `table.Table`, `text.Text`, `text.TextType`
**Type References**: [[Inspect]], [[Optional]]

### Interface
- `_first_paragraph`(doc: str) -> str
- `get_object_types_mro`(obj: [Union[<ast.Tuple object at 0x11a719950>]](#union)) -> Tuple[<ast.Tuple object at 0x11a71aa50>]
- `get_object_types_mro_as_strings`(obj: object) -> Collection[str]
- `is_object_one_of_types`(obj: object, fully_qualified_types_names: Collection[str]) -> bool
- `__init__`(obj: Any) -> None
- `_make_title`(obj: Any) -> Text
- `__rich__`() -> Panel
- `_get_signature`(name: str, obj: Any) -> [Optional[Text]](#optional)
- `_render`() -> Iterable[RenderableType]
- `_get_formatted_doc`(object_: Any) -> [Optional[str]](#optional)
- `sort_items`(item: Tuple[<ast.Tuple object at 0x11a6fac90>]) -> Tuple[<ast.Tuple object at 0x11a6f9d10>]
- `safe_getattr`(attr_name: str) -> Tuple[<ast.Tuple object at 0x11a6f8c10>]

### Implementation
**Inspect**
  - source_filename: Optional[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_inspect.py`  
**Dependencies**: `inspect`, `inspect.cleandoc`, `inspect.getdoc`, `inspect.getfile`, `inspect.isclass`, `inspect.ismodule`, `inspect.signature`, `typing.Any`, `typing.Collection`, `typing.Iterable`, `typing.Optional`, `typing.Tuple`, `typing.Type`, `typing.Union`, `console.Group`, `console.RenderableType`, `control.escape_control_codes`, `highlighter.ReprHighlighter`, `jupyter.JupyterMixin`, `panel.Panel`, `pretty.Pretty`, `table.Table`, `text.Text`, `text.TextType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.markdown
:::{doc} UnknownElement:87
An unknown element.

Hopefully there will be no unknown elements, and we will have a MarkdownElement for
everything in the document.
:::
:::{doc} TextElement:96
Base class for elements that render text.
:::
:::{doc} Paragraph:112
A Paragraph.
:::
:::{doc} Heading:132
A heading.
:::
:::{doc} CodeBlock:167
A code block with syntax highlighting.
:::
:::{doc} BlockQuote:192
A block quote.
:::
:::{doc} HorizontalRule:218
A horizontal rule to divide sections.
:::
:::{doc} TableElement:230
MarkdownElement corresponding to `table_open`.
:::
:::{doc} TableHeaderElement:263
MarkdownElement corresponding to `thead_open` and `thead_close`.
:::
:::{doc} TableBodyElement:275
MarkdownElement corresponding to `tbody_open` and `tbody_close`.
:::
:::{doc} TableRowElement:287
MarkdownElement corresponding to `tr_open` and `tr_close`.
:::
:::{doc} TableDataElement:299
MarkdownElement corresponding to `td_open` and `td_close`
and `th_open` and `th_close`.
:::
:::{doc} ListElement:330
A list element.
:::
:::{doc} ListItem:362
An item in a list.
:::
:::{doc} ImageItem:415
Renders a placeholder for an image.
:::
:::{doc} MarkdownContext:455
Manages the console render state.
:::
:::{doc} Markdown:503
A Markdown renderable.

Args:
    markup (str): A string containing markdown.
    code_theme (str, optional): Pygments theme for code blocks. Defaults to "monokai". See https://pygments.org/styles/ for code themes.
    justify (JustifyMethod, optional): Justify value for paragraphs. Defaults to None.
    style (Union[str, Style], optional): Optional style to apply to markdown.
    hyperlinks (bool, optional): Enable hyperlinks. Defaults to ``True``.
    inline_code_lexer: (str, optional): Lexer to use if inline code highlighting is
        enabled. Defaults to None.
    inline_code_theme: (Optional[str], optional): Pygments theme for inline code
        highlighting, or None for no highlighting. Defaults to None.
:::
**Imports**: `__future__.annotations`, `sys`, `typing.ClassVar`, `typing.Iterable`, `markdown_it.MarkdownIt`, `markdown_it.token.Token`, `rich.table.Table`, `box`, `_loop.loop_first`, `_stack.Stack`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.RenderResult`, `containers.Renderables`, `jupyter.JupyterMixin`, `panel.Panel`, `rule.Rule`, `segment.Segment`, `style.Style`, `style.StyleStack`, `syntax.Syntax`, `text.Text`, `text.TextType`, `typing.get_args`, `typing_extensions.get_args`, `argparse`, `sys`, `rich.console.Console`, `io`, `pydoc`
**Type References**: [[BlockQuote]], [[ClassVar]], [[CodeBlock]], [[Heading]], [[HorizontalRule]], [[ImageItem]], [[JustifyMethod]], [[Link]], [[ListElement]], [[ListItem]], [[Markdown]], [[MarkdownContext]], [[MarkdownElement]], [[Paragraph]], [[TableBodyElement]], [[TableDataElement]], [[TableElement]], [[TableHeaderElement]], [[TableRowElement]], [[TextElement]], [[UnknownElement]]

### Interface
- `create`(markdown: Markdown, token: Token) -> MarkdownElement
- `on_enter`(context: MarkdownContext) -> None
- `on_text`(text: str, node_type: str) -> None
- `on_leave`(context: MarkdownContext) -> None
- `on_child_close`(context: MarkdownContext, child: MarkdownElement) -> bool
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__init__`(markup: str, code_theme: str, justify: JustifyMethod | None, style: str | Style, hyperlinks: bool, inline_code_lexer: str | None, inline_code_theme: str | None) -> None
- `render_bullet`(console: Console, options: ConsoleOptions) -> RenderResult
- `render_number`(console: Console, options: ConsoleOptions, number: int, last_number: int) -> RenderResult
- `current_style`() -> Style
- `enter_style`(style_name: str | Style) -> Style
- `leave_style`() -> Style
- `_flatten_tokens`(tokens: Iterable[Token]) -> Iterable[Token]

### Implementation
**MarkdownElement**
  - new_line: ClassVar[bool]
**UnknownElement**

**TextElement**

**Paragraph**
  - justify: JustifyMethod
**Heading**

**CodeBlock**

**BlockQuote**

**HorizontalRule**

**TableElement**

**TableHeaderElement**

**TableBodyElement**

**TableRowElement**

**TableDataElement**
  - justify: JustifyMethod
**ListElement**

**ListItem**

**Link**

**ImageItem**

**MarkdownContext**

**Markdown**
  - elements: ClassVar[dict[<ast.Tuple object at 0x11a7d10d0>]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/markdown.py`  
**Dependencies**: `__future__.annotations`, `sys`, `typing.ClassVar`, `typing.Iterable`, `markdown_it.MarkdownIt`, `markdown_it.token.Token`, `rich.table.Table`, `box`, `_loop.loop_first`, `_stack.Stack`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.RenderResult`, `containers.Renderables`, `jupyter.JupyterMixin`, `panel.Panel`, `rule.Rule`, `segment.Segment`, `style.Style`, `style.StyleStack`, `syntax.Syntax`, `text.Text`, `text.TextType`, `typing.get_args`, `typing_extensions.get_args`, `argparse`, `sys`, `rich.console.Console`, `io`, `pydoc`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.pager
:::{doc} Pager:5
Base class for a pager.
:::
:::{doc} SystemPager:17
Uses the pager installed on the system.
:::
**Imports**: `abc.ABC`, `abc.abstractmethod`, `typing.Any`, `__main__.make_test_card`, `console.Console`
**Type References**: [[Pager]], [[SystemPager]]

### Interface
- `show`(content: str) -> None
- `_pager`(content: str) -> Any

### Implementation
**Pager**

**SystemPager**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/pager.py`  
**Dependencies**: `abc.ABC`, `abc.abstractmethod`, `typing.Any`, `__main__.make_test_card`, `console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.text
:::{doc} Span:47
A marked up region in some text.
:::
:::{doc} Text:118
Text with color / style.

Args:
    text (str, optional): Default unstyled text. Defaults to "".
    style (Union[str, Style], optional): Base style for text. Defaults to "".
    justify (str, optional): Justify method: "left", "center", "full", "right". Defaults to None.
    overflow (str, optional): Overflow method: "crop", "fold", "ellipsis". Defaults to None.
    no_wrap (bool, optional): Disable text wrapping, or None for default. Defaults to None.
    end (str, optional): Character to end text with. Defaults to "\\n".
    tab_size (int): Number of spaces per tab, or ``None`` to use ``console.tab_size``. Defaults to None.
    spans (List[Span], optional). A list of predefined style spans. Defaults to None.
:::
**Imports**: `re`, `functools.partial`, `functools.reduce`, `math.gcd`, `operator.itemgetter`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Pattern`, `typing.Tuple`, `typing.Union`, `_loop.loop_last`, `_pick.pick_bool`, `_wrap.divide_line`, `align.AlignMethod`, `cells.cell_len`, `cells.set_cell_size`, `containers.Lines`, `control.strip_control_codes`, `emoji.EmojiVariant`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`, `style.StyleType`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.OverflowMethod`, `rich.console.Console`, `markup.escape`, `markup.render`, `ansi.AnsiDecoder`
**Type References**: [[Dict]], [[JustifyMethod]], [[Lines]], [[List]], [[OverflowMethod]], [[Span]], [[Style]], [[Text]], [[Union]]

### Interface
- `__repr__`() -> str
- `__bool__`() -> bool
- `split`(separator: str) -> Lines
- `move`(offset: int) -> Span
- `right_crop`(amount: int) -> None
- `extend`(cells: int) -> Span
- `__init__`(text: str, style: [Union[<ast.Tuple object at 0x11a837150>]](#union)) -> None
- `__len__`() -> int
- `__str__`() -> str
- `__add__`(other: Any) -> Text
- `__eq__`(other: object) -> bool
- `__contains__`(other: object) -> bool
- `__getitem__`(slice: [Union[<ast.Tuple object at 0x11a8b4350>]](#union)) -> Text
- `cell_len`() -> int
- `markup`() -> str
- `from_markup`(text: str) -> Text
- `from_ansi`(text: str) -> Text
- `styled`(text: str, style: StyleType) -> Text
- `assemble`() -> Text
- `plain`(new_text: str) -> None
- `spans`(spans: [List[Span]](#list)) -> None
- `blank_copy`(plain: str) -> Text
- `copy`() -> Text
- `stylize`(style: [Union[<ast.Tuple object at 0x11a84ab10>]](#union), start: int, end: [Optional[int]](#optional)) -> None
- `stylize_before`(style: [Union[<ast.Tuple object at 0x11a83bb50>]](#union), start: int, end: [Optional[int]](#optional)) -> None
- `apply_meta`(meta: [Dict[<ast.Tuple object at 0x11a838b50>]](#dict), start: int, end: [Optional[int]](#optional)) -> None
- `on`(meta: [Optional[Dict[<ast.Tuple object at 0x11a8c0b10>]]](#optional)) -> Text
- `remove_suffix`(suffix: str) -> None
- `get_style_at_offset`(console: Console, offset: int) -> Style
- `extend_style`(spaces: int) -> None
- `highlight_regex`(re_highlight: [Union[<ast.Tuple object at 0x11a8d4210>]](#union), style: [Optional[Union[<ast.Tuple object at 0x11a8d4750>]]](#optional)) -> int
- `highlight_words`(words: Iterable[str], style: [Union[<ast.Tuple object at 0x11a8e1c10>]](#union)) -> int
- `rstrip`() -> None
- `rstrip_end`(size: int) -> None
- `set_length`(new_length: int) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> Iterable[Segment]
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `render`(console: Console, end: str) -> Iterable[Segment]
- `join`(lines: Iterable[Text]) -> Text
- `expand_tabs`(tab_size: [Optional[int]](#optional)) -> None
- `truncate`(max_width: int) -> None
- `_trim_spans`() -> None
- `pad`(count: int, character: str) -> None
- `pad_left`(count: int, character: str) -> None
- `pad_right`(count: int, character: str) -> None
- `align`(align: AlignMethod, width: int, character: str) -> None
- `append`(text: [Union[<ast.Tuple object at 0x11a9576d0>]](#union), style: [Optional[Union[<ast.Tuple object at 0x11a957b10>]]](#optional)) -> Text
- `append_text`(text: Text) -> Text
- `append_tokens`(tokens: Iterable[Tuple[<ast.Tuple object at 0x11a978690>]]) -> Text
- `copy_styles`(text: Text) -> None
- `divide`(offsets: Iterable[int]) -> Lines
- `wrap`(console: Console, width: int) -> Lines
- `fit`(width: int) -> Lines
- `detect_indentation`() -> int
- `with_indent_guides`(indent_size: [Optional[int]](#optional)) -> Text
- `get_text_at`(offset: int) -> Text
- `get_current_style`() -> Style
- `iter_text`() -> Iterable[Text]
- `flatten_spans`() -> Iterable[int]

### Implementation
**Span**
  - start: int
  - end: int
  - style: Union[<ast.Tuple object at 0x11a853650>]
**Text**
  - output: List[str]
  - tab_size: int
  - stack: List[int]
  - style_cache: Dict[<ast.Tuple object at 0x11a90ec10>]
  - new_text: List[Text]
  - lines: Lines
  - new_lines: List[Text]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/text.py`  
**Dependencies**: `re`, `functools.partial`, `functools.reduce`, `math.gcd`, `operator.itemgetter`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Pattern`, `typing.Tuple`, `typing.Union`, `_loop.loop_last`, `_pick.pick_bool`, `_wrap.divide_line`, `align.AlignMethod`, `cells.cell_len`, `cells.set_cell_size`, `containers.Lines`, `control.strip_control_codes`, `emoji.EmojiVariant`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`, `style.StyleType`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.OverflowMethod`, `rich.console.Console`, `markup.escape`, `markup.render`, `ansi.AnsiDecoder`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.highlighter
:::{doc} _combine_regex:8
Combine a number of regexes in to a single regex.

Returns:
    str: New regex with all regexes ORed together.
:::
:::{doc} Highlighter:17
Abstract base class for highlighters.
:::
:::{doc} NullHighlighter:50
A highlighter object that doesn't highlight.

May be used to disable highlighting entirely.
:::
:::{doc} RegexHighlighter:61
Applies highlighting from a list of regular expressions.
:::
:::{doc} ReprHighlighter:80
Highlights the text typically produced from ``__repr__`` methods.
:::
:::{doc} JSONHighlighter:106
Highlights JSON
:::
:::{doc} ISO8601Highlighter:143
Highlights the ISO8601 date time strings.
Regex reference: https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s07.html
:::
**Imports**: `re`, `abc.ABC`, `abc.abstractmethod`, `typing.List`, `typing.Union`, `text.Span`, `text.Text`, `console.Console`, `json`
**Type References**: [[Highlighter]], [[ISO8601Highlighter]], [[JSONHighlighter]], [[List]], [[NullHighlighter]], [[RegexHighlighter]], [[ReprHighlighter]]

### Interface
- `_combine_regex`() -> str
- `__call__`(text: [Union[<ast.Tuple object at 0x11a9f26d0>]](#union)) -> Text
- `highlight`(text: Text) -> None

### Implementation
**Highlighter**

**NullHighlighter**

**RegexHighlighter**
  - highlights: List[str]
  - base_style: str
**ReprHighlighter**

**JSONHighlighter**

**ISO8601Highlighter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/highlighter.py`  
**Dependencies**: `re`, `abc.ABC`, `abc.abstractmethod`, `typing.List`, `typing.Union`, `text.Span`, `text.Text`, `console.Console`, `json`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._spinners



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_spinners.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.terminal_theme
:::{doc} TerminalTheme:9
A color theme used when exporting console content.

Args:
    background (Tuple[int, int, int]): The background color.
    foreground (Tuple[int, int, int]): The foreground (text) color.
    normal (List[Tuple[int, int, int]]): A list of 8 normal intensity colors.
    bright (List[Tuple[int, int, int]], optional): A list of 8 bright colors, or None
        to repeat normal intensity. Defaults to None.
:::
**Imports**: `typing.List`, `typing.Optional`, `typing.Tuple`, `color_triplet.ColorTriplet`, `palette.Palette`
**Type References**: [[TerminalTheme]]

### Interface
- `__init__`(background: _ColorTuple, foreground: _ColorTuple, normal: [List[_ColorTuple]](#list), bright: [Optional[List[_ColorTuple]]](#optional)) -> None

### Implementation
**TerminalTheme**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/terminal_theme.py`  
**Dependencies**: `typing.List`, `typing.Optional`, `typing.Tuple`, `color_triplet.ColorTriplet`, `palette.Palette`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.bar
:::{doc} Bar:17
Renders a solid block bar.

Args:
    size (float): Value for the end of the bar.
    begin (float): Begin point (between 0 and size, inclusive).
    end (float): End point (between 0 and size, inclusive).
    width (int, optional): Width of the bar, or ``None`` for maximum width. Defaults to None.
    color (Union[Color, str], optional): Color of the bar. Defaults to "default".
    bgcolor (Union[Color, str], optional): Color of bar background. Defaults to "default".
:::
**Imports**: `typing.Optional`, `typing.Union`, `color.Color`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`
**Type References**: [[Bar]]

### Interface
- `__init__`(size: float, begin: float, end: float) -> Any
- `__repr__`() -> str
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement

### Implementation
**Bar**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/bar.py`  
**Dependencies**: `typing.Optional`, `typing.Union`, `color.Color`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.live
:::{doc} _RefreshThread:16
A thread that calls refresh() at regular intervals.
:::
:::{doc} Live:35
Renders an auto-updating live display of any given renderable.

Args:
    renderable (RenderableType, optional): The renderable to live display. Defaults to displaying nothing.
    console (Console, optional): Optional Console instance. Defaults to an internal Console instance writing to stdout.
    screen (bool, optional): Enable alternate screen mode. Defaults to False.
    auto_refresh (bool, optional): Enable auto refresh. If disabled, you will need to call `refresh()` or `update()` with refresh flag. Defaults to True
    refresh_per_second (float, optional): Number of times per second to refresh the live display. Defaults to 4.
    transient (bool, optional): Clear the renderable on exit (has no effect when screen=True). Defaults to False.
    redirect_stdout (bool, optional): Enable redirection of stdout, so ``print`` may be used. Defaults to True.
    redirect_stderr (bool, optional): Enable redirection of stderr. Defaults to True.
    vertical_overflow (VerticalOverflowMethod, optional): How to handle renderable when it is too tall for the console. Defaults to "ellipsis".
    get_renderable (Callable[[], RenderableType], optional): Optional callable to get renderable. Defaults to None.
:::
**Imports**: `sys`, `threading.Event`, `threading.RLock`, `threading.Thread`, `types.TracebackType`, `typing.IO`, `typing.Any`, `typing.Callable`, `typing.List`, `typing.Optional`, `typing.TextIO`, `typing.Type`, `typing.cast`, `get_console`, `console.Console`, `console.ConsoleRenderable`, `console.RenderableType`, `console.RenderHook`, `control.Control`, `file_proxy.FileProxy`, `jupyter.JupyterMixin`, `live_render.LiveRender`, `live_render.VerticalOverflowMethod`, `screen.Screen`, `text.Text`, `random`, `time`, `itertools.cycle`, `typing.Dict`, `typing.List`, `typing.Tuple`, `align.Align`, `console.Console`, `live.Live`, `panel.Panel`, `rule.Rule`, `syntax.Syntax`, `table.Table`, `IPython.display.display`, `ipywidgets.Output`, `warnings`
**Type References**: [[Dict]], [[Live]], [[_RefreshThread]]

### Interface
- `__init__`(renderable: [Optional[RenderableType]](#optional)) -> None
- `stop`() -> None
- `run`() -> None
- `is_started`() -> bool
- `get_renderable`() -> RenderableType
- `start`(refresh: bool) -> None
- `__enter__`() -> Live
- `__exit__`(exc_type: [Optional[Type[BaseException]]](#optional), exc_val: [Optional[BaseException]](#optional), exc_tb: [Optional[TracebackType]](#optional)) -> None
- `_enable_redirect_io`() -> None
- `_disable_redirect_io`() -> None
- `renderable`() -> RenderableType
- `update`(renderable: RenderableType) -> None
- `refresh`() -> None
- `process_renderables`(renderables: [List[ConsoleRenderable]](#list)) -> [List[ConsoleRenderable]](#list)

### Implementation
**_RefreshThread**

**Live**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/live.py`  
**Dependencies**: `sys`, `threading.Event`, `threading.RLock`, `threading.Thread`, `types.TracebackType`, `typing.IO`, `typing.Any`, `typing.Callable`, `typing.List`, `typing.Optional`, `typing.TextIO`, `typing.Type`, `typing.cast`, `get_console`, `console.Console`, `console.ConsoleRenderable`, `console.RenderableType`, `console.RenderHook`, `control.Control`, `file_proxy.FileProxy`, `jupyter.JupyterMixin`, `live_render.LiveRender`, `live_render.VerticalOverflowMethod`, `screen.Screen`, `text.Text`, `random`, `time`, `itertools.cycle`, `typing.Dict`, `typing.List`, `typing.Tuple`, `align.Align`, `console.Console`, `live.Live`, `panel.Panel`, `rule.Rule`, `syntax.Syntax`, `table.Table`, `IPython.display.display`, `ipywidgets.Output`, `warnings`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.syntax
:::{doc} SyntaxTheme:122
Base class for a syntax theme.
:::
:::{doc} PygmentsSyntaxTheme:136
Syntax theme that delegates to Pygments theme.
:::
:::{doc} ANSISyntaxTheme:178
Syntax theme to use standard colors.
:::
:::{doc} _SyntaxHighlightRange:214
A range to highlight in a Syntax object.
`start` and `end` are 2-integers tuples, where the first integer is the line number
(starting from 1) and the second integer is the column index (starting from 0).
:::
:::{doc} Syntax:227
Construct a Syntax object to render syntax highlighted code.

Args:
    code (str): Code to highlight.
    lexer (Lexer | str): Lexer to use (see https://pygments.org/docs/lexers/)
    theme (str, optional): Color theme, aka Pygments style (see https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to "monokai".
    dedent (bool, optional): Enable stripping of initial whitespace. Defaults to False.
    line_numbers (bool, optional): Enable rendering of line numbers. Defaults to False.
    start_line (int, optional): Starting number for line numbers. Defaults to 1.
    line_range (Tuple[int | None, int | None], optional): If given should be a tuple of the start and end line to render.
        A value of None in the tuple indicates the range is open in that direction.
    highlight_lines (Set[int]): A set of line numbers to highlight.
    code_width: Width of code to render (not including line numbers), or ``None`` to use all available width.
    tab_size (int, optional): Size of tabs. Defaults to 4.
    word_wrap (bool, optional): Enable word wrapping.
    background_color (str, optional): Optional background color, or None to use theme color. Defaults to None.
    indent_guides (bool, optional): Show indent guides. Defaults to False.
    padding (PaddingDimensions): Padding to apply around the syntax. Defaults to 0 (no padding).
:::
:::{doc} _get_code_index_for_syntax_position:822
Returns the index of the code string for the given positions.

Args:
    newlines_offsets (Sequence[int]): The offset of each newline character found in the code snippet.
    position (SyntaxPosition): The position to search for.

Returns:
    Optional[int]: The index of the code string for this position, or `None`
        if the given position's line number is out of range (if it's the column that is out of range
        we silently clamp its value so that it reaches the end of the line)
:::
**Imports**: `os.path`, `re`, `sys`, `textwrap`, `abc.ABC`, `abc.abstractmethod`, `pathlib.Path`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `typing.Type`, `typing.Union`, `pygments.lexer.Lexer`, `pygments.lexers.get_lexer_by_name`, `pygments.lexers.guess_lexer_for_filename`, `pygments.style.Style`, `pygments.styles.get_style_by_name`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Generic`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Token`, `pygments.token.Whitespace`, `pygments.util.ClassNotFound`, `rich.containers.Lines`, `rich.padding.Padding`, `rich.padding.PaddingDimensions`, `_loop.loop_first`, `cells.cell_len`, `color.Color`, `color.blend_rgb`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `segment.Segments`, `style.Style`, `style.StyleType`, `text.Text`, `argparse`, `sys`, `rich.console.Console`
**Type References**: [[ANSISyntaxTheme]], [[Dict]], [[JustifyMethod]], [[Lines]], [[Optional]], [[PygmentsSyntaxTheme]], [[StyleType]], [[Syntax]], [[SyntaxPosition]], [[SyntaxTheme]], [[Type]], [[Union]], [[_SyntaxHighlightRange]]

### Interface
- `_get_code_index_for_syntax_position`(newlines_offsets: Sequence[int], position: SyntaxPosition) -> [Optional[int]](#optional)
- `get_style_for_token`(token_type: TokenType) -> Style
- `get_background_style`() -> Style
- `__init__`(code: str, lexer: [Union[<ast.Tuple object at 0x11ab6d590>]](#union)) -> None
- `get_theme`(name: [Union[<ast.Tuple object at 0x11ab6f0d0>]](#union)) -> SyntaxTheme
- `from_path`(path: str, encoding: str, lexer: [Optional[Union[<ast.Tuple object at 0x11ab57f10>]]](#optional), theme: [Union[<ast.Tuple object at 0x11ab57bd0>]](#union), dedent: bool, line_numbers: bool, line_range: [Optional[Tuple[<ast.Tuple object at 0x11ab57590>]]](#optional), start_line: int, highlight_lines: [Optional[Set[int]]](#optional), code_width: [Optional[int]](#optional), tab_size: int, word_wrap: bool, background_color: [Optional[str]](#optional), indent_guides: bool, padding: PaddingDimensions) -> Syntax
- `guess_lexer`(path: str, code: [Optional[str]](#optional)) -> str
- `_get_base_style`() -> Style
- `_get_token_color`(token_type: TokenType) -> [Optional[Color]](#optional)
- `lexer`() -> [Optional[Lexer]](#optional)
- `default_lexer`() -> Lexer
- `highlight`(code: str, line_range: [Optional[Tuple[<ast.Tuple object at 0x11ab3ccd0>]]](#optional)) -> Text
- `stylize_range`(style: StyleType, start: SyntaxPosition, end: SyntaxPosition, style_before: bool) -> None
- `_get_line_numbers_color`(blend: float) -> Color
- `_numbers_column_width`() -> int
- `_get_number_styles`(console: Console) -> Tuple[<ast.Tuple object at 0x11abc5890>]
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `_get_syntax`(console: Console, options: ConsoleOptions) -> Iterable[Segment]
- `_apply_stylized_ranges`(text: Text) -> None
- `_process_code`(code: str) -> Tuple[<ast.Tuple object at 0x11ac07e10>]
- `line_tokenize`() -> Iterable[Tuple[<ast.Tuple object at 0x11ab30f10>]]
- `tokens_to_spans`() -> Iterable[Tuple[<ast.Tuple object at 0x11aba6710>]]

### Implementation
**SyntaxTheme**

**PygmentsSyntaxTheme**

**ANSISyntaxTheme**

**_SyntaxHighlightRange**
  - style: StyleType
  - start: SyntaxPosition
  - end: SyntaxPosition
  - style_before: bool
**Syntax**
  - _pygments_style_class: Type[PygmentsStyle]
  - _theme: SyntaxTheme
  - theme: SyntaxTheme
  - lexer: Optional[Lexer]
  - justify: JustifyMethod
  - lines: Union[<ast.Tuple object at 0x11abe4f10>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/syntax.py`  
**Dependencies**: `os.path`, `re`, `sys`, `textwrap`, `abc.ABC`, `abc.abstractmethod`, `pathlib.Path`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `typing.Type`, `typing.Union`, `pygments.lexer.Lexer`, `pygments.lexers.get_lexer_by_name`, `pygments.lexers.guess_lexer_for_filename`, `pygments.style.Style`, `pygments.styles.get_style_by_name`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Generic`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Token`, `pygments.token.Whitespace`, `pygments.util.ClassNotFound`, `rich.containers.Lines`, `rich.padding.Padding`, `rich.padding.PaddingDimensions`, `_loop.loop_first`, `cells.cell_len`, `color.Color`, `color.blend_rgb`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `segment.Segments`, `style.Style`, `style.StyleType`, `text.Text`, `argparse`, `sys`, `rich.console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.table
:::{doc} Column:39
Defines a column within a ~Table.

Args:
    title (Union[str, Text], optional): The title of the table rendered at the top. Defaults to None.
    caption (Union[str, Text], optional): The table caption rendered below. Defaults to None.
    width (int, optional): The width in characters of the table, or ``None`` to automatically fit. Defaults to None.
    min_width (Optional[int], optional): The minimum width of the table, or ``None`` for no minimum. Defaults to None.
    box (box.Box, optional): One of the constants in box.py used to draw the edges (see :ref:`appendix_box`), or ``None`` for no box lines. Defaults to box.HEAVY_HEAD.
    safe_box (Optional[bool], optional): Disable box characters that don't display on windows legacy terminal with *raster* fonts. Defaults to True.
    padding (PaddingDimensions, optional): Padding for cells (top, right, bottom, left). Defaults to (0, 1).
    collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to False.
    pad_edge (bool, optional): Enable padding of edge cells. Defaults to True.
    expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.
    show_header (bool, optional): Show a header row. Defaults to True.
    show_footer (bool, optional): Show a footer row. Defaults to False.
    show_edge (bool, optional): Draw a box around the outside of the table. Defaults to True.
    show_lines (bool, optional): Draw lines between every row. Defaults to False.
    leading (int, optional): Number of blank lines between rows (precludes ``show_lines``). Defaults to 0.
    style (Union[str, Style], optional): Default style for the table. Defaults to "none".
    row_styles (List[Union, str], optional): Optional list of row styles, if more than one style is given then the styles will alternate. Defaults to None.
    header_style (Union[str, Style], optional): Style of the header. Defaults to "table.header".
    footer_style (Union[str, Style], optional): Style of the footer. Defaults to "table.footer".
    border_style (Union[str, Style], optional): Style of the border. Defaults to None.
    title_style (Union[str, Style], optional): Style of the title. Defaults to None.
    caption_style (Union[str, Style], optional): Style of the caption. Defaults to None.
    title_justify (str, optional): Justify method for title. Defaults to "center".
    caption_justify (str, optional): Justify method for caption. Defaults to "center".
    highlight (bool, optional): Highlight cell contents (if str). Defaults to False.
:::
:::{doc} Row:133
Information regarding a row.
:::
:::{doc} _Cell:143
A single cell in a table.
:::
:::{doc} Table:154
A console renderable to draw a table.

Args:
    *headers (Union[Column, str]): Column headers, either as a string, or :class:`~rich.table.Column` instance.
    title (Union[str, Text], optional): The title of the table rendered at the top. Defaults to None.
    caption (Union[str, Text], optional): The table caption rendered below. Defaults to None.
    width (int, optional): The width in characters of the table, or ``None`` to automatically fit. Defaults to None.
    min_width (Optional[int], optional): The minimum width of the table, or ``None`` for no minimum. Defaults to None.
    box (box.Box, optional): One of the constants in box.py used to draw the edges (see :ref:`appendix_box`), or ``None`` for no box lines. Defaults to box.HEAVY_HEAD.
    safe_box (Optional[bool], optional): Disable box characters that don't display on windows legacy terminal with *raster* fonts. Defaults to True.
    padding (PaddingDimensions, optional): Padding for cells (top, right, bottom, left). Defaults to (0, 1).
    collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to False.
    pad_edge (bool, optional): Enable padding of edge cells. Defaults to True.
    expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.
    show_header (bool, optional): Show a header row. Defaults to True.
    show_footer (bool, optional): Show a footer row. Defaults to False.
    show_edge (bool, optional): Draw a box around the outside of the table. Defaults to True.
    show_lines (bool, optional): Draw lines between every row. Defaults to False.
    leading (int, optional): Number of blank lines between rows (precludes ``show_lines``). Defaults to 0.
    style (Union[str, Style], optional): Default style for the table. Defaults to "none".
    row_styles (List[Union, str], optional): Optional list of row styles, if more than one style is given then the styles will alternate. Defaults to None.
    header_style (Union[str, Style], optional): Style of the header. Defaults to "table.header".
    footer_style (Union[str, Style], optional): Style of the footer. Defaults to "table.footer".
    border_style (Union[str, Style], optional): Style of the border. Defaults to None.
    title_style (Union[str, Style], optional): Style of the title. Defaults to None.
    caption_style (Union[str, Style], optional): Style of the caption. Defaults to None.
    title_justify (str, optional): Justify method for title. Defaults to "center".
    caption_justify (str, optional): Justify method for caption. Defaults to "center".
    highlight (bool, optional): Highlight cell contents (if str). Defaults to False.
:::
**Imports**: `dataclasses.dataclass`, `dataclasses.field`, `dataclasses.replace`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `box`, `errors`, `_loop.loop_first_last`, `_loop.loop_last`, `_pick.pick_bool`, `_ratio.ratio_distribute`, `_ratio.ratio_reduce`, `align.VerticalAlignMethod`, `jupyter.JupyterMixin`, `measure.Measurement`, `padding.Padding`, `padding.PaddingDimensions`, `protocol.is_renderable`, `segment.Segment`, `style.Style`, `style.StyleType`, `text.Text`, `text.TextType`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.OverflowMethod`, `console.RenderableType`, `console.RenderResult`, `rich.console.Console`, `rich.highlighter.ReprHighlighter`, `rich.table.Table`, `_timer.timer`
**Type References**: [[Column]], [[Dict]], [[JustifyMethod]], [[List]], [[Optional]], [[OverflowMethod]], [[RenderableType]], [[Row]], [[StyleType]], [[Table]], [[Tuple]], [[VerticalAlignMethod]], [[_Cell]]

### Interface
- `copy`() -> Column
- `cells`() -> Iterable[RenderableType]
- `flexible`() -> bool
- `__init__`() -> None
- `grid`() -> Table
- `expand`(expand: bool) -> None
- `_extra_width`() -> int
- `row_count`() -> int
- `get_row_style`(console: Console, index: int) -> StyleType
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `padding`(padding: PaddingDimensions) -> Table
- `add_column`(header: RenderableType, footer: RenderableType) -> None
- `add_row`() -> None
- `add_section`() -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `_calculate_column_widths`(console: Console, options: ConsoleOptions) -> [List[int]](#list)
- `_collapse_widths`(widths: [List[int]](#list), wrapable: [List[bool]](#list), max_width: int) -> [List[int]](#list)
- `_get_cells`(console: Console, column_index: int, column: Column) -> Iterable[_Cell]
- `_get_padding_width`(column_index: int) -> int
- `_measure_column`(console: Console, options: ConsoleOptions, column: Column) -> Measurement
- `_render`(console: Console, options: ConsoleOptions, widths: [List[int]](#list)) -> RenderResult
- `add_cell`(column: Column, renderable: RenderableType) -> None
- `render_annotation`(text: TextType, style: StyleType, justify: JustifyMethod) -> RenderResult
- `get_padding`(first_row: bool, last_row: bool) -> Tuple[<ast.Tuple object at 0x11acf0ad0>]
- `header`(text: str) -> None
- `align_cell`(cell: [List[List[Segment]]](#list), vertical: VerticalAlignMethod, width: int, style: Style) -> [List[List[Segment]]](#list)

### Implementation
**Column**
  - header: RenderableType
  - footer: RenderableType
  - header_style: StyleType
  - footer_style: StyleType
  - style: StyleType
  - justify: JustifyMethod
  - vertical: VerticalAlignMethod
  - overflow: OverflowMethod
  - width: Optional[int]
  - min_width: Optional[int]
  - max_width: Optional[int]
  - ratio: Optional[int]
  - no_wrap: bool
  - highlight: bool
  - _index: int
  - _cells: List[RenderableType]
**Row**
  - style: Optional[StyleType]
  - end_section: bool
**_Cell**
  - style: StyleType
  - renderable: RenderableType
  - vertical: VerticalAlignMethod
**Table**
  - columns: List[Column]
  - rows: List[Row]
  - cell_renderables: List[Optional[RenderableType]]
  - _padding_cache: Dict[<ast.Tuple object at 0x11ace89d0>]
  - raw_cells: List[Tuple[<ast.Tuple object at 0x11acf10d0>]]
  - min_widths: List[int]
  - max_widths: List[int]
  - row_cells: List[Tuple[<ast.Tuple object at 0x11ad13350>]]
  - cells: List[List[List[Segment]]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/table.py`  
**Dependencies**: `dataclasses.dataclass`, `dataclasses.field`, `dataclasses.replace`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `box`, `errors`, `_loop.loop_first_last`, `_loop.loop_last`, `_pick.pick_bool`, `_ratio.ratio_distribute`, `_ratio.ratio_reduce`, `align.VerticalAlignMethod`, `jupyter.JupyterMixin`, `measure.Measurement`, `padding.Padding`, `padding.PaddingDimensions`, `protocol.is_renderable`, `segment.Segment`, `style.Style`, `style.StyleType`, `text.Text`, `text.TextType`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.OverflowMethod`, `console.RenderableType`, `console.RenderResult`, `rich.console.Console`, `rich.highlighter.ReprHighlighter`, `rich.table.Table`, `_timer.timer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._export_format



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_export_format.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.progress_bar
:::{doc} ProgressBar:18
Renders a (progress) bar. Used by rich.progress.

Args:
    total (float, optional): Number of steps in the bar. Defaults to 100. Set to None to render a pulsing animation.
    completed (float, optional): Number of steps completed. Defaults to 0.
    width (int, optional): Width of the bar, or ``None`` for maximum width. Defaults to None.
    pulse (bool, optional): Enable pulse effect. Defaults to False. Will pulse if a None total was passed.
    style (StyleType, optional): Style for the bar background. Defaults to "bar.back".
    complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".
    finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".
    pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".
    animation_time (Optional[float], optional): Time in seconds to use for animation, or None to use system time.
:::
**Imports**: `math`, `functools.lru_cache`, `time.monotonic`, `typing.Iterable`, `typing.List`, `typing.Optional`, `color.Color`, `color.blend_rgb`, `color_triplet.ColorTriplet`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`, `style.StyleType`, `time`
**Type References**: [[List]], [[Optional]], [[ProgressBar]]

### Interface
- `__init__`(total: [Optional[float]](#optional), completed: float, width: [Optional[int]](#optional), pulse: bool, style: StyleType, complete_style: StyleType, finished_style: StyleType, pulse_style: StyleType, animation_time: [Optional[float]](#optional)) -> Any
- `__repr__`() -> str
- `percentage_completed`() -> [Optional[float]](#optional)
- `_get_pulse_segments`(fore_style: Style, back_style: Style, color_system: str, no_color: bool, ascii: bool) -> [List[Segment]](#list)
- `update`(completed: float, total: [Optional[float]](#optional)) -> None
- `_render_pulse`(console: Console, width: int, ascii: bool) -> Iterable[Segment]
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement

### Implementation
**ProgressBar**
  - segments: List[Segment]
  - completed: Optional[float]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/progress_bar.py`  
**Dependencies**: `math`, `functools.lru_cache`, `time.monotonic`, `typing.Iterable`, `typing.List`, `typing.Optional`, `color.Color`, `color.blend_rgb`, `color_triplet.ColorTriplet`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`, `style.StyleType`, `time`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.errors
:::{doc} ConsoleError:1
An error in console operation.
:::
:::{doc} StyleError:5
An error in styles.
:::
:::{doc} StyleSyntaxError:9
Style was badly formatted.
:::
:::{doc} MissingStyle:13
No such style.
:::
:::{doc} StyleStackError:17
Style stack is invalid.
:::
:::{doc} NotRenderableError:21
Object is not renderable.
:::
:::{doc} MarkupError:25
Markup was badly formatted.
:::
:::{doc} LiveError:29
Error related to Live display.
:::
:::{doc} NoAltScreen:33
Alt screen mode was required.
:::

**Type References**: [[ConsoleError]], [[LiveError]], [[MarkupError]], [[MissingStyle]], [[NoAltScreen]], [[NotRenderableError]], [[StyleError]], [[StyleStackError]], [[StyleSyntaxError]]


### Implementation
**ConsoleError**

**StyleError**

**StyleSyntaxError**

**MissingStyle**

**StyleStackError**

**NotRenderableError**

**MarkupError**

**LiveError**

**NoAltScreen**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/errors.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.prompt
:::{doc} PromptError:11
Exception base class for prompt related errors.
:::
:::{doc} InvalidResponse:15
Exception to indicate a response was invalid. Raise this within process_response() to indicate an error
and provide an error message.

Args:
    message (Union[str, Text]): Error message.
:::
:::{doc} PromptBase:30
Ask the user for input until a valid response is received. This is the base class, see one of
the concrete classes for examples.

Args:
    prompt (TextType, optional): Prompt text. Defaults to "".
    console (Console, optional): A Console instance or None to use global console. Defaults to None.
    password (bool, optional): Enable password input. Defaults to False.
    choices (List[str], optional): A list of valid choices. Defaults to None.
    case_sensitive (bool, optional): Matching of choices should be case-sensitive. Defaults to True.
    show_default (bool, optional): Show default in prompt. Defaults to True.
    show_choices (bool, optional): Show choices in prompt. Defaults to True.
:::
:::{doc} Prompt:304
A prompt that returns a str.

Example:
    >>> name = Prompt.ask("Enter your name")
:::
:::{doc} IntPrompt:316
A prompt that returns an integer.

Example:
    >>> burrito_count = IntPrompt.ask("How many burritos do you want to order")
:::
:::{doc} FloatPrompt:328
A prompt that returns a float.

Example:
    >>> temperature = FloatPrompt.ask("Enter desired temperature")
:::
:::{doc} Confirm:340
A yes / no confirmation prompt.

Example:
    >>> if Confirm.ask("Continue"):
            run_job()
:::
**Imports**: `typing.Any`, `typing.Generic`, `typing.List`, `typing.Optional`, `typing.TextIO`, `typing.TypeVar`, `typing.Union`, `typing.overload`, `get_console`, `console.Console`, `text.Text`, `text.TextType`, `rich.print`
**Type References**: [[Confirm]], [[FloatPrompt]], [[IntPrompt]], [[InvalidResponse]], [[List]], [[Optional]], [[Prompt]], [[PromptBase]], [[PromptError]], [[PromptType]]

### Interface
- `__init__`(prompt: TextType) -> None
- `__rich__`() -> TextType
- `ask`(prompt: TextType) -> Any
- `render_default`(default: DefaultType) -> Text
- `make_prompt`(default: DefaultType) -> Text
- `get_input`(console: Console, prompt: TextType, password: bool, stream: [Optional[TextIO]](#optional)) -> str
- `check_choice`(value: str) -> bool
- `process_response`(value: str) -> bool
- `on_validate_error`(value: str, error: InvalidResponse) -> None
- `pre_prompt`() -> None
- `__call__`() -> Any

### Implementation
**PromptError**

**InvalidResponse**

**PromptBase**
  - response_type: type
  - choices: Optional[List[str]]
  - return_value: PromptType
**Prompt**

**IntPrompt**

**FloatPrompt**

**Confirm**
  - choices: List[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/prompt.py`  
**Dependencies**: `typing.Any`, `typing.Generic`, `typing.List`, `typing.Optional`, `typing.TextIO`, `typing.TypeVar`, `typing.Union`, `typing.overload`, `get_console`, `console.Console`, `text.Text`, `text.TextType`, `rich.print`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.segment
:::{doc} ControlType:35
Non-printable control codes which typically translate to ANSI codes.
:::
:::{doc} Segment:64
A piece of text with associated style. Segments are produced by the Console render process and
are ultimately converted in to strings to be written to the terminal.

Args:
    text (str): A piece of text.
    style (:class:`~rich.style.Style`, optional): An optional style to apply to the text.
    control (Tuple[ControlCode], optional): Optional sequence of control codes.

Attributes:
    cell_length (int): The cell length of this Segment.
:::
:::{doc} Segments:671
A simple renderable to render an iterable of segments. This class may be useful if
you want to print segments outside of a __rich_console__ method.

Args:
    segments (Iterable[Segment]): An iterable of segments.
    new_lines (bool, optional): Add new lines between segments. Defaults to False.
:::
**Imports**: `enum.IntEnum`, `functools.lru_cache`, `itertools.filterfalse`, `logging.getLogger`, `operator.attrgetter`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Type`, `typing.Union`, `cells._is_single_cell_widths`, `cells.cached_cell_len`, `cells.cell_len`, `cells.get_character_cell_size`, `cells.set_cell_size`, `repr.Result`, `repr.rich_repr`, `style.Style`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `rich.console.Console`, `rich.syntax.Syntax`, `rich.text.Text`
**Type References**: [[ControlType]], [[Dict]], [[List]], [[Optional]], [[Segment]], [[SegmentLines]], [[Segments]]

### Interface
- `cell_length`() -> int
- `__rich_repr__`() -> Result
- `__bool__`() -> bool
- `is_control`() -> bool
- `_split_cells`(segment: Segment, cut: int) -> Tuple[<ast.Tuple object at 0x11ae24cd0>]
- `split_cells`(cut: int) -> Tuple[<ast.Tuple object at 0x11ae22390>]
- `line`() -> Segment
- `apply_style`(segments: Iterable[Segment], style: [Optional[Style]](#optional), post_style: [Optional[Style]](#optional)) -> Iterable[Segment]
- `filter_control`(segments: Iterable[Segment], is_control: bool) -> Iterable[Segment]
- `split_lines`(segments: Iterable[Segment]) -> Iterable[List[Segment]]
- `split_and_crop_lines`(segments: Iterable[Segment], length: int, style: [Optional[Style]](#optional), pad: bool, include_new_lines: bool) -> Iterable[List[Segment]]
- `adjust_line_length`(line: [List[Segment]](#list), length: int, style: [Optional[Style]](#optional), pad: bool) -> [List[Segment]](#list)
- `get_line_length`(line: [List[Segment]](#list)) -> int
- `get_shape`(lines: [List[List[Segment]]](#list)) -> Tuple[<ast.Tuple object at 0x11ae7ef10>]
- `set_shape`(lines: [List[List[Segment]]](#list), width: int, height: [Optional[int]](#optional), style: [Optional[Style]](#optional), new_lines: bool) -> [List[List[Segment]]](#list)
- `align_top`(cls: Type[Segment], lines: [List[List[Segment]]](#list), width: int, height: int, style: Style, new_lines: bool) -> [List[List[Segment]]](#list)
- `align_bottom`(cls: Type[Segment], lines: [List[List[Segment]]](#list), width: int, height: int, style: Style, new_lines: bool) -> [List[List[Segment]]](#list)
- `align_middle`(cls: Type[Segment], lines: [List[List[Segment]]](#list), width: int, height: int, style: Style, new_lines: bool) -> [List[List[Segment]]](#list)
- `simplify`(segments: Iterable[Segment]) -> Iterable[Segment]
- `strip_links`(segments: Iterable[Segment]) -> Iterable[Segment]
- `strip_styles`(segments: Iterable[Segment]) -> Iterable[Segment]
- `remove_color`(segments: Iterable[Segment]) -> Iterable[Segment]
- `divide`(segments: Iterable[Segment], cuts: Iterable[int]) -> Iterable[List[Segment]]
- `__init__`(lines: Iterable[List[Segment]], new_lines: bool) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult

### Implementation
**ControlType**

**Segment**
  - text: str
  - style: Optional[Style]
  - control: Optional[Sequence[ControlCode]]
  - line: List[Segment]
  - new_line: List[Segment]
  - cache: Dict[<ast.Tuple object at 0x11aeb1990>]
  - split_segments: List[Segment]
**Segments**

**SegmentLines**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/segment.py`  
**Dependencies**: `enum.IntEnum`, `functools.lru_cache`, `itertools.filterfalse`, `logging.getLogger`, `operator.attrgetter`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Type`, `typing.Union`, `cells._is_single_cell_widths`, `cells.cached_cell_len`, `cells.cell_len`, `cells.get_character_cell_size`, `cells.set_cell_size`, `repr.Result`, `repr.rich_repr`, `style.Style`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `rich.console.Console`, `rich.syntax.Syntax`, `rich.text.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.ansi
:::{doc} _AnsiToken:20
Result of ansi tokenized string.
:::
:::{doc} _ansi_tokenize:28
Tokenize a string in to plain text and ANSI codes.

Args:
    ansi_text (str): A String containing ANSI codes.

Yields:
    AnsiToken: A named tuple of (plain, sgr, osc)
:::
:::{doc} AnsiDecoder:120
Translate ANSI code in to styled Text.
:::
**Imports**: `re`, `sys`, `contextlib.suppress`, `typing.Iterable`, `typing.NamedTuple`, `typing.Optional`, `color.Color`, `style.Style`, `text.Text`, `io`, `os`, `pty`, `sys`, `console.Console`
**Type References**: [[AnsiDecoder]], [[Optional]], [[_AnsiToken]]

### Interface
- `_ansi_tokenize`(ansi_text: str) -> Iterable[_AnsiToken]
- `__init__`() -> None
- `decode`(terminal_text: str) -> Iterable[Text]
- `decode_line`(line: str) -> Text
- `read`(fd: int) -> bytes

### Implementation
**_AnsiToken**
  - plain: str
  - sgr: Optional[str]
  - osc: Optional[str]
**AnsiDecoder**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/ansi.py`  
**Dependencies**: `re`, `sys`, `contextlib.suppress`, `typing.Iterable`, `typing.NamedTuple`, `typing.Optional`, `color.Color`, `style.Style`, `text.Text`, `io`, `os`, `pty`, `sys`, `console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.progress
:::{doc} _TrackThread:68
A thread to periodically update progress.
:::
:::{doc} track:108
Track progress by iterating over a sequence.

Args:
    sequence (Iterable[ProgressType]): A sequence (must support "len") you wish to iterate over.
    description (str, optional): Description of task show next to progress bar. Defaults to "Working".
    total: (float, optional): Total number of steps. Default is len(sequence).
    completed (int, optional): Number of steps completed so far. Defaults to 0.
    auto_refresh (bool, optional): Automatic refresh, disable to force a refresh after each iteration. Default is True.
    transient: (bool, optional): Clear the progress on exit. Defaults to False.
    console (Console, optional): Console to write to. Default creates internal Console instance.
    refresh_per_second (float): Number of times per second to refresh the progress information. Defaults to 10.
    style (StyleType, optional): Style for the bar background. Defaults to "bar.back".
    complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".
    finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".
    pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".
    update_period (float, optional): Minimum time (in seconds) between calls to update(). Defaults to 0.1.
    disable (bool, optional): Disable display of progress.
    show_speed (bool, optional): Show speed if total isn't known. Defaults to True.
Returns:
    Iterable[ProgressType]: An iterable of the values in the sequence.
:::
:::{doc} _Reader:184
A reader that tracks progress while it's being read from.
:::
:::{doc} _ReadContext:287
A utility class to handle a context for both a reader and a progress.
:::
:::{doc} wrap_file:308
Read bytes from a file while tracking progress.

Args:
    file (Union[str, PathLike[str], BinaryIO]): The path to the file to read, or a file-like object in binary mode.
    total (int): Total number of bytes to read.
    description (str, optional): Description of task show next to progress bar. Defaults to "Reading".
    auto_refresh (bool, optional): Automatic refresh, disable to force a refresh after each iteration. Default is True.
    transient: (bool, optional): Clear the progress on exit. Defaults to False.
    console (Console, optional): Console to write to. Default creates internal Console instance.
    refresh_per_second (float): Number of times per second to refresh the progress information. Defaults to 10.
    style (StyleType, optional): Style for the bar background. Defaults to "bar.back".
    complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".
    finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".
    pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".
    disable (bool, optional): Disable display of progress.
Returns:
    ContextManager[BinaryIO]: A context manager yielding a progress reader.
:::
:::{doc} open:423
Read bytes from a file while tracking progress.

Args:
    path (Union[str, PathLike[str], BinaryIO]): The path to the file to read, or a file-like object in binary mode.
    mode (str): The mode to use to open the file. Only supports "r", "rb" or "rt".
    buffering (int): The buffering strategy to use, see :func:`io.open`.
    encoding (str, optional): The encoding to use when reading in text mode, see :func:`io.open`.
    errors (str, optional): The error handling strategy for decoding errors, see :func:`io.open`.
    newline (str, optional): The strategy for handling newlines in text mode, see :func:`io.open`
    total: (int, optional): Total number of bytes to read. Must be provided if reading from a file handle. Default for a path is os.stat(file).st_size.
    description (str, optional): Description of task show next to progress bar. Defaults to "Reading".
    auto_refresh (bool, optional): Automatic refresh, disable to force a refresh after each iteration. Default is True.
    transient: (bool, optional): Clear the progress on exit. Defaults to False.
    console (Console, optional): Console to write to. Default creates internal Console instance.
    refresh_per_second (float): Number of times per second to refresh the progress information. Defaults to 10.
    style (StyleType, optional): Style for the bar background. Defaults to "bar.back".
    complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".
    finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".
    pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".
    disable (bool, optional): Disable display of progress.
    encoding (str, optional): The encoding to use when reading in text mode.

Returns:
    ContextManager[BinaryIO]: A context manager yielding a progress reader.
:::
:::{doc} ProgressColumn:509
Base class for a widget to use in progress display.
:::
:::{doc} RenderableColumn:551
A column to insert an arbitrary column.

Args:
    renderable (RenderableType, optional): Any renderable. Defaults to empty string.
:::
:::{doc} SpinnerColumn:568
A column with a 'spinner' animation.

Args:
    spinner_name (str, optional): Name of spinner animation. Defaults to "dots".
    style (StyleType, optional): Style of spinner. Defaults to "progress.spinner".
    speed (float, optional): Speed factor of spinner. Defaults to 1.0.
    finished_text (TextType, optional): Text used when task is finished. Defaults to " ".
:::
:::{doc} TextColumn:618
A column containing text.
:::
:::{doc} BarColumn:648
Renders a visual progress bar.

Args:
    bar_width (Optional[int], optional): Width of bar or None for full width. Defaults to 40.
    style (StyleType, optional): Style for the bar background. Defaults to "bar.back".
    complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".
    finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".
    pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".
:::
:::{doc} TimeElapsedColumn:690
Renders time elapsed.
:::
:::{doc} TaskProgressColumn:702
Show task progress as a percentage.

Args:
    text_format (str, optional): Format for percentage display. Defaults to "[progress.percentage]{task.percentage:>3.0f}%".
    text_format_no_percentage (str, optional): Format if percentage is unknown. Defaults to "".
    style (StyleType, optional): Style of output. Defaults to "none".
    justify (JustifyMethod, optional): Text justification. Defaults to "left".
    markup (bool, optional): Enable markup. Defaults to True.
    highlighter (Optional[Highlighter], optional): Highlighter to apply to output. Defaults to None.
    table_column (Optional[Column], optional): Table Column to use. Defaults to None.
    show_speed (bool, optional): Show speed if total is unknown. Defaults to False.
:::
:::{doc} TimeRemainingColumn:774
Renders estimated time remaining.

Args:
    compact (bool, optional): Render MM:SS when time remaining is less than an hour. Defaults to False.
    elapsed_when_finished (bool, optional): Render time elapsed when the task is finished. Defaults to False.
:::
:::{doc} FileSizeColumn:822
Renders completed filesize.
:::
:::{doc} TotalFileSizeColumn:831
Renders total filesize.
:::
:::{doc} MofNCompleteColumn:840
Renders completed count/total, e.g. '  10/1000'.

Best for bounded tasks with int quantities.

Space pads the completed count so that progress length does not change as task progresses
past powers of 10.

Args:
    separator (str, optional): Text to separate completed and total values. Defaults to "/".
:::
:::{doc} DownloadColumn:867
Renders file size downloaded and total, e.g. '0.5/2.3 GB'.

Args:
    binary_units (bool, optional): Use binary units, KiB, MiB etc. Defaults to False.
:::
:::{doc} TransferSpeedColumn:916
Renders human readable transfer speed.
:::
:::{doc} ProgressSample:928
Sample of progress for a given time.
:::
:::{doc} Task:938
Information regarding a progress task.

This object should be considered read-only outside of the :class:`~Progress` class.
:::
:::{doc} Progress:1063
Renders an auto-updating progress bar(s).

Args:
    console (Console, optional): Optional Console instance. Defaults to an internal Console instance writing to stdout.
    auto_refresh (bool, optional): Enable auto refresh. If disabled, you will need to call `refresh()`.
    refresh_per_second (Optional[float], optional): Number of times per second to refresh the progress information or None to use default (10). Defaults to None.
    speed_estimate_period: (float, optional): Period (in seconds) used to calculate the speed estimate. Defaults to 30.
    transient: (bool, optional): Clear the progress on exit. Defaults to False.
    redirect_stdout: (bool, optional): Enable redirection of stdout, so ``print`` may be used. Defaults to True.
    redirect_stderr: (bool, optional): Enable redirection of stderr. Defaults to True.
    get_time: (Callable, optional): A callable that gets the current time, or None to use Console.get_time. Defaults to None.
    disable (bool, optional): Disable progress display. Defaults to False
    expand (bool, optional): Expand tasks table to fit width. Defaults to False.
:::
**Imports**: `io`, `sys`, `typing`, `warnings`, `abc.ABC`, `abc.abstractmethod`, `collections.deque`, `dataclasses.dataclass`, `dataclasses.field`, `datetime.timedelta`, `io.RawIOBase`, `io.UnsupportedOperation`, `math.ceil`, `mmap.mmap`, `operator.length_hint`, `os.PathLike`, `os.stat`, `threading.Event`, `threading.RLock`, `threading.Thread`, `types.TracebackType`, `typing.Any`, `typing.BinaryIO`, `typing.Callable`, `typing.ContextManager`, `typing.Deque`, `typing.Dict`, `typing.Generic`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.NewType`, `typing.Optional`, `typing.Sequence`, `typing.TextIO`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `filesize`, `get_console`, `console.Console`, `console.Group`, `console.JustifyMethod`, `console.RenderableType`, `highlighter.Highlighter`, `jupyter.JupyterMixin`, `live.Live`, `progress_bar.ProgressBar`, `spinner.Spinner`, `style.StyleType`, `table.Column`, `table.Table`, `text.Text`, `text.TextType`, `typing.Literal`, `typing_extensions.Literal`, `typing.Self`, `typing_extensions.Self`, `random`, `time`, `panel.Panel`, `rule.Rule`, `syntax.Syntax`, `table.Table`, `itertools.cycle`
**Type References**: [[BarColumn]], [[Deque]], [[Dict]], [[DownloadColumn]], [[FileSizeColumn]], [[GetTimeCallable]], [[List]], [[MofNCompleteColumn]], [[Optional]], [[Progress]], [[ProgressColumn]], [[ProgressSample]], [[RLock]], [[RenderableColumn]], [[SpinnerColumn]], [[Task]], [[TaskID]], [[TaskProgressColumn]], [[TextColumn]], [[TimeElapsedColumn]], [[TimeRemainingColumn]], [[TotalFileSizeColumn]], [[TransferSpeedColumn]], [[_ReadContext]], [[_Reader]], [[_TrackThread]]

### Interface
- `track`(sequence: [Union[<ast.Tuple object at 0x11b0799d0>]](#union), total: [Optional[float]](#optional), completed: int, task_id: [Optional[TaskID]](#optional), description: str, update_period: float) -> Iterable[ProgressType]
- `wrap_file`(file: BinaryIO, total: [Optional[int]](#optional)) -> BinaryIO
- `open`(file: [Union[<ast.Tuple object at 0x11b098e90>]](#union), mode: [Union[<ast.Tuple object at 0x11b099250>]](#union), buffering: int, encoding: [Optional[str]](#optional), errors: [Optional[str]](#optional), newline: [Optional[str]](#optional)) -> [Union[<ast.Tuple object at 0x11b0b8210>]](#union)
- `__init__`() -> None
- `run`() -> None
- `__enter__`() -> Self
- `__exit__`(exc_type: [Optional[Type[BaseException]]](#optional), exc_val: [Optional[BaseException]](#optional), exc_tb: [Optional[TracebackType]](#optional)) -> None
- `__iter__`() -> BinaryIO
- `__next__`() -> bytes
- `closed`() -> bool
- `fileno`() -> int
- `isatty`() -> bool
- `mode`() -> str
- `name`() -> str
- `readable`() -> bool
- `seekable`() -> bool
- `writable`() -> bool
- `read`(size: int) -> bytes
- `readinto`(b: [Union[<ast.Tuple object at 0x11af23e50>]](#union)) -> Any
- `readline`(size: int) -> bytes
- `readlines`(hint: int) -> [List[bytes]](#list)
- `close`() -> None
- `seek`(offset: int, whence: int) -> int
- `tell`() -> int
- `write`(s: Any) -> int
- `writelines`(lines: Iterable[Any]) -> None
- `get_table_column`() -> Column
- `__call__`(task: Task) -> RenderableType
- `render`(task: Task) -> Text
- `set_spinner`(spinner_name: str, spinner_style: [Optional[StyleType]](#optional), speed: float) -> None
- `render_speed`(speed: [Optional[float]](#optional)) -> Text
- `get_time`() -> float
- `started`() -> bool
- `remaining`() -> [Optional[float]](#optional)
- `elapsed`() -> [Optional[float]](#optional)
- `finished`() -> bool
- `percentage`() -> float
- `speed`() -> [Optional[float]](#optional)
- `time_remaining`() -> [Optional[float]](#optional)
- `_reset`() -> None
- `get_default_columns`() -> Tuple[<ast.Tuple object at 0x11b066dd0>]
- `console`() -> Console
- `tasks`() -> [List[Task]](#list)
- `task_ids`() -> [List[TaskID]](#list)
- `start`() -> None
- `stop`() -> None
- `start_task`(task_id: TaskID) -> None
- `stop_task`(task_id: TaskID) -> None
- `update`(task_id: TaskID) -> None
- `reset`(task_id: TaskID) -> None
- `advance`(task_id: TaskID, advance: float) -> None
- `refresh`() -> None
- `get_renderable`() -> RenderableType
- `get_renderables`() -> Iterable[RenderableType]
- `make_tasks_table`(tasks: Iterable[Task]) -> Table
- `__rich__`() -> RenderableType
- `add_task`(description: str, start: bool, total: [Optional[float]](#optional), completed: int, visible: bool) -> TaskID
- `remove_task`(task_id: TaskID) -> None

### Implementation
**_TrackThread**

**_Reader**

**_ReadContext**

**ProgressColumn**
  - max_refresh: Optional[float]
**RenderableColumn**

**SpinnerColumn**

**TextColumn**

**BarColumn**

**TimeElapsedColumn**

**TaskProgressColumn**

**TimeRemainingColumn**

**FileSizeColumn**

**TotalFileSizeColumn**

**MofNCompleteColumn**

**DownloadColumn**

**TransferSpeedColumn**

**ProgressSample**
  - timestamp: float
  - completed: float
**Task**
  - id: TaskID
  - description: str
  - total: Optional[float]
  - completed: float
  - _get_time: GetTimeCallable
  - finished_time: Optional[float]
  - visible: bool
  - fields: Dict[<ast.Tuple object at 0x11b034110>]
  - start_time: Optional[float]
  - stop_time: Optional[float]
  - finished_speed: Optional[float]
  - _progress: Deque[ProgressSample]
  - _lock: RLock
**Progress**
  - total_bytes: Optional[float]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/progress.py`  
**Dependencies**: `io`, `sys`, `typing`, `warnings`, `abc.ABC`, `abc.abstractmethod`, `collections.deque`, `dataclasses.dataclass`, `dataclasses.field`, `datetime.timedelta`, `io.RawIOBase`, `io.UnsupportedOperation`, `math.ceil`, `mmap.mmap`, `operator.length_hint`, `os.PathLike`, `os.stat`, `threading.Event`, `threading.RLock`, `threading.Thread`, `types.TracebackType`, `typing.Any`, `typing.BinaryIO`, `typing.Callable`, `typing.ContextManager`, `typing.Deque`, `typing.Dict`, `typing.Generic`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.NewType`, `typing.Optional`, `typing.Sequence`, `typing.TextIO`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `filesize`, `get_console`, `console.Console`, `console.Group`, `console.JustifyMethod`, `console.RenderableType`, `highlighter.Highlighter`, `jupyter.JupyterMixin`, `live.Live`, `progress_bar.ProgressBar`, `spinner.Spinner`, `style.StyleType`, `table.Column`, `table.Table`, `text.Text`, `text.TextType`, `typing.Literal`, `typing_extensions.Literal`, `typing.Self`, `typing_extensions.Self`, `random`, `time`, `panel.Panel`, `rule.Rule`, `syntax.Syntax`, `table.Table`, `itertools.cycle`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._stack
:::{doc} Stack:6
A small shim over builtin list.
:::
**Imports**: `typing.List`, `typing.TypeVar`
**Type References**: [[Stack]]

### Interface
- `top`() -> T
- `push`(item: T) -> None

### Implementation
**Stack**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_stack.py`  
**Dependencies**: `typing.List`, `typing.TypeVar`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._windows
:::{doc} WindowsConsoleFeatures:6
Windows features available.
:::
**Imports**: `sys`, `dataclasses.dataclass`, `ctypes`, `ctypes.LibraryLoader`, `rich._win32_console.ENABLE_VIRTUAL_TERMINAL_PROCESSING`, `rich._win32_console.GetConsoleMode`, `rich._win32_console.GetStdHandle`, `rich._win32_console.LegacyWindowsError`, `platform`, `rich.print`
**Type References**: [[WindowsConsoleFeatures]]

### Interface
- `get_windows_console_features`() -> WindowsConsoleFeatures

### Implementation
**WindowsConsoleFeatures**
  - vt: bool
  - truecolor: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_windows.py`  
**Dependencies**: `sys`, `dataclasses.dataclass`, `ctypes`, `ctypes.LibraryLoader`, `rich._win32_console.ENABLE_VIRTUAL_TERMINAL_PROCESSING`, `rich._win32_console.GetConsoleMode`, `rich._win32_console.GetStdHandle`, `rich._win32_console.LegacyWindowsError`, `platform`, `rich.print`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._cell_widths



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_cell_widths.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.cells
:::{doc} cached_cell_len:34
Get the number of cells required to display text.

This method always caches, which may use up a lot of memory. It is recommended to use
`cell_len` over this method.

Args:
    text (str): Text to display.

Returns:
    int: Get the number of cells required to display text.
:::
:::{doc} cell_len:51
Get the number of cells required to display text.

Args:
    text (str): Text to display.

Returns:
    int: Get the number of cells required to display text.
:::
:::{doc} get_character_cell_size:68
Get the cell size of a character.

Args:
    character (str): A single character.

Returns:
    int: Number of cells (0, 1 or 2) occupied by that character.
:::
:::{doc} set_cell_size:96
Set the length of a string to fit within given number of cells.
:::
:::{doc} chop_cells:131
Split text into lines such that each line fits within the available (cell) width.

Args:
    text: The text to fold such that it fits in the given width.
    width: The width available (number of cells).

Returns:
    A list of strings such that each string in the list has cell width
    less than or equal to the available width.
:::
**Imports**: `__future__.annotations`, `functools.lru_cache`, `typing.Callable`, `_cell_widths.CELL_WIDTHS`
**Type References**: [[Callable]]

### Interface
- `cached_cell_len`(text: str) -> int
- `cell_len`(text: str, _cell_len: Callable[<ast.Tuple object at 0x11b1e8210>]) -> int
- `get_character_cell_size`(character: str) -> int
- `set_cell_size`(text: str, total: int) -> str
- `chop_cells`(text: str, width: int) -> list[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/cells.py`  
**Dependencies**: `__future__.annotations`, `functools.lru_cache`, `typing.Callable`, `_cell_widths.CELL_WIDTHS`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._win32_console
:::{doc} WindowsCoordinates:33
Coordinates in the Windows Console API are (y, x), not (x, y).
This class is intended to prevent that confusion.
Rows and columns are indexed from 0.
This class can be used in place of wintypes._COORD in arguments and argtypes.
:::
:::{doc} GetStdHandle:78
Retrieves a handle to the specified standard device (standard input, standard output, or standard error).

Args:
    handle (int): Integer identifier for the handle. Defaults to -11 (stdout).

Returns:
    wintypes.HANDLE: The handle
:::
:::{doc} GetConsoleMode:95
Retrieves the current input mode of a console's input buffer
or the current output mode of a console screen buffer.

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.

Raises:
    LegacyWindowsError: If any error occurs while calling the Windows console API.

Returns:
    int: Value representing the current console mode as documented at
        https://docs.microsoft.com/en-us/windows/console/getconsolemode#parameters
:::
:::{doc} FillConsoleOutputCharacter:128
Writes a character to the console screen buffer a specified number of times, beginning at the specified coordinates.

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
    char (str): The character to write. Must be a string of length 1.
    length (int): The number of times to write the character.
    start (WindowsCoordinates): The coordinates to start writing at.

Returns:
    int: The number of characters written.
:::
:::{doc} FillConsoleOutputAttribute:169
Sets the character attributes for a specified number of character cells,
beginning at the specified coordinates in a screen buffer.

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
    attributes (int): Integer value representing the foreground and background colours of the cells.
    length (int): The number of cells to set the output attribute of.
    start (WindowsCoordinates): The coordinates of the first cell whose attributes are to be set.

Returns:
    int: The number of cells whose attributes were actually set.
:::
:::{doc} SetConsoleTextAttribute:204
Set the colour attributes for all text written after this function is called.

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
    attributes (int): Integer value representing the foreground and background colours.


Returns:
    bool: True if the attribute was set successfully, otherwise False.
:::
:::{doc} GetConsoleScreenBufferInfo:228
Retrieves information about the specified console screen buffer.

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.

Returns:
    CONSOLE_SCREEN_BUFFER_INFO: A CONSOLE_SCREEN_BUFFER_INFO ctype struct contain information about
        screen size, cursor position, colour attributes, and more.
:::
:::{doc} SetConsoleCursorPosition:252
Set the position of the cursor in the console screen

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
    coords (WindowsCoordinates): The coordinates to move the cursor to.

Returns:
    bool: True if the function succeeds, otherwise False.
:::
:::{doc} GetConsoleCursorInfo:275
Get the cursor info - used to get cursor visibility and width

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
    cursor_info (CONSOLE_CURSOR_INFO): CONSOLE_CURSOR_INFO ctype struct that receives information
        about the console's cursor.

Returns:
      bool: True if the function succeeds, otherwise False.
:::
:::{doc} SetConsoleCursorInfo:299
Set the cursor info - used for adjusting cursor visibility and width

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
    cursor_info (CONSOLE_CURSOR_INFO): CONSOLE_CURSOR_INFO ctype struct containing the new cursor info.

Returns:
      bool: True if the function succeeds, otherwise False.
:::
:::{doc} SetConsoleTitle:319
Sets the title of the current console window

Args:
    title (str): The new title of the console window.

Returns:
    bool: True if the function succeeds, otherwise False.
:::
:::{doc} LegacyWindowsTerm:331
This class allows interaction with the legacy Windows Console API. It should only be used in the context
of environments where virtual terminal processing is not available. However, if it is used in a Windows environment,
the entire API should work.

Args:
    file (IO[str]): The file which the Windows Console API HANDLE is retrieved from, defaults to sys.stdout.
:::
**Imports**: `ctypes`, `sys`, `typing.Any`, `time`, `ctypes.Structure`, `ctypes.byref`, `ctypes.wintypes`, `typing.IO`, `typing.NamedTuple`, `typing.Type`, `typing.cast`, `rich.color.ColorSystem`, `rich.style.Style`, `rich.console.Console`
**Type References**: [[Any]], [[CONSOLE_CURSOR_INFO]], [[CONSOLE_SCREEN_BUFFER_INFO]], [[COORD]], [[LegacyWindowsError]], [[LegacyWindowsTerm]], [[WindowsCoordinates]]

### Interface
- `GetStdHandle`(handle: int) -> wintypes.HANDLE
- `GetConsoleMode`(std_handle: wintypes.HANDLE) -> int
- `FillConsoleOutputCharacter`(std_handle: wintypes.HANDLE, char: str, length: int, start: WindowsCoordinates) -> int
- `FillConsoleOutputAttribute`(std_handle: wintypes.HANDLE, attributes: int, length: int, start: WindowsCoordinates) -> int
- `SetConsoleTextAttribute`(std_handle: wintypes.HANDLE, attributes: wintypes.WORD) -> bool
- `GetConsoleScreenBufferInfo`(std_handle: wintypes.HANDLE) -> CONSOLE_SCREEN_BUFFER_INFO
- `SetConsoleCursorPosition`(std_handle: wintypes.HANDLE, coords: WindowsCoordinates) -> bool
- `GetConsoleCursorInfo`(std_handle: wintypes.HANDLE, cursor_info: CONSOLE_CURSOR_INFO) -> bool
- `SetConsoleCursorInfo`(std_handle: wintypes.HANDLE, cursor_info: CONSOLE_CURSOR_INFO) -> bool
- `SetConsoleTitle`(title: str) -> bool
- `from_param`(value: WindowsCoordinates) -> COORD
- `__init__`(file: IO[str]) -> None
- `cursor_position`() -> WindowsCoordinates
- `screen_size`() -> WindowsCoordinates
- `write_text`(text: str) -> None
- `write_styled`(text: str, style: Style) -> None
- `move_cursor_to`(new_position: WindowsCoordinates) -> None
- `erase_line`() -> None
- `erase_end_of_line`() -> None
- `erase_start_of_line`() -> None
- `move_cursor_up`() -> None
- `move_cursor_down`() -> None
- `move_cursor_forward`() -> None
- `move_cursor_to_column`(column: int) -> None
- `move_cursor_backward`() -> None
- `hide_cursor`() -> None
- `show_cursor`() -> None
- `set_title`(title: str) -> None
- `_get_cursor_size`() -> int

### Implementation
**LegacyWindowsError**

**WindowsCoordinates**
  - row: int
  - col: int
**CONSOLE_SCREEN_BUFFER_INFO**

**CONSOLE_CURSOR_INFO**

**LegacyWindowsTerm**
  - coord: COORD
  - screen_size: COORD
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_win32_console.py`  
**Dependencies**: `ctypes`, `sys`, `typing.Any`, `time`, `ctypes.Structure`, `ctypes.byref`, `ctypes.wintypes`, `typing.IO`, `typing.NamedTuple`, `typing.Type`, `typing.cast`, `rich.color.ColorSystem`, `rich.style.Style`, `rich.console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.panel
:::{doc} Panel:17
A console renderable that draws a border around its contents.

Example:
    >>> console.print(Panel("Hello, World!"))

Args:
    renderable (RenderableType): A console renderable object.
    box (Box, optional): A Box instance that defines the look of the border (see :ref:`appendix_box`. Defaults to box.ROUNDED.
    title (Optional[TextType], optional): Optional title displayed in panel header. Defaults to None.
    title_align (AlignMethod, optional): Alignment of title. Defaults to "center".
    subtitle (Optional[TextType], optional): Optional subtitle displayed in panel footer. Defaults to None.
    subtitle_align (AlignMethod, optional): Alignment of subtitle. Defaults to "center".
    safe_box (bool, optional): Disable box characters that don't display on windows legacy terminal with *raster* fonts. Defaults to True.
    expand (bool, optional): If True the panel will stretch to fill the console width, otherwise it will be sized to fit the contents. Defaults to True.
    style (str, optional): The style of the panel (border and contents). Defaults to "none".
    border_style (str, optional): The style of the border. Defaults to "none".
    width (Optional[int], optional): Optional width of panel. Defaults to None to auto-detect.
    height (Optional[int], optional): Optional height of panel. Defaults to None to auto-detect.
    padding (Optional[PaddingDimensions]): Optional padding around renderable. Defaults to 0.
    highlight (bool, optional): Enable automatic highlighting of panel title (if str). Defaults to False.
:::
**Imports**: `typing.TYPE_CHECKING`, `typing.Optional`, `align.AlignMethod`, `box.ROUNDED`, `box.Box`, `cells.cell_len`, `jupyter.JupyterMixin`, `measure.Measurement`, `measure.measure_renderables`, `padding.Padding`, `padding.PaddingDimensions`, `segment.Segment`, `style.Style`, `style.StyleType`, `text.Text`, `text.TextType`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `console.Console`, `box.DOUBLE`, `box.ROUNDED`, `padding.Padding`
**Type References**: [[Panel]]

### Interface
- `__init__`(renderable: RenderableType, box: Box) -> None
- `fit`(renderable: RenderableType, box: Box) -> Panel
- `_title`() -> [Optional[Text]](#optional)
- `_subtitle`() -> [Optional[Text]](#optional)
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `align_text`(text: Text, width: int, align: str, character: str, style: Style) -> Text

### Implementation
**Panel**
  - safe_box: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/panel.py`  
**Dependencies**: `typing.TYPE_CHECKING`, `typing.Optional`, `align.AlignMethod`, `box.ROUNDED`, `box.Box`, `cells.cell_len`, `jupyter.JupyterMixin`, `measure.Measurement`, `measure.measure_renderables`, `padding.Padding`, `padding.PaddingDimensions`, `segment.Segment`, `style.Style`, `style.StyleType`, `text.Text`, `text.TextType`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `console.Console`, `box.DOUBLE`, `box.ROUNDED`, `padding.Padding`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.styled
:::{doc} Styled:11
Apply a style to a renderable.

Args:
    renderable (RenderableType): Any renderable.
    style (StyleType): A style to apply across the entire renderable.
:::
**Imports**: `typing.TYPE_CHECKING`, `measure.Measurement`, `segment.Segment`, `style.StyleType`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `console.RenderableType`, `rich.print`, `rich.panel.Panel`
**Type References**: [[Styled]]

### Interface
- `__init__`(renderable: RenderableType, style: StyleType) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement

### Implementation
**Styled**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/styled.py`  
**Dependencies**: `typing.TYPE_CHECKING`, `measure.Measurement`, `segment.Segment`, `style.StyleType`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `console.RenderableType`, `rich.print`, `rich.panel.Panel`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.spinner
:::{doc} Spinner:13
A spinner animation.

Args:
    name (str): Name of spinner (run python -m rich.spinner).
    text (RenderableType, optional): A renderable to display at the right of the spinner (str or Text typically). Defaults to "".
    style (StyleType, optional): Style for spinner animation. Defaults to None.
    speed (float, optional): Speed factor for animation. Defaults to 1.0.

Raises:
    KeyError: If name isn't one of the supported spinner animations.
:::
**Imports**: `typing.cast`, `typing.List`, `typing.Optional`, `typing.TYPE_CHECKING`, `typing.Union`, `_spinners.SPINNERS`, `measure.Measurement`, `table.Table`, `text.Text`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `console.RenderableType`, `style.StyleType`, `time.sleep`, `columns.Columns`, `panel.Panel`, `live.Live`
**Type References**: [[Spinner]]

### Interface
- `__init__`(name: str, text: RenderableType) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `render`(time: float) -> RenderableType
- `update`() -> None

### Implementation
**Spinner**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/spinner.py`  
**Dependencies**: `typing.cast`, `typing.List`, `typing.Optional`, `typing.TYPE_CHECKING`, `typing.Union`, `_spinners.SPINNERS`, `measure.Measurement`, `table.Table`, `text.Text`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `console.RenderableType`, `style.StyleType`, `time.sleep`, `columns.Columns`, `panel.Panel`, `live.Live`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._windows_renderer
:::{doc} legacy_windows_render:7
Makes appropriate Windows Console API calls based on the segments in the buffer.

Args:
    buffer (Iterable[Segment]): Iterable of Segments to convert to Win32 API calls.
    term (LegacyWindowsTerm): Used to call the Windows Console API.
:::
**Imports**: `typing.Iterable`, `typing.Sequence`, `typing.Tuple`, `typing.cast`, `rich._win32_console.LegacyWindowsTerm`, `rich._win32_console.WindowsCoordinates`, `rich.segment.ControlCode`, `rich.segment.ControlType`, `rich.segment.Segment`
**Type References**: [[Sequence]]

### Interface
- `legacy_windows_render`(buffer: Iterable[Segment], term: LegacyWindowsTerm) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_windows_renderer.py`  
**Dependencies**: `typing.Iterable`, `typing.Sequence`, `typing.Tuple`, `typing.cast`, `rich._win32_console.LegacyWindowsTerm`, `rich._win32_console.WindowsCoordinates`, `rich.segment.ControlCode`, `rich.segment.ControlType`, `rich.segment.Segment`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.json
:::{doc} JSON:9
A renderable which pretty prints JSON.

Args:
    json (str): JSON encoded data.
    indent (Union[None, int, str], optional): Number of characters to indent by. Defaults to 2.
    highlight (bool, optional): Enable highlighting. Defaults to True.
    skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.
    ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.
    check_circular (bool, optional): Check for circular references. Defaults to True.
    allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.
    default (Callable, optional): A callable that converts values that can not be encoded
        in to something that can be JSON encoded. Defaults to None.
    sort_keys (bool, optional): Sort dictionary keys. Defaults to False.
:::
**Imports**: `pathlib.Path`, `json.loads`, `json.dumps`, `typing.Any`, `typing.Callable`, `typing.Optional`, `typing.Union`, `text.Text`, `highlighter.JSONHighlighter`, `highlighter.NullHighlighter`, `argparse`, `sys`, `rich.console.Console`
**Type References**: [[JSON]]

### Interface
- `__init__`(json: str, indent: [Union[<ast.Tuple object at 0x11b45b110>]](#union), highlight: bool, skip_keys: bool, ensure_ascii: bool, check_circular: bool, allow_nan: bool, default: [Optional[Callable[<ast.Tuple object at 0x11b45a750>]]](#optional), sort_keys: bool) -> None
- `from_data`(data: Any, indent: [Union[<ast.Tuple object at 0x11b453a90>]](#union), highlight: bool, skip_keys: bool, ensure_ascii: bool, check_circular: bool, allow_nan: bool, default: [Optional[Callable[<ast.Tuple object at 0x11b4530d0>]]](#optional), sort_keys: bool) -> JSON
- `__rich__`() -> Text

### Implementation
**JSON**
  - json_instance: JSON
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/json.py`  
**Dependencies**: `pathlib.Path`, `json.loads`, `json.dumps`, `typing.Any`, `typing.Callable`, `typing.Optional`, `typing.Union`, `text.Text`, `highlighter.JSONHighlighter`, `highlighter.NullHighlighter`, `argparse`, `sys`, `rich.console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.padding
:::{doc} Padding:19
Draw space around content.

Example:
    >>> print(Padding("Hello", (2, 4), style="on blue"))

Args:
    renderable (RenderableType): String or other renderable.
    pad (Union[int, Tuple[int]]): Padding for top, right, bottom, and left borders.
        May be specified with 1, 2, or 4 integers (CSS style).
    style (Union[str, Style], optional): Style for padding characters. Defaults to "none".
    expand (bool, optional): Expand padding to fit available width. Defaults to True.
:::
**Imports**: `typing.TYPE_CHECKING`, `typing.List`, `typing.Optional`, `typing.Tuple`, `typing.Union`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `rich.print`
**Type References**: [[Optional]], [[Padding]]

### Interface
- `__init__`(renderable: RenderableType, pad: PaddingDimensions) -> Any
- `indent`(renderable: RenderableType, level: int) -> Padding
- `unpack`(pad: PaddingDimensions) -> Tuple[<ast.Tuple object at 0x11b46c3d0>]
- `__repr__`() -> str
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement

### Implementation
**Padding**
  - blank_line: Optional[List[Segment]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/padding.py`  
**Dependencies**: `typing.TYPE_CHECKING`, `typing.List`, `typing.Optional`, `typing.Tuple`, `typing.Union`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `rich.print`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.__main__
:::{doc} make_test_card:39
Get a renderable that demonstrates a number of features.
:::
**Imports**: `colorsys`, `io`, `time.process_time`, `rich.box`, `rich.color.Color`, `rich.console.Console`, `rich.console.ConsoleOptions`, `rich.console.Group`, `rich.console.RenderableType`, `rich.console.RenderResult`, `rich.markdown.Markdown`, `rich.measure.Measurement`, `rich.pretty.Pretty`, `rich.segment.Segment`, `rich.style.Style`, `rich.syntax.Syntax`, `rich.table.Table`, `rich.text.Text`, `rich.panel.Panel`
**Type References**: [[ColorBox]]

### Interface
- `make_test_card`() -> Table
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `comparison`(renderable1: RenderableType, renderable2: RenderableType) -> Table

### Implementation
**ColorBox**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/__main__.py`  
**Dependencies**: `colorsys`, `io`, `time.process_time`, `rich.box`, `rich.color.Color`, `rich.console.Console`, `rich.console.ConsoleOptions`, `rich.console.Group`, `rich.console.RenderableType`, `rich.console.RenderResult`, `rich.markdown.Markdown`, `rich.measure.Measurement`, `rich.pretty.Pretty`, `rich.segment.Segment`, `rich.style.Style`, `rich.syntax.Syntax`, `rich.table.Table`, `rich.text.Text`, `rich.panel.Panel`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.scope
:::{doc} render_scope:14
Render python variables in a given scope.

Args:
    scope (Mapping): A mapping containing variable names and values.
    title (str, optional): Optional title. Defaults to None.
    sort_keys (bool, optional): Enable sorting of items. Defaults to True.
    indent_guides (bool, optional): Enable indentation guides. Defaults to False.
    max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to None.
    max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.

Returns:
    ConsoleRenderable: A renderable object.
:::
**Imports**: `collections.abc.Mapping`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Optional`, `typing.Tuple`, `highlighter.ReprHighlighter`, `panel.Panel`, `pretty.Pretty`, `table.Table`, `text.Text`, `text.TextType`, `console.ConsoleRenderable`, `rich.print`
### Interface
- `render_scope`(scope: Mapping[str, Any]) -> ConsoleRenderable
- `sort_items`(item: Tuple[<ast.Tuple object at 0x11b4dd2d0>]) -> Tuple[<ast.Tuple object at 0x11b4dc390>]
- `test`(foo: float, bar: float) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/scope.py`  
**Dependencies**: `collections.abc.Mapping`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Optional`, `typing.Tuple`, `highlighter.ReprHighlighter`, `panel.Panel`, `pretty.Pretty`, `table.Table`, `text.Text`, `text.TextType`, `console.ConsoleRenderable`, `rich.print`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich._extension

**Imports**: `typing.Any`, `rich.pretty.install`, `rich.traceback.install`
### Interface
- `load_ipython_extension`(ip: Any) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/_extension.py`  
**Dependencies**: `typing.Any`, `rich.pretty.install`, `rich.traceback.install`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.status
:::{doc} Status:11
Displays a status indicator with a 'spinner' animation.

Args:
    status (RenderableType): A status renderable (str or Text typically).
    console (Console, optional): Console instance to use, or None for global console. Defaults to None.
    spinner (str, optional): Name of spinner animation (see python -m rich.spinner). Defaults to "dots".
    spinner_style (StyleType, optional): Style of spinner. Defaults to "status.spinner".
    speed (float, optional): Speed factor for spinner animation. Defaults to 1.0.
    refresh_per_second (float, optional): Number of refreshes per second. Defaults to 12.5.
:::
**Imports**: `types.TracebackType`, `typing.Optional`, `typing.Type`, `console.Console`, `console.RenderableType`, `jupyter.JupyterMixin`, `live.Live`, `spinner.Spinner`, `style.StyleType`, `time.sleep`, `console.Console`
**Type References**: [[Status]]

### Interface
- `__init__`(status: RenderableType) -> Any
- `renderable`() -> Spinner
- `console`() -> Console
- `update`(status: [Optional[RenderableType]](#optional)) -> None
- `start`() -> None
- `stop`() -> None
- `__rich__`() -> RenderableType
- `__enter__`() -> Status
- `__exit__`(exc_type: [Optional[Type[BaseException]]](#optional), exc_val: [Optional[BaseException]](#optional), exc_tb: [Optional[TracebackType]](#optional)) -> None

### Implementation
**Status**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/status.py`  
**Dependencies**: `types.TracebackType`, `typing.Optional`, `typing.Type`, `console.Console`, `console.RenderableType`, `jupyter.JupyterMixin`, `live.Live`, `spinner.Spinner`, `style.StyleType`, `time.sleep`, `console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.abc
:::{doc} RichRenderable:4
An abstract base class for Rich renderables.

Note that there is no need to extend this class, the intended use is to check if an
object supports the Rich renderable protocol. For example::

    if isinstance(my_object, RichRenderable):
        console.print(my_object)
:::
**Imports**: `abc.ABC`, `rich.text.Text`
**Type References**: [[Foo]], [[RichRenderable]]

### Interface
- `__subclasshook__`(other: type) -> bool

### Implementation
**RichRenderable**

**Foo**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/abc.py`  
**Dependencies**: `abc.ABC`, `rich.text.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.jupyter
:::{doc} JupyterRenderable:18
A shim to write html to Jupyter notebook.
:::
:::{doc} JupyterMixin:36
Add to an Rich renderable to make it render in Jupyter notebook.
:::
:::{doc} display:84
Render segments to Jupyter.
:::
:::{doc} print:98
Proxy for Console print.
:::
**Imports**: `typing.TYPE_CHECKING`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Sequence`, `get_console`, `segment.Segment`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `rich.console.ConsoleRenderable`, `rich.console.ConsoleRenderable`, `IPython.display.display`
**Type References**: [[JupyterMixin]], [[JupyterRenderable]], [[List]]

### Interface
- `_render_segments`(segments: Iterable[Segment]) -> str
- `display`(segments: Iterable[Segment], text: str) -> None
- `print`() -> None
- `__init__`(html: str, text: str) -> None
- `_repr_mimebundle_`(self: ConsoleRenderable, include: Sequence[str], exclude: Sequence[str]) -> [Dict[<ast.Tuple object at 0x11b51be90>]](#dict)
- `escape`(text: str) -> str

### Implementation
**JupyterRenderable**

**JupyterMixin**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/jupyter.py`  
**Dependencies**: `typing.TYPE_CHECKING`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Sequence`, `get_console`, `segment.Segment`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `rich.console.ConsoleRenderable`, `rich.console.ConsoleRenderable`, `IPython.display.display`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.rich.color_triplet
:::{doc} ColorTriplet:4
The red, green, and blue components of a color.
:::
**Imports**: `typing.NamedTuple`, `typing.Tuple`
**Type References**: [[ColorTriplet]]

### Interface
- `hex`() -> str
- `rgb`() -> str
- `normalized`() -> Tuple[<ast.Tuple object at 0x11b53c550>]

### Implementation
**ColorTriplet**
  - red: int
  - green: int
  - blue: int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/rich/color_triplet.py`  
**Dependencies**: `typing.NamedTuple`, `typing.Tuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blib2to3



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blib2to3/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blib2to3.pygram

**Imports**: `os`, `typing.Union`, `pgen2.driver`, `pgen2.grammar.Grammar`
**Type References**: [[Grammar]], [[Symbols]], [[_pattern_symbols]], [[_python_symbols]]

### Interface
- `initialize`(cache_dir: [Union[<ast.Tuple object at 0x11b56cb50>]](#union)) -> None
- `__init__`(grammar: Grammar) -> None

### Implementation
**Symbols**

**_python_symbols**
  - and_expr: int
  - and_test: int
  - annassign: int
  - arglist: int
  - argument: int
  - arith_expr: int
  - asexpr_test: int
  - assert_stmt: int
  - async_funcdef: int
  - async_stmt: int
  - atom: int
  - augassign: int
  - break_stmt: int
  - case_block: int
  - classdef: int
  - comp_for: int
  - comp_if: int
  - comp_iter: int
  - comp_op: int
  - comparison: int
  - compound_stmt: int
  - continue_stmt: int
  - decorated: int
  - decorator: int
  - decorators: int
  - del_stmt: int
  - dictsetmaker: int
  - dotted_as_name: int
  - dotted_as_names: int
  - dotted_name: int
  - encoding_decl: int
  - eval_input: int
  - except_clause: int
  - expr: int
  - expr_stmt: int
  - exprlist: int
  - factor: int
  - file_input: int
  - flow_stmt: int
  - for_stmt: int
  - fstring: int
  - fstring_format_spec: int
  - fstring_middle: int
  - fstring_replacement_field: int
  - funcdef: int
  - global_stmt: int
  - guard: int
  - if_stmt: int
  - import_as_name: int
  - import_as_names: int
  - import_from: int
  - import_name: int
  - import_stmt: int
  - lambdef: int
  - listmaker: int
  - match_stmt: int
  - namedexpr_test: int
  - not_test: int
  - old_comp_for: int
  - old_comp_if: int
  - old_comp_iter: int
  - old_lambdef: int
  - old_test: int
  - or_test: int
  - parameters: int
  - paramspec: int
  - pass_stmt: int
  - pattern: int
  - patterns: int
  - power: int
  - raise_stmt: int
  - return_stmt: int
  - shift_expr: int
  - simple_stmt: int
  - single_input: int
  - sliceop: int
  - small_stmt: int
  - subject_expr: int
  - star_expr: int
  - stmt: int
  - subscript: int
  - subscriptlist: int
  - suite: int
  - term: int
  - test: int
  - testlist: int
  - testlist1: int
  - testlist_gexp: int
  - testlist_safe: int
  - testlist_star_expr: int
  - tfpdef: int
  - tfplist: int
  - tname: int
  - tname_star: int
  - trailer: int
  - try_stmt: int
  - type_stmt: int
  - typedargslist: int
  - typeparam: int
  - typeparams: int
  - typevar: int
  - typevartuple: int
  - varargslist: int
  - vfpdef: int
  - vfplist: int
  - vname: int
  - while_stmt: int
  - with_stmt: int
  - xor_expr: int
  - yield_arg: int
  - yield_expr: int
  - yield_stmt: int
**_pattern_symbols**
  - Alternative: int
  - Alternatives: int
  - Details: int
  - Matcher: int
  - NegatedUnit: int
  - Repeater: int
  - Unit: int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blib2to3/pygram.py`  
**Dependencies**: `os`, `typing.Union`, `pgen2.driver`, `pgen2.grammar.Grammar`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blib2to3.pytree
:::{doc} Base:53
Abstract base class for Node and Leaf.

This provides some default functionality and boilerplate using the
template pattern.

A node may be a subnode of at most one parent.
:::
:::{doc} Node:231
Concrete implementation for interior nodes.
:::
:::{doc} Leaf:371
Concrete implementation for leaf nodes.
:::
:::{doc} convert:475
Convert raw node information to a Node or Leaf instance.

This is passed to the parser driver which calls it whenever a reduction of a
grammar rule produces a new complete node, so that the tree is build
strictly bottom-up.
:::
:::{doc} BasePattern:498
A pattern is a tree matching pattern.

It looks for a specific node type (token or symbol), and
optionally for a specific content.

This is an abstract base class.  There are three concrete
subclasses:

- LeafPattern matches a single leaf node;
- NodePattern matches a single node (usually non-leaf);
- WildcardPattern matches a sequence of nodes of variable length.
:::
:::{doc} WildcardPattern:705
A wildcard pattern can match zero or more nodes.

This has all the flexibility needed to implement patterns like:

.*      .+      .?      .{m,n}
(a b c | d e | f)
(...)*  (...)+  (...)?  (...){m,n}

except it always uses non-greedy matching.
:::
:::{doc} generate_matches:948
Generator yielding matches for a sequence of patterns and nodes.

Args:
    patterns: a sequence of patterns
    nodes: a sequence of nodes

Yields:
    (count, results) tuples where:
    count: the entire sequence of patterns matches nodes[:count];
    results: dict containing named submatches.
:::
**Imports**: `typing.Any`, `typing.Iterable`, `typing.Iterator`, `typing.Optional`, `typing.TypeVar`, `typing.Union`, `blib2to3.pgen2.grammar.Grammar`, `sys`, `io.StringIO`, `pygram`, `pgen2.token.tok_name`
**Type References**: [[Any]], [[Base]], [[BasePattern]], [[Leaf]], [[LeafPattern]], [[NL]], [[NegatedPattern]], [[Node]], [[NodePattern]], [[Optional]], [[Union]], [[WildcardPattern]]

### Interface
- `type_repr`(type_num: int) -> [Union[<ast.Tuple object at 0x11b5b4110>]](#union)
- `convert`(gr: Grammar, raw_node: RawNode) -> NL
- `generate_matches`(nodes: list[NL]) -> Iterator[tuple[<ast.Tuple object at 0x11b689c90>]]
- `__new__`() -> Any
- `__eq__`(other: Any) -> bool
- `prefix`(prefix: str) -> None
- `_eq`(other: Leaf) -> bool
- `__deepcopy__`(self: _P, memo: Any) -> _P
- `clone`() -> Leaf
- `post_order`() -> Iterator[Leaf]
- `pre_order`() -> Iterator[Leaf]
- `replace`(new: [Union[<ast.Tuple object at 0x11b584990>]](#union)) -> None
- `get_lineno`() -> [Optional[int]](#optional)
- `changed`() -> None
- `remove`() -> [Optional[int]](#optional)
- `next_sibling`() -> [Optional[NL]](#optional)
- `prev_sibling`() -> [Optional[NL]](#optional)
- `leaves`() -> Iterator[Leaf]
- `depth`() -> int
- `get_suffix`() -> str
- `__init__`(content: [Optional[BasePattern]](#optional)) -> None
- `__repr__`() -> str
- `__str__`() -> str
- `set_child`(i: int, child: NL) -> None
- `insert_child`(i: int, child: NL) -> None
- `append_child`(child: NL) -> None
- `invalidate_sibling_maps`() -> None
- `update_sibling_maps`() -> None
- `_submatch`() -> bool
- `optimize`() -> Any
- `match`() -> bool
- `match_seq`() -> bool
- `_iterative_matches`() -> Iterator[tuple[<ast.Tuple object at 0x11b66f9d0>]]
- `_bare_name_matches`() -> tuple[<ast.Tuple object at 0x11b67a790>]
- `_recursive_matches`() -> Iterator[tuple[<ast.Tuple object at 0x11b681a50>]]

### Implementation
**Base**
  - type: int
  - parent: Optional[Node]
  - children: list[NL]
  - was_changed: bool
  - was_checked: bool
**Node**
  - fixers_applied: Optional[list[Any]]
  - used_names: Optional[set[str]]
  - _prev: dict[<ast.Tuple object at 0x11b5a9810>]
  - _next: dict[<ast.Tuple object at 0x11b5a9250>]
  - previous: Optional[NL]
**Leaf**
  - value: str
  - fixers_applied: list[Any]
  - bracket_depth: int
  - opening_bracket: Optional[Leaf]
  - used_names: Optional[set[str]]
  - lineno: int
  - column: int
  - fmt_pass_converted_first_leaf: Optional[Leaf]
**BasePattern**
  - type: Optional[int]
  - content: Any
  - name: Optional[str]
  - r: Optional[_Results]
**LeafPattern**

**NodePattern**
  - wildcards: bool
**WildcardPattern**
  - min: int
  - max: int
**NegatedPattern**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blib2to3/pytree.py`  
**Dependencies**: `typing.Any`, `typing.Iterable`, `typing.Iterator`, `typing.Optional`, `typing.TypeVar`, `typing.Union`, `blib2to3.pgen2.grammar.Grammar`, `sys`, `io.StringIO`, `pygram`, `pgen2.token.tok_name`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pluggy._tracing

**Imports**: `__future__.annotations`, `typing.Any`, `typing.Callable`, `typing.Sequence`, `typing.Tuple`
**Type References**: [[TagTracer]], [[TagTracerSub]]

### Interface
- `__init__`(root: TagTracer, tags: tuple[<ast.Tuple object at 0x11b6b1c50>]) -> None
- `get`(name: str) -> TagTracerSub
- `_format_message`(tags: Sequence[str], args: Sequence[object]) -> str
- `_processmessage`(tags: tuple[<ast.Tuple object at 0x11b6a14d0>], args: tuple[<ast.Tuple object at 0x11b6a1190>]) -> None
- `setwriter`(writer: _Writer | None) -> None
- `setprocessor`(tags: str | tuple[<ast.Tuple object at 0x11b6b0250>], processor: _Processor) -> None
- `__call__`() -> None

### Implementation
**TagTracer**

**TagTracerSub**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pluggy/_tracing.py`  
**Dependencies**: `__future__.annotations`, `typing.Any`, `typing.Callable`, `typing.Sequence`, `typing.Tuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pluggy._version

**Imports**: `typing.Tuple`, `typing.Union`
**Type References**: [[VERSION_TUPLE]]

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pluggy/_version.py`  
**Dependencies**: `typing.Tuple`, `typing.Union`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pluggy._callers
:::{doc} _multicall:53
Execute a call into multiple python functions/methods and return the
result(s).

``caller_kwargs`` comes from HookCaller.__call__().
:::
**Imports**: `__future__.annotations`, `typing.cast`, `typing.Generator`, `typing.Mapping`, `typing.NoReturn`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `warnings`, `_hooks.HookImpl`, `_result.HookCallError`, `_result.Result`, `_warnings.PluggyTeardownRaisedWarning`
**Type References**: [[Result]], [[Teardown]]

### Interface
- `_raise_wrapfail`(wrap_controller: Generator[<ast.Tuple object at 0x11b6c1cd0>] | Generator[<ast.Tuple object at 0x11b6c1850>], msg: str) -> NoReturn
- `_warn_teardown_exception`(hook_name: str, hook_impl: HookImpl, e: BaseException) -> None
- `_multicall`(hook_name: str, hook_impls: Sequence[HookImpl], caller_kwargs: Mapping[<ast.Tuple object at 0x11b6ba610>], firstresult: bool) -> object | list[object]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pluggy/_callers.py`  
**Dependencies**: `__future__.annotations`, `typing.cast`, `typing.Generator`, `typing.Mapping`, `typing.NoReturn`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `warnings`, `_hooks.HookImpl`, `_result.HookCallError`, `_result.Result`, `_warnings.PluggyTeardownRaisedWarning`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pluggy

**Imports**: `_hooks.HookCaller`, `_hooks.HookImpl`, `_hooks.HookimplMarker`, `_hooks.HookimplOpts`, `_hooks.HookRelay`, `_hooks.HookspecMarker`, `_hooks.HookspecOpts`, `_manager.PluginManager`, `_manager.PluginValidationError`, `_result.HookCallError`, `_result.Result`, `_warnings.PluggyTeardownRaisedWarning`, `_warnings.PluggyWarning`, `_version.version`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pluggy/__init__.py`  
**Dependencies**: `_hooks.HookCaller`, `_hooks.HookImpl`, `_hooks.HookimplMarker`, `_hooks.HookimplOpts`, `_hooks.HookRelay`, `_hooks.HookspecMarker`, `_hooks.HookspecOpts`, `_manager.PluginManager`, `_manager.PluginValidationError`, `_result.HookCallError`, `_result.Result`, `_warnings.PluggyTeardownRaisedWarning`, `_warnings.PluggyWarning`, `_version.version`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pluggy._warnings
:::{doc} PluggyWarning:4
Base class for all warnings emitted by pluggy.
:::
:::{doc} PluggyTeardownRaisedWarning:11
A plugin raised an exception during an :ref:`old-style hookwrapper
<old_style_hookwrappers>` teardown.

Such exceptions are not handled by pluggy, and may cause subsequent
teardowns to be executed at unexpected times, or be skipped entirely.

This is an issue in the plugin implementation.

If the exception is unintended, fix the underlying cause.

If the exception is intended, switch to :ref:`new-style hook wrappers
<hookwrappers>`, or use :func:`result.force_exception()
<pluggy.Result.force_exception>` to set the exception instead of raising.
:::
**Imports**: `typing.final`
**Type References**: [[PluggyTeardownRaisedWarning]], [[PluggyWarning]]


### Implementation
**PluggyWarning**

**PluggyTeardownRaisedWarning**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pluggy/_warnings.py`  
**Dependencies**: `typing.final`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pluggy._hooks
:::{doc} HookspecOpts:42
Options for a hook specification.
:::
:::{doc} HookimplOpts:58
Options for a hook implementation.
:::
:::{doc} HookspecMarker:80
Decorator for marking functions as hook specifications.

Instantiate it with a project_name to get a decorator.
Calling :meth:`PluginManager.add_hookspecs` later will discover all marked
functions if the :class:`PluginManager` uses the same project name.
:::
:::{doc} HookimplMarker:167
Decorator for marking functions as hook implementations.

Instantiate it with a ``project_name`` to get a decorator.
Calling :meth:`PluginManager.register` later will discover all marked
functions if the :class:`PluginManager` uses the same project name.
:::
:::{doc} varnames:295
Return tuple of positional and keywrord argument names for a function,
method, class or callable.

In case of a class, its ``__init__`` method is considered.
For methods the ``self`` parameter is not included.
:::
:::{doc} HookRelay:361
Hook holder object for performing 1:N hook calls where N is the number
of registered plugins.
:::
:::{doc} HookCaller:382
A caller of all registered implementations of a hook specification.
:::
:::{doc} _SubsetHookCaller:592
A proxy to another HookCaller which manages calls to all registered
plugins except the ones from remove_plugins.
:::
:::{doc} HookImpl:638
A hook implementation in a :class:`HookCaller`.
:::
**Imports**: `__future__.annotations`, `inspect`, `sys`, `types.ModuleType`, `typing.AbstractSet`, `typing.Any`, `typing.Callable`, `typing.Final`, `typing.final`, `typing.Generator`, `typing.List`, `typing.Mapping`, `typing.Optional`, `typing.overload`, `typing.Sequence`, `typing.Tuple`, `typing.TYPE_CHECKING`, `typing.TypedDict`, `typing.TypeVar`, `typing.Union`, `warnings`, `_result.Result`
**Type References**: [[HookCaller]], [[HookImpl]], [[HookRelay]], [[HookSpec]], [[HookimplMarker]], [[HookimplOpts]], [[HookspecMarker]], [[HookspecOpts]], [[Mapping]], [[None]], [[Warning]], [[_SubsetHookCaller]]

### Interface
- `normalize_hookimpl_opts`(opts: HookimplOpts) -> None
- `varnames`(func: object) -> tuple[<ast.Tuple object at 0x11b73c810>]
- `__init__`(namespace: _Namespace, name: str, opts: HookspecOpts) -> None
- `__call__`() -> Any
- `has_spec`() -> bool
- `set_specification`(specmodule_or_class: _Namespace, spec_opts: HookspecOpts) -> None
- `is_historic`() -> bool
- `_remove_plugin`(plugin: _Plugin) -> None
- `get_hookimpls`() -> list[HookImpl]
- `_add_hookimpl`(hookimpl: HookImpl) -> None
- `__repr__`() -> str
- `_verify_all_args_are_provided`(kwargs: Mapping[<ast.Tuple object at 0x11b762f90>]) -> None
- `call_historic`(result_callback: Callable[<ast.Tuple object at 0x11b76ecd0>] | None, kwargs: Mapping[<ast.Tuple object at 0x11b76f1d0>] | None) -> None
- `call_extra`(methods: Sequence[Callable[<ast.Tuple object at 0x11b775ed0>]], kwargs: Mapping[<ast.Tuple object at 0x11b776210>]) -> Any
- `_maybe_apply_history`(method: HookImpl) -> None
- `_hookimpls`() -> list[HookImpl]
- `spec`() -> HookSpec | None
- `_call_history`() -> _CallHistory | None
- `setattr_hookspec_opts`(func: _F) -> _F
- `setattr_hookimpl_opts`(func: _F) -> _F
- `__getattr__`(name: str) -> HookCaller

### Implementation
**HookspecOpts**
  - firstresult: bool
  - historic: bool
  - warn_on_impl: Warning | None
  - warn_on_impl_args: Mapping[<ast.Tuple object at 0x11b712550>] | None
**HookimplOpts**
  - wrapper: bool
  - hookwrapper: bool
  - optionalhook: bool
  - tryfirst: bool
  - trylast: bool
  - specname: str | None
**HookspecMarker**
  - opts: HookspecOpts
**HookimplMarker**
  - opts: HookimplOpts
**HookRelay**

**HookCaller**
  - opts: HookimplOpts
**_SubsetHookCaller**

**HookImpl**

**HookSpec**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pluggy/_hooks.py`  
**Dependencies**: `__future__.annotations`, `inspect`, `sys`, `types.ModuleType`, `typing.AbstractSet`, `typing.Any`, `typing.Callable`, `typing.Final`, `typing.final`, `typing.Generator`, `typing.List`, `typing.Mapping`, `typing.Optional`, `typing.overload`, `typing.Sequence`, `typing.Tuple`, `typing.TYPE_CHECKING`, `typing.TypedDict`, `typing.TypeVar`, `typing.Union`, `warnings`, `_result.Result`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pluggy._result
:::{doc} HookCallError:22
Hook was called incorrectly.
:::
:::{doc} Result:27
An object used to inspect and set the result in a :ref:`hook wrapper
<hookwrappers>`.
:::
**Imports**: `__future__.annotations`, `types.TracebackType`, `typing.Callable`, `typing.cast`, `typing.final`, `typing.Generic`, `typing.Optional`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`
**Type References**: [[HookCallError]], [[Result]]

### Interface
- `__init__`(result: ResultType | None, exception: BaseException | None) -> None
- `excinfo`() -> _ExcInfo | None
- `exception`() -> BaseException | None
- `from_call`(func: Callable[<ast.Tuple object at 0x11b7b3450>]) -> Result[ResultType]
- `force_result`(result: ResultType) -> None
- `force_exception`(exception: BaseException) -> None
- `get_result`() -> ResultType

### Implementation
**HookCallError**

**Result**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pluggy/_result.py`  
**Dependencies**: `__future__.annotations`, `types.TracebackType`, `typing.Callable`, `typing.cast`, `typing.final`, `typing.Generic`, `typing.Optional`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pluggy._manager
:::{doc} PluginValidationError:49
Plugin failed validation.

:param plugin: The plugin which failed validation.
:param message: Error message.
:::
:::{doc} DistFacade:62
Emulate a pkg_resources Distribution
:::
:::{doc} PluginManager:80
Core class which manages registration of plugin objects and 1:N hook
calling.

You can register new hooks by calling :meth:`add_hookspecs(module_or_class)
<PluginManager.add_hookspecs>`.

You can register plugin objects (which contain hook implementations) by
calling :meth:`register(plugin) <PluginManager.register>`.

For debugging purposes you can call :meth:`PluginManager.enable_tracing`
which will subsequently send debug information to the trace helper.

:param project_name:
    The short project name. Prefer snake case. Make sure it's unique!
:::
**Imports**: `__future__.annotations`, `inspect`, `types`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.Final`, `typing.Iterable`, `typing.Mapping`, `typing.Sequence`, `typing.TYPE_CHECKING`, `warnings`, `_tracing`, `_callers._multicall`, `_hooks._HookImplFunction`, `_hooks._Namespace`, `_hooks._Plugin`, `_hooks._SubsetHookCaller`, `_hooks.HookCaller`, `_hooks.HookImpl`, `_hooks.HookimplOpts`, `_hooks.HookRelay`, `_hooks.HookspecOpts`, `_hooks.normalize_hookimpl_opts`, `_result.Result`, `importlib.metadata`, `importlib.metadata`
**Type References**: [[DistFacade]], [[HookCaller]], [[HookimplOpts]], [[HookspecOpts]], [[None]], [[PluginManager]], [[PluginValidationError]]

### Interface
- `_warn_for_function`(warning: Warning, function: Callable[<ast.Tuple object at 0x11b7d3cd0>]) -> None
- `_formatdef`(func: Callable[<ast.Tuple object at 0x11b857090>]) -> str
- `__init__`(project_name: str) -> None
- `project_name`() -> str
- `__getattr__`(attr: str) -> Any
- `__dir__`() -> list[str]
- `_hookexec`(hook_name: str, methods: Sequence[HookImpl], kwargs: Mapping[<ast.Tuple object at 0x11b7c8290>], firstresult: bool) -> object | list[object]
- `register`(plugin: _Plugin, name: str | None) -> str | None
- `parse_hookimpl_opts`(plugin: _Plugin, name: str) -> HookimplOpts | None
- `unregister`(plugin: _Plugin | None, name: str | None) -> Any | None
- `set_blocked`(name: str) -> None
- `is_blocked`(name: str) -> bool
- `unblock`(name: str) -> bool
- `add_hookspecs`(module_or_class: _Namespace) -> None
- `parse_hookspec_opts`(module_or_class: _Namespace, name: str) -> HookspecOpts | None
- `get_plugins`() -> set[Any]
- `is_registered`(plugin: _Plugin) -> bool
- `get_canonical_name`(plugin: _Plugin) -> str
- `get_plugin`(name: str) -> Any | None
- `has_plugin`(name: str) -> bool
- `get_name`(plugin: _Plugin) -> str | None
- `_verify_hook`(hook: HookCaller, hookimpl: HookImpl) -> None
- `check_pending`() -> None
- `load_setuptools_entrypoints`(group: str, name: str | None) -> int
- `list_plugin_distinfo`() -> list[tuple[<ast.Tuple object at 0x11b833a90>]]
- `list_name_plugin`() -> list[tuple[<ast.Tuple object at 0x11b83c790>]]
- `get_hookcallers`(plugin: _Plugin) -> list[HookCaller] | None
- `add_hookcall_monitoring`(before: _BeforeTrace, after: _AfterTrace) -> Callable[<ast.Tuple object at 0x11b849b90>]
- `enable_tracing`() -> Callable[<ast.Tuple object at 0x11b855210>]
- `subset_hook_caller`(name: str, remove_plugins: Iterable[_Plugin]) -> HookCaller
- `traced_hookexec`(hook_name: str, hook_impls: Sequence[HookImpl], caller_kwargs: Mapping[<ast.Tuple object at 0x11b83f750>], firstresult: bool) -> object | list[object]
- `undo`() -> None
- `before`(hook_name: str, methods: Sequence[HookImpl], kwargs: Mapping[<ast.Tuple object at 0x11b84ac90>]) -> None
- `after`(outcome: Result[object], hook_name: str, methods: Sequence[HookImpl], kwargs: Mapping[<ast.Tuple object at 0x11b84bdd0>]) -> None

### Implementation
**PluginValidationError**

**DistFacade**
  - name: str
**PluginManager**
  - method: _HookImplFunction[object]
  - opts: HookspecOpts | None
  - name: str | None
  - orig: HookCaller
  - res: HookimplOpts | None
  - hook: HookCaller
  - hc: HookCaller | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pluggy/_manager.py`  
**Dependencies**: `__future__.annotations`, `inspect`, `types`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.Final`, `typing.Iterable`, `typing.Mapping`, `typing.Sequence`, `typing.TYPE_CHECKING`, `warnings`, `_tracing`, `_callers._multicall`, `_hooks._HookImplFunction`, `_hooks._Namespace`, `_hooks._Plugin`, `_hooks._SubsetHookCaller`, `_hooks.HookCaller`, `_hooks.HookImpl`, `_hooks.HookimplOpts`, `_hooks.HookRelay`, `_hooks.HookspecOpts`, `_hooks.normalize_hookimpl_opts`, `_result.Result`, `importlib.metadata`, `importlib.metadata`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blackd

**Imports**: `asyncio`, `logging`, `concurrent.futures.Executor`, `concurrent.futures.ProcessPoolExecutor`, `datetime.datetime`, `datetime.timezone`, `functools.partial`, `multiprocessing.freeze_support`, `click`, `black`, `_black_version.version`, `black.concurrency.maybe_install_uvloop`, `aiohttp.web`, `multidict.MultiMapping`, `middlewares.cors`
**Type References**: [[HeaderError]], [[InvalidVariantHeader]], [[Preview]], [[black.Preview]]

### Interface
- `main`(bind_host: str, bind_port: int) -> None
- `make_app`() -> web.Application
- `parse_mode`(headers: MultiMapping[str]) -> black.Mode
- `parse_python_variant_header`(value: str) -> tuple[<ast.Tuple object at 0x11b8a9510>]
- `patched_main`() -> None

### Implementation
**HeaderError**

**InvalidVariantHeader**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blackd/__init__.py`  
**Dependencies**: `asyncio`, `logging`, `concurrent.futures.Executor`, `concurrent.futures.ProcessPoolExecutor`, `datetime.datetime`, `datetime.timezone`, `functools.partial`, `multiprocessing.freeze_support`, `click`, `black`, `_black_version.version`, `black.concurrency.maybe_install_uvloop`, `aiohttp.web`, `multidict.MultiMapping`, `middlewares.cors`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blackd.middlewares

**Imports**: `typing.Awaitable`, `typing.Callable`, `typing.Iterable`, `aiohttp.typedefs.Middleware`, `aiohttp.web_middlewares.middleware`, `aiohttp.web_request.Request`, `aiohttp.web_response.StreamResponse`
### Interface
- `cors`(allow_headers: Iterable[str]) -> Middleware
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blackd/middlewares.py`  
**Dependencies**: `typing.Awaitable`, `typing.Callable`, `typing.Iterable`, `aiohttp.typedefs.Middleware`, `aiohttp.web_middlewares.middleware`, `aiohttp.web_request.Request`, `aiohttp.web_response.StreamResponse`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blackd.__main__

**Imports**: `blackd`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blackd/__main__.py`  
**Dependencies**: `blackd`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.filepost
:::{doc} choose_boundary:22
Our embarrassingly-simple replacement for mimetools.choose_boundary.
:::
:::{doc} iter_field_objects:29
Iterate over fields.

Supports list of (k, v) tuples and dicts, and lists of
:class:`~urllib3.fields.RequestField`.
:::
:::{doc} encode_multipart_formdata:51
Encode a dictionary of ``fields`` using the multipart/form-data MIME format.

:param fields:
    Dictionary of fields or list of (key, :class:`~urllib3.fields.RequestField`).
    Values are processed by :func:`urllib3.fields.RequestField.from_tuples`.

:param boundary:
    If not specified, then a random boundary will be generated using
    :func:`urllib3.filepost.choose_boundary`.
:::
**Imports**: `__future__.annotations`, `binascii`, `codecs`, `os`, `typing`, `io.BytesIO`, `fields._TYPE_FIELD_VALUE_TUPLE`, `fields.RequestField`
**Type References**: [[Iterable]], [[typing.Iterable]]

### Interface
- `choose_boundary`() -> str
- `iter_field_objects`(fields: _TYPE_FIELDS) -> typing.Iterable[RequestField]
- `encode_multipart_formdata`(fields: _TYPE_FIELDS, boundary: str | None) -> tuple[<ast.Tuple object at 0x11b8d4a50>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/filepost.py`  
**Dependencies**: `__future__.annotations`, `binascii`, `codecs`, `os`, `typing`, `io.BytesIO`, `fields._TYPE_FIELD_VALUE_TUPLE`, `fields.RequestField`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.fields
:::{doc} guess_content_type:15
Guess the "Content-Type" of a file.

:param filename:
    The filename to guess the "Content-Type" of using :mod:`mimetypes`.
:param default:
    If no "Content-Type" can be guessed, default to `default`.
:::
:::{doc} format_header_param_rfc2231:31
Helper function to format and quote a single header parameter using the
strategy defined in RFC 2231.

Particularly useful for header parameters which might contain
non-ASCII values, like file names. This follows
`RFC 2388 Section 4.4 <https://tools.ietf.org/html/rfc2388#section-4.4>`_.

:param name:
    The name of the parameter, a string expected to be ASCII only.
:param value:
    The value of the parameter, provided as ``bytes`` or `str``.
:returns:
    An RFC-2231-formatted unicode string.

.. deprecated:: 2.0.0
    Will be removed in urllib3 v2.1.0. This is not valid for
    ``multipart/form-data`` header parameters.
:::
:::{doc} format_multipart_header_param:79
Format and quote a single multipart header parameter.

This follows the `WHATWG HTML Standard`_ as of 2021/06/10, matching
the behavior of current browser and curl versions. Values are
assumed to be UTF-8. The ``\n``, ``\r``, and ``"`` characters are
percent encoded.

.. _WHATWG HTML Standard:
    https://html.spec.whatwg.org/multipage/
    form-control-infrastructure.html#multipart-form-data

:param name:
    The name of the parameter, an ASCII-only ``str``.
:param value:
    The value of the parameter, a ``str`` or UTF-8 encoded
    ``bytes``.
:returns:
    A string ``name="value"`` with the escaped value.

.. versionchanged:: 2.0.0
    Matches the WHATWG HTML Standard as of 2021/06/10. Control
    characters are no longer percent encoded.

.. versionchanged:: 2.0.0
    Renamed from ``format_header_param_html5`` and
    ``format_header_param``. The old names will be removed in
    urllib3 v2.1.0.
:::
:::{doc} format_header_param_html5:117
.. deprecated:: 2.0.0
    Renamed to :func:`format_multipart_header_param`. Will be
    removed in urllib3 v2.1.0.
:::
:::{doc} format_header_param:135
.. deprecated:: 2.0.0
    Renamed to :func:`format_multipart_header_param`. Will be
    removed in urllib3 v2.1.0.
:::
:::{doc} RequestField:153
A data container for request body parameters.

:param name:
    The name of this request field. Must be unicode.
:param data:
    The data/value body.
:param filename:
    An optional filename of the request field. Must be unicode.
:param headers:
    An optional dict-like object of headers to initially use for the field.

.. versionchanged:: 2.0.0
    The ``header_formatter`` parameter is deprecated and will
    be removed in urllib3 v2.1.0.
:::
**Imports**: `__future__.annotations`, `email.utils`, `mimetypes`, `typing`, `warnings`, `warnings`, `warnings`, `warnings`
**Type References**: [[Iterable]], [[None]], [[RequestField]], [[typing.Iterable]]

### Interface
- `guess_content_type`(filename: str | None, default: str) -> str
- `format_header_param_rfc2231`(name: str, value: _TYPE_FIELD_VALUE) -> str
- `format_multipart_header_param`(name: str, value: _TYPE_FIELD_VALUE) -> str
- `format_header_param_html5`(name: str, value: _TYPE_FIELD_VALUE) -> str
- `format_header_param`(name: str, value: _TYPE_FIELD_VALUE) -> str
- `__init__`(name: str, data: _TYPE_FIELD_VALUE, filename: str | None, headers: typing.Mapping[<ast.Tuple object at 0x11b8d6090>] | None, header_formatter: typing.Callable[<ast.Tuple object at 0x11b8d5bd0>] | None) -> Any
- `from_tuples`(fieldname: str, value: _TYPE_FIELD_VALUE_TUPLE, header_formatter: typing.Callable[<ast.Tuple object at 0x11b8e5550>] | None) -> RequestField
- `_render_part`(name: str, value: _TYPE_FIELD_VALUE) -> str
- `_render_parts`(header_parts: dict[<ast.Tuple object at 0x11b8fac10>] | typing.Sequence[tuple[<ast.Tuple object at 0x11b8fb190>]]) -> str
- `render_headers`() -> str
- `make_multipart`(content_disposition: str | None, content_type: str | None, content_location: str | None) -> None

### Implementation
**RequestField**
  - filename: str | None
  - content_type: str | None
  - data: _TYPE_FIELD_VALUE
  - iterable: typing.Iterable[tuple[<ast.Tuple object at 0x11b8fb9d0>]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/fields.py`  
**Dependencies**: `__future__.annotations`, `email.utils`, `mimetypes`, `typing`, `warnings`, `warnings`, `warnings`, `warnings`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3._version

**Imports**: `typing.Tuple`, `typing.Union`
**Type References**: [[VERSION_TUPLE]]

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/_version.py`  
**Dependencies**: `typing.Tuple`, `typing.Union`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3._base_connection

**Imports**: `__future__.annotations`, `typing`, `util.connection._TYPE_SOCKET_OPTIONS`, `util.timeout._DEFAULT_TIMEOUT`, `util.timeout._TYPE_TIMEOUT`, `util.url.Url`, `ssl`, `typing.Protocol`, `response.BaseHTTPResponse`
**Type References**: [[BaseHTTPConnection]], [[BaseHTTPSConnection]], [[ClassVar]], [[Literal]], [[None]], [[ProxyConfig]], [[SSLContext]], [[Url]], [[_ResponseOptions]], [[ssl.SSLContext]], [[typing.ClassVar]], [[typing.Literal]]

### Interface
- `__init__`(host: str, port: int | None) -> None
- `set_tunnel`(host: str, port: int | None, headers: typing.Mapping[<ast.Tuple object at 0x11b9250d0>] | None, scheme: str) -> None
- `connect`() -> None
- `request`(method: str, url: str, body: _TYPE_BODY | None, headers: typing.Mapping[<ast.Tuple object at 0x11b923750>] | None) -> None
- `getresponse`() -> BaseHTTPResponse
- `close`() -> None
- `is_closed`() -> bool
- `is_connected`() -> bool
- `has_connected_to_proxy`() -> bool

### Implementation
**ProxyConfig**
  - ssl_context: ssl.SSLContext | None
  - use_forwarding_for_https: bool
  - assert_hostname: None | str | typing.Literal[False]
  - assert_fingerprint: str | None
**_ResponseOptions**
  - request_method: str
  - request_url: str
  - preload_content: bool
  - decode_content: bool
  - enforce_content_length: bool
**BaseHTTPConnection**
  - default_port: typing.ClassVar[int]
  - default_socket_options: typing.ClassVar[_TYPE_SOCKET_OPTIONS]
  - host: str
  - port: int
  - timeout: None | float
  - blocksize: int
  - source_address: tuple[<ast.Tuple object at 0x11b927dd0>] | None
  - socket_options: _TYPE_SOCKET_OPTIONS | None
  - proxy: Url | None
  - proxy_config: ProxyConfig | None
  - is_verified: bool
  - proxy_is_verified: bool | None
**BaseHTTPSConnection**
  - default_port: typing.ClassVar[int]
  - default_socket_options: typing.ClassVar[_TYPE_SOCKET_OPTIONS]
  - cert_reqs: int | str | None
  - assert_hostname: None | str | typing.Literal[False]
  - assert_fingerprint: str | None
  - ssl_context: ssl.SSLContext | None
  - ca_certs: str | None
  - ca_cert_dir: str | None
  - ca_cert_data: None | str | bytes
  - ssl_minimum_version: int | None
  - ssl_maximum_version: int | None
  - ssl_version: int | str | None
  - cert_file: str | None
  - key_file: str | None
  - key_password: str | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/_base_connection.py`  
**Dependencies**: `__future__.annotations`, `typing`, `util.connection._TYPE_SOCKET_OPTIONS`, `util.timeout._DEFAULT_TIMEOUT`, `util.timeout._TYPE_TIMEOUT`, `util.url.Url`, `ssl`, `typing.Protocol`, `response.BaseHTTPResponse`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3
:::{doc} add_stderr_logger:74
Helper for quickly adding a StreamHandler to the logger. Useful for
debugging.

Returns the handler after adding it.
:::
:::{doc} disable_warnings:107
Helper for quickly disabling all urllib3 warnings.
:::
:::{doc} request:117
A convenience, top-level request method. It uses a module-global ``PoolManager`` instance.
Therefore, its side effects could be shared across dependencies relying on it.
To avoid side effects create a new ``PoolManager`` instance and use it instead.
The method does not accept low-level ``**urlopen_kw`` keyword arguments.

:param method:
    HTTP request method (such as GET, POST, PUT, etc.)

:param url:
    The URL to perform the request on.

:param body:
    Data to send in the request body, either :class:`str`, :class:`bytes`,
    an iterable of :class:`str`/:class:`bytes`, or a file-like object.

:param fields:
    Data to encode and send in the request body.

:param headers:
    Dictionary of custom headers to send, such as User-Agent,
    If-None-Match, etc.

:param bool preload_content:
    If True, the response's body will be preloaded into memory.

:param bool decode_content:
    If True, will attempt to decode the body based on the
    'content-encoding' header.

:param redirect:
    If True, automatically handle redirects (status codes 301, 302,
    303, 307, 308). Each redirect counts as a retry. Disabling retries
    will disable redirect, too.

:param retries:
    Configure the number of retries to allow before raising a
    :class:`~urllib3.exceptions.MaxRetryError` exception.

    If ``None`` (default) will retry 3 times, see ``Retry.DEFAULT``. Pass a
    :class:`~urllib3.util.retry.Retry` object for fine-grained control
    over different types of retries.
    Pass an integer number to retry connection errors that many times,
    but no other types of errors. Pass zero to never retry.

    If ``False``, then retries are disabled and any exception is raised
    immediately. Also, instead of raising a MaxRetryError on redirects,
    the redirect response will be returned.

:type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.

:param timeout:
    If specified, overrides the default timeout for this one
    request. It may be a float (in seconds) or an instance of
    :class:`urllib3.util.Timeout`.

:param json:
    Data to encode and send as JSON with UTF-encoded in the request body.
    The ``"Content-Type"`` header will be set to ``"application/json"``
    unless specified otherwise.
:::
**Imports**: `__future__.annotations`, `logging`, `sys`, `typing`, `warnings`, `logging.NullHandler`, `exceptions`, `_base_connection._TYPE_BODY`, `_collections.HTTPHeaderDict`, `_version.__version__`, `connectionpool.HTTPConnectionPool`, `connectionpool.HTTPSConnectionPool`, `connectionpool.connection_from_url`, `filepost._TYPE_FIELDS`, `filepost.encode_multipart_formdata`, `poolmanager.PoolManager`, `poolmanager.ProxyManager`, `poolmanager.proxy_from_url`, `response.BaseHTTPResponse`, `response.HTTPResponse`, `util.request.make_headers`, `util.retry.Retry`, `util.timeout.Timeout`, `ssl`, `contrib.emscripten.inject_into_urllib3`
### Interface
- `add_stderr_logger`(level: int) -> logging.StreamHandler[typing.TextIO]
- `disable_warnings`(category: type[Warning]) -> None
- `request`(method: str, url: str) -> BaseHTTPResponse
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/__init__.py`  
**Dependencies**: `__future__.annotations`, `logging`, `sys`, `typing`, `warnings`, `logging.NullHandler`, `exceptions`, `_base_connection._TYPE_BODY`, `_collections.HTTPHeaderDict`, `_version.__version__`, `connectionpool.HTTPConnectionPool`, `connectionpool.HTTPSConnectionPool`, `connectionpool.connection_from_url`, `filepost._TYPE_FIELDS`, `filepost.encode_multipart_formdata`, `poolmanager.PoolManager`, `poolmanager.ProxyManager`, `poolmanager.proxy_from_url`, `response.BaseHTTPResponse`, `response.HTTPResponse`, `util.request.make_headers`, `util.retry.Retry`, `util.timeout.Timeout`, `ssl`, `contrib.emscripten.inject_into_urllib3`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.poolmanager
:::{doc} PoolKey:56
All known keyword arguments that could be provided to the pool manager, its
pools, or the underlying connections.

All custom key schemes should include the fields in this key at a minimum.
:::
:::{doc} _default_key_normalizer:95
Create a pool key out of a request context dictionary.

According to RFC 3986, both the scheme and host are case-insensitive.
Therefore, this function normalizes both before constructing the pool
key for an HTTPS request. If you wish to change this behaviour, provide
alternate callables to ``key_fn_by_scheme``.

:param key_class:
    The class to use when constructing the key. This should be a namedtuple
    with the ``scheme`` and ``host`` keys at a minimum.
:type  key_class: namedtuple
:param request_context:
    A dictionary-like object that contain the context for a request.
:type  request_context: dict

:return: A namedtuple that can be used as a connection pool key.
:rtype:  PoolKey
:::
:::{doc} PoolManager:162
Allows for arbitrary requests while transparently keeping track of
necessary connection pools for you.

:param num_pools:
    Number of connection pools to cache before discarding the least
    recently used pool.

:param headers:
    Headers to include with all requests, unless other headers are given
    explicitly.

:param \**connection_pool_kw:
    Additional parameters are used to create fresh
    :class:`urllib3.connectionpool.ConnectionPool` instances.

Example:

.. code-block:: python

    import urllib3

    http = urllib3.PoolManager(num_pools=2)

    resp1 = http.request("GET", "https://google.com/")
    resp2 = http.request("GET", "https://google.com/mail")
    resp3 = http.request("GET", "https://yahoo.com/")

    print(len(http.pools))
    # 2
:::
:::{doc} ProxyManager:492
Behaves just like :class:`PoolManager`, but sends all requests through
the defined proxy, using the CONNECT method for HTTPS URLs.

:param proxy_url:
    The URL of the proxy to be used.

:param proxy_headers:
    A dictionary containing headers that will be sent to the proxy. In case
    of HTTP they are being sent with each request, while in the
    HTTPS/CONNECT case they are sent only once. Could be used for proxy
    authentication.

:param proxy_ssl_context:
    The proxy SSL context is used to establish the TLS connection to the
    proxy when using HTTPS proxies.

:param use_forwarding_for_https:
    (Defaults to False) If set to True will forward requests to the HTTPS
    proxy to be made on behalf of the client instead of creating a TLS
    tunnel via the CONNECT method. **Enabling this flag means that request
    and response headers and content will be visible from the HTTPS proxy**
    whereas tunneling keeps request and response headers and content
    private.  IP address, target hostname, SNI, and port are always visible
    to an HTTPS proxy even when this flag is disabled.

:param proxy_assert_hostname:
    The hostname of the certificate to verify against.

:param proxy_assert_fingerprint:
    The fingerprint of the certificate to verify against.

Example:

.. code-block:: python

    import urllib3

    proxy = urllib3.ProxyManager("https://localhost:3128/")

    resp1 = proxy.request("GET", "https://google.com/")
    resp2 = proxy.request("GET", "https://httpbin.org/")

    print(len(proxy.pools))
    # 1

    resp3 = proxy.request("GET", "https://httpbin.org/")
    resp4 = proxy.request("GET", "https://twitter.com/")

    print(len(proxy.pools))
    # 3
:::
**Imports**: `__future__.annotations`, `functools`, `logging`, `typing`, `warnings`, `types.TracebackType`, `urllib.parse.urljoin`, `_collections.HTTPHeaderDict`, `_collections.RecentlyUsedContainer`, `_request_methods.RequestMethods`, `connection.ProxyConfig`, `connectionpool.HTTPConnectionPool`, `connectionpool.HTTPSConnectionPool`, `connectionpool.port_by_scheme`, `exceptions.LocationValueError`, `exceptions.MaxRetryError`, `exceptions.ProxySchemeUnknown`, `exceptions.URLSchemeUnknown`, `response.BaseHTTPResponse`, `util.connection._TYPE_SOCKET_OPTIONS`, `util.proxy.connection_requires_http_tunnel`, `util.retry.Retry`, `util.timeout.Timeout`, `util.url.Url`, `util.url.parse_url`, `ssl`, `typing_extensions.Self`
**Type References**: [[HTTPConnectionPool]], [[None]], [[PoolKey]], [[PoolManager]], [[ProxyConfig]], [[ProxyManager]], [[Retry]], [[SSLContext]], [[TLSVersion]], [[Timeout]], [[Url]], [[ssl.SSLContext]], [[ssl.TLSVersion]]

### Interface
- `_default_key_normalizer`(key_class: type[PoolKey], request_context: dict[<ast.Tuple object at 0x11b97cf90>]) -> PoolKey
- `proxy_from_url`(url: str) -> ProxyManager
- `__init__`(proxy_url: str, num_pools: int, headers: typing.Mapping[<ast.Tuple object at 0x11b9e8d50>] | None, proxy_headers: typing.Mapping[<ast.Tuple object at 0x11b9e9210>] | None, proxy_ssl_context: ssl.SSLContext | None, use_forwarding_for_https: bool, proxy_assert_hostname: None | str | typing.Literal[False], proxy_assert_fingerprint: str | None) -> None
- `__enter__`() -> Self
- `__exit__`(exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: TracebackType | None) -> typing.Literal[False]
- `_new_pool`(scheme: str, host: str, port: int, request_context: dict[<ast.Tuple object at 0x11b95dad0>] | None) -> HTTPConnectionPool
- `clear`() -> None
- `connection_from_host`(host: str | None, port: int | None, scheme: str | None, pool_kwargs: dict[<ast.Tuple object at 0x11b9f7010>] | None) -> HTTPConnectionPool
- `connection_from_context`(request_context: dict[<ast.Tuple object at 0x11b982490>]) -> HTTPConnectionPool
- `connection_from_pool_key`(pool_key: PoolKey, request_context: dict[<ast.Tuple object at 0x11b9b4390>]) -> HTTPConnectionPool
- `connection_from_url`(url: str, pool_kwargs: dict[<ast.Tuple object at 0x11b9b6950>] | None) -> HTTPConnectionPool
- `_merge_pool_kwargs`(override: dict[<ast.Tuple object at 0x11b9b7e50>] | None) -> dict[<ast.Tuple object at 0x11b9bdb10>]
- `_proxy_requires_url_absolute_form`(parsed_url: Url) -> bool
- `urlopen`(method: str, url: str, redirect: bool) -> BaseHTTPResponse
- `_set_proxy_headers`(url: str, headers: typing.Mapping[<ast.Tuple object at 0x11b9fce10>] | None) -> typing.Mapping[<ast.Tuple object at 0x11b9fe590>]

### Implementation
**PoolKey**
  - key_scheme: str
  - key_host: str
  - key_port: int | None
  - key_timeout: Timeout | float | int | None
  - key_retries: Retry | bool | int | None
  - key_block: bool | None
  - key_source_address: tuple[<ast.Tuple object at 0x11b98e650>] | None
  - key_key_file: str | None
  - key_key_password: str | None
  - key_cert_file: str | None
  - key_cert_reqs: str | None
  - key_ca_certs: str | None
  - key_ca_cert_data: str | bytes | None
  - key_ssl_version: int | str | None
  - key_ssl_minimum_version: ssl.TLSVersion | None
  - key_ssl_maximum_version: ssl.TLSVersion | None
  - key_ca_cert_dir: str | None
  - key_ssl_context: ssl.SSLContext | None
  - key_maxsize: int | None
  - key_headers: frozenset[tuple[<ast.Tuple object at 0x11b97fed0>]] | None
  - key__proxy: Url | None
  - key__proxy_headers: frozenset[tuple[<ast.Tuple object at 0x11b97f690>]] | None
  - key__proxy_config: ProxyConfig | None
  - key_socket_options: _TYPE_SOCKET_OPTIONS | None
  - key__socks_options: frozenset[tuple[<ast.Tuple object at 0x11b97ebd0>]] | None
  - key_assert_hostname: bool | str | None
  - key_assert_fingerprint: str | None
  - key_server_hostname: str | None
  - key_blocksize: int | None
**PoolManager**
  - proxy: Url | None
  - proxy_config: ProxyConfig | None
  - pool_cls: type[HTTPConnectionPool]
**ProxyManager**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/poolmanager.py`  
**Dependencies**: `__future__.annotations`, `functools`, `logging`, `typing`, `warnings`, `types.TracebackType`, `urllib.parse.urljoin`, `_collections.HTTPHeaderDict`, `_collections.RecentlyUsedContainer`, `_request_methods.RequestMethods`, `connection.ProxyConfig`, `connectionpool.HTTPConnectionPool`, `connectionpool.HTTPSConnectionPool`, `connectionpool.port_by_scheme`, `exceptions.LocationValueError`, `exceptions.MaxRetryError`, `exceptions.ProxySchemeUnknown`, `exceptions.URLSchemeUnknown`, `response.BaseHTTPResponse`, `util.connection._TYPE_SOCKET_OPTIONS`, `util.proxy.connection_requires_http_tunnel`, `util.retry.Retry`, `util.timeout.Timeout`, `util.url.Url`, `util.url.parse_url`, `ssl`, `typing_extensions.Self`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.response
:::{doc} MultiDecoder:189
From RFC7231:
    If one or more encodings have been applied to a representation, the
    sender that applied the encodings MUST generate a Content-Encoding
    header field that lists the content codings in the order in which
    they were applied.
:::
:::{doc} BytesQueueBuffer:228
Memory-efficient bytes buffer

To return decoded data in read() and still follow the BufferedIOBase API, we need a
buffer to always return the correct amount of bytes.

This buffer should be filled using calls to put()

Our maximum memory usage is determined by the sum of the size of:

 * self.buffer, which contains the full data
 * the largest chunk that we will copy in get()

The worst case scenario is a single chunk, in which case we'll make a full copy of
the data inside get().
:::
:::{doc} HTTPResponse:544
HTTP Response container.

Backwards-compatible with :class:`http.client.HTTPResponse` but the response ``body`` is
loaded and decoded on-demand when the ``data`` property is accessed.  This
class is also compatible with the Python standard library's :mod:`io`
module, and can hence be treated as a readable object in the context of that
framework.

Extra parameters for behaviour not present in :class:`http.client.HTTPResponse`:

:param preload_content:
    If True, the response's body will be preloaded during construction.

:param decode_content:
    If True, will attempt to decode the body based on the
    'content-encoding' header.

:param original_response:
    When this HTTPResponse wrapper is generated from an :class:`http.client.HTTPResponse`
    object, it's convenient to include the original for debug purposes. It's
    otherwise unused.

:param retries:
    The retries contains the last :class:`~urllib3.util.retry.Retry` that
    was used during the request.

:param enforce_content_length:
    Enforce content length checking. Body returned by server must match
    value of Content-Length header, if present. Otherwise, raise error.
:::
**Imports**: `__future__.annotations`, `collections`, `io`, `json`, `logging`, `re`, `socket`, `sys`, `typing`, `warnings`, `zlib`, `contextlib.contextmanager`, `http.client.HTTPMessage`, `http.client.HTTPResponse`, `socket.timeout`, `util`, `_base_connection._TYPE_BODY`, `_collections.HTTPHeaderDict`, `connection.BaseSSLError`, `connection.HTTPConnection`, `connection.HTTPException`, `exceptions.BodyNotHttplibCompatible`, `exceptions.DecodeError`, `exceptions.HTTPError`, `exceptions.IncompleteRead`, `exceptions.InvalidChunkLength`, `exceptions.InvalidHeader`, `exceptions.ProtocolError`, `exceptions.ReadTimeoutError`, `exceptions.ResponseNotChunked`, `exceptions.SSLError`, `util.response.is_fp_closed`, `util.response.is_response_to_head`, `util.retry.Retry`, `_base_connection.BaseHTTPConnection`, `zstandard`, `connectionpool.HTTPConnectionPool`, `brotlicffi`, `brotli`
**Type References**: [[BaseHTTPResponse]], [[BrotliDecoder]], [[BytesQueueBuffer]], [[ContentDecoder]], [[DeflateDecoder]], [[Exception]], [[GzipDecoder]], [[GzipDecoderState]], [[HTTPResponse]], [[MultiDecoder]], [[None]], [[ZstdDecoder]]

### Interface
- `_get_decoder`(mode: str) -> ContentDecoder
- `decompress`(data: bytes) -> bytes
- `flush`() -> bytes
- `__init__`() -> None
- `__len__`() -> int
- `put`(data: bytes) -> None
- `get`(n: int) -> bytes
- `get_all`() -> bytes
- `get_redirect_location`() -> str | None | typing.Literal[False]
- `data`() -> bytes
- `json`() -> typing.Any
- `url`(url: str) -> None
- `connection`() -> HTTPConnection | None
- `retries`(retries: Retry | None) -> None
- `stream`(amt: int | None, decode_content: bool | None) -> typing.Generator[bytes]
- `read`(amt: int | None, decode_content: bool | None, cache_content: bool) -> bytes
- `read1`(amt: int | None, decode_content: bool | None) -> bytes
- `read_chunked`(amt: int | None, decode_content: bool | None) -> typing.Generator[bytes]
- `release_conn`() -> None
- `drain_conn`() -> None
- `shutdown`() -> None
- `close`() -> None
- `_init_decoder`() -> None
- `_decode`(data: bytes, decode_content: bool | None, flush_decoder: bool) -> bytes
- `_flush_decoder`() -> bytes
- `readinto`(b: bytearray) -> int
- `getheaders`() -> HTTPHeaderDict
- `getheader`(name: str, default: str | None) -> str | None
- `info`() -> HTTPHeaderDict
- `geturl`() -> str | None
- `isclosed`() -> bool
- `tell`() -> int
- `_init_length`(request_method: str | None) -> int | None
- `_error_catcher`() -> typing.Generator[None]
- `_fp_read`(amt: int | None) -> bytes
- `_raw_read`(amt: int | None) -> bytes
- `readable`() -> bool
- `closed`() -> bool
- `fileno`() -> int
- `supports_chunked_reads`() -> bool
- `_update_chunk_length`() -> None
- `_handle_chunk`(amt: int | None) -> bytes
- `__iter__`() -> typing.Iterator[bytes]

### Implementation
**ContentDecoder**

**DeflateDecoder**

**GzipDecoderState**

**GzipDecoder**

**MultiDecoder**

**BytesQueueBuffer**

**BaseHTTPResponse**
  - DECODER_ERROR_CLASSES: tuple[<ast.Tuple object at 0x11ba62d50>]
**HTTPResponse**
  - length: int | None
  - content_length: str | None
  - buffer: list[bytes]
**BrotliDecoder**

**ZstdDecoder**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/response.py`  
**Dependencies**: `__future__.annotations`, `collections`, `io`, `json`, `logging`, `re`, `socket`, `sys`, `typing`, `warnings`, `zlib`, `contextlib.contextmanager`, `http.client.HTTPMessage`, `http.client.HTTPResponse`, `socket.timeout`, `util`, `_base_connection._TYPE_BODY`, `_collections.HTTPHeaderDict`, `connection.BaseSSLError`, `connection.HTTPConnection`, `connection.HTTPException`, `exceptions.BodyNotHttplibCompatible`, `exceptions.DecodeError`, `exceptions.HTTPError`, `exceptions.IncompleteRead`, `exceptions.InvalidChunkLength`, `exceptions.InvalidHeader`, `exceptions.ProtocolError`, `exceptions.ReadTimeoutError`, `exceptions.ResponseNotChunked`, `exceptions.SSLError`, `util.response.is_fp_closed`, `util.response.is_response_to_head`, `util.retry.Retry`, `_base_connection.BaseHTTPConnection`, `zstandard`, `connectionpool.HTTPConnectionPool`, `brotlicffi`, `brotli`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.connection
:::{doc} HTTPConnection:82
Based on :class:`http.client.HTTPConnection` but provides an extra constructor
backwards-compatibility layer between older and newer Pythons.

Additional keyword parameters are used to configure attributes of the connection.
Accepted parameters include:

- ``source_address``: Set the source address for the current connection.
- ``socket_options``: Set specific options on the underlying socket. If not specified, then
  defaults are loaded from ``HTTPConnection.default_socket_options`` which includes disabling
  Nagle's algorithm (sets TCP_NODELAY to 1) unless the connection is behind a proxy.

  For example, if you wish to enable TCP Keep Alive in addition to the defaults,
  you might pass:

  .. code-block:: python

     HTTPConnection.default_socket_options + [
         (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1),
     ]

  Or you may want to disable the defaults by passing an empty list (e.g., ``[]``).
:::
:::{doc} HTTPSConnection:548
Many of the parameters to this constructor are passed to the underlying SSL
socket by means of :py:func:`urllib3.util.ssl_wrap_socket`.
:::
:::{doc} _WrappedAndVerifiedSocket:836
Wrapped socket and whether the connection is
verified after the TLS handshake
:::
:::{doc} _ssl_wrap_socket_and_match_hostname:846
Logic for constructing an SSLContext from all TLS parameters, passing
that down into ssl_wrap_socket, and then doing certificate verification
either via hostname or fingerprint. This function exists to guarantee
that both proxies and targets have the same behavior when connecting via TLS.
:::
:::{doc} DummyConnection:1026
Used to detect a failed ConnectionCls import.
:::
:::{doc} _url_from_connection:1037
Returns the URL from a given connection. This is mainly used for testing and logging.
:::
**Imports**: `__future__.annotations`, `datetime`, `http.client`, `logging`, `os`, `re`, `socket`, `sys`, `threading`, `typing`, `warnings`, `http.client.HTTPConnection`, `http.client.HTTPException`, `http.client.ResponseNotReady`, `socket.timeout`, `_collections.HTTPHeaderDict`, `http2.probe`, `util.response.assert_header_parsing`, `util.timeout._DEFAULT_TIMEOUT`, `util.timeout._TYPE_TIMEOUT`, `util.timeout.Timeout`, `util.util.to_str`, `util.wait.wait_for_read`, `_base_connection._TYPE_BODY`, `_base_connection.ProxyConfig`, `_base_connection._ResponseOptions`, `_version.__version__`, `exceptions.ConnectTimeoutError`, `exceptions.HeaderParsingError`, `exceptions.NameResolutionError`, `exceptions.NewConnectionError`, `exceptions.ProxyError`, `exceptions.SystemTimeWarning`, `util.SKIP_HEADER`, `util.SKIPPABLE_HEADERS`, `util.connection`, `util.ssl_`, `util.request.body_to_chunks`, `util.ssl_.assert_fingerprint`, `util.ssl_.create_urllib3_context`, `util.ssl_.is_ipaddress`, `util.ssl_.resolve_cert_reqs`, `util.ssl_.resolve_ssl_version`, `util.ssl_.ssl_wrap_socket`, `util.ssl_match_hostname.CertificateError`, `util.ssl_match_hostname.match_hostname`, `util.url.Url`, `response.HTTPResponse`, `util.ssl_._TYPE_PEER_CERT_RET_DICT`, `util.ssltransport.SSLTransport`, `ssl`, `response.HTTPResponse`
**Type References**: [[BaseSSLError]], [[Callable]], [[ClassVar]], [[DummyConnection]], [[HTTPConnection]], [[HTTPSConnection]], [[None]], [[SSLSocket]], [[SSLTransport]], [[_WrappedAndVerifiedSocket]], [[ssl.SSLSocket]], [[typing.Callable]], [[typing.ClassVar]]

### Interface
- `_ssl_wrap_socket_and_match_hostname`(sock: socket.socket) -> _WrappedAndVerifiedSocket
- `_match_hostname`(cert: _TYPE_PEER_CERT_RET_DICT | None, asserted_hostname: str, hostname_checks_common_name: bool) -> None
- `_wrap_proxy_error`(err: Exception, proxy_scheme: str | None) -> ProxyError
- `_get_default_user_agent`() -> str
- `_url_from_connection`(conn: HTTPConnection | HTTPSConnection, path: str | None) -> str
- `__init__`(host: str, port: int | None) -> None
- `host`(value: str) -> None
- `_new_conn`() -> socket.socket
- `set_tunnel`(host: str, port: int | None, headers: typing.Mapping[<ast.Tuple object at 0x11bb88790>] | None, scheme: str) -> None
- `connect`() -> None
- `is_closed`() -> bool
- `is_connected`() -> bool
- `has_connected_to_proxy`() -> bool
- `proxy_is_forwarding`() -> bool
- `proxy_is_tunneling`() -> bool
- `close`() -> None
- `putrequest`(method: str, url: str, skip_host: bool, skip_accept_encoding: bool) -> None
- `putheader`(header: str) -> None
- `request`(method: str, url: str, body: _TYPE_BODY | None, headers: typing.Mapping[<ast.Tuple object at 0x11bbd0650>] | None) -> None
- `request_chunked`(method: str, url: str, body: _TYPE_BODY | None, headers: typing.Mapping[<ast.Tuple object at 0x11bba69d0>] | None) -> None
- `getresponse`() -> HTTPResponse
- `set_cert`(key_file: str | None, cert_file: str | None, cert_reqs: int | str | None, key_password: str | None, ca_certs: str | None, assert_hostname: None | str | typing.Literal[False], assert_fingerprint: str | None, ca_cert_dir: str | None, ca_cert_data: None | str | bytes) -> None
- `_connect_tls_proxy`(hostname: str, sock: socket.socket) -> ssl.SSLSocket
- `_tunnel`() -> None

### Implementation
**HTTPConnection**
  - default_port: typing.ClassVar[int]
  - default_socket_options: typing.ClassVar[connection._TYPE_SOCKET_OPTIONS]
  - is_verified: bool
  - proxy_is_verified: bool | None
  - blocksize: int
  - source_address: tuple[<ast.Tuple object at 0x11bba2ed0>] | None
  - socket_options: connection._TYPE_SOCKET_OPTIONS | None
  - _has_connected_to_proxy: bool
  - _response_options: _ResponseOptions | None
  - _tunnel_host: str | None
  - _tunnel_port: int | None
  - _tunnel_scheme: str | None
**HTTPSConnection**
  - cert_reqs: int | str | None
  - ca_certs: str | None
  - ca_cert_dir: str | None
  - ca_cert_data: None | str | bytes
  - ssl_version: int | str | None
  - ssl_minimum_version: int | None
  - ssl_maximum_version: int | None
  - assert_fingerprint: str | None
  - _connect_callback: typing.Callable[<ast.Tuple object at 0x11bc0d4d0>] | None
  - target_supports_http2: bool | None
  - sock: socket.socket | ssl.SSLSocket
  - server_hostname: str
**_WrappedAndVerifiedSocket**
  - socket: ssl.SSLSocket | SSLTransport
  - is_verified: bool
**DummyConnection**

**BaseSSLError**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/connection.py`  
**Dependencies**: `__future__.annotations`, `datetime`, `http.client`, `logging`, `os`, `re`, `socket`, `sys`, `threading`, `typing`, `warnings`, `http.client.HTTPConnection`, `http.client.HTTPException`, `http.client.ResponseNotReady`, `socket.timeout`, `_collections.HTTPHeaderDict`, `http2.probe`, `util.response.assert_header_parsing`, `util.timeout._DEFAULT_TIMEOUT`, `util.timeout._TYPE_TIMEOUT`, `util.timeout.Timeout`, `util.util.to_str`, `util.wait.wait_for_read`, `_base_connection._TYPE_BODY`, `_base_connection.ProxyConfig`, `_base_connection._ResponseOptions`, `_version.__version__`, `exceptions.ConnectTimeoutError`, `exceptions.HeaderParsingError`, `exceptions.NameResolutionError`, `exceptions.NewConnectionError`, `exceptions.ProxyError`, `exceptions.SystemTimeWarning`, `util.SKIP_HEADER`, `util.SKIPPABLE_HEADERS`, `util.connection`, `util.ssl_`, `util.request.body_to_chunks`, `util.ssl_.assert_fingerprint`, `util.ssl_.create_urllib3_context`, `util.ssl_.is_ipaddress`, `util.ssl_.resolve_cert_reqs`, `util.ssl_.resolve_ssl_version`, `util.ssl_.ssl_wrap_socket`, `util.ssl_match_hostname.CertificateError`, `util.ssl_match_hostname.match_hostname`, `util.url.Url`, `response.HTTPResponse`, `util.ssl_._TYPE_PEER_CERT_RET_DICT`, `util.ssltransport.SSLTransport`, `ssl`, `response.HTTPResponse`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3._collections
:::{doc} RecentlyUsedContainer:63
Provides a thread-safe dict-like container which maintains up to
``maxsize`` keys while throwing away the least-recently-used keys beyond
``maxsize``.

:param maxsize:
    Maximum number of recent elements to retain.

:param dispose_func:
    Every time an item is evicted from the container,
    ``dispose_func(value)`` is called.  Callback which will get called
:::
:::{doc} HTTPHeaderDictItemView:156
HTTPHeaderDict is unusual for a Mapping[str, str] in that it has two modes of
address.

If we directly try to get an item with a particular name, we will get a string
back that is the concatenated version of all the values:

>>> d['X-Header-Name']
'Value1, Value2, Value3'

However, if we iterate over an HTTPHeaderDict's items, we will optionally combine
these values based on whether combine=True was called when building up the dictionary

>>> d = HTTPHeaderDict({"A": "1", "B": "foo"})
>>> d.add("A", "2", combine=True)
>>> d.add("B", "bar")
>>> list(d.items())
[
    ('A', '1, 2'),
    ('B', 'foo'),
    ('B', 'bar'),
]

This class conforms to the interface required by the MutableMapping ABC while
also giving us the nonstandard iteration behavior we want; items with duplicate
keys, ordered by time of first insertion.
:::
:::{doc} HTTPHeaderDict:204
:param headers:
    An iterable of field-value pairs. Must not contain multiple field names
    when compared case-insensitively.

:param kwargs:
    Additional field-value pairs to pass in to ``dict.update``.

A ``dict`` like container for storing HTTP Headers.

Field names are stored and compared case-insensitively in compliance with
RFC 7230. Iteration provides the first case-sensitive key seen for each
case-insensitive pair.

Using ``__setitem__`` syntax overwrites fields that compare equal
case-insensitively in order to maintain ``dict``'s api. For fields that
compare equal, instead create a new ``HTTPHeaderDict`` and use ``.add``
in a loop.

If multiple fields that are equal case-insensitively are passed to the
constructor or ``.update``, the behavior is undefined and some will be
lost.

>>> headers = HTTPHeaderDict()
>>> headers.add('Set-Cookie', 'foo=bar')
>>> headers.add('set-cookie', 'baz=quxx')
>>> headers['content-length'] = '7'
>>> headers['SET-cookie']
'foo=bar, baz=quxx'
>>> headers['Content-Length']
'7'
:::
**Imports**: `__future__.annotations`, `typing`, `collections.OrderedDict`, `enum.Enum`, `enum.auto`, `threading.RLock`, `typing.Protocol`, `typing_extensions.Self`
**Type References**: [[Callable]], [[HTTPHeaderDict]], [[HTTPHeaderDictItemView]], [[HasGettableStringKeys]], [[MutableMapping]], [[None]], [[OrderedDict]], [[RLock]], [[RecentlyUsedContainer]], [[_Sentinel]], [[typing.Callable]], [[typing.MutableMapping]], [[typing.OrderedDict]]

### Interface
- `ensure_can_construct_http_header_dict`(potential: object) -> ValidHTTPHeaderSource | None
- `__init__`(headers: ValidHTTPHeaderSource | None) -> Any
- `__getitem__`(key: str) -> str
- `__setitem__`(key: str, val: str) -> None
- `__delitem__`(key: str) -> None
- `__len__`() -> int
- `__iter__`() -> typing.Iterator[str]
- `clear`() -> None
- `keys`() -> typing.Iterator[str]
- `__contains__`(key: object) -> bool
- `setdefault`(key: str, default: str) -> str
- `__eq__`(other: object) -> bool
- `__ne__`(other: object) -> bool
- `discard`(key: str) -> None
- `add`(key: str, val: str) -> None
- `extend`() -> None
- `getlist`(key: str, default: _Sentinel | _DT) -> list[str] | _DT
- `_prepare_for_method_change`() -> Self
- `__repr__`() -> str
- `_copy_from`(other: HTTPHeaderDict) -> None
- `copy`() -> Self
- `iteritems`() -> typing.Iterator[tuple[<ast.Tuple object at 0x11bd032d0>]]
- `itermerged`() -> typing.Iterator[tuple[<ast.Tuple object at 0x11bd109d0>]]
- `items`() -> HTTPHeaderDictItemView
- `_has_value_for_header`(header_name: str, potential_value: str) -> bool
- `__ior__`(other: object) -> HTTPHeaderDict
- `__or__`(other: object) -> Self
- `__ror__`(other: object) -> Self

### Implementation
**_Sentinel**

**RecentlyUsedContainer**
  - _container: typing.OrderedDict[<ast.Tuple object at 0x11bc98850>]
  - _maxsize: int
  - dispose_func: typing.Callable[<ast.Tuple object at 0x11bc98250>] | None
  - lock: RLock
**HTTPHeaderDictItemView**
  - _headers: HTTPHeaderDict
**HTTPHeaderDict**
  - _container: typing.MutableMapping[<ast.Tuple object at 0x11bccb850>]
**HasGettableStringKeys**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/_collections.py`  
**Dependencies**: `__future__.annotations`, `typing`, `collections.OrderedDict`, `enum.Enum`, `enum.auto`, `threading.RLock`, `typing.Protocol`, `typing_extensions.Self`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.exceptions
:::{doc} HTTPError:18
Base exception used by this module.
:::
:::{doc} HTTPWarning:22
Base warning used by this module.
:::
:::{doc} PoolError:29
Base exception for errors caused within a pool.
:::
:::{doc} RequestError:41
Base exception for PoolErrors that have associated URLs.
:::
:::{doc} SSLError:53
Raised when SSL certificate fails in an HTTPS connection.
:::
:::{doc} ProxyError:57
Raised when the connection to a proxy fails.
:::
:::{doc} DecodeError:68
Raised when automatic decoding based on Content-Type fails.
:::
:::{doc} ProtocolError:72
Raised when something unexpected happens mid-request/response.
:::
:::{doc} MaxRetryError:83
Raised when the maximum number of retries is exceeded.

:param pool: The connection pool
:type pool: :class:`~urllib3.connectionpool.HTTPConnectionPool`
:param str url: The requested Url
:param reason: The underlying error
:type reason: :class:`Exception`
:::
:::{doc} HostChangedError:104
Raised when an existing pool gets a request for a foreign host.
:::
:::{doc} TimeoutStateError:115
Raised when passing an invalid state to a timeout
:::
:::{doc} TimeoutError:119
Raised when a socket timeout error occurs.

Catching this error will catch both :exc:`ReadTimeoutErrors
<ReadTimeoutError>` and :exc:`ConnectTimeoutErrors <ConnectTimeoutError>`.
:::
:::{doc} ReadTimeoutError:127
Raised when a socket timeout occurs while receiving data from a server
:::
:::{doc} ConnectTimeoutError:133
Raised when a socket timeout occurs while connecting to a server
:::
:::{doc} NewConnectionError:137
Raised when we fail to establish a new connection. Usually ECONNREFUSED.
:::
:::{doc} NameResolutionError:160
Raised when host name resolution fails.
:::
:::{doc} EmptyPoolError:172
Raised when a pool runs out of connections and no more are allowed.
:::
:::{doc} FullPoolError:176
Raised when we try to add a connection to a full pool in blocking mode.
:::
:::{doc} ClosedPoolError:180
Raised when a request enters a pool after the pool has been closed.
:::
:::{doc} LocationValueError:184
Raised when there is something wrong with a given URL input.
:::
:::{doc} LocationParseError:188
Raised when get_host or similar fails to parse the URL input.
:::
:::{doc} URLSchemeUnknown:198
Raised when a URL input has an unsupported scheme.
:::
:::{doc} ResponseError:208
Used as a container for an error reason supplied in a MaxRetryError.
:::
:::{doc} SecurityWarning:215
Warned when performing security reducing actions
:::
:::{doc} InsecureRequestWarning:219
Warned when making an unverified HTTPS request.
:::
:::{doc} NotOpenSSLWarning:223
Warned when using unsupported SSL library
:::
:::{doc} SystemTimeWarning:227
Warned when system time is suspected to be wrong
:::
:::{doc} InsecurePlatformWarning:231
Warned when certain TLS/SSL configuration is not available on a platform.
:::
:::{doc} DependencyWarning:235
Warned when an attempt is made to import a module with missing optional
dependencies.
:::
:::{doc} ResponseNotChunked:242
Response needs to be chunked in order to read it as chunks.
:::
:::{doc} BodyNotHttplibCompatible:246
Body should be :class:`http.client.HTTPResponse` like
(have an fp attribute which returns raw chunks) for read_chunked().
:::
:::{doc} IncompleteRead:253
Response length doesn't match expected Content-Length

Subclass of :class:`http.client.IncompleteRead` to allow int value
for ``partial`` to avoid creating large objects on streamed reads.
:::
:::{doc} InvalidChunkLength:275
Invalid chunk length in a chunked response.
:::
:::{doc} InvalidHeader:291
The header provided was somehow invalid.
:::
:::{doc} ProxySchemeUnknown:295
ProxyManager does not support the supplied scheme
:::
:::{doc} ProxySchemeUnsupported:312
Fetching HTTPS resources through HTTPS proxies is unsupported
:::
:::{doc} HeaderParsingError:316
Raised by assert_header_parsing, but we convert it to a log.warning statement.
:::
:::{doc} UnrewindableBodyError:326
urllib3 encountered an error when trying to rewind a body
:::
**Imports**: `__future__.annotations`, `socket`, `typing`, `warnings`, `email.errors.MessageDefect`, `http.client.IncompleteRead`, `connection.HTTPConnection`, `connectionpool.ConnectionPool`, `response.HTTPResponse`, `util.retry.Retry`
**Type References**: [[BodyNotHttplibCompatible]], [[ClosedPoolError]], [[ConnectTimeoutError]], [[DecodeError]], [[DependencyWarning]], [[EmptyPoolError]], [[Exception]], [[FullPoolError]], [[HTTPError]], [[HTTPWarning]], [[HeaderParsingError]], [[HostChangedError]], [[IncompleteRead]], [[InsecurePlatformWarning]], [[InsecureRequestWarning]], [[InvalidChunkLength]], [[InvalidHeader]], [[LocationParseError]], [[LocationValueError]], [[MaxRetryError]], [[NameResolutionError]], [[NewConnectionError]], [[NotOpenSSLWarning]], [[PoolError]], [[ProtocolError]], [[ProxyError]], [[ProxySchemeUnknown]], [[ProxySchemeUnsupported]], [[ReadTimeoutError]], [[RequestError]], [[ResponseError]], [[ResponseNotChunked]], [[SSLError]], [[SecurityWarning]], [[SystemTimeWarning]], [[TimeoutError]], [[TimeoutStateError]], [[URLSchemeUnknown]], [[UnrewindableBodyError]]

### Interface
- `__init__`(defects: list[MessageDefect], unparsed_data: bytes | str | None) -> None
- `__reduce__`() -> _TYPE_REDUCE_RESULT
- `pool`() -> HTTPConnection
- `__repr__`() -> str

### Implementation
**HTTPError**

**HTTPWarning**

**PoolError**

**RequestError**

**SSLError**

**ProxyError**
  - original_error: Exception
**DecodeError**

**ProtocolError**

**MaxRetryError**

**HostChangedError**

**TimeoutStateError**

**TimeoutError**

**ReadTimeoutError**

**ConnectTimeoutError**

**NewConnectionError**

**NameResolutionError**

**EmptyPoolError**

**FullPoolError**

**ClosedPoolError**

**LocationValueError**

**LocationParseError**

**URLSchemeUnknown**

**ResponseError**

**SecurityWarning**

**InsecureRequestWarning**

**NotOpenSSLWarning**

**SystemTimeWarning**

**InsecurePlatformWarning**

**DependencyWarning**

**ResponseNotChunked**

**BodyNotHttplibCompatible**

**IncompleteRead**
  - partial: int
  - expected: int
**InvalidChunkLength**

**InvalidHeader**

**ProxySchemeUnknown**

**ProxySchemeUnsupported**

**HeaderParsingError**

**UnrewindableBodyError**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/exceptions.py`  
**Dependencies**: `__future__.annotations`, `socket`, `typing`, `warnings`, `email.errors.MessageDefect`, `http.client.IncompleteRead`, `connection.HTTPConnection`, `connectionpool.ConnectionPool`, `response.HTTPResponse`, `util.retry.Retry`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3._request_methods
:::{doc} RequestMethods:20
Convenience mixin for classes who implement a :meth:`urlopen` method, such
as :class:`urllib3.HTTPConnectionPool` and
:class:`urllib3.PoolManager`.

Provides behavior for making common types of HTTP request methods and
decides which type of request field encoding to use.

Specifically,

:meth:`.request_encode_url` is for sending requests whose fields are
encoded in the URL (such as GET, HEAD, DELETE).

:meth:`.request_encode_body` is for sending requests whose fields are
encoded in the *body* of the request using multipart or www-form-urlencoded
(such as for POST, PUT, PATCH).

:meth:`.request` is for making any kind of request, it will look up the
appropriate encoding format and use one of the above two methods to make
the request.

Initializer parameters:

:param headers:
    Headers to include with all requests, unless other headers are given
    explicitly.
:::
**Imports**: `__future__.annotations`, `json`, `typing`, `urllib.parse.urlencode`, `_base_connection._TYPE_BODY`, `_collections.HTTPHeaderDict`, `filepost._TYPE_FIELDS`, `filepost.encode_multipart_formdata`, `response.BaseHTTPResponse`
**Type References**: [[Any]], [[RequestMethods]], [[typing.Any]]

### Interface
- `__init__`(headers: typing.Mapping[<ast.Tuple object at 0x11bd65890>] | None) -> None
- `urlopen`(method: str, url: str, body: _TYPE_BODY | None, headers: typing.Mapping[<ast.Tuple object at 0x11bd64550>] | None, encode_multipart: bool, multipart_boundary: str | None) -> BaseHTTPResponse
- `request`(method: str, url: str, body: _TYPE_BODY | None, fields: _TYPE_FIELDS | None, headers: typing.Mapping[<ast.Tuple object at 0x11bd62d10>] | None, json: typing.Any | None) -> BaseHTTPResponse
- `request_encode_url`(method: str, url: str, fields: _TYPE_ENCODE_URL_FIELDS | None, headers: typing.Mapping[<ast.Tuple object at 0x11bd689d0>] | None) -> BaseHTTPResponse
- `request_encode_body`(method: str, url: str, fields: _TYPE_FIELDS | None, headers: typing.Mapping[<ast.Tuple object at 0x11bd72110>] | None, encode_multipart: bool, multipart_boundary: str | None) -> BaseHTTPResponse

### Implementation
**RequestMethods**
  - extra_kw: dict[<ast.Tuple object at 0x11bd73310>]
  - body: bytes | str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/_request_methods.py`  
**Dependencies**: `__future__.annotations`, `json`, `typing`, `urllib.parse.urlencode`, `_base_connection._TYPE_BODY`, `_collections.HTTPHeaderDict`, `filepost._TYPE_FIELDS`, `filepost.encode_multipart_formdata`, `response.BaseHTTPResponse`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.connectionpool
:::{doc} ConnectionPool:67
Base class for all connection pools, such as
:class:`.HTTPConnectionPool` and :class:`.HTTPSConnectionPool`.

.. note::
   ConnectionPool.urlopen() does not normalize or percent-encode target URIs
   which is useful if your target server doesn't support percent-encoded
   target URIs.
:::
:::{doc} HTTPConnectionPool:120
Thread-safe connection pool for one host.

:param host:
    Host used for this HTTP Connection (e.g. "localhost"), passed into
    :class:`http.client.HTTPConnection`.

:param port:
    Port used for this HTTP Connection (None is equivalent to 80), passed
    into :class:`http.client.HTTPConnection`.

:param timeout:
    Socket timeout in seconds for each individual connection. This can
    be a float or integer, which sets the timeout for the HTTP request,
    or an instance of :class:`urllib3.util.Timeout` which gives you more
    fine-grained control over request timeouts. After the constructor has
    been parsed, this is always a `urllib3.util.Timeout` object.

:param maxsize:
    Number of connections to save that can be reused. More than 1 is useful
    in multithreaded situations. If ``block`` is set to False, more
    connections will be created but they will not be saved once they've
    been used.

:param block:
    If set to True, no more than ``maxsize`` connections will be used at
    a time. When no free connections are available, the call will block
    until a connection has been released. This is a useful side effect for
    particular multithreaded situations where one does not want to use more
    than maxsize connections per host to prevent flooding.

:param headers:
    Headers to include with all requests, unless other headers are given
    explicitly.

:param retries:
    Retry configuration to use by default with requests in this pool.

:param _proxy:
    Parsed proxy URL, should not be used directly, instead, see
    :class:`urllib3.ProxyManager`

:param _proxy_headers:
    A dictionary with proxy headers, should not be used directly,
    instead, see :class:`urllib3.ProxyManager`

:param \**conn_kw:
    Additional parameters are used to create fresh :class:`urllib3.connection.HTTPConnection`,
    :class:`urllib3.connection.HTTPSConnection` instances.
:::
:::{doc} HTTPSConnectionPool:963
Same as :class:`.HTTPConnectionPool`, but HTTPS.

:class:`.HTTPSConnection` uses one of ``assert_fingerprint``,
``assert_hostname`` and ``host`` in this order to verify connections.
If ``assert_hostname`` is False, no verification is done.

The ``key_file``, ``cert_file``, ``cert_reqs``, ``ca_certs``,
``ca_cert_dir``, ``ssl_version``, ``key_password`` are only used if :mod:`ssl`
is available and are fed into :meth:`urllib3.util.ssl_wrap_socket` to upgrade
the connection socket into an SSL socket.
:::
:::{doc} connection_from_url:1108
Given a url, return an :class:`.ConnectionPool` instance of its host.

This is a shortcut for not having to parse out the scheme, host, and port
of the url before creating an :class:`.ConnectionPool` instance.

:param url:
    Absolute URL string that must include the scheme. Port is optional.

:param \**kw:
    Passes additional parameters to the constructor of the appropriate
    :class:`.ConnectionPool`. Useful for specifying things like
    timeout, maxsize, headers, etc.

Example::

    >>> conn = connection_from_url('http://google.com/')
    >>> r = conn.request('GET', '/')
:::
:::{doc} _normalize_host:1145
Normalize hosts for comparisons and use with sockets.
:::
:::{doc} _url_from_pool:1163
Returns the URL from a given connection pool. This is mainly used for testing and logging.
:::
:::{doc} _close_pool_connections:1170
Drains a queue of connections and closes each one.
:::
**Imports**: `__future__.annotations`, `errno`, `logging`, `queue`, `sys`, `typing`, `warnings`, `weakref`, `socket.timeout`, `types.TracebackType`, `_base_connection._TYPE_BODY`, `_collections.HTTPHeaderDict`, `_request_methods.RequestMethods`, `connection.BaseSSLError`, `connection.BrokenPipeError`, `connection.DummyConnection`, `connection.HTTPConnection`, `connection.HTTPException`, `connection.HTTPSConnection`, `connection.ProxyConfig`, `connection._wrap_proxy_error`, `connection.port_by_scheme`, `exceptions.ClosedPoolError`, `exceptions.EmptyPoolError`, `exceptions.FullPoolError`, `exceptions.HostChangedError`, `exceptions.InsecureRequestWarning`, `exceptions.LocationValueError`, `exceptions.MaxRetryError`, `exceptions.NewConnectionError`, `exceptions.ProtocolError`, `exceptions.ProxyError`, `exceptions.ReadTimeoutError`, `exceptions.SSLError`, `exceptions.TimeoutError`, `response.BaseHTTPResponse`, `util.connection.is_connection_dropped`, `util.proxy.connection_requires_http_tunnel`, `util.request._TYPE_BODY_POSITION`, `util.request.set_file_position`, `util.retry.Retry`, `util.ssl_match_hostname.CertificateError`, `util.timeout._DEFAULT_TIMEOUT`, `util.timeout._TYPE_DEFAULT`, `util.timeout.Timeout`, `util.url.Url`, `util.url._encode_target`, `util.url._normalize_host`, `util.url.parse_url`, `util.util.to_str`, `ssl`, `typing_extensions.Self`, `_base_connection.BaseHTTPConnection`, `_base_connection.BaseHTTPSConnection`
**Type References**: [[BaseHTTPConnection]], [[BaseHTTPSConnection]], [[ConnectionPool]], [[Exception]], [[HTTPConnectionPool]], [[HTTPSConnectionPool]], [[None]]

### Interface
- `connection_from_url`(url: str) -> HTTPConnectionPool
- `_normalize_host`(host: str | None, scheme: str | None) -> str | None
- `_url_from_pool`(pool: HTTPConnectionPool | HTTPSConnectionPool, path: str | None) -> str
- `_close_pool_connections`(pool: queue.LifoQueue[typing.Any]) -> None
- `__init__`(host: str, port: int | None, timeout: _TYPE_TIMEOUT | None, maxsize: int, block: bool, headers: typing.Mapping[<ast.Tuple object at 0x11be3b250>] | None, retries: Retry | bool | int | None, _proxy: Url | None, _proxy_headers: typing.Mapping[<ast.Tuple object at 0x11be3bd10>] | None, key_file: str | None, cert_file: str | None, cert_reqs: int | str | None, key_password: str | None, ca_certs: str | None, ssl_version: int | str | None, ssl_minimum_version: ssl.TLSVersion | None, ssl_maximum_version: ssl.TLSVersion | None, assert_hostname: str | typing.Literal[False] | None, assert_fingerprint: str | None, ca_cert_dir: str | None) -> None
- `__str__`() -> str
- `__enter__`() -> Self
- `__exit__`(exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: TracebackType | None) -> typing.Literal[False]
- `close`() -> None
- `_new_conn`() -> BaseHTTPSConnection
- `_get_conn`(timeout: float | None) -> BaseHTTPConnection
- `_put_conn`(conn: BaseHTTPConnection | None) -> None
- `_validate_conn`(conn: BaseHTTPConnection) -> None
- `_prepare_proxy`(conn: HTTPSConnection) -> None
- `_get_timeout`(timeout: _TYPE_TIMEOUT) -> Timeout
- `_raise_timeout`(err: BaseSSLError | OSError | SocketTimeout, url: str, timeout_value: _TYPE_TIMEOUT | None) -> None
- `_make_request`(conn: BaseHTTPConnection, method: str, url: str, body: _TYPE_BODY | None, headers: typing.Mapping[<ast.Tuple object at 0x11bdd6850>] | None, retries: Retry | None, timeout: _TYPE_TIMEOUT, chunked: bool, response_conn: BaseHTTPConnection | None, preload_content: bool, decode_content: bool, enforce_content_length: bool) -> BaseHTTPResponse
- `is_same_host`(url: str) -> bool
- `urlopen`(method: str, url: str, body: _TYPE_BODY | None, headers: typing.Mapping[<ast.Tuple object at 0x11bdb0890>] | None, retries: Retry | bool | int | None, redirect: bool, assert_same_host: bool, timeout: _TYPE_TIMEOUT, pool_timeout: int | None, release_conn: bool | None, chunked: bool, body_pos: _TYPE_BODY_POSITION | None, preload_content: bool, decode_content: bool) -> BaseHTTPResponse

### Implementation
**ConnectionPool**
  - scheme: str | None
**HTTPConnectionPool**
  - ConnectionCls: type[BaseHTTPConnection] | type[BaseHTTPSConnection]
  - new_e: Exception
**HTTPSConnectionPool**
  - ConnectionCls: type[BaseHTTPSConnection]
  - actual_host: str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/connectionpool.py`  
**Dependencies**: `__future__.annotations`, `errno`, `logging`, `queue`, `sys`, `typing`, `warnings`, `weakref`, `socket.timeout`, `types.TracebackType`, `_base_connection._TYPE_BODY`, `_collections.HTTPHeaderDict`, `_request_methods.RequestMethods`, `connection.BaseSSLError`, `connection.BrokenPipeError`, `connection.DummyConnection`, `connection.HTTPConnection`, `connection.HTTPException`, `connection.HTTPSConnection`, `connection.ProxyConfig`, `connection._wrap_proxy_error`, `connection.port_by_scheme`, `exceptions.ClosedPoolError`, `exceptions.EmptyPoolError`, `exceptions.FullPoolError`, `exceptions.HostChangedError`, `exceptions.InsecureRequestWarning`, `exceptions.LocationValueError`, `exceptions.MaxRetryError`, `exceptions.NewConnectionError`, `exceptions.ProtocolError`, `exceptions.ProxyError`, `exceptions.ReadTimeoutError`, `exceptions.SSLError`, `exceptions.TimeoutError`, `response.BaseHTTPResponse`, `util.connection.is_connection_dropped`, `util.proxy.connection_requires_http_tunnel`, `util.request._TYPE_BODY_POSITION`, `util.request.set_file_position`, `util.retry.Retry`, `util.ssl_match_hostname.CertificateError`, `util.timeout._DEFAULT_TIMEOUT`, `util.timeout._TYPE_DEFAULT`, `util.timeout.Timeout`, `util.url.Url`, `util.url._encode_target`, `util.url._normalize_host`, `util.url.parse_url`, `util.util.to_str`, `ssl`, `typing_extensions.Self`, `_base_connection.BaseHTTPConnection`, `_base_connection.BaseHTTPSConnection`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.iniconfig._version



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/iniconfig/_version.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.iniconfig

**Imports**: `__future__.annotations`, `typing.Callable`, `typing.Iterator`, `typing.Mapping`, `typing.Optional`, `typing.Tuple`, `typing.TypeVar`, `typing.Union`, `typing.TYPE_CHECKING`, `typing.NoReturn`, `typing.NamedTuple`, `typing.overload`, `typing.cast`, `os`, `exceptions.ParseError`, `_parse`, `_parse.COMMENTCHARS`, `_parse.iscommentline`, `typing_extensions.Final`
**Type References**: [[Final]], [[IniConfig]], [[Mapping]], [[SectionWrapper]]

### Interface
- `__init__`(path: str | os.PathLike[str], data: str | None, encoding: str) -> None
- `lineof`(key: str) -> int
- `get`(section: str, name: str, default: _D | None, convert: Callable[<ast.Tuple object at 0x11beaeb10>] | None) -> _D | _T | str | None
- `__getitem__`(name: str) -> SectionWrapper
- `__iter__`() -> Iterator[SectionWrapper]
- `items`() -> Iterator[tuple[<ast.Tuple object at 0x11be8d6d0>]]
- `__contains__`(arg: str) -> bool

### Implementation
**SectionWrapper**
  - config: Final[IniConfig]
  - name: Final[str]
  - section: Mapping[<ast.Tuple object at 0x11be8f790>]
**IniConfig**
  - path: Final[str]
  - sections: Final[Mapping[<ast.Tuple object at 0x11be8cd90>]]
  - sections_data: dict[<ast.Tuple object at 0x11be7e310>]
  - value: str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/iniconfig/__init__.py`  
**Dependencies**: `__future__.annotations`, `typing.Callable`, `typing.Iterator`, `typing.Mapping`, `typing.Optional`, `typing.Tuple`, `typing.TypeVar`, `typing.Union`, `typing.TYPE_CHECKING`, `typing.NoReturn`, `typing.NamedTuple`, `typing.overload`, `typing.cast`, `os`, `exceptions.ParseError`, `_parse`, `_parse.COMMENTCHARS`, `_parse.iscommentline`, `typing_extensions.Final`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.iniconfig._parse

**Imports**: `__future__.annotations`, `exceptions.ParseError`, `typing.NamedTuple`
**Type References**: [[None]], [[_ParsedLine]]

### Interface
- `parse_lines`(path: str, line_iter: list[str]) -> list[_ParsedLine]
- `_parseline`(path: str, line: str, lineno: int) -> tuple[<ast.Tuple object at 0x11becfb50>]
- `iscommentline`(line: str) -> bool

### Implementation
**_ParsedLine**
  - lineno: int
  - section: str | None
  - name: str | None
  - value: str | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/iniconfig/_parse.py`  
**Dependencies**: `__future__.annotations`, `exceptions.ParseError`, `typing.NamedTuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.iniconfig.exceptions

**Imports**: `__future__.annotations`, `typing.TYPE_CHECKING`, `typing_extensions.Final`
**Type References**: [[Final]], [[ParseError]]

### Interface
- `__init__`(path: str, lineno: int, msg: str) -> None
- `__str__`() -> str

### Implementation
**ParseError**
  - path: Final[str]
  - lineno: Final[int]
  - msg: Final[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/iniconfig/exceptions.py`  
**Dependencies**: `__future__.annotations`, `typing.TYPE_CHECKING`, `typing_extensions.Final`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.files
:::{doc} find_project_root:54
Return a directory containing .git, .hg, or pyproject.toml.

pyproject.toml files are only considered if they contain a [tool.black]
section and are ignored otherwise.

That directory will be a common parent of all files and directories
passed in `srcs`.

If no directory in the tree contains a marker that would specify it's the
project root, the root of the file system is returned.

Returns a two-tuple with the first element as the project root path and
the second element as a string describing the method by which the
project root was discovered.
:::
:::{doc} find_pyproject_toml:105
Find the absolute filepath to a pyproject.toml if it exists
:::
:::{doc} parse_pyproject_toml:128
Parse a pyproject toml file, pulling out relevant parts for Black.

If parsing fails, will raise a tomllib.TOMLDecodeError.
:::
:::{doc} infer_target_version:145
Infer Black's target version from the project metadata in pyproject.toml.

Supports the PyPA standard format (PEP 621):
https://packaging.python.org/en/latest/specifications/declaring-project-metadata/#requires-python

If the target version cannot be inferred, returns None.
:::
:::{doc} parse_req_python_version:170
Parse a version string (i.e. ``"3.7"``) to a list of TargetVersion.

If parsing fails, will raise a packaging.version.InvalidVersion error.
If the parsed version cannot be mapped to a valid TargetVersion, returns None.
:::
:::{doc} parse_req_python_specifier:185
Parse a specifier string (i.e. ``">=3.7,<3.10"``) to a list of TargetVersion.

If parsing fails, will raise a packaging.specifiers.InvalidSpecifier error.
If the parsed specifier cannot be mapped to a valid TargetVersion, returns None.
:::
:::{doc} strip_specifier_set:202
Strip minor versions for some specifiers in the specifier set.

For background on version specifiers, see PEP 440:
https://peps.python.org/pep-0440/#version-specifiers
:::
:::{doc} find_user_pyproject_toml:228
Return the path to the top-level user configuration for black.

This looks for ~\.black on Windows and ~/.config/black on Linux and other
Unix systems.

May raise:
- RuntimeError: if the current user has no homedir
- PermissionError: if the current process cannot access the user's homedir
:::
:::{doc} get_gitignore:248
Return a PathSpec matching gitignore content if present.
:::
:::{doc} resolves_outside_root_or_cannot_stat:262
Returns whether the path is a symbolic link that points outside the
root directory. Also returns True if we failed to resolve the path.
:::
:::{doc} gen_python_files:327
Generate all files under `path` whose paths are not excluded by the
`exclude_regex`, `extend_exclude`, or `force_exclude` regexes,
but are included by the `include` regex.

Symbolic links pointing outside of the `root` directory are ignored.

`report` is where output about exclusions goes.
:::
:::{doc} wrap_stream_for_windows:416
Wrap stream with colorama's wrap_stream so colors are shown on Windows.

If `colorama` is unavailable, the original stream is returned unmodified.
Otherwise, the `wrap_stream()` function determines whether the stream needs
to be wrapped for a Windows environment and will accordingly either return
an `AnsiToWin32` wrapper or the original stream.
:::
**Imports**: `io`, `os`, `sys`, `functools.lru_cache`, `pathlib.Path`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Iterable`, `typing.Iterator`, `typing.Optional`, `typing.Pattern`, `typing.Sequence`, `typing.Union`, `mypy_extensions.mypyc_attr`, `packaging.specifiers.InvalidSpecifier`, `packaging.specifiers.Specifier`, `packaging.specifiers.SpecifierSet`, `packaging.version.InvalidVersion`, `packaging.version.Version`, `pathspec.PathSpec`, `pathspec.patterns.gitwildmatch.GitWildMatchPatternError`, `black.handle_ipynb_magics.jupyter_dependencies_are_installed`, `black.mode.TargetVersion`, `black.output.err`, `black.report.Report`, `tomli`, `colorama`, `tomllib`, `colorama.initialise.wrap_stream`, `tomli`
**Type References**: [[Any]]

### Interface
- `_load_toml`(path: [Union[<ast.Tuple object at 0x11c814890>]](#union)) -> dict[<ast.Tuple object at 0x11c803c90>]
- `_cached_resolve`(path: Path) -> Path
- `find_project_root`(srcs: Sequence[str], stdin_filename: [Optional[str]](#optional)) -> tuple[<ast.Tuple object at 0x11bef3cd0>]
- `find_pyproject_toml`(path_search_start: tuple[<ast.Tuple object at 0x11bef37d0>], stdin_filename: [Optional[str]](#optional)) -> [Optional[str]](#optional)
- `parse_pyproject_toml`(path_config: str) -> dict[<ast.Tuple object at 0x11bee98d0>]
- `infer_target_version`(pyproject_toml: dict[<ast.Tuple object at 0x11bee9390>]) -> [Optional[list[TargetVersion]]](#optional)
- `parse_req_python_version`(requires_python: str) -> [Optional[list[TargetVersion]]](#optional)
- `parse_req_python_specifier`(requires_python: str) -> [Optional[list[TargetVersion]]](#optional)
- `strip_specifier_set`(specifier_set: SpecifierSet) -> SpecifierSet
- `find_user_pyproject_toml`() -> Path
- `get_gitignore`(root: Path) -> PathSpec
- `resolves_outside_root_or_cannot_stat`(path: Path, root: Path, report: [Optional[Report]](#optional)) -> bool
- `best_effort_relative_path`(path: Path, root: Path) -> Path
- `_path_is_ignored`(root_relative_path: str, root: Path, gitignore_dict: dict[<ast.Tuple object at 0x11c846c90>]) -> bool
- `path_is_excluded`(normalized_path: str, pattern: [Optional[Pattern[str]]](#optional)) -> bool
- `gen_python_files`(paths: Iterable[Path], root: Path, include: Pattern[str], exclude: Pattern[str], extend_exclude: [Optional[Pattern[str]]](#optional), force_exclude: [Optional[Pattern[str]]](#optional), report: Report, gitignore_dict: [Optional[dict[<ast.Tuple object at 0x11c84f090>]]](#optional)) -> Iterator[Path]
- `wrap_stream_for_windows`(f: io.TextIOWrapper) -> [Union[<ast.Tuple object at 0x11c867190>]](#union)
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/files.py`  
**Dependencies**: `io`, `os`, `sys`, `functools.lru_cache`, `pathlib.Path`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Iterable`, `typing.Iterator`, `typing.Optional`, `typing.Pattern`, `typing.Sequence`, `typing.Union`, `mypy_extensions.mypyc_attr`, `packaging.specifiers.InvalidSpecifier`, `packaging.specifiers.Specifier`, `packaging.specifiers.SpecifierSet`, `packaging.version.InvalidVersion`, `packaging.version.Version`, `pathspec.PathSpec`, `pathspec.patterns.gitwildmatch.GitWildMatchPatternError`, `black.handle_ipynb_magics.jupyter_dependencies_are_installed`, `black.mode.TargetVersion`, `black.output.err`, `black.report.Report`, `tomli`, `colorama`, `tomllib`, `colorama.initialise.wrap_stream`, `tomli`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.parsing
:::{doc} InvalidInput:20
Raised when input source code fails all parse attempts.
:::
:::{doc} lib2to3_parse:55
Given a string with source, return the lib2to3 Node.
:::
:::{doc} lib2to3_unparse:115
Given a lib2to3 node, return its string representation.
:::
:::{doc} ASTSafetyError:121
Raised when Black's generated code is not equivalent to the old AST.
:::
:::{doc} stringify_ast:169
Simple visitor generating strings to compare ASTs by content.
:::
**Imports**: `ast`, `sys`, `warnings`, `typing.Collection`, `typing.Iterator`, `black.mode.VERSION_TO_FEATURES`, `black.mode.Feature`, `black.mode.TargetVersion`, `black.mode.supports_feature`, `black.nodes.syms`, `blib2to3.pygram`, `blib2to3.pgen2.driver`, `blib2to3.pgen2.grammar.Grammar`, `blib2to3.pgen2.parse.ParseError`, `blib2to3.pgen2.tokenize.TokenError`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`
**Type References**: [[ASTSafetyError]], [[InvalidInput]]

### Interface
- `get_grammars`(target_versions: set[TargetVersion]) -> list[Grammar]
- `lib2to3_parse`(src_txt: str, target_versions: Collection[TargetVersion]) -> Node
- `matches_grammar`(src_txt: str, grammar: Grammar) -> bool
- `lib2to3_unparse`(node: Node) -> str
- `_parse_single_version`(src: str, version: tuple[<ast.Tuple object at 0x11c871990>]) -> ast.AST
- `parse_ast`(src: str) -> ast.AST
- `_normalize`(lineend: str, value: str) -> str
- `stringify_ast`(node: ast.AST) -> Iterator[str]
- `_stringify_ast_with_new_parent`(node: ast.AST, parent_stack: list[ast.AST], new_parent: ast.AST) -> Iterator[str]
- `_stringify_ast`(node: ast.AST, parent_stack: list[ast.AST]) -> Iterator[str]

### Implementation
**InvalidInput**

**ASTSafetyError**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/parsing.py`  
**Dependencies**: `ast`, `sys`, `warnings`, `typing.Collection`, `typing.Iterator`, `black.mode.VERSION_TO_FEATURES`, `black.mode.Feature`, `black.mode.TargetVersion`, `black.mode.supports_feature`, `black.nodes.syms`, `blib2to3.pygram`, `blib2to3.pgen2.driver`, `blib2to3.pgen2.grammar.Grammar`, `blib2to3.pgen2.parse.ParseError`, `blib2to3.pgen2.tokenize.TokenError`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.handle_ipynb_magics
:::{doc} validate_cell:69
Check that cell does not already contain TransformerManager transformations,
    or non-Python cell magics, which might cause tokenizer_rt to break because of
    indentations.

    If a cell contains ``!ls``, then it'll be transformed to
    ``get_ipython().system('ls')``. However, if the cell originally contained
    ``get_ipython().system('ls')``, then it would get transformed in the same way:

        >>> TransformerManager().transform_cell("get_ipython().system('ls')")
        "get_ipython().system('ls')
"
        >>> TransformerManager().transform_cell("!ls")
        "get_ipython().system('ls')
"

    Due to the impossibility of safely roundtripping in such situations, cells
    containing transformed magics will be ignored.
    
:::
:::{doc} remove_trailing_semicolon:97
Remove trailing semicolon from Jupyter notebook cell.

For example,

    fig, ax = plt.subplots()
    ax.plot(x_data, y_data);  # plot data

would become

    fig, ax = plt.subplots()
    ax.plot(x_data, y_data)  # plot data

Mirrors the logic in `quiet` from `IPython.core.displayhook`, but uses
``tokenize_rt`` so that round-tripping works fine.
:::
:::{doc} put_trailing_semicolon_back:129
Put trailing semicolon back if cell originally had it.

Mirrors the logic in `quiet` from `IPython.core.displayhook`, but uses
``tokenize_rt`` so that round-tripping works fine.
:::
:::{doc} mask_cell:153
Mask IPython magics so content becomes parseable Python code.

For example,

    %matplotlib inline
    'foo'

becomes

    "25716f358c32750e"
    'foo'

The replacements are returned, along with the transformed code.
:::
:::{doc} get_token:193
Return randomly generated token to mask IPython magic with.

For example, if 'magic' was `%matplotlib inline`, then a possible
token to mask it with would be `"43fdd17f7e5ddc83"`. The token
will be the same length as the magic, and we make sure that it was
not already present anywhere else in the cell.
:::
:::{doc} replace_cell_magics:219
Replace cell magic with token.

Note that 'src' will already have been processed by IPython's
TransformerManager().transform_cell.

Example,

    get_ipython().run_cell_magic('t', '-n1', 'ls =!ls\n')

becomes

    "a794."
    ls =!ls

The replacement, along with the transformed code, is returned.
:::
:::{doc} replace_magics:250
Replace magics within body of cell.

Note that 'src' will already have been processed by IPython's
TransformerManager().transform_cell.

Example, this

    get_ipython().run_line_magic('matplotlib', 'inline')
    'foo'

becomes

    "5e67db56d490fd39"
    'foo'

The replacement, along with the transformed code, are returned.
:::
:::{doc} unmask_cell:291
Remove replacements from cell.

For example

    "9b20"
    foo = bar

becomes

    %%time
    foo = bar
:::
:::{doc} _get_code_start:309
Provides the first line where the code starts.

Iterates over lines of code until it finds the first line that doesn't
contain only empty spaces and comments. It removes any empty spaces at the
start of the line and returns it. If such line doesn't exist, it returns an
empty string.
:::
:::{doc} _is_ipython_magic:324
Check if attribute is IPython magic.

Note that the source of the abstract syntax tree
will already have been processed by IPython's
TransformerManager().transform_cell.
:::
:::{doc} CellMagicFinder:361
Find cell magics.

Note that the source of the abstract syntax tree
will already have been processed by IPython's
TransformerManager().transform_cell.

For example,

    %%time

    foo()

would have been transformed to

    get_ipython().run_cell_magic('time', '', 'foo()\n')

and we look for instances of the latter.
:::
:::{doc} MagicFinder:403
Visit cell to look for get_ipython calls.

Note that the source of the abstract syntax tree
will already have been processed by IPython's
TransformerManager().transform_cell.

For example,

    %matplotlib inline

would have been transformed to

    get_ipython().run_line_magic('matplotlib', 'inline')

and we look for instances of the latter (and likewise for other
types of magics).
:::
**Imports**: `ast`, `collections`, `dataclasses`, `re`, `secrets`, `sys`, `functools.lru_cache`, `importlib.util.find_spec`, `typing.Optional`, `black.mode.Mode`, `black.output.out`, `black.report.NothingChanged`, `typing.TypeGuard`, `typing_extensions.TypeGuard`, `tokenize_rt.reversed_enumerate`, `tokenize_rt.src_to_tokens`, `tokenize_rt.tokens_to_src`, `tokenize_rt.reversed_enumerate`, `tokenize_rt.src_to_tokens`, `tokenize_rt.tokens_to_src`, `IPython.core.inputtransformer2.TransformerManager`
**Type References**: [[CellMagic]], [[CellMagicFinder]], [[MagicFinder]], [[OffsetAndMagic]], [[Optional]], [[Replacement]]

### Interface
- `jupyter_dependencies_are_installed`() -> bool
- `validate_cell`(src: str, mode: Mode) -> None
- `remove_trailing_semicolon`(src: str) -> tuple[<ast.Tuple object at 0x11c8c1b90>]
- `put_trailing_semicolon_back`(src: str, has_trailing_semicolon: bool) -> str
- `mask_cell`(src: str) -> tuple[<ast.Tuple object at 0x11c8b7710>]
- `get_token`(src: str, magic: str) -> str
- `replace_cell_magics`(src: str) -> tuple[<ast.Tuple object at 0x11c8f5950>]
- `replace_magics`(src: str) -> tuple[<ast.Tuple object at 0x11c8d1e10>]
- `unmask_cell`(src: str, replacements: list[Replacement]) -> str
- `_get_code_start`(src: str) -> str
- `_is_ipython_magic`(node: ast.expr) -> TypeGuard[ast.Attribute]
- `_get_str_args`(args: list[ast.expr]) -> list[str]
- `header`() -> str
- `__init__`() -> None
- `visit_Expr`(node: ast.Expr) -> None
- `visit_Assign`(node: ast.Assign) -> None

### Implementation
**Replacement**
  - mask: str
  - src: str
**CellMagic**
  - name: str
  - params: Optional[str]
  - body: str
**CellMagicFinder**

**OffsetAndMagic**
  - col_offset: int
  - magic: str
**MagicFinder**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/handle_ipynb_magics.py`  
**Dependencies**: `ast`, `collections`, `dataclasses`, `re`, `secrets`, `sys`, `functools.lru_cache`, `importlib.util.find_spec`, `typing.Optional`, `black.mode.Mode`, `black.output.out`, `black.report.NothingChanged`, `typing.TypeGuard`, `typing_extensions.TypeGuard`, `tokenize_rt.reversed_enumerate`, `tokenize_rt.src_to_tokens`, `tokenize_rt.tokens_to_src`, `tokenize_rt.reversed_enumerate`, `tokenize_rt.src_to_tokens`, `tokenize_rt.tokens_to_src`, `IPython.core.inputtransformer2.TransformerManager`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.rusty

**Imports**: `typing.Generic`, `typing.TypeVar`, `typing.Union`
**Type References**: [[Err]], [[Ok]]

### Interface
- `__init__`(e: E) -> None
- `ok`() -> T
- `err`() -> E

### Implementation
**Ok**

**Err**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/rusty.py`  
**Dependencies**: `typing.Generic`, `typing.TypeVar`, `typing.Union`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.concurrency
:::{doc} maybe_install_uvloop:27
If our environment has uvloop installed we use it.

This is called only from command-line entry points to avoid
interfering with the parent process if Black is used as a library.
:::
:::{doc} cancel:41
asyncio signal handler that cancels all `tasks` and reports to stderr.
:::
:::{doc} shutdown:48
Cancel all pending tasks on `loop`, wait for them, and close the loop.
:::
:::{doc} reformat_many:71
Reformat multiple files using a ProcessPoolExecutor.
:::
**Imports**: `asyncio`, `logging`, `os`, `signal`, `sys`, `traceback`, `concurrent.futures.Executor`, `concurrent.futures.ProcessPoolExecutor`, `concurrent.futures.ThreadPoolExecutor`, `multiprocessing.Manager`, `pathlib.Path`, `typing.Any`, `typing.Iterable`, `typing.Optional`, `mypy_extensions.mypyc_attr`, `black.WriteBack`, `black.format_file_in_place`, `black.cache.Cache`, `black.mode.Mode`, `black.output.err`, `black.report.Changed`, `black.report.Report`, `uvloop`
**Type References**: [[Executor]]

### Interface
- `maybe_install_uvloop`() -> None
- `cancel`(tasks: Iterable[asyncio.Future[Any]]) -> None
- `shutdown`(loop: asyncio.AbstractEventLoop) -> None
- `reformat_many`(sources: set[Path], fast: bool, write_back: WriteBack, mode: Mode, report: Report, workers: [Optional[int]](#optional)) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/concurrency.py`  
**Dependencies**: `asyncio`, `logging`, `os`, `signal`, `sys`, `traceback`, `concurrent.futures.Executor`, `concurrent.futures.ProcessPoolExecutor`, `concurrent.futures.ThreadPoolExecutor`, `multiprocessing.Manager`, `pathlib.Path`, `typing.Any`, `typing.Iterable`, `typing.Optional`, `mypy_extensions.mypyc_attr`, `black.WriteBack`, `black.format_file_in_place`, `black.cache.Cache`, `black.mode.Mode`, `black.output.err`, `black.report.Changed`, `black.report.Report`, `uvloop`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.cache
:::{doc} get_cache_dir:30
Get the cache directory used by black.

Users can customize this directory on all systems using `BLACK_CACHE_DIR`
environment variable. By default, the cache directory is the user cache directory
under the black application.

This result is immediately set to a constant `black.cache.CACHE_DIR` as to avoid
repeated calls.
:::
**Imports**: `hashlib`, `os`, `pickle`, `sys`, `tempfile`, `dataclasses.dataclass`, `dataclasses.field`, `pathlib.Path`, `typing.Iterable`, `typing.NamedTuple`, `platformdirs.user_cache_dir`, `_black_version.version`, `black.mode.Mode`, `black.output.err`, `typing.Self`, `typing_extensions.Self`
**Type References**: [[Cache]], [[FileData]], [[Mode]], [[Path]]

### Interface
- `get_cache_dir`() -> Path
- `get_cache_file`(mode: Mode) -> Path
- `read`(mode: Mode) -> Self
- `hash_digest`(path: Path) -> str
- `get_file_data`(path: Path) -> FileData
- `is_changed`(source: Path) -> bool
- `filtered_cached`(sources: Iterable[Path]) -> tuple[<ast.Tuple object at 0x11c984c50>]
- `write`(sources: Iterable[Path]) -> None

### Implementation
**FileData**
  - st_mtime: float
  - st_size: int
  - hash: str
**Cache**
  - mode: Mode
  - cache_file: Path
  - file_data: dict[<ast.Tuple object at 0x11c967910>]
  - changed: set[Path]
  - done: set[Path]
  - data: dict[<ast.Tuple object at 0x11c9871d0>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/cache.py`  
**Dependencies**: `hashlib`, `os`, `pickle`, `sys`, `tempfile`, `dataclasses.dataclass`, `dataclasses.field`, `pathlib.Path`, `typing.Iterable`, `typing.NamedTuple`, `platformdirs.user_cache_dir`, `_black_version.version`, `black.mode.Mode`, `black.output.err`, `typing.Self`, `typing_extensions.Self`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black
:::{doc} read_pyproject_toml:119
Inject Black configuration from "pyproject.toml" into defaults in `ctx`.

Returns the path to a successfully found and read configuration file, None
otherwise.
:::
:::{doc} target_version_option_callback:200
Compute the target versions from a --target-version flag.

This is its own function because mypy couldn't infer the type correctly
when it was a lambda, causing mypyc trouble.
:::
:::{doc} enable_unstable_feature_callback:211
Compute the features from an --enable-unstable-feature flag.
:::
:::{doc} re_compile_maybe_verbose:218
Compile a regular expression string in `regex`.

If it contains newlines, use verbose mode.
:::
:::{doc} main:514
The uncompromising code formatter.
:::
:::{doc} get_sources:729
Compute the set of files to be formatted.
:::
:::{doc} path_empty:821
Exit if there is no `src` provided for formatting
:::
:::{doc} reformat_code:833
Reformat and print out `content` without spawning child processes.
Similar to `reformat_one`, but for string content.

`fast`, `write_back`, and `mode` options are passed to
:func:`format_file_in_place` or :func:`format_stdin_to_stdout`.
:::
:::{doc} reformat_one:866
Reformat a single file under `src` without spawning child processes.

`fast`, `write_back`, and `mode` options are passed to
:func:`format_file_in_place` or :func:`format_stdin_to_stdout`.
:::
:::{doc} format_file_in_place:922
Format file under `src` path. Return True if changed.

If `write_back` is DIFF, write a diff to stdout. If it is YES, write reformatted
code to the file.
`mode` and `fast` options are passed to :func:`format_file_contents`.
:::
:::{doc} format_stdin_to_stdout:990
Format file on stdin. Return True if changed.

If content is None, it's read from sys.stdin.

If `write_back` is YES, write reformatted code back to stdout. If it is DIFF,
write a diff to stdout. The `mode` argument is passed to
:func:`format_file_contents`.
:::
:::{doc} check_stability_and_equivalence:1042
Perform stability and equivalence checks.

Raise AssertionError if source and destination contents are not
equivalent, or if a second pass of the formatter would format the
content differently.
:::
:::{doc} format_file_contents:1059
Reformat contents of a file and return new contents.

If `fast` is False, additionally confirm that the reformatted code is
valid by calling :func:`assert_equivalent` and :func:`assert_stable` on it.
`mode` is passed to :func:`format_str`.
:::
:::{doc} format_cell:1087
Format code in given cell of Jupyter notebook.

General idea is:

  - if cell has trailing semicolon, remove it;
  - if cell has IPython magics, mask them;
  - format cell;
  - reinstate IPython magics;
  - reinstate trailing semicolon (if originally present);
  - strip trailing newlines.

Cells with syntax errors will not be processed, as they
could potentially be automagics or multi-line magics, which
are currently not supported.
:::
:::{doc} validate_metadata:1124
If notebook is marked as non-Python, don't format it.

All notebook metadata fields are optional, see
https://nbformat.readthedocs.io/en/latest/format_description.html. So
if a notebook has empty metadata, we will try to parse it anyway.
:::
:::{doc} format_ipynb_string:1136
Format Jupyter notebook.

Operate cell-by-cell, only on code cells, only for Python notebooks.
If the ``.ipynb`` originally had a trailing newline, it'll be preserved.
:::
:::{doc} format_str:1168
Reformat a string and return new contents.

`mode` determines formatting options, such as how many characters per line are
allowed.  Example:

>>> import black
>>> print(black.format_str("def f(arg:str='')->None:...", mode=black.Mode()))
def f(arg: str = "") -> None:
    ...

A more complex example:

>>> print(
...   black.format_str(
...     "def f(arg:str='')->None: hey",
...     mode=black.Mode(
...       target_versions={black.TargetVersion.PY36},
...       line_length=10,
...       string_normalization=False,
...       is_pyi=False,
...     ),
...   ),
... )
def f(
    arg: str = '',
) -> None:
    hey
:::
:::{doc} decode_bytes:1269
Return a tuple of (decoded_contents, encoding, newline).

`newline` is either CRLF or LF but `decoded_contents` is decoded with
universal newlines (i.e. only contains LF).
:::
:::{doc} get_features_used:1286
Return a set of (relatively) new Python features used in this file.

Currently looking for:
- f-strings;
- self-documenting expressions in f-strings (f"{x=}");
- underscores in numeric literals;
- trailing commas after * or ** in function signatures and calls;
- positional only arguments in function signatures and lambdas;
- assignment expression;
- relaxed decorator syntax;
- usage of __future__ flags (annotations);
- print / exec statements;
- parenthesized context managers;
- match statements;
- except* clause;
- variadic generics;
:::
:::{doc} _contains_asexpr:1427
Return True if `node` contains an as-pattern.
:::
:::{doc} detect_target_versions:1443
Detect the version to target based on the nodes used.
:::
:::{doc} get_future_imports:1453
Return a set of __future__ imports in the file.
:::
:::{doc} assert_equivalent:1510
Raise AssertionError if `src` and `dst` aren't equivalent.
:::
:::{doc} assert_stable:1543
Raise AssertionError if `dst` reformats differently the second time.
:::
:::{doc} nullcontext:1572
Return an empty context manager.

To be used like `nullcontext` in Python 3.7.
:::
**Imports**: `io`, `json`, `platform`, `re`, `sys`, `tokenize`, `traceback`, `contextlib.contextmanager`, `dataclasses.replace`, `datetime.datetime`, `datetime.timezone`, `enum.Enum`, `json.decoder.JSONDecodeError`, `pathlib.Path`, `typing.Any`, `typing.Collection`, `typing.Generator`, `typing.Iterator`, `typing.MutableMapping`, `typing.Optional`, `typing.Pattern`, `typing.Sequence`, `typing.Sized`, `typing.Union`, `click`, `click.core.ParameterSource`, `mypy_extensions.mypyc_attr`, `pathspec.PathSpec`, `pathspec.patterns.gitwildmatch.GitWildMatchPatternError`, `_black_version.version`, `black.cache.Cache`, `black.comments.normalize_fmt_off`, `black.const.DEFAULT_EXCLUDES`, `black.const.DEFAULT_INCLUDES`, `black.const.DEFAULT_LINE_LENGTH`, `black.const.STDIN_PLACEHOLDER`, `black.files.best_effort_relative_path`, `black.files.find_project_root`, `black.files.find_pyproject_toml`, `black.files.find_user_pyproject_toml`, `black.files.gen_python_files`, `black.files.get_gitignore`, `black.files.parse_pyproject_toml`, `black.files.path_is_excluded`, `black.files.resolves_outside_root_or_cannot_stat`, `black.files.wrap_stream_for_windows`, `black.handle_ipynb_magics.PYTHON_CELL_MAGICS`, `black.handle_ipynb_magics.jupyter_dependencies_are_installed`, `black.handle_ipynb_magics.mask_cell`, `black.handle_ipynb_magics.put_trailing_semicolon_back`, `black.handle_ipynb_magics.remove_trailing_semicolon`, `black.handle_ipynb_magics.unmask_cell`, `black.handle_ipynb_magics.validate_cell`, `black.linegen.LN`, `black.linegen.LineGenerator`, `black.linegen.transform_line`, `black.lines.EmptyLineTracker`, `black.lines.LinesBlock`, `black.mode.FUTURE_FLAG_TO_FEATURE`, `black.mode.VERSION_TO_FEATURES`, `black.mode.Feature`, `black.mode.Mode`, `black.mode.Preview`, `black.mode.TargetVersion`, `black.mode.supports_feature`, `black.nodes.STARS`, `black.nodes.is_number_token`, `black.nodes.is_simple_decorator_expression`, `black.nodes.syms`, `black.output.color_diff`, `black.output.diff`, `black.output.dump_to_file`, `black.output.err`, `black.output.ipynb_diff`, `black.output.out`, `black.parsing.ASTSafetyError`, `black.parsing.InvalidInput`, `black.parsing.lib2to3_parse`, `black.parsing.parse_ast`, `black.parsing.stringify_ast`, `black.ranges.adjusted_lines`, `black.ranges.convert_unchanged_lines`, `black.ranges.parse_line_ranges`, `black.ranges.sanitized_lines`, `black.report.Changed`, `black.report.NothingChanged`, `black.report.Report`, `blib2to3.pgen2.token`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`, `multiprocessing.freeze_support`, `black.concurrency.reformat_many`
**Type References**: [[Any]], [[Feature]], [[LinesBlock]], [[Optional]], [[Path]], [[Pattern]], [[WriteBack]]

### Interface
- `read_pyproject_toml`(ctx: click.Context, param: click.Parameter, value: [Optional[str]](#optional)) -> [Optional[str]](#optional)
- `spellcheck_pyproject_toml_keys`(ctx: click.Context, config_keys: list[str], config_file_path: str) -> None
- `target_version_option_callback`(c: click.Context, p: [Union[<ast.Tuple object at 0x11c9984d0>]](#union), v: tuple[<ast.Tuple object at 0x11c998090>]) -> list[TargetVersion]
- `enable_unstable_feature_callback`(c: click.Context, p: [Union[<ast.Tuple object at 0x11c997010>]](#union), v: tuple[<ast.Tuple object at 0x11c996bd0>]) -> list[Preview]
- `re_compile_maybe_verbose`(regex: str) -> Pattern[str]
- `validate_regex`(ctx: click.Context, param: click.Parameter, value: [Optional[str]](#optional)) -> [Optional[Pattern[str]]](#optional)
- `main`(ctx: click.Context, code: [Optional[str]](#optional), line_length: int, target_version: list[TargetVersion], check: bool, diff: bool, line_ranges: Sequence[str], color: bool, fast: bool, pyi: bool, ipynb: bool, python_cell_magics: Sequence[str], skip_source_first_line: bool, skip_string_normalization: bool, skip_magic_trailing_comma: bool, preview: bool, unstable: bool, enable_unstable_feature: list[Preview], quiet: bool, verbose: bool, required_version: [Optional[str]](#optional), include: Pattern[str], exclude: [Optional[Pattern[str]]](#optional), extend_exclude: [Optional[Pattern[str]]](#optional), force_exclude: [Optional[Pattern[str]]](#optional), stdin_filename: [Optional[str]](#optional), workers: [Optional[int]](#optional), src: tuple[<ast.Tuple object at 0x11ca21950>], config: [Optional[str]](#optional)) -> None
- `get_sources`() -> set[Path]
- `path_empty`(src: Sized, msg: str, quiet: bool, verbose: bool, ctx: click.Context) -> None
- `reformat_code`(content: str, fast: bool, write_back: WriteBack, mode: Mode, report: Report) -> None
- `reformat_one`(src: Path, fast: bool, write_back: WriteBack, mode: Mode, report: Report) -> None
- `format_file_in_place`(src: Path, fast: bool, mode: Mode, write_back: WriteBack, lock: Any) -> bool
- `format_stdin_to_stdout`(fast: bool) -> bool
- `check_stability_and_equivalence`(src_contents: str, dst_contents: str) -> None
- `format_file_contents`(src_contents: str) -> FileContent
- `format_cell`(src: str) -> str
- `validate_metadata`(nb: MutableMapping[<ast.Tuple object at 0x11cab6690>]) -> None
- `format_ipynb_string`(src_contents: str) -> FileContent
- `format_str`(src_contents: str) -> str
- `_format_str_once`(src_contents: str) -> str
- `decode_bytes`(src: bytes) -> tuple[<ast.Tuple object at 0x11caec6d0>]
- `get_features_used`(node: Node) -> set[Feature]
- `_contains_asexpr`(node: [Union[<ast.Tuple object at 0x11cb245d0>]](#union)) -> bool
- `detect_target_versions`(node: Node) -> set[TargetVersion]
- `get_future_imports`(node: Node) -> set[str]
- `_black_info`() -> str
- `assert_equivalent`(src: str, dst: str) -> None
- `assert_stable`(src: str, dst: str, mode: Mode) -> None
- `nullcontext`() -> Iterator[None]
- `patched_main`() -> None
- `from_configuration`() -> WriteBack
- `get_imports_from_children`(children: list[LN]) -> Generator[<ast.Tuple object at 0x11cb33bd0>]

### Implementation
**WriteBack**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/__init__.py`  
**Dependencies**: `io`, `json`, `platform`, `re`, `sys`, `tokenize`, `traceback`, `contextlib.contextmanager`, `dataclasses.replace`, `datetime.datetime`, `datetime.timezone`, `enum.Enum`, `json.decoder.JSONDecodeError`, `pathlib.Path`, `typing.Any`, `typing.Collection`, `typing.Generator`, `typing.Iterator`, `typing.MutableMapping`, `typing.Optional`, `typing.Pattern`, `typing.Sequence`, `typing.Sized`, `typing.Union`, `click`, `click.core.ParameterSource`, `mypy_extensions.mypyc_attr`, `pathspec.PathSpec`, `pathspec.patterns.gitwildmatch.GitWildMatchPatternError`, `_black_version.version`, `black.cache.Cache`, `black.comments.normalize_fmt_off`, `black.const.DEFAULT_EXCLUDES`, `black.const.DEFAULT_INCLUDES`, `black.const.DEFAULT_LINE_LENGTH`, `black.const.STDIN_PLACEHOLDER`, `black.files.best_effort_relative_path`, `black.files.find_project_root`, `black.files.find_pyproject_toml`, `black.files.find_user_pyproject_toml`, `black.files.gen_python_files`, `black.files.get_gitignore`, `black.files.parse_pyproject_toml`, `black.files.path_is_excluded`, `black.files.resolves_outside_root_or_cannot_stat`, `black.files.wrap_stream_for_windows`, `black.handle_ipynb_magics.PYTHON_CELL_MAGICS`, `black.handle_ipynb_magics.jupyter_dependencies_are_installed`, `black.handle_ipynb_magics.mask_cell`, `black.handle_ipynb_magics.put_trailing_semicolon_back`, `black.handle_ipynb_magics.remove_trailing_semicolon`, `black.handle_ipynb_magics.unmask_cell`, `black.handle_ipynb_magics.validate_cell`, `black.linegen.LN`, `black.linegen.LineGenerator`, `black.linegen.transform_line`, `black.lines.EmptyLineTracker`, `black.lines.LinesBlock`, `black.mode.FUTURE_FLAG_TO_FEATURE`, `black.mode.VERSION_TO_FEATURES`, `black.mode.Feature`, `black.mode.Mode`, `black.mode.Preview`, `black.mode.TargetVersion`, `black.mode.supports_feature`, `black.nodes.STARS`, `black.nodes.is_number_token`, `black.nodes.is_simple_decorator_expression`, `black.nodes.syms`, `black.output.color_diff`, `black.output.diff`, `black.output.dump_to_file`, `black.output.err`, `black.output.ipynb_diff`, `black.output.out`, `black.parsing.ASTSafetyError`, `black.parsing.InvalidInput`, `black.parsing.lib2to3_parse`, `black.parsing.parse_ast`, `black.parsing.stringify_ast`, `black.ranges.adjusted_lines`, `black.ranges.convert_unchanged_lines`, `black.ranges.parse_line_ranges`, `black.ranges.sanitized_lines`, `black.report.Changed`, `black.report.NothingChanged`, `black.report.Report`, `blib2to3.pgen2.token`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`, `multiprocessing.freeze_support`, `black.concurrency.reformat_many`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.brackets
:::{doc} BracketMatchError:54
Raised when an opening bracket is unable to be matched to a closing bracket.
:::
:::{doc} BracketTracker:59
Keeps track of brackets on a line.
:::
:::{doc} is_split_after_delimiter:218
Return the priority of the `leaf` delimiter, given a line break after it.

The delimiter priorities returned here are from those delimiters that would
cause a line break after themselves.

Higher numbers are higher priority.
:::
:::{doc} is_split_before_delimiter:232
Return the priority of the `leaf` delimiter, given a line break before it.

The delimiter priorities returned here are from those delimiters that would
cause a line break before themselves.

Higher numbers are higher priority.
:::
:::{doc} max_delimiter_priority_in_atom:328
Return maximum delimiter priority inside `node`.

This is specific to atoms with contents contained in a pair of parentheses.
If `node` isn't an atom or there are no enclosing parentheses, returns 0.
:::
:::{doc} get_leaves_inside_matching_brackets:356
Return leaves that are inside matching brackets.

The input `leaves` can have non-matching brackets at the head or tail parts.
Matching brackets are included.
:::
**Imports**: `dataclasses.dataclass`, `dataclasses.field`, `typing.Final`, `typing.Iterable`, `typing.Optional`, `typing.Sequence`, `typing.Union`, `black.nodes.BRACKET`, `black.nodes.CLOSING_BRACKETS`, `black.nodes.COMPARATORS`, `black.nodes.LOGIC_OPERATORS`, `black.nodes.MATH_OPERATORS`, `black.nodes.OPENING_BRACKETS`, `black.nodes.UNPACKING_PARENTS`, `black.nodes.VARARGS_PARENTS`, `black.nodes.is_vararg`, `black.nodes.syms`, `blib2to3.pgen2.token`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`
**Type References**: [[BracketMatchError]], [[BracketTracker]], [[Depth]], [[Final]], [[Leaf]], [[LeafID]], [[NodeType]], [[Optional]], [[Priority]]

### Interface
- `is_split_after_delimiter`(leaf: Leaf) -> Priority
- `is_split_before_delimiter`(leaf: Leaf, previous: [Optional[Leaf]](#optional)) -> Priority
- `max_delimiter_priority_in_atom`(node: LN) -> Priority
- `get_leaves_inside_matching_brackets`(leaves: Sequence[Leaf]) -> set[LeafID]
- `mark`(leaf: Leaf) -> None
- `any_open_for_or_lambda`() -> bool
- `any_open_brackets`() -> bool
- `max_delimiter_priority`(exclude: Iterable[LeafID]) -> Priority
- `delimiter_count_with_priority`(priority: Priority) -> int
- `maybe_increment_for_loop_variable`(leaf: Leaf) -> bool
- `maybe_decrement_after_for_loop_variable`(leaf: Leaf) -> bool
- `maybe_increment_lambda_arguments`(leaf: Leaf) -> bool
- `maybe_decrement_after_lambda_arguments`(leaf: Leaf) -> bool
- `get_open_lsqb`() -> [Optional[Leaf]](#optional)

### Implementation
**BracketMatchError**

**BracketTracker**
  - depth: int
  - bracket_match: dict[<ast.Tuple object at 0x11cb63050>]
  - delimiters: dict[<ast.Tuple object at 0x11cb627d0>]
  - previous: Optional[Leaf]
  - _for_loop_depths: list[int]
  - _lambda_argument_depths: list[int]
  - invisible: list[Leaf]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/brackets.py`  
**Dependencies**: `dataclasses.dataclass`, `dataclasses.field`, `typing.Final`, `typing.Iterable`, `typing.Optional`, `typing.Sequence`, `typing.Union`, `black.nodes.BRACKET`, `black.nodes.CLOSING_BRACKETS`, `black.nodes.COMPARATORS`, `black.nodes.LOGIC_OPERATORS`, `black.nodes.MATH_OPERATORS`, `black.nodes.OPENING_BRACKETS`, `black.nodes.UNPACKING_PARENTS`, `black.nodes.VARARGS_PARENTS`, `black.nodes.is_vararg`, `black.nodes.syms`, `blib2to3.pgen2.token`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.lines
:::{doc} Line:39
Holds leaves and comments. Can be printed with `str(line)`.
:::
:::{doc} RHSResult:501
Intermediate split result from a right hand split.
:::
:::{doc} LinesBlock:512
Class that holds information about a block of formatted lines.

This is introduced so that the EmptyLineTracker can look behind the standalone
comments and adjust their empty lines for class or def lines.
:::
:::{doc} EmptyLineTracker:534
Provides a stateful method that returns the number of potential extra
empty lines needed before and after the currently processed line.

Note: this tracker works on lines that haven't been split yet.  It assumes
the prefix of the first leaf consists of optional newlines.  Those newlines
are consumed by `maybe_empty_lines()` and included in the computation.
:::
:::{doc} enumerate_reversed:764
Like `reversed(enumerate(sequence))` if that were possible.
:::
:::{doc} append_leaves:772
Append leaves (taken from @old_line) to @new_line, making sure to fix the
underlying Node structure where appropriate.

All of the leaves in @leaves are duplicated. The duplicates are then
appended to @new_line and used to replace their originals in the underlying
Node structure. Any comments attached to the old leaves are reattached to
the new leaves.

Pre-conditions:
    set(@leaves) is a subset of set(@old_line.leaves).
:::
:::{doc} is_line_short_enough:796
For non-multiline strings, return True if `line` is no longer than `line_length`.
For multiline strings, looks at the context around `line` to determine
if it should be inlined or split up.
Uses the provided `line_str` rendering, if any, otherwise computes a new one.
:::
:::{doc} can_be_split:887
Return False if the line cannot be split *for sure*.

This is not an exhaustive search but a cheap heuristic that we can use to
avoid some unfortunate formattings (mostly around wrapping unsplittable code
in unnecessary parentheses).
:::
:::{doc} can_omit_invisible_parens:923
Does `rhs.body` have a shape safe to reformat without optional parens around it?

Returns True for only a subset of potentially nice looking formattings but
the point is to not return false positives that end up producing lines that
are too long.
:::
:::{doc} _can_omit_opening_paren:1020
See `can_omit_invisible_parens`.
:::
:::{doc} _can_omit_closing_paren:1045
See `can_omit_invisible_parens`.
:::
:::{doc} line_to_string:1062
Returns the string representation of @line.

WARNING: This is known to be computationally expensive.
:::
**Imports**: `itertools`, `math`, `dataclasses.dataclass`, `dataclasses.field`, `typing.Callable`, `typing.Iterator`, `typing.Optional`, `typing.Sequence`, `typing.TypeVar`, `typing.Union`, `typing.cast`, `black.brackets.COMMA_PRIORITY`, `black.brackets.DOT_PRIORITY`, `black.brackets.BracketTracker`, `black.mode.Mode`, `black.mode.Preview`, `black.nodes.BRACKETS`, `black.nodes.CLOSING_BRACKETS`, `black.nodes.OPENING_BRACKETS`, `black.nodes.STANDALONE_COMMENT`, `black.nodes.TEST_DESCENDANTS`, `black.nodes.child_towards`, `black.nodes.is_docstring`, `black.nodes.is_import`, `black.nodes.is_multiline_string`, `black.nodes.is_one_sequence_between`, `black.nodes.is_type_comment`, `black.nodes.is_type_ignore_comment`, `black.nodes.is_with_or_async_with_stmt`, `black.nodes.make_simple_prefix`, `black.nodes.replace_child`, `black.nodes.syms`, `black.nodes.whitespace`, `black.strings.str_width`, `blib2to3.pgen2.token`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`
**Type References**: [[BracketTracker]], [[EmptyLineTracker]], [[LN]], [[Leaf]], [[LeafID]], [[Line]], [[LinesBlock]], [[Mode]], [[Optional]], [[RHSResult]], [[Union]]

### Interface
- `enumerate_reversed`(sequence: Sequence[T]) -> Iterator[tuple[<ast.Tuple object at 0x11ccbad10>]]
- `append_leaves`(new_line: Line, old_line: Line, leaves: list[Leaf], preformatted: bool) -> None
- `is_line_short_enough`(line: Line) -> bool
- `can_be_split`(line: Line) -> bool
- `can_omit_invisible_parens`(rhs: RHSResult, line_length: int) -> bool
- `_can_omit_opening_paren`(line: Line) -> bool
- `_can_omit_closing_paren`(line: Line) -> bool
- `line_to_string`(line: Line) -> str
- `append`(leaf: Leaf, preformatted: bool, track_bracket: bool) -> None
- `append_safe`(leaf: Leaf, preformatted: bool) -> None
- `is_comment`() -> bool
- `is_decorator`() -> bool
- `is_import`() -> bool
- `is_with_or_async_with_stmt`() -> bool
- `is_class`() -> bool
- `is_stub_class`() -> bool
- `is_def`() -> bool
- `is_stub_def`() -> bool
- `is_class_paren_empty`() -> bool
- `_is_triple_quoted_string`() -> bool
- `is_docstring`() -> bool
- `is_chained_assignment`() -> bool
- `opens_block`() -> bool
- `is_fmt_pass_converted`() -> bool
- `contains_standalone_comments`() -> bool
- `contains_implicit_multiline_string_with_comments`() -> bool
- `contains_uncollapsable_type_comments`() -> bool
- `contains_unsplittable_type_ignore`() -> bool
- `contains_multiline_strings`() -> bool
- `has_magic_trailing_comma`(closing: Leaf) -> bool
- `append_comment`(comment: Leaf) -> bool
- `comments_after`(leaf: Leaf) -> list[Leaf]
- `remove_trailing_comma`() -> None
- `is_complex_subscript`(leaf: Leaf) -> bool
- `enumerate_with_length`(is_reversed: bool) -> Iterator[tuple[<ast.Tuple object at 0x11cc58190>]]
- `clone`() -> Line
- `__str__`() -> str
- `__bool__`() -> bool
- `all_lines`() -> list[str]
- `maybe_empty_lines`(current_line: Line) -> LinesBlock
- `_maybe_empty_lines`(current_line: Line) -> tuple[<ast.Tuple object at 0x11cc97f50>]
- `_maybe_empty_lines_for_class_or_def`(current_line: Line, before: int, user_had_newline: bool) -> tuple[<ast.Tuple object at 0x11ccb9650>]

### Implementation
**Line**
  - mode: Mode
  - depth: int
  - leaves: list[Leaf]
  - comments: dict[<ast.Tuple object at 0x11cbe7c90>]
  - bracket_tracker: BracketTracker
  - inside_brackets: bool
  - should_split_rhs: bool
  - magic_trailing_comma: Optional[Leaf]
  - second_leaf: Optional[Leaf]
**RHSResult**
  - head: Line
  - body: Line
  - tail: Line
  - opening_bracket: Leaf
  - closing_bracket: Leaf
**LinesBlock**
  - mode: Mode
  - previous_block: Optional[LinesBlock]
  - original_line: Line
  - before: int
  - content_lines: list[str]
  - after: int
  - form_feed: bool
**EmptyLineTracker**
  - mode: Mode
  - previous_line: Optional[Line]
  - previous_block: Optional[LinesBlock]
  - previous_defs: list[Line]
  - semantic_leading_comment: Optional[LinesBlock]
  - comment_to_add_newlines: Optional[LinesBlock]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/lines.py`  
**Dependencies**: `itertools`, `math`, `dataclasses.dataclass`, `dataclasses.field`, `typing.Callable`, `typing.Iterator`, `typing.Optional`, `typing.Sequence`, `typing.TypeVar`, `typing.Union`, `typing.cast`, `black.brackets.COMMA_PRIORITY`, `black.brackets.DOT_PRIORITY`, `black.brackets.BracketTracker`, `black.mode.Mode`, `black.mode.Preview`, `black.nodes.BRACKETS`, `black.nodes.CLOSING_BRACKETS`, `black.nodes.OPENING_BRACKETS`, `black.nodes.STANDALONE_COMMENT`, `black.nodes.TEST_DESCENDANTS`, `black.nodes.child_towards`, `black.nodes.is_docstring`, `black.nodes.is_import`, `black.nodes.is_multiline_string`, `black.nodes.is_one_sequence_between`, `black.nodes.is_type_comment`, `black.nodes.is_type_ignore_comment`, `black.nodes.is_with_or_async_with_stmt`, `black.nodes.make_simple_prefix`, `black.nodes.replace_child`, `black.nodes.syms`, `black.nodes.whitespace`, `black.strings.str_width`, `blib2to3.pgen2.token`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.mode
:::{doc} Preview:196
Individual preview style features.
:::
:::{doc} Deprecated:228
Visible deprecation warning.
:::
**Imports**: `dataclasses.dataclass`, `dataclasses.field`, `enum.Enum`, `enum.auto`, `hashlib.sha256`, `operator.attrgetter`, `typing.Final`, `black.const.DEFAULT_LINE_LENGTH`
**Type References**: [[Deprecated]], [[Feature]], [[Final]], [[Mode]], [[Preview]], [[TargetVersion]]

### Interface
- `supports_feature`(target_versions: set[TargetVersion], feature: Feature) -> bool
- `pretty`() -> str
- `__contains__`(feature: Preview) -> bool
- `get_cache_key`() -> str

### Implementation
**TargetVersion**

**Feature**

**Preview**

**Deprecated**

**Mode**
  - target_versions: set[TargetVersion]
  - line_length: int
  - string_normalization: bool
  - is_pyi: bool
  - is_ipynb: bool
  - skip_source_first_line: bool
  - magic_trailing_comma: bool
  - python_cell_magics: set[str]
  - preview: bool
  - unstable: bool
  - enabled_features: set[Preview]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/mode.py`  
**Dependencies**: `dataclasses.dataclass`, `dataclasses.field`, `enum.Enum`, `enum.auto`, `hashlib.sha256`, `operator.attrgetter`, `typing.Final`, `black.const.DEFAULT_LINE_LENGTH`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black._width_table

**Imports**: `typing.Final`
**Type References**: [[Final]]

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/_width_table.py`  
**Dependencies**: `typing.Final`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.ranges
:::{doc} is_valid_line_range:43
Returns whether the line range is valid.
:::
:::{doc} sanitized_lines:48
Returns the valid line ranges for the given source.

This removes ranges that are entirely outside the valid lines.

Other ranges are normalized so that the start values are at least 1 and the
end values are at most the (1-based) index of the last source line.
:::
:::{doc} adjusted_lines:76
Returns the adjusted line ranges based on edits from the original code.

This computes the new line ranges by diffing original_source and
modified_source, and adjust each range based on how the range overlaps with
the diffs.

Note the diff can contain lines outside of the original line ranges. This can
happen when the formatting has to be done in adjacent to maintain consistent
local results. For example:

1. def my_func(arg1, arg2,
2.             arg3,):
3.   pass

If it restricts to line 2-2, it can't simply reformat line 2, it also has
to reformat line 1:

1. def my_func(
2.     arg1,
3.     arg2,
4.     arg3,
5. ):
6.   pass

In this case, we will expand the line ranges to also include the whole diff
block.

Args:
  lines: a collection of line ranges.
  original_source: the original source.
  modified_source: the modified source.
:::
:::{doc} convert_unchanged_lines:156
Converts unchanged lines to STANDALONE_COMMENT.

    The idea is similar to how `# fmt: on/off` is implemented. It also converts the
    nodes between those markers as a single `STANDALONE_COMMENT` leaf node with
    the unformatted code as its value. `STANDALONE_COMMENT` is a "fake" token
    that will be formatted as-is with its prefix normalized.

    Here we perform two passes:

    1. Visit the top-level statements, and convert them to a single
       `STANDALONE_COMMENT` when unchanged. This speeds up formatting when some
       of the top-level statements aren't changed.
    2. Convert unchanged "unwrapped lines" to `STANDALONE_COMMENT` nodes line by
       line. "unwrapped lines" are divided by the `NEWLINE` token. e.g. a
       multi-line statement is *one* "unwrapped line" that ends with `NEWLINE`,
       even though this statement itself can span multiple lines, and the
       tokenizer only sees the last '
' as the `NEWLINE` token.

    NOTE: During pass (2), comment prefixes and indentations are ALWAYS
    normalized even when the lines aren't changed. This is fixable by moving
    more formatting to pass (1). However, it's hard to get it correct when
    incorrect indentations are used. So we defer this to future optimizations.
    
:::
:::{doc} _TopLevelStatementsVisitor:198
A node visitor that converts unchanged top-level statements to
STANDALONE_COMMENT.

This is used in addition to _convert_unchanged_line_by_line, to
speed up formatting when there are unchanged top-level
classes/functions/statements.
:::
:::{doc} _convert_unchanged_line_by_line:252
Converts unchanged to STANDALONE_COMMENT line by line.
:::
:::{doc} _convert_node_to_standalone_comment:306
Convert node to STANDALONE_COMMENT by modifying the tree inline.
:::
:::{doc} _convert_nodes_to_standalone_comment:346
Convert nodes to STANDALONE_COMMENT by modifying the tree inline.
:::
:::{doc} _leaf_line_end:376
Returns the line number of the leaf node's last line.
:::
:::{doc} _get_line_range:385
Returns the line range of this node or list of nodes.
:::
:::{doc} _LinesMapping:413
1-based lines mapping from original source to modified source.

Lines [original_start, original_end] from original source
are mapped to [modified_start, modified_end].

The ranges are inclusive on both ends.
:::
:::{doc} _calculate_lines_mappings:430
Returns a sequence of _LinesMapping by diffing the sources.

For example, given the following diff:
    import re
  - def func(arg1,
  -   arg2, arg3):
  + def func(arg1, arg2, arg3):
      pass
It returns the following mappings:
  original -> modified
   (1, 1)  ->  (1, 1), is_changed_block=False (the "import re" line)
   (2, 3)  ->  (2, 2), is_changed_block=True (the diff)
   (4, 4)  ->  (3, 3), is_changed_block=False (the "pass" line)

You can think of this visually as if it brings up a side-by-side diff, and tries
to map the line ranges from the left side to the right side:

  (1, 1)->(1, 1)    1. import re          1. import re
  (2, 3)->(2, 2)    2. def func(arg1,     2. def func(arg1, arg2, arg3):
                    3.   arg2, arg3):
  (4, 4)->(3, 3)    4.   pass             3.   pass

Args:
  original_source: the original source.
  modified_source: the modified source.
:::
:::{doc} _find_lines_mapping_index:509
Returns the original index of the lines mappings for the original line.
:::
**Imports**: `difflib`, `dataclasses.dataclass`, `typing.Collection`, `typing.Iterator`, `typing.Sequence`, `typing.Union`, `black.nodes.LN`, `black.nodes.STANDALONE_COMMENT`, `black.nodes.Leaf`, `black.nodes.Node`, `black.nodes.Visitor`, `black.nodes.first_leaf`, `black.nodes.furthest_ancestor_with_last_leaf`, `black.nodes.last_leaf`, `black.nodes.syms`, `blib2to3.pgen2.token.ASYNC`, `blib2to3.pgen2.token.NEWLINE`
**Type References**: [[LN]], [[_LinesMapping]], [[_TopLevelStatementsVisitor]]

### Interface
- `parse_line_ranges`(line_ranges: Sequence[str]) -> list[tuple[<ast.Tuple object at 0x11ce3bf10>]]
- `is_valid_line_range`(lines: tuple[<ast.Tuple object at 0x11ce3ba10>]) -> bool
- `sanitized_lines`(lines: Collection[tuple[<ast.Tuple object at 0x11ce3ab10>]], src_contents: str) -> Collection[tuple[<ast.Tuple object at 0x11ce33810>]]
- `adjusted_lines`(lines: Collection[tuple[<ast.Tuple object at 0x11ce33210>]], original_source: str, modified_source: str) -> list[tuple[<ast.Tuple object at 0x11ce2e250>]]
- `convert_unchanged_lines`(src_node: Node, lines: Collection[tuple[<ast.Tuple object at 0x11ce2db50>]]) -> None
- `_contains_standalone_comment`(node: LN) -> bool
- `_convert_unchanged_line_by_line`(node: Node, lines_set: set[int]) -> None
- `_convert_node_to_standalone_comment`(node: LN) -> None
- `_convert_nodes_to_standalone_comment`(nodes: Sequence[LN]) -> None
- `_leaf_line_end`(leaf: Leaf) -> int
- `_get_line_range`(node_or_nodes: [Union[<ast.Tuple object at 0x11ce79290>]](#union)) -> set[int]
- `_calculate_lines_mappings`(original_source: str, modified_source: str) -> Sequence[_LinesMapping]
- `_find_lines_mapping_index`(original_line: int, lines_mappings: Sequence[_LinesMapping], start_index: int) -> int
- `__init__`(lines_set: set[int]) -> Any
- `visit_simple_stmt`(node: Node) -> Iterator[None]
- `visit_suite`(node: Node) -> Iterator[None]

### Implementation
**_TopLevelStatementsVisitor**

**_LinesMapping**
  - original_start: int
  - original_end: int
  - modified_start: int
  - modified_end: int
  - is_changed_block: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/ranges.py`  
**Dependencies**: `difflib`, `dataclasses.dataclass`, `typing.Collection`, `typing.Iterator`, `typing.Sequence`, `typing.Union`, `black.nodes.LN`, `black.nodes.STANDALONE_COMMENT`, `black.nodes.Leaf`, `black.nodes.Node`, `black.nodes.Visitor`, `black.nodes.first_leaf`, `black.nodes.furthest_ancestor_with_last_leaf`, `black.nodes.last_leaf`, `black.nodes.syms`, `blib2to3.pgen2.token.ASYNC`, `blib2to3.pgen2.token.NEWLINE`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.debug

**Imports**: `dataclasses.dataclass`, `dataclasses.field`, `typing.Any`, `typing.Iterator`, `typing.TypeVar`, `typing.Union`, `black.nodes.Visitor`, `black.output.out`, `black.parsing.lib2to3_parse`, `blib2to3.pgen2.token`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`, `blib2to3.pytree.type_repr`
**Type References**: [[DebugVisitor]]

### Interface
- `out`(message: str) -> None
- `visit_default`(node: LN) -> Iterator[T]
- `show`(code: [Union[<ast.Tuple object at 0x11ceae050>]](#union)) -> None

### Implementation
**DebugVisitor**
  - tree_depth: int
  - list_output: list[str]
  - print_output: bool
  - v: DebugVisitor[None]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/debug.py`  
**Dependencies**: `dataclasses.dataclass`, `dataclasses.field`, `typing.Any`, `typing.Iterator`, `typing.TypeVar`, `typing.Union`, `black.nodes.Visitor`, `black.output.out`, `black.parsing.lib2to3_parse`, `blib2to3.pgen2.token`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`, `blib2to3.pytree.type_repr`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.trans
:::{doc} CannotTransform:54
Base class for errors raised by Transformers.
:::
:::{doc} TErr:72
(T)ransform Err

Convenience function used when working with the TResult type.
:::
:::{doc} hug_power_op:81
A transformer which normalizes spacing around power operators.
:::
:::{doc} handle_is_simple_look_up_prev:178
Handling the determination of is_simple_lookup for the lines prior to the doublestar
token. This is required because of the need to isolate the chained expression
to determine the bracket or parenthesis belong to the single expression.
:::
:::{doc} handle_is_simple_lookup_forward:200
Handling decision is_simple_lookup for the lines behind the doublestar token.
This function is simplified to keep consistent with the prior logic and the forward
case are more straightforward and do not need to care about chained expressions.
:::
:::{doc} is_expression_chained:226
Function to determine if the variable is a chained call.
(e.g., foo.lookup, foo().lookup, (foo.lookup())) will be recognized as chained call)
:::
:::{doc} StringTransformer:247
An implementation of the Transformer protocol that relies on its
subclasses overriding the template methods `do_match(...)` and
`do_transform(...)`.

This Transformer works exclusively on strings (for example, by merging
or splitting them).

The following sections can be found among the docstrings of each concrete
StringTransformer subclass.

Requirements:
    Which requirements must be met of the given Line for this
    StringTransformer to be applied?

Transformations:
    If the given Line meets all of the above requirements, which string
    transformations can you expect to be applied to it by this
    StringTransformer?

Collaborations:
    What contractual agreements does this StringTransformer have with other
    StringTransfomers? Such collaborations should be eliminated/minimized
    as much as possible.
:::
:::{doc} CustomSplit:354
A custom (i.e. manual) string split.

A single CustomSplit instance represents a single substring.

Examples:
    Consider the following string:
    ```
    "Hi there friend."
    " This is a custom"
    f" string {split}."
    ```

    This string will correspond to the following three CustomSplit instances:
    ```
    CustomSplit(False, 16)
    CustomSplit(False, 17)
    CustomSplit(True, 16)
    ```
:::
:::{doc} CustomSplitMapMixin:380
This mixin class is used to map merged strings to a sequence of
CustomSplits, which will then be used to re-split the strings iff none of
the resultant substrings go over the configured max line length.
:::
:::{doc} StringMerger:441
StringTransformer that merges strings together.

Requirements:
    (A) The line contains adjacent strings such that ALL of the validation checks
    listed in StringMerger._validate_msg(...)'s docstring pass.
    OR
    (B) The line contains a string which uses line continuation backslashes.

Transformations:
    Depending on which of the two requirements above where met, either:

    (A) The string group associated with the target string is merged.
    OR
    (B) All line-continuation backslashes are removed from the target string.

Collaborations:
    StringMerger provides custom split information to StringSplitter.
:::
:::{doc} StringParenStripper:878
StringTransformer that strips surrounding parentheses from strings.

Requirements:
    The line contains a string which is surrounded by parentheses and:
        - The target string is NOT the only argument to a function call.
        - The target string is NOT a "pointless" string.
        - If the target string contains a PERCENT, the brackets are not
          preceded or followed by an operator with higher precedence than
          PERCENT.

Transformations:
    The parentheses mentioned in the 'Requirements' section are stripped.

Collaborations:
    StringParenStripper has its own inherent usefulness, but it is also
    relied on to clean up the parentheses created by StringParenWrapper (in
    the event that they are no longer needed).
:::
:::{doc} BaseStringSplitter:1065
Abstract class for StringTransformers which transform a Line's strings by splitting
them or placing them on their own lines where necessary to avoid going over
the configured line length.

Requirements:
    * The target string value is responsible for the line going over the
      line length limit. It follows that after all of black's other line
      split methods have been exhausted, this line (or one of the resulting
      lines after all line splits are performed) would still be over the
      line_length limit unless we split this string.
      AND

    * The target string is NOT a "pointless" string (i.e. a string that has
      no parent or siblings).
      AND

    * The target string is not followed by an inline comment that appears
      to be a pragma.
      AND

    * The target string is not a multiline (i.e. triple-quote) string.
:::
:::{doc} iter_fexpr_spans:1328
Yields spans corresponding to expressions in a given f-string.
Spans are half-open ranges (left inclusive, right exclusive).
Assumes the input string is a valid f-string, but will not crash if the input
string is invalid.
:::
:::{doc} _toggle_fexpr_quotes:1379
Toggles quotes used in f-string expressions that are `old_quote`.

f-string expressions can't contain backslashes, so we need to toggle the
quotes if the f-string itself will end up using the same quote. We can
simply toggle without escaping because, quotes can't be reused in f-string
expressions. They will fail to parse.

NOTE: If PEP 701 is accepted, above statement will no longer be true.
Though if quotes can be reused, we can simply reuse them without updates or
escaping, once Black figures out how to parse the new grammar.
:::
:::{doc} StringSplitter:1403
StringTransformer that splits "atom" strings (i.e. strings which exist on
lines by themselves).

Requirements:
    * The line consists ONLY of a single string (possibly prefixed by a
      string operator [e.g. '+' or '==']), MAYBE a string trailer, and MAYBE
      a trailing comma.
      AND
    * All of the requirements listed in BaseStringSplitter's docstring.

Transformations:
    The string mentioned in the 'Requirements' section is split into as
    many substrings as necessary to adhere to the configured line length.

    In the final set of substrings, no substring should be smaller than
    MIN_SUBSTR_SIZE characters.

    The string will ONLY be split on spaces (i.e. each new substring should
    start with a space). Note that the string will NOT be split on a space
    which is escaped with a backslash.

    If the string is an f-string, it will NOT be split in the middle of an
    f-expression (e.g. in f"FooBar: {foo() if x else bar()}", {foo() if x
    else bar()} is an f-expression).

    If the string that is being split has an associated set of custom split
    records and those custom splits will NOT result in any line going over
    the configured line length, those custom splits are used. Otherwise the
    string is split as late as possible (from left-to-right) while still
    adhering to the transformation rules listed above.

Collaborations:
    StringSplitter relies on StringMerger to construct the appropriate
    CustomSplit objects and add them to the custom split map.
:::
:::{doc} StringParenWrapper:1910
StringTransformer that wraps strings in parens and then splits at the LPAR.

Requirements:
    All of the requirements listed in BaseStringSplitter's docstring in
    addition to the requirements listed below:

    * The line is a return/yield statement, which returns/yields a string.
      OR
    * The line is part of a ternary expression (e.g. `x = y if cond else
      z`) such that the line starts with `else <string>`, where <string> is
      some string.
      OR
    * The line is an assert statement, which ends with a string.
      OR
    * The line is an assignment statement (e.g. `x = <string>` or `x +=
      <string>`) such that the variable is being assigned the value of some
      string.
      OR
    * The line is a dictionary key assignment where some valid key is being
      assigned the value of some string.
      OR
    * The line is an lambda expression and the value is a string.
      OR
    * The line starts with an "atom" string that prefers to be wrapped in
      parens. It's preferred to be wrapped when it's is an immediate child of
      a list/set/tuple literal, AND the string is surrounded by commas (or is
      the first/last child).

Transformations:
    The chosen string is wrapped in parentheses and then split at the LPAR.

    We then have one line which ends with an LPAR and another line that
    starts with the chosen string. The latter line is then split again at
    the RPAR. This results in the RPAR (and possibly a trailing comma)
    being placed on its own line.

    NOTE: If any leaves exist to the right of the chosen string (except
    for a trailing comma, which would be placed after the RPAR), those
    leaves are placed inside the parentheses.  In effect, the chosen
    string is not necessarily being "wrapped" by parentheses. We can,
    however, count on the LPAR being placed directly before the chosen
    string.

    In other words, StringParenWrapper creates "atom" strings. These
    can then be split again by StringSplitter, if necessary.

Collaborations:
    In the event that a string line split by StringParenWrapper is
    changed such that it no longer needs to be given its own line,
    StringParenWrapper relies on StringParenStripper to clean up the
    parentheses it created.

    For "atom" strings that prefers to be wrapped in parens, it requires
    StringSplitter to hold the split until the string is wrapped in parens.
:::
:::{doc} StringParser:2303
A state machine that aids in parsing a string's "trailer", which can be
either non-existent, an old-style formatting sequence (e.g. `% varX` or `%
(varX, varY)`), or a method-call / attribute access (e.g. `.format(varX,
varY)`).

NOTE: A new StringParser object MUST be instantiated for each string
trailer we need to parse.

Examples:
    We shall assume that `line` equals the `Line` object that corresponds
    to the following line of python code:
    ```
    x = "Some {}.".format("String") + some_other_string
    ```

    Furthermore, we will assume that `string_idx` is some index such that:
    ```
    assert line.leaves[string_idx].value == "Some {}."
    ```

    The following code snippet then holds:
    ```
    string_parser = StringParser()
    idx = string_parser.parse(line.leaves, string_idx)
    assert line.leaves[idx].type == token.PLUS
    ```
:::
:::{doc} insert_str_child_factory:2445
Factory for a convenience function that is used to orphan @string_leaf
and then insert multiple new leaves into the same part of the node
structure that @string_leaf had originally occupied.

Examples:
    Let `string_leaf = Leaf(token.STRING, '"foo"')` and `N =
    string_leaf.parent`. Assume the node `N` has the following
    original structure:

    Node(
        expr_stmt, [
            Leaf(NAME, 'x'),
            Leaf(EQUAL, '='),
            Leaf(STRING, '"foo"'),
        ]
    )

    We then run the code snippet shown below.
    ```
    insert_str_child = insert_str_child_factory(string_leaf)

    lpar = Leaf(token.LPAR, '(')
    insert_str_child(lpar)

    bar = Leaf(token.STRING, '"bar"')
    insert_str_child(bar)

    rpar = Leaf(token.RPAR, ')')
    insert_str_child(rpar)
    ```

    After which point, it follows that `string_leaf.parent is None` and
    the node `N` now has the following structure:

    Node(
        expr_stmt, [
            Leaf(NAME, 'x'),
            Leaf(EQUAL, '='),
            Leaf(LPAR, '('),
            Leaf(STRING, '"bar"'),
            Leaf(RPAR, ')'),
        ]
    )
:::
:::{doc} is_valid_index_factory:2506
Examples:
    ```
    my_list = [1, 2, 3]

    is_valid_index = is_valid_index_factory(my_list)

    assert is_valid_index(0)
    assert is_valid_index(2)

    assert not is_valid_index(3)
    assert not is_valid_index(-1)
    ```
:::
**Imports**: `re`, `abc.ABC`, `abc.abstractmethod`, `collections.defaultdict`, `dataclasses.dataclass`, `typing.Any`, `typing.Callable`, `typing.ClassVar`, `typing.Collection`, `typing.Final`, `typing.Iterable`, `typing.Iterator`, `typing.Literal`, `typing.Optional`, `typing.Sequence`, `typing.TypeVar`, `typing.Union`, `mypy_extensions.trait`, `black.comments.contains_pragma_comment`, `black.lines.Line`, `black.lines.append_leaves`, `black.mode.Feature`, `black.mode.Mode`, `black.mode.Preview`, `black.nodes.CLOSING_BRACKETS`, `black.nodes.OPENING_BRACKETS`, `black.nodes.STANDALONE_COMMENT`, `black.nodes.is_empty_lpar`, `black.nodes.is_empty_par`, `black.nodes.is_empty_rpar`, `black.nodes.is_part_of_annotation`, `black.nodes.parent_type`, `black.nodes.replace_child`, `black.nodes.syms`, `black.rusty.Err`, `black.rusty.Ok`, `black.rusty.Result`, `black.strings.assert_is_leaf_string`, `black.strings.count_chars_in_width`, `black.strings.get_string_prefix`, `black.strings.has_triple_quotes`, `black.strings.normalize_string_quotes`, `black.strings.str_width`, `blib2to3.pgen2.token`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`
**Type References**: [[BaseStringSplitter]], [[CannotTransform]], [[ClassVar]], [[CustomSplit]], [[CustomSplitMapMixin]], [[Final]], [[Index]], [[Leaf]], [[Ok]], [[ParserState]], [[StringMerger]], [[StringParenStripper]], [[StringParenWrapper]], [[StringParser]], [[StringSplitter]], [[StringTransformer]]

### Interface
- `TErr`(err_msg: str) -> Err[CannotTransform]
- `hug_power_op`(line: Line, features: Collection[Feature], mode: Mode) -> Iterator[Line]
- `original_is_simple_lookup_func`(line: Line, index: int, step: Literal[<ast.Tuple object at 0x11cec7050>]) -> bool
- `handle_is_simple_look_up_prev`(line: Line, index: int, disallowed: set[int]) -> bool
- `handle_is_simple_lookup_forward`(line: Line, index: int, disallowed: set[int]) -> bool
- `is_expression_chained`(chained_leaves: list[Leaf]) -> bool
- `iter_fexpr_spans`(s: str) -> Iterator[tuple[<ast.Tuple object at 0x11d018690>]]
- `fstring_contains_expr`(s: str) -> bool
- `_toggle_fexpr_quotes`(fstring: str, old_quote: str) -> str
- `insert_str_child_factory`(string_leaf: Leaf) -> Callable[<ast.Tuple object at 0x11d12fbd0>]
- `is_valid_index_factory`(seq: Sequence[Any]) -> Callable[<ast.Tuple object at 0x11d139090>]
- `is_simple_lookup`(index: int, kind: Literal[<ast.Tuple object at 0x11cf3dd90>]) -> bool
- `is_simple_operand`(index: int, kind: Literal[<ast.Tuple object at 0x11cefff10>]) -> bool
- `__init__`() -> None
- `do_match`(line: Line) -> TMatchResult
- `do_transform`(line: Line, string_indices: list[int]) -> Iterator[TResult[Line]]
- `__call__`(line: Line, _features: Collection[Feature], _mode: Mode) -> Iterator[Line]
- `_get_key`(string: str) -> CustomSplitMapMixin._Key
- `add_custom_splits`(string: str, custom_splits: Iterable[CustomSplit]) -> None
- `pop_custom_splits`(string: str) -> list[CustomSplit]
- `has_custom_splits`(string: str) -> bool
- `_remove_backslash_line_continuation_chars`(line: Line, string_indices: list[int]) -> TResult[Line]
- `_merge_string_group`(line: Line, string_indices: list[int]) -> TResult[Line]
- `_merge_one_string_group`(LL: list[Leaf], string_idx: int, is_valid_index: Callable[<ast.Tuple object at 0x11cf77f90>]) -> tuple[<ast.Tuple object at 0x11cf54c10>]
- `_validate_msg`(line: Line, string_idx: int) -> TResult[None]
- `_transform_to_new_line`(line: Line, string_and_rpar_indices: list[int]) -> Line
- `do_splitter_match`(line: Line) -> TMatchResult
- `_validate`(line: Line, string_idx: int) -> TResult[None]
- `_get_max_string_length`(line: Line, string_idx: int) -> int
- `_prefer_paren_wrap_match`(LL: list[Leaf]) -> [Optional[int]](#optional)
- `_iter_nameescape_slices`(string: str) -> Iterator[tuple[<ast.Tuple object at 0x11d07cf10>]]
- `_iter_fexpr_slices`(string: str) -> Iterator[tuple[<ast.Tuple object at 0x11d07e1d0>]]
- `_get_illegal_split_indices`(string: str) -> set[Index]
- `_get_break_idx`(string: str, max_break_idx: int) -> [Optional[int]](#optional)
- `_maybe_normalize_string_quotes`(leaf: Leaf) -> None
- `_normalize_f_string`(string: str, prefix: str) -> str
- `_get_string_operator_leaves`(leaves: Iterable[Leaf]) -> list[Leaf]
- `_return_match`(LL: list[Leaf]) -> [Optional[int]](#optional)
- `_else_match`(LL: list[Leaf]) -> [Optional[int]](#optional)
- `_assert_match`(LL: list[Leaf]) -> [Optional[int]](#optional)
- `_assign_match`(LL: list[Leaf]) -> [Optional[int]](#optional)
- `_dict_or_lambda_match`(LL: list[Leaf]) -> [Optional[int]](#optional)
- `parse`(leaves: list[Leaf], string_idx: int) -> int
- `_next_state`(leaf: Leaf) -> bool
- `insert_str_child`(child: LN) -> None
- `is_valid_index`(idx: int) -> bool
- `make_naked`(string: str, string_prefix: str) -> str
- `maybe_append_string_operators`(new_line: Line) -> None
- `max_last_string_column`() -> int
- `more_splits_should_be_made`() -> bool
- `breaks_unsplittable_expression`(i: Index) -> bool
- `passes_all_checks`(i: Index) -> bool

### Implementation
**CannotTransform**

**StringTransformer**
  - __name__: Final
**CustomSplit**
  - has_prefix: bool
  - break_idx: int
**CustomSplitMapMixin**
  - _Key: ClassVar
  - _CUSTOM_SPLIT_MAP: ClassVar[dict[<ast.Tuple object at 0x11cfbff90>]]
**StringMerger**
  - merged_string_idx_dict: dict[<ast.Tuple object at 0x11cf88ed0>]
**StringParenStripper**
  - string_and_rpar_indices: list[int]
**BaseStringSplitter**
  - STRING_OPERATORS: Final
**StringSplitter**
  - MIN_SUBSTR_SIZE: Final
  - string_line_results: list[Ok[Line]]
  - illegal_indices: set[Index]
**StringParenWrapper**

**StringParser**
  - DEFAULT_TOKEN: Final
  - START: Final
  - DOT: Final
  - NAME: Final
  - PERCENT: Final
  - SINGLE_FMT_ARG: Final
  - LPAR: Final
  - RPAR: Final
  - DONE: Final
  - _goto: Final[dict[<ast.Tuple object at 0x11d115ad0>]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/trans.py`  
**Dependencies**: `re`, `abc.ABC`, `abc.abstractmethod`, `collections.defaultdict`, `dataclasses.dataclass`, `typing.Any`, `typing.Callable`, `typing.ClassVar`, `typing.Collection`, `typing.Final`, `typing.Iterable`, `typing.Iterator`, `typing.Literal`, `typing.Optional`, `typing.Sequence`, `typing.TypeVar`, `typing.Union`, `mypy_extensions.trait`, `black.comments.contains_pragma_comment`, `black.lines.Line`, `black.lines.append_leaves`, `black.mode.Feature`, `black.mode.Mode`, `black.mode.Preview`, `black.nodes.CLOSING_BRACKETS`, `black.nodes.OPENING_BRACKETS`, `black.nodes.STANDALONE_COMMENT`, `black.nodes.is_empty_lpar`, `black.nodes.is_empty_par`, `black.nodes.is_empty_rpar`, `black.nodes.is_part_of_annotation`, `black.nodes.parent_type`, `black.nodes.replace_child`, `black.nodes.syms`, `black.rusty.Err`, `black.rusty.Ok`, `black.rusty.Result`, `black.strings.assert_is_leaf_string`, `black.strings.count_chars_in_width`, `black.strings.get_string_prefix`, `black.strings.has_triple_quotes`, `black.strings.normalize_string_quotes`, `black.strings.str_width`, `blib2to3.pgen2.token`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.nodes
:::{doc} Visitor:149
Basic lib2to3 visitor that yields things of type `T` on `visit()`.
:::
:::{doc} whitespace:183
Return whitespace prefix if needed for the given `leaf`.

`complex_subscript` signals whether the given leaf is part of a subscription
which has non-trivial arguments, like arithmetic expressions or function calls.
:::
:::{doc} make_simple_prefix:429
Generate a normalized prefix string.
:::
:::{doc} preceding_leaf:436
Return the first leaf that precedes `node`, if any.
:::
:::{doc} prev_siblings_are:454
Return if the `node` and its previous siblings match types against the provided
list of tokens; the provided `node`has its type matched against the last element in
the list.  `None` can be used as the first element to declare that the start of the
list is anchored at the start of its parent's children.
:::
:::{doc} parent_type:470
Returns:
    @node.parent.type, if @node is not None and has a parent.
        OR
    None, otherwise.
:::
:::{doc} child_towards:483
Return the child of `ancestor` that contains `descendant`.
:::
:::{doc} replace_child:491
Side Effects:
    * If @old_child.parent is set, replace @old_child with @new_child in
    @old_child's underlying Node structure.
        OR
    * Otherwise, this function does nothing.
:::
:::{doc} container_of:508
Return `leaf` or one of its ancestors that is the topmost container of it.

By "container" we mean a node where `leaf` is the very first child.
:::
:::{doc} first_leaf_of:533
Returns the first leaf of the node tree.
:::
:::{doc} is_arith_like:543
Whether node is an arithmetic or a binary arithmetic expression
:::
:::{doc} is_empty_tuple:586
Return True if `node` holds an empty tuple.
:::
:::{doc} is_one_tuple:596
Return True if `node` holds a tuple with one element, with or without parens.
:::
:::{doc} is_tuple_containing_walrus:612
Return True if `node` holds a tuple that contains a walrus operator.
:::
:::{doc} is_one_sequence_between:623
Return True if content between `opening` and `closing` is a one-sequence.
:::
:::{doc} is_walrus_assignment:660
Return True iff `node` is of the shape ( test := test )
:::
:::{doc} is_simple_decorator_trailer:666
Return True iff `node` is a trailer valid in a simple decorator
:::
:::{doc} is_simple_decorator_expression:692
Return True iff `node` could be a 'dotted name' decorator

This function takes the node of the 'namedexpr_test' of the new decorator
grammar and test if it would be valid under the old decorator grammar.

The old grammar was: decorator: @ dotted_name [arguments] NEWLINE
The new grammar is : decorator: @ namedexpr_test NEWLINE
:::
:::{doc} is_yield:716
Return True if `node` holds a `yield` or `yield from` expression.
:::
:::{doc} is_vararg:737
Return True if `leaf` is a star or double star in a vararg or kwarg.

If `within` includes VARARGS_PARENTS, this applies to function signatures.
If `within` includes UNPACKING_PARENTS, it applies to right hand-side
extended iterable unpacking (PEP 3132) and additional unpacking
generalizations (PEP 448).
:::
:::{doc} is_fstring:760
Return True if the node is an f-string
:::
:::{doc} fstring_to_string:765
Converts an fstring node back to a string node.
:::
:::{doc} is_multiline_string:773
Return True if `leaf` is a multiline string that actually spans many lines.
:::
:::{doc} is_stub_suite:796
Return True if `node` is a suite with a stub body.
:::
:::{doc} is_stub_body:819
Return True if `node` is a simple statement containing an ellipsis.
:::
:::{doc} is_atom_with_invisible_parens:836
Given a `LN`, determines whether it's an atom `node` with invisible
parens. Useful in dedupe-ing and normalizing parens.
:::
:::{doc} is_import:866
Return True if the given leaf starts an import statement.
:::
:::{doc} is_with_or_async_with_stmt:880
Return True if the given leaf starts a with or async with statement.
:::
:::{doc} is_async_stmt_or_funcdef:894
Return True if the given leaf starts an async def/for/with statement.

Note that `async def` can be either an `async_stmt` or `async_funcdef`,
the latter is used when it has decorators.
:::
:::{doc} is_type_comment:907
Return True if the given leaf is a type comment. This function should only
be used for general type comments (excluding ignore annotations, which should
use `is_type_ignore_comment`). Note that general type comments are no longer
used in modern version of Python, this function may be deprecated in the future.
:::
:::{doc} is_type_ignore_comment:917
Return True if the given leaf is a type comment with ignore annotation.
:::
:::{doc} is_type_ignore_comment_string:924
Return True if the given string match with type comment with
ignore annotation.
:::
:::{doc} wrap_in_parentheses:930
Wrap `child` in parentheses.

This replaces `child` with an atom holding the parentheses and the old
child.  That requires moving the prefix.

If `visible` is False, the leaves will be valueless (and thus invisible).
:::
:::{doc} unwrap_singleton_parenthesis:948
Returns `wrapped` if `node` is of the shape ( wrapped ).

Parenthesis can be optional. Returns None otherwise
:::
:::{doc} ensure_visible:962
Make sure parentheses are visible.

They could be invisible as part of some statements (see
:func:`normalize_invisible_parens` and :func:`visit_import_from`).
:::
:::{doc} get_annotation_type:990
Returns the type of annotation this leaf is part of, if any.
:::
:::{doc} is_part_of_annotation:1002
Returns whether this leaf is part of a type annotation.
:::
:::{doc} first_leaf:1008
Returns the first leaf of the ancestor node.
:::
:::{doc} last_leaf:1018
Returns the last leaf of the ancestor node.
:::
:::{doc} furthest_ancestor_with_last_leaf:1028
Returns the furthest ancestor that has this leaf node as the last leaf.
:::
**Imports**: `sys`, `typing.Final`, `typing.Generic`, `typing.Iterator`, `typing.Literal`, `typing.Optional`, `typing.TypeVar`, `typing.Union`, `mypy_extensions.mypyc_attr`, `black.cache.CACHE_DIR`, `black.mode.Mode`, `black.mode.Preview`, `black.strings.get_string_prefix`, `black.strings.has_triple_quotes`, `blib2to3.pygram`, `blib2to3.pgen2.token`, `blib2to3.pytree.NL`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`, `blib2to3.pytree.type_repr`, `typing.TypeGuard`, `typing_extensions.TypeGuard`
**Type References**: [[Final]], [[LN]], [[Optional]], [[Visitor]]

### Interface
- `whitespace`(leaf: Leaf) -> str
- `make_simple_prefix`(nl_count: int, form_feed: bool, empty_line: str) -> str
- `preceding_leaf`(node: [Optional[LN]](#optional)) -> [Optional[Leaf]](#optional)
- `prev_siblings_are`(node: [Optional[LN]](#optional), tokens: list[Optional[NodeType]]) -> bool
- `parent_type`(node: [Optional[LN]](#optional)) -> [Optional[NodeType]](#optional)
- `child_towards`(ancestor: Node, descendant: LN) -> [Optional[LN]](#optional)
- `replace_child`(old_child: LN, new_child: LN) -> None
- `container_of`(leaf: Leaf) -> LN
- `first_leaf_of`(node: LN) -> [Optional[Leaf]](#optional)
- `is_arith_like`(node: LN) -> bool
- `is_docstring`(node: NL, mode: Mode) -> bool
- `is_empty_tuple`(node: LN) -> bool
- `is_one_tuple`(node: LN) -> bool
- `is_tuple_containing_walrus`(node: LN) -> bool
- `is_one_sequence_between`(opening: Leaf, closing: Leaf, leaves: list[Leaf], brackets: tuple[<ast.Tuple object at 0x11d1edc90>]) -> bool
- `is_walrus_assignment`(node: LN) -> bool
- `is_simple_decorator_trailer`(node: LN, last: bool) -> bool
- `is_simple_decorator_expression`(node: LN) -> bool
- `is_yield`(node: LN) -> bool
- `is_vararg`(leaf: Leaf, within: set[NodeType]) -> bool
- `is_fstring`(node: Node) -> bool
- `fstring_to_string`(node: Node) -> Leaf
- `is_multiline_string`(node: LN) -> bool
- `is_parent_function_or_class`(node: Node) -> bool
- `is_function_or_class`(node: Node) -> bool
- `is_stub_suite`(node: Node) -> bool
- `is_stub_body`(node: LN) -> bool
- `is_atom_with_invisible_parens`(node: LN) -> bool
- `is_empty_par`(leaf: Leaf) -> bool
- `is_empty_lpar`(leaf: Leaf) -> bool
- `is_empty_rpar`(leaf: Leaf) -> bool
- `is_import`(leaf: Leaf) -> bool
- `is_with_or_async_with_stmt`(leaf: Leaf) -> bool
- `is_async_stmt_or_funcdef`(leaf: Leaf) -> bool
- `is_type_comment`(leaf: Leaf) -> bool
- `is_type_ignore_comment`(leaf: Leaf) -> bool
- `is_type_ignore_comment_string`(value: str) -> bool
- `wrap_in_parentheses`(parent: Node, child: LN) -> None
- `unwrap_singleton_parenthesis`(node: LN) -> [Optional[LN]](#optional)
- `ensure_visible`(leaf: Leaf) -> None
- `is_name_token`(nl: NL) -> TypeGuard[Leaf]
- `is_lpar_token`(nl: NL) -> TypeGuard[Leaf]
- `is_rpar_token`(nl: NL) -> TypeGuard[Leaf]
- `is_number_token`(nl: NL) -> TypeGuard[Leaf]
- `get_annotation_type`(leaf: Leaf) -> Literal[<ast.Tuple object at 0x11d26dd90>]
- `is_part_of_annotation`(leaf: Leaf) -> bool
- `first_leaf`(node: LN) -> [Optional[Leaf]](#optional)
- `last_leaf`(node: LN) -> [Optional[Leaf]](#optional)
- `furthest_ancestor_with_last_leaf`(leaf: Leaf) -> LN
- `visit`(node: LN) -> Iterator[T]
- `visit_default`(node: LN) -> Iterator[T]

### Implementation
**Visitor**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/nodes.py`  
**Dependencies**: `sys`, `typing.Final`, `typing.Generic`, `typing.Iterator`, `typing.Literal`, `typing.Optional`, `typing.TypeVar`, `typing.Union`, `mypy_extensions.mypyc_attr`, `black.cache.CACHE_DIR`, `black.mode.Mode`, `black.mode.Preview`, `black.strings.get_string_prefix`, `black.strings.has_triple_quotes`, `blib2to3.pygram`, `blib2to3.pgen2.token`, `blib2to3.pytree.NL`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`, `blib2to3.pytree.type_repr`, `typing.TypeGuard`, `typing_extensions.TypeGuard`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.linegen
:::{doc} CannotSplit:90
A readable split that fits the allotted line length is impossible.
:::
:::{doc} LineGenerator:96
Generates reformatted Line objects.  Empty lines are not emitted.

Note: destroys the tree it's visiting by mutating prefixes of its leaves
in ways that will no longer stringify to valid Python code on the tree.
:::
:::{doc} transform_line:601
Transform a `line`, potentially splitting it into many lines.

They should fit in the allotted `line_length` but might not be able to.

`features` are syntactical features that may be used in the output.
:::
:::{doc} should_split_funcdef_with_rhs:725
If a funcdef has a magic trailing comma in the return type, then we should first
split the line with rhs to respect the comma.
:::
:::{doc} left_hand_split:762
Split line into many lines, starting with the first matching bracket pair.

Note: this usually looks weird, only use this for function definitions.
Prefer RHS otherwise.  This is why this function is not symmetrical with
:func:`right_hand_split` which also handles optional parentheses.
:::
:::{doc} right_hand_split:809
Split line into many lines, starting with the last matching bracket pair.

If the split was by optional parentheses, attempt splitting without them, too.
`omit` is a collection of closing bracket IDs that shouldn't be considered for
this split.

Note: running this function modifies `bracket_depth` on the leaves of `line`.
:::
:::{doc} _first_right_hand_split:829
Split the line into head, body, tail starting with the last bracket pair.

Note: this function should not have side effects. It's relied upon by
_maybe_split_omitting_optional_parens to get an opinion whether to prefer
splitting on the right side of an assignment statement.
:::
:::{doc} _prefer_split_rhs_oop_over_rhs:1015
Returns whether we should prefer the result from a split omitting optional parens
(rhs_oop) over the original (rhs).
:::
:::{doc} bracket_split_succeeded_or_raise:1056
Raise :exc:`CannotSplit` if the last left- or right-hand split failed.

Do nothing otherwise.

A left- or right-hand split is based on a pair of brackets. Content before
(and including) the opening bracket is left on one line, content inside the
brackets is put on a separate line, and finally content starting with and
following the closing bracket is put on a separate line.

Those are called `head`, `body`, and `tail`, respectively. If the split
produced the same line (all content in `head`) or ended up with an empty `body`
and the `tail` is just the closing bracket, then it's considered failed.
:::
:::{doc} bracket_split_build_line:1123
Return a new line with given `leaves` and respective comments from `original`.

If it's the head component, brackets will be tracked so trailing commas are
respected.

If it's the body component, the result line is one-indented inside brackets and as
such has its first leaf's prefix normalized and a trailing comma added when
expected.
:::
:::{doc} dont_increase_indentation:1172
Normalize prefix of the first leaf in every line returned by `split_func`.

This is a decorator over relevant split functions.
:::
:::{doc} delimiter_split:1220
Split according to delimiters of the highest priority.

If the appropriate Features are given, the split will add trailing commas
also in function signatures and calls that contain `*` and `**`.
:::
:::{doc} standalone_comment_split:1310
Split standalone comments from the rest of the line.
:::
:::{doc} normalize_invisible_parens:1344
Make existing optional parentheses invisible or create new ones.

`parens_after` is a set of string leaf values immediately after which parens
should be put.

Standardizes on visible parentheses for single-element tuples, and keeps
existing visible parentheses for other tuples and generator expressions.
:::
:::{doc} _maybe_wrap_cms_in_parens:1506
When enabled and safe, wrap the multiple context managers in invisible parens.

It is only safe when `features` contain Feature.PARENTHESIZED_CONTEXT_MANAGERS.
:::
:::{doc} remove_with_parens:1548
Recursively hide optional parens in `with` statements.
:::
:::{doc} maybe_make_parens_invisible_in_atom:1590
If it's safe, make the parens in the atom `node` invisible, recursively.
Additionally, remove repeated, adjacent invisible parens from the atom `node`
as they are redundant.

Returns whether the node should itself be wrapped in invisible parentheses.
:::
:::{doc} should_split_line:1668
Should `line` be immediately split with `delimiter_split()` after RHS?
:::
:::{doc} generate_trailers_to_omit:1695
Generate sets of closing bracket IDs that should be omitted in a RHS.

Brackets can be omitted if the entire trailer up to and including
a preceding closing bracket fits in one line.

Yielded sets are cumulative (contain results of previous yields, too).  First
set is empty, unless the line should explode, in which case bracket pairs until
the one that needs to explode are omitted.
:::
**Imports**: `re`, `sys`, `dataclasses.replace`, `enum.Enum`, `enum.auto`, `functools.partial`, `functools.wraps`, `typing.Collection`, `typing.Iterator`, `typing.Optional`, `typing.Union`, `typing.cast`, `black.brackets.COMMA_PRIORITY`, `black.brackets.DOT_PRIORITY`, `black.brackets.STRING_PRIORITY`, `black.brackets.get_leaves_inside_matching_brackets`, `black.brackets.max_delimiter_priority_in_atom`, `black.comments.FMT_OFF`, `black.comments.generate_comments`, `black.comments.list_comments`, `black.lines.Line`, `black.lines.RHSResult`, `black.lines.append_leaves`, `black.lines.can_be_split`, `black.lines.can_omit_invisible_parens`, `black.lines.is_line_short_enough`, `black.lines.line_to_string`, `black.mode.Feature`, `black.mode.Mode`, `black.mode.Preview`, `black.nodes.ASSIGNMENTS`, `black.nodes.BRACKETS`, `black.nodes.CLOSING_BRACKETS`, `black.nodes.OPENING_BRACKETS`, `black.nodes.STANDALONE_COMMENT`, `black.nodes.STATEMENT`, `black.nodes.WHITESPACE`, `black.nodes.Visitor`, `black.nodes.ensure_visible`, `black.nodes.fstring_to_string`, `black.nodes.get_annotation_type`, `black.nodes.is_arith_like`, `black.nodes.is_async_stmt_or_funcdef`, `black.nodes.is_atom_with_invisible_parens`, `black.nodes.is_docstring`, `black.nodes.is_empty_tuple`, `black.nodes.is_lpar_token`, `black.nodes.is_multiline_string`, `black.nodes.is_name_token`, `black.nodes.is_one_sequence_between`, `black.nodes.is_one_tuple`, `black.nodes.is_parent_function_or_class`, `black.nodes.is_part_of_annotation`, `black.nodes.is_rpar_token`, `black.nodes.is_stub_body`, `black.nodes.is_stub_suite`, `black.nodes.is_tuple_containing_walrus`, `black.nodes.is_type_ignore_comment_string`, `black.nodes.is_vararg`, `black.nodes.is_walrus_assignment`, `black.nodes.is_yield`, `black.nodes.syms`, `black.nodes.wrap_in_parentheses`, `black.numerics.normalize_numeric_literal`, `black.strings.fix_docstring`, `black.strings.get_string_prefix`, `black.strings.normalize_string_prefix`, `black.strings.normalize_string_quotes`, `black.strings.normalize_unicode_escape_sequences`, `black.trans.CannotTransform`, `black.trans.StringMerger`, `black.trans.StringParenStripper`, `black.trans.StringParenWrapper`, `black.trans.StringSplitter`, `black.trans.Transformer`, `black.trans.hug_power_op`, `blib2to3.pgen2.token`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`
**Type References**: [[CannotSplit]], [[Leaf]], [[LeafID]], [[Line]], [[LineGenerator]], [[Optional]], [[Transformer]], [[_BracketSplitComponent]]

### Interface
- `_hugging_power_ops_line_to_string`(line: Line, features: Collection[Feature], mode: Mode) -> [Optional[str]](#optional)
- `transform_line`(line: Line, mode: Mode, features: Collection[Feature]) -> Iterator[Line]
- `should_split_funcdef_with_rhs`(line: Line, mode: Mode) -> bool
- `left_hand_split`(line: Line, _features: Collection[Feature], mode: Mode) -> Iterator[Line]
- `right_hand_split`(line: Line, mode: Mode, features: Collection[Feature], omit: Collection[LeafID]) -> Iterator[Line]
- `_first_right_hand_split`(line: Line, omit: Collection[LeafID]) -> RHSResult
- `_maybe_split_omitting_optional_parens`(rhs: RHSResult, line: Line, mode: Mode, features: Collection[Feature], omit: Collection[LeafID]) -> Iterator[Line]
- `_prefer_split_rhs_oop_over_rhs`(rhs_oop: RHSResult, rhs: RHSResult, mode: Mode) -> bool
- `bracket_split_succeeded_or_raise`(head: Line, body: Line, tail: Line) -> None
- `_ensure_trailing_comma`(leaves: list[Leaf], original: Line, opening_bracket: Leaf) -> bool
- `bracket_split_build_line`(leaves: list[Leaf], original: Line, opening_bracket: Leaf) -> Line
- `dont_increase_indentation`(split_func: Transformer) -> Transformer
- `_get_last_non_comment_leaf`(line: Line) -> [Optional[int]](#optional)
- `_can_add_trailing_comma`(leaf: Leaf, features: Collection[Feature]) -> bool
- `_safe_add_trailing_comma`(safe: bool, delimiter_priority: int, line: Line) -> Line
- `delimiter_split`(line: Line, features: Collection[Feature], mode: Mode) -> Iterator[Line]
- `standalone_comment_split`(line: Line, features: Collection[Feature], mode: Mode) -> Iterator[Line]
- `normalize_invisible_parens`(node: Node, parens_after: set[str]) -> None
- `_normalize_import_from`(parent: Node, child: LN, index: int) -> None
- `remove_await_parens`(node: Node) -> None
- `_maybe_wrap_cms_in_parens`(node: Node, mode: Mode, features: Collection[Feature]) -> None
- `remove_with_parens`(node: Node, parent: Node) -> None
- `maybe_make_parens_invisible_in_atom`(node: LN, parent: LN, remove_brackets_around_comma: bool) -> bool
- `should_split_line`(line: Line, opening_bracket: Leaf) -> bool
- `generate_trailers_to_omit`(line: Line, line_length: int) -> Iterator[set[LeafID]]
- `run_transformer`(line: Line, transform: Transformer, mode: Mode, features: Collection[Feature]) -> list[Line]
- `__init__`(mode: Mode, features: Collection[Feature]) -> None
- `line`(indent: int) -> Iterator[Line]
- `visit_default`(node: LN) -> Iterator[Line]
- `visit_test`(node: Node) -> Iterator[Line]
- `visit_INDENT`(node: Leaf) -> Iterator[Line]
- `visit_DEDENT`(node: Leaf) -> Iterator[Line]
- `visit_stmt`(node: Node, keywords: set[str], parens: set[str]) -> Iterator[Line]
- `visit_typeparams`(node: Node) -> Iterator[Line]
- `visit_typevartuple`(node: Node) -> Iterator[Line]
- `visit_paramspec`(node: Node) -> Iterator[Line]
- `visit_dictsetmaker`(node: Node) -> Iterator[Line]
- `visit_funcdef`(node: Node) -> Iterator[Line]
- `visit_match_case`(node: Node) -> Iterator[Line]
- `visit_suite`(node: Node) -> Iterator[Line]
- `visit_simple_stmt`(node: Node) -> Iterator[Line]
- `visit_async_stmt`(node: Node) -> Iterator[Line]
- `visit_decorators`(node: Node) -> Iterator[Line]
- `visit_power`(node: Node) -> Iterator[Line]
- `visit_SEMI`(leaf: Leaf) -> Iterator[Line]
- `visit_ENDMARKER`(leaf: Leaf) -> Iterator[Line]
- `visit_STANDALONE_COMMENT`(leaf: Leaf) -> Iterator[Line]
- `visit_factor`(node: Node) -> Iterator[Line]
- `visit_tname`(node: Node) -> Iterator[Line]
- `visit_STRING`(leaf: Leaf) -> Iterator[Line]
- `visit_NUMBER`(leaf: Leaf) -> Iterator[Line]
- `visit_fstring`(node: Node) -> Iterator[Line]
- `__post_init__`() -> None
- `split_wrapper`(line: Line, features: Collection[Feature], mode: Mode) -> Iterator[Line]
- `append_to_line`(leaf: Leaf) -> Iterator[Line]
- `append_comments`(leaf: Leaf) -> Iterator[Line]
- `_rhs`(self: object, line: Line, features: Collection[Feature], mode: Mode) -> Iterator[Line]

### Implementation
**CannotSplit**

**LineGenerator**
  - prev_type: Optional[int]
  - Ø: set[str]
**_BracketSplitComponent**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/linegen.py`  
**Dependencies**: `re`, `sys`, `dataclasses.replace`, `enum.Enum`, `enum.auto`, `functools.partial`, `functools.wraps`, `typing.Collection`, `typing.Iterator`, `typing.Optional`, `typing.Union`, `typing.cast`, `black.brackets.COMMA_PRIORITY`, `black.brackets.DOT_PRIORITY`, `black.brackets.STRING_PRIORITY`, `black.brackets.get_leaves_inside_matching_brackets`, `black.brackets.max_delimiter_priority_in_atom`, `black.comments.FMT_OFF`, `black.comments.generate_comments`, `black.comments.list_comments`, `black.lines.Line`, `black.lines.RHSResult`, `black.lines.append_leaves`, `black.lines.can_be_split`, `black.lines.can_omit_invisible_parens`, `black.lines.is_line_short_enough`, `black.lines.line_to_string`, `black.mode.Feature`, `black.mode.Mode`, `black.mode.Preview`, `black.nodes.ASSIGNMENTS`, `black.nodes.BRACKETS`, `black.nodes.CLOSING_BRACKETS`, `black.nodes.OPENING_BRACKETS`, `black.nodes.STANDALONE_COMMENT`, `black.nodes.STATEMENT`, `black.nodes.WHITESPACE`, `black.nodes.Visitor`, `black.nodes.ensure_visible`, `black.nodes.fstring_to_string`, `black.nodes.get_annotation_type`, `black.nodes.is_arith_like`, `black.nodes.is_async_stmt_or_funcdef`, `black.nodes.is_atom_with_invisible_parens`, `black.nodes.is_docstring`, `black.nodes.is_empty_tuple`, `black.nodes.is_lpar_token`, `black.nodes.is_multiline_string`, `black.nodes.is_name_token`, `black.nodes.is_one_sequence_between`, `black.nodes.is_one_tuple`, `black.nodes.is_parent_function_or_class`, `black.nodes.is_part_of_annotation`, `black.nodes.is_rpar_token`, `black.nodes.is_stub_body`, `black.nodes.is_stub_suite`, `black.nodes.is_tuple_containing_walrus`, `black.nodes.is_type_ignore_comment_string`, `black.nodes.is_vararg`, `black.nodes.is_walrus_assignment`, `black.nodes.is_yield`, `black.nodes.syms`, `black.nodes.wrap_in_parentheses`, `black.numerics.normalize_numeric_literal`, `black.strings.fix_docstring`, `black.strings.get_string_prefix`, `black.strings.normalize_string_prefix`, `black.strings.normalize_string_quotes`, `black.strings.normalize_unicode_escape_sequences`, `black.trans.CannotTransform`, `black.trans.StringMerger`, `black.trans.StringParenStripper`, `black.trans.StringParenWrapper`, `black.trans.StringSplitter`, `black.trans.Transformer`, `black.trans.hug_power_op`, `blib2to3.pgen2.token`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.__main__

**Imports**: `black.patched_main`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/__main__.py`  
**Dependencies**: `black.patched_main`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.report
:::{doc} NothingChanged:20
Raised when reformatted code is the same as source.
:::
:::{doc} Report:25
Provides a reformatting counter. Can be rendered with `str(report)`.
:::
**Imports**: `dataclasses.dataclass`, `enum.Enum`, `pathlib.Path`, `click.style`, `black.output.err`, `black.output.out`
**Type References**: [[Changed]], [[NothingChanged]], [[Report]]

### Interface
- `done`(src: Path, changed: Changed) -> None
- `failed`(src: Path, message: str) -> None
- `path_ignored`(path: Path, message: str) -> None
- `return_code`() -> int
- `__str__`() -> str

### Implementation
**Changed**

**NothingChanged**

**Report**
  - check: bool
  - diff: bool
  - quiet: bool
  - verbose: bool
  - change_count: int
  - same_count: int
  - failure_count: int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/report.py`  
**Dependencies**: `dataclasses.dataclass`, `enum.Enum`, `pathlib.Path`, `click.style`, `black.output.err`, `black.output.out`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.strings
:::{doc} sub_twice:28
Replace `regex` with `replacement` twice on `original`.

This is used by string normalization to perform replaces on
overlapping matches.
:::
:::{doc} has_triple_quotes:37
Returns:
    True iff @string starts with three quotation characters.
:::
:::{doc} lines_with_leading_tabs_expanded:46
Splits string into lines and expands only leading tabs (following the normal
Python rules)
:::
:::{doc} get_string_prefix:89
Pre-conditions:
    * assert_is_leaf_string(@string)

Returns:
    @string's prefix (e.g. '', 'r', 'f', or 'rf').
:::
:::{doc} assert_is_leaf_string:108
Checks the pre-condition that @string has the format that you would expect
of `leaf.value` where `leaf` is some Leaf such that `leaf.type ==
token.STRING`. A more precise description of the pre-conditions that are
checked are listed below.

Pre-conditions:
    * @string starts with either ', ", <prefix>', or <prefix>" where
    `set(<prefix>)` is some subset of `set(STRING_PREFIX_CHARS)`.
    * @string ends with a quote character (' or ").

Raises:
    AssertionError(...) if the pre-conditions listed above are not
    satisfied.
:::
:::{doc} normalize_string_prefix:143
Make all string prefixes lowercase.
:::
:::{doc} normalize_string_quotes:169
Prefer double quotes but only if it doesn't cause more escaping.

Adds or removes backslashes as appropriate.
:::
:::{doc} normalize_fstring_quotes:243
Prefer double quotes but only if it doesn't cause more escaping.

Adds or removes backslashes as appropriate.
:::
:::{doc} normalize_unicode_escape_sequences:308
Replace hex codes in Unicode escape sequences with lowercase representation.
:::
:::{doc} char_width:340
Return the width of a single character as it would be displayed in a
terminal or editor (which respects Unicode East Asian Width).

Full width characters are counted as 2, while half width characters are
counted as 1.  Also control characters are counted as 0.
:::
:::{doc} str_width:366
Return the width of `line_str` as it would be displayed in a terminal
or editor (which respects Unicode East Asian Width).

You could utilize this function to determine, for example, if a string
is too wide to display in a terminal or editor.
:::
:::{doc} count_chars_in_width:379
Count the number of characters in `line_str` that would fit in a
terminal or editor of `max_width` (which respects Unicode East Asian
Width).
:::
**Imports**: `re`, `sys`, `functools.lru_cache`, `typing.Final`, `typing.Match`, `typing.Pattern`, `black._width_table.WIDTH_TABLE`, `blib2to3.pytree.Leaf`
**Type References**: [[Final]]

### Interface
- `sub_twice`(regex: Pattern[str], replacement: str, original: str) -> str
- `has_triple_quotes`(string: str) -> bool
- `lines_with_leading_tabs_expanded`(s: str) -> list[str]
- `fix_docstring`(docstring: str, prefix: str) -> str
- `get_string_prefix`(string: str) -> str
- `assert_is_leaf_string`(string: str) -> None
- `normalize_string_prefix`(s: str) -> str
- `_cached_compile`(pattern: str) -> Pattern[str]
- `normalize_string_quotes`(s: str) -> str
- `normalize_fstring_quotes`(quote: str, middles: list[Leaf], is_raw_fstring: bool) -> tuple[<ast.Tuple object at 0x11d6a7490>]
- `normalize_unicode_escape_sequences`(leaf: Leaf) -> None
- `char_width`(char: str) -> int
- `str_width`(line_str: str) -> int
- `count_chars_in_width`(line_str: str, max_width: int) -> int
- `replace`(m: Match[str]) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/strings.py`  
**Dependencies**: `re`, `sys`, `functools.lru_cache`, `typing.Final`, `typing.Match`, `typing.Pattern`, `black._width_table.WIDTH_TABLE`, `blib2to3.pytree.Leaf`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.const



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/const.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.output
:::{doc} ipynb_diff:42
Return a unified diff string between each cell in notebooks `a` and `b`.
:::
:::{doc} _splitlines_no_ff:62
Split a string into lines ignoring form feed and other chars.

This mimics how the Python parser splits source code.

A simplified version of the function with the same name in Lib/ast.py
:::
:::{doc} diff:75
Return a unified diff string between strings `a` and `b`.
:::
:::{doc} color_diff:96
Inject the ANSI color codes to the diff.
:::
:::{doc} dump_to_file:113
Dump `output` to a temporary file. Return path to the file.
:::
**Imports**: `json`, `re`, `tempfile`, `typing.Any`, `typing.Optional`, `click.echo`, `click.style`, `mypy_extensions.mypyc_attr`, `difflib`
### Interface
- `_out`(message: [Optional[str]](#optional), nl: bool) -> None
- `_err`(message: [Optional[str]](#optional), nl: bool) -> None
- `out`(message: [Optional[str]](#optional), nl: bool) -> None
- `err`(message: [Optional[str]](#optional), nl: bool) -> None
- `ipynb_diff`(a: str, b: str, a_name: str, b_name: str) -> str
- `_splitlines_no_ff`(source: str) -> list[str]
- `diff`(a: str, b: str, a_name: str, b_name: str) -> str
- `color_diff`(contents: str) -> str
- `dump_to_file`() -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/output.py`  
**Dependencies**: `json`, `re`, `tempfile`, `typing.Any`, `typing.Optional`, `click.echo`, `click.style`, `mypy_extensions.mypyc_attr`, `difflib`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.numerics
:::{doc} format_hex:8
Formats a hexadecimal string like "0x12B3"
:::
:::{doc} format_scientific_notation:16
Formats a numeric string utilizing scientific notation
:::
:::{doc} format_complex_number:29
Formats a complex string like `10j`
:::
:::{doc} format_float_or_int_string:36
Formats a float string like "1.0".
:::
:::{doc} normalize_numeric_literal:45
Normalizes numeric (float, int, and complex) literals.

All letters used in the representation are normalized to lowercase.
:::
**Imports**: `blib2to3.pytree.Leaf`
### Interface
- `format_hex`(text: str) -> str
- `format_scientific_notation`(text: str) -> str
- `format_complex_number`(text: str) -> str
- `format_float_or_int_string`(text: str) -> str
- `normalize_numeric_literal`(leaf: Leaf) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/numerics.py`  
**Dependencies**: `blib2to3.pytree.Leaf`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.comments
:::{doc} ProtoComment:33
Describes a piece of syntax that is a comment.

It's not a :class:`blib2to3.pytree.Leaf` so that:

* it can be cached (`Leaf` objects should not be reused more than once as
  they store their lineno, column, prefix, and parent information);
* `newlines` and `consumed` fields are kept separate from the `value`. This
  simplifies handling of special marker comments like ``# fmt: off/on``.
:::
:::{doc} generate_comments:52
Clean the prefix of the `leaf` and generate comments from it, if any.

Comments in lib2to3 are shoved into the whitespace prefix.  This happens
in `pgen2/driver.py:Driver.parse_tokens()`.  This was a brilliant implementation
move because it does away with modifying the grammar to include all the
possible places in which comments can be placed.

The sad consequence for us though is that comments don't "belong" anywhere.
This is why this function generates simple parentless Leaf objects for
comments.  We simply don't know what the correct parent should be.

No matter though, we can live without this.  We really only need to
differentiate between inline and standalone comments.  The latter don't
share the line with any code.

Inline comments are emitted as regular token.COMMENT leaves.  Standalone
are emitted with a fake STANDALONE_COMMENT token identifier.
:::
:::{doc} list_comments:80
Return a list of :class:`ProtoComment` objects parsed from the given `prefix`.
:::
:::{doc} normalize_trailing_prefix:127
Normalize the prefix that's left over after generating comments.

Note: don't use backslashes for formatting or you'll lose your voting rights.
:::
:::{doc} make_comment:142
Return a consistently formatted comment from the given `content` string.

All comments (except for "##", "#!", "#:", '#'") should have a single
space between the hash sign and the content.

If `content` didn't start with a hash sign, one is provided.
:::
:::{doc} normalize_fmt_off:168
Convert content between `# fmt: off`/`# fmt: on` into standalone comments.
:::
:::{doc} convert_one_fmt_off_pair:177
Convert content of a single `# fmt: off`/`# fmt: on` into a standalone comment.

Returns True if a pair was converted.
:::
:::{doc} generate_ignored_nodes:267
Starting from the container of `leaf`, generate all leaves until `# fmt: on`.

If comment is skip, returns leaf only.
Stops at the end of the block.
:::
:::{doc} _generate_ignored_nodes_from_fmt_skip:314
Generate all leaves that should be ignored by the `# fmt: skip` from `leaf`.
:::
:::{doc} is_fmt_on:356
Determine whether formatting is switched on within a container.
Determined by whether the last `# fmt:` comment is `on` or `off`.
:::
:::{doc} children_contains_fmt_on:369
Determine if children have formatting switched on.
:::
:::{doc} contains_pragma_comment:379
Returns:
    True iff one of the comments in @comment_list is a pragma used by one
    of the more common static analysis tools for python (e.g. mypy, flake8,
    pylint).
:::
:::{doc} _contains_fmt_skip_comment:393
Checks if the given comment contains FMT_SKIP alone or paired with other comments.
Matching styles:
  # fmt:skip                           <-- single comment
  # noqa:XXX # fmt:skip # a nice line  <-- multiple comments (Preview)
  # pylint:XXX; fmt:skip               <-- list of comments (; separated, Preview)
:::
**Imports**: `re`, `dataclasses.dataclass`, `functools.lru_cache`, `typing.Collection`, `typing.Final`, `typing.Iterator`, `typing.Optional`, `typing.Union`, `black.mode.Mode`, `black.mode.Preview`, `black.nodes.CLOSING_BRACKETS`, `black.nodes.STANDALONE_COMMENT`, `black.nodes.WHITESPACE`, `black.nodes.container_of`, `black.nodes.first_leaf_of`, `black.nodes.make_simple_prefix`, `black.nodes.preceding_leaf`, `black.nodes.syms`, `blib2to3.pgen2.token`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`
**Type References**: [[Final]], [[LN]], [[Optional]], [[ProtoComment]]

### Interface
- `generate_comments`(leaf: LN) -> Iterator[Leaf]
- `list_comments`(prefix: str) -> list[ProtoComment]
- `normalize_trailing_prefix`(leaf: LN, total_consumed: int) -> None
- `make_comment`(content: str) -> str
- `normalize_fmt_off`(node: Node, mode: Mode, lines: Collection[tuple[<ast.Tuple object at 0x11d707050>]]) -> None
- `convert_one_fmt_off_pair`(node: Node, mode: Mode, lines: Collection[tuple[<ast.Tuple object at 0x11d739210>]]) -> bool
- `generate_ignored_nodes`(leaf: Leaf, comment: ProtoComment, mode: Mode) -> Iterator[LN]
- `_generate_ignored_nodes_from_fmt_skip`(leaf: Leaf, comment: ProtoComment) -> Iterator[LN]
- `is_fmt_on`(container: LN) -> bool
- `children_contains_fmt_on`(container: LN) -> bool
- `contains_pragma_comment`(comment_list: list[Leaf]) -> bool
- `_contains_fmt_skip_comment`(comment_line: str, mode: Mode) -> bool

### Implementation
**ProtoComment**
  - type: int
  - value: str
  - newlines: int
  - consumed: int
  - form_feed: bool
  - leading_whitespace: str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/comments.py`  
**Dependencies**: `re`, `dataclasses.dataclass`, `functools.lru_cache`, `typing.Collection`, `typing.Final`, `typing.Iterator`, `typing.Optional`, `typing.Union`, `black.mode.Mode`, `black.mode.Preview`, `black.nodes.CLOSING_BRACKETS`, `black.nodes.STANDALONE_COMMENT`, `black.nodes.WHITESPACE`, `black.nodes.container_of`, `black.nodes.first_leaf_of`, `black.nodes.make_simple_prefix`, `black.nodes.preceding_leaf`, `black.nodes.syms`, `blib2to3.pgen2.token`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.schema
:::{doc} get_schema:6
Get the stored complete schema for black's settings.
:::
**Imports**: `importlib.resources`, `json`, `typing.Any`
### Interface
- `get_schema`(tool_name: str) -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/schema.py`  
**Dependencies**: `importlib.resources`, `json`, `typing.Any`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.misc
:::{doc} isolate_module:39
Copy a module so that we are isolated from aggressive mocking.

If a test suite mocks os.path.exists (for example), and then we need to use
it during the test, everything will get tangled up if we use their mock.
Making a copy of the module when we import it will isolate coverage.py from
those complications.
:::
:::{doc} SysModuleSaver:60
Saves the contents of sys.modules, and removes new modules later.
:::
:::{doc} sys_modules_saved:73
A context manager to remove any modules imported during a block.
:::
:::{doc} import_third_party:82
Import a third-party module we need, but might not be installed.

This also cleans out the module after the import, so that coverage won't
appear to have imported it.  This lets the third party use coverage for
their own tests.

Arguments:
    modname (str): the name of the module to import.

Returns:
    The imported module, and a boolean indicating if the module could be imported.

If the boolean is False, the module returned is not the one you want: don't use it.
:::
:::{doc} nice_pair:105
Make a nice string representation of a pair of numbers.

If the numbers are equal, just return the number, otherwise return the pair
with a dash between them, indicating the range.
:::
:::{doc} bool_or_none:119
Return bool(b), but preserve None.
:::
:::{doc} join_regex:127
Combine a series of regex strings into one that matches any of them.
:::
:::{doc} file_be_gone:136
Remove a file, and don't get annoyed if it doesn't exist.
:::
:::{doc} ensure_dir:145
Make sure the directory exists.

If `directory` is None or empty, do nothing.
:::
:::{doc} ensure_dir_for_file:154
Make sure the directory for the path exists.
:::
:::{doc} Hasher:159
Hashes Python data for fingerprinting.
:::
:::{doc} _needs_to_implement:199
Helper to raise NotImplementedError in interface stubs.
:::
:::{doc} DefaultValue:214
A sentinel object to use for unusual default-value needs.

Construct with a string that will be used as the repr, for display in help
and Sphinx output.
:::
:::{doc} substitute_variables:228
Substitute ``${VAR}`` variables in `text` with their values.

Variables in the text can take a number of shell-inspired forms::

    $VAR
    ${VAR}
    ${VAR?}             strict: an error if VAR isn't defined.
    ${VAR-missing}      defaulted: "missing" if VAR isn't defined.
    $$                  just a dollar sign.

`variables` is a dictionary of variable values.

Returns the resulting text with values substituted.
:::
:::{doc} format_local_datetime:279
Return a string with local timezone representing the date.
    
:::
:::{doc} import_local_file:285
Import a local file as a module.

Opens a file in the current directory named `modname`.py, imports it
as `modname`, and returns the module object.  `modfile` is the file to
import if it isn't in the current directory.
:::
:::{doc} _human_key:306
Turn a string into a list of string and number chunks.

"z23a" -> (["z", 23, "a"], "z23a")

The original string is appended as a last value to ensure the
key is unique enough so that "x1y" and "x001y" can be distinguished.
:::
:::{doc} human_sorted:323
Sort the given iterable of strings the way that humans expect.

Numeric components in the strings are sorted as numbers.

Returns the sorted list.
:::
:::{doc} human_sorted_items:335
Sort (string, ...) items the way humans expect.

The elements of `items` can be any tuple/list. They'll be sorted by the
first element (a string), with ties broken by the remaining elements.

Returns the sorted list of items.
:::
:::{doc} plural:349
Pluralize a word.

If n is 1, return thing.  Otherwise return things, or thing+s.
:::
:::{doc} stdout_link:360
Format text+url as a clickable link for stdout.

If attached to a terminal, use escape sequences. Otherwise, just return
the text.
:::
**Imports**: `__future__.annotations`, `contextlib`, `datetime`, `errno`, `functools`, `hashlib`, `importlib`, `importlib.util`, `inspect`, `os`, `os.path`, `re`, `sys`, `types`, `types.ModuleType`, `typing.Any`, `typing.NoReturn`, `typing.TypeVar`, `collections.abc.Iterable`, `collections.abc.Iterator`, `collections.abc.Mapping`, `collections.abc.Sequence`, `coverage.exceptions.CoverageException`, `coverage.types.TArc`, `coverage.exceptions.*`
**Type References**: [[DefaultValue]], [[Hasher]], [[ModuleType]], [[SysModuleSaver]]

### Interface
- `isolate_module`(mod: ModuleType) -> ModuleType
- `sys_modules_saved`() -> Iterator[None]
- `import_third_party`(modname: str) -> tuple[<ast.Tuple object at 0x11d797890>]
- `nice_pair`(pair: TArc) -> str
- `bool_or_none`(b: Any) -> bool | None
- `join_regex`(regexes: Iterable[str]) -> str
- `file_be_gone`(path: str) -> None
- `ensure_dir`(directory: str) -> None
- `ensure_dir_for_file`(path: str) -> None
- `_needs_to_implement`(that: Any, func_name: str) -> NoReturn
- `substitute_variables`(text: str, variables: Mapping[<ast.Tuple object at 0x11d7c1e90>]) -> str
- `format_local_datetime`(dt: datetime.datetime) -> str
- `import_local_file`(modname: str, modfile: str | None) -> ModuleType
- `_human_key`(s: str) -> tuple[<ast.Tuple object at 0x11d7d5e50>]
- `human_sorted`(strings: Iterable[str]) -> list[str]
- `human_sorted_items`(items: Iterable[SortableItem], reverse: bool) -> list[SortableItem]
- `plural`(n: int, thing: str, things: str) -> str
- `stdout_link`(text: str, url: str) -> str
- `__init__`(display_as: str) -> None
- `restore`() -> None
- `update`(v: Any) -> None
- `hexdigest`() -> str
- `__repr__`() -> str
- `dollar_replace`(match: re.Match[str]) -> str
- `tryint`(s: str) -> str | int

### Implementation
**SysModuleSaver**

**Hasher**

**DefaultValue**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/misc.py`  
**Dependencies**: `__future__.annotations`, `contextlib`, `datetime`, `errno`, `functools`, `hashlib`, `importlib`, `importlib.util`, `inspect`, `os`, `os.path`, `re`, `sys`, `types`, `types.ModuleType`, `typing.Any`, `typing.NoReturn`, `typing.TypeVar`, `collections.abc.Iterable`, `collections.abc.Iterator`, `collections.abc.Mapping`, `collections.abc.Sequence`, `coverage.exceptions.CoverageException`, `coverage.types.TArc`, `coverage.exceptions.*`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.files
:::{doc} set_relative_directory:30
Set the directory that `relative_filename` will be relative to.
:::
:::{doc} relative_directory:48
Return the directory that `relative_filename` is relative to.
:::
:::{doc} relative_filename:53
Return the relative form of `filename`.

The file name will be relative to the current directory when the
`set_relative_directory` was called.
:::
:::{doc} canonical_filename:66
Return a canonical file name for `filename`.

An absolute path with no redundant components and normalized case.
:::
:::{doc} flat_rootname:91
A base for a flat file name to correspond to this file.

Useful for writing files about the code where you want all the files in
the same directory, but need to differentiate same-named files from
different directories.

For example, the file a/b/c.py will return 'z_86bbcbe134d28fd2_c_py'
:::
:::{doc} abs_file:157
Return the absolute normalized form of `path`.
:::
:::{doc} zip_location:162
Split a filename into a zipfile / inner name pair.

Only return a pair if the zipfile exists.  No check is made if the inner
name is in the zipfile.
:::
:::{doc} source_exists:178
Determine if a source file path exists.
:::
:::{doc} python_reported_file:191
Return the string as Python would describe this file name.
:::
:::{doc} isabs_anywhere:196
Is `filename` an absolute path on any OS?
:::
:::{doc} prep_patterns:201
Prepare the file patterns for use in a `GlobMatcher`.

If a pattern starts with a wildcard, it is used as a pattern
as-is.  If it does not start with a wildcard, then it is made
absolute with the current directory.

If `patterns` is None, an empty list is returned.
:::
:::{doc} TreeMatcher:219
A matcher for files in a tree.

Construct with a list of paths, either files or directories. Paths match
with the `match` method if they are one of the files, or if they are
somewhere in a subtree rooted at one of the directories.
:::
:::{doc} ModuleMatcher:254
A matcher for modules in a tree.
:::
:::{doc} GlobMatcher:283
A matcher for files by file name pattern.
:::
:::{doc} sep:302
Find the path separator used in this string, or os.sep if none.
:::
:::{doc} _glob_to_regex:330
Convert a file-path glob pattern into a regex.
:::
:::{doc} globs_to_regex:349
Convert glob patterns to a compiled regex that matches any of them.

Slashes are always converted to match either slash or backslash, for
Windows support, even when running elsewhere.

If the pattern has no slash or backslash, then it is interpreted as
matching a file name anywhere it appears in the tree.  Otherwise, the glob
pattern must match the whole file path.

If `partial` is true, then the pattern will match if the target string
starts with the pattern. Otherwise, it must match the entire string.

Returns: a compiled regex object.  Use the .match method to compare target
strings.
:::
:::{doc} PathAliases:380
A collection of aliases for paths.

When combining data files from remote machines, often the paths to source
code are different, for example, due to OS differences, or because of
serialized checkouts on continuous integration machines.

A `PathAliases` object tracks a list of pattern/result pairs, and can
map a path through those aliases to produce a unified path.
:::
:::{doc} find_python_files:516
Yield all of the importable Python files in `dirname`, recursively.

To be importable, the files have to be in a directory with a __init__.py,
except for `dirname` itself, which isn't required to have one.  The
assumption is that `dirname` was specified directly, so the user knows
best, but sub-directories are checked for a __init__.py to be sure we only
find the importable files.

If `include_namespace_packages` is True, then the check for __init__.py
files is skipped.

Files with strange characters are skipped, since they couldn't have been
imported, and are probably editor side-files.
:::
**Imports**: `__future__.annotations`, `hashlib`, `ntpath`, `os`, `os.path`, `posixpath`, `re`, `sys`, `typing.Callable`, `collections.abc.Iterable`, `coverage.env`, `coverage.exceptions.ConfigError`, `coverage.misc.human_sorted`, `coverage.misc.isolate_module`, `coverage.misc.join_regex`
**Type References**: [[GlobMatcher]], [[ModuleMatcher]], [[PathAliases]], [[TreeMatcher]]

### Interface
- `set_relative_directory`() -> None
- `relative_directory`() -> str
- `relative_filename`(filename: str) -> str
- `canonical_filename`(filename: str) -> str
- `flat_rootname`(filename: str) -> str
- `abs_file`(path: str) -> str
- `zip_location`(filename: str) -> tuple[<ast.Tuple object at 0x11d7ece10>] | None
- `source_exists`(path: str) -> bool
- `python_reported_file`(filename: str) -> str
- `isabs_anywhere`(filename: str) -> bool
- `prep_patterns`(patterns: Iterable[str]) -> list[str]
- `sep`(s: str) -> str
- `_glob_to_regex`(pattern: str) -> str
- `globs_to_regex`(patterns: Iterable[str], case_insensitive: bool, partial: bool) -> re.Pattern[str]
- `find_python_files`(dirname: str, include_namespace_packages: bool) -> Iterable[str]
- `actual_path`(path: str) -> str
- `__init__`(debugfn: Callable[<ast.Tuple object at 0x11d84ff10>] | None, relative: bool) -> None
- `__repr__`() -> str
- `info`() -> list[str]
- `match`(fpath: str) -> bool
- `pprint`() -> None
- `add`(pattern: str, result: str) -> None
- `map`(path: str, exists: Callable[<ast.Tuple object at 0x11d867650>]) -> str

### Implementation
**TreeMatcher**

**ModuleMatcher**

**GlobMatcher**

**PathAliases**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/files.py`  
**Dependencies**: `__future__.annotations`, `hashlib`, `ntpath`, `os`, `os.path`, `posixpath`, `re`, `sys`, `typing.Callable`, `collections.abc.Iterable`, `coverage.env`, `coverage.exceptions.ConfigError`, `coverage.misc.human_sorted`, `coverage.misc.isolate_module`, `coverage.misc.join_regex`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.phystokens
:::{doc} _phys_tokens:25
Return all physical tokens, even line continuations.

tokenize.generate_tokens() doesn't return a token for the backslash that
continues lines.  This wrapper provides those tokens so that we can
re-create a faithful representation of the original source.

Returns the same values as generate_tokens()
:::
:::{doc} find_soft_key_lines:91
Helper for finding lines with soft keywords, like match/case lines.
:::
:::{doc} source_token_lines:106
Generate a series of lines, one for each line in `source`.

Each line is a list of pairs, each pair is a token::

    [('key', 'def'), ('ws', ' '), ('nam', 'hello'), ('op', '('), ... ]

Each pair has a token class, and the token text.

If you concatenate all the token texts, and then join them with newlines,
you should have your original `source` back, with two differences:
trailing white space is not preserved, and a final line with no newline
is indistinguishable from a final line with a newline.
:::
:::{doc} generate_tokens:178
A helper around `tokenize.generate_tokens`.

Originally this was used to cache the results, but it didn't seem to make
reporting go faster, and caused issues with using too much memory.
:::
:::{doc} source_encoding:189
Determine the encoding for `source`, according to PEP 263.

`source` is a byte string: the text of the program.

Returns a string, the name of the encoding.
:::
**Imports**: `__future__.annotations`, `ast`, `io`, `keyword`, `re`, `sys`, `token`, `tokenize`, `collections.abc.Iterable`, `coverage.env`, `coverage.types.TLineNo`, `coverage.types.TSourceTokenLines`
**Type References**: [[None]], [[TLineNo]]

### Interface
- `_phys_tokens`(toks: TokenInfos) -> TokenInfos
- `find_soft_key_lines`(source: str) -> set[TLineNo]
- `source_token_lines`(source: str) -> TSourceTokenLines
- `generate_tokens`(text: str) -> TokenInfos
- `source_encoding`(source: bytes) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/phystokens.py`  
**Dependencies**: `__future__.annotations`, `ast`, `io`, `keyword`, `re`, `sys`, `token`, `tokenize`, `collections.abc.Iterable`, `coverage.env`, `coverage.types.TLineNo`, `coverage.types.TSourceTokenLines`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.lcovreport
:::{doc} line_hash:24
Produce a hash of a source line for use in the LCOV file.
:::
:::{doc} lcov_lines:36
Emit line coverage records for an analyzed file.
:::
:::{doc} lcov_functions:57
Emit function coverage records for an analyzed file.
:::
:::{doc} lcov_arcs:99
Emit branch coverage records for an analyzed file.
:::
:::{doc} LcovReporter:157
A reporter for writing LCOV coverage reports.
:::
**Imports**: `__future__.annotations`, `base64`, `hashlib`, `sys`, `typing.IO`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `coverage.plugin.FileReporter`, `coverage.report_core.get_analysis_to_report`, `coverage.results.Analysis`, `coverage.results.Numbers`, `coverage.types.TMorf`, `coverage.Coverage`
**Type References**: [[LcovReporter]]

### Interface
- `line_hash`(line: str) -> str
- `lcov_lines`(analysis: Analysis, lines: list[int], source_lines: list[str], outfile: IO[str]) -> None
- `lcov_functions`(fr: FileReporter, file_analysis: Analysis, outfile: IO[str]) -> None
- `lcov_arcs`(fr: FileReporter, analysis: Analysis, lines: list[int], outfile: IO[str]) -> None
- `__init__`(coverage: Coverage) -> None
- `report`(morfs: Iterable[TMorf] | None, outfile: IO[str]) -> float
- `lcov_file`(rel_fname: str, fr: FileReporter, analysis: Analysis, outfile: IO[str]) -> None

### Implementation
**LcovReporter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/lcovreport.py`  
**Dependencies**: `__future__.annotations`, `base64`, `hashlib`, `sys`, `typing.IO`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `coverage.plugin.FileReporter`, `coverage.report_core.get_analysis_to_report`, `coverage.results.Analysis`, `coverage.results.Numbers`, `coverage.types.TMorf`, `coverage.Coverage`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.config
:::{doc} HandyConfigParser:31
Our specialization of ConfigParser.
:::
:::{doc} CoverageConfig:171
Coverage.py configuration.

The attributes of this class are the various settings that control the
operation of coverage.py.
:::
:::{doc} config_files_to_try:540
What config files should we try to read?

Returns a list of tuples:
    (filename, is_our_file, was_file_specified)
:::
:::{doc} read_coverage_config:571
Read the coverage.py configuration.

Arguments:
    config_file: a boolean or string, see the `Coverage` class for the
        tricky details.
    warn: a function to issue warnings.
    all others: keyword arguments from the `Coverage` class, used for
        setting values in the configuration.

Returns:
    config:
        config is a CoverageConfig object read from the appropriate
        configuration file.
:::
**Imports**: `__future__.annotations`, `collections`, `configparser`, `copy`, `os`, `os.path`, `re`, `typing.Any`, `typing.Callable`, `typing.Union`, `collections.abc.Iterable`, `coverage.exceptions.ConfigError`, `coverage.misc.isolate_module`, `coverage.misc.human_sorted_items`, `coverage.misc.substitute_variables`, `coverage.tomlconfig.TomlConfigParser`, `coverage.tomlconfig.TomlDecodeError`, `coverage.types.TConfigurable`, `coverage.types.TConfigSectionIn`, `coverage.types.TConfigValueIn`, `coverage.types.TConfigSectionOut`, `coverage.types.TConfigValueOut`, `coverage.types.TPluginConfig`
**Type References**: [[CoverageConfig]], [[HandyConfigParser]], [[TConfigParser]], [[TConfigValueOut]]

### Interface
- `config_files_to_try`(config_file: bool | str) -> list[tuple[<ast.Tuple object at 0x11d9a1dd0>]]
- `read_coverage_config`(config_file: bool | str, warn: Callable[<ast.Tuple object at 0x11d9a2550>]) -> CoverageConfig
- `__init__`() -> None
- `read`(filenames: Iterable[str], encoding_unused: str | None) -> list[str]
- `real_section`(section: str) -> str | None
- `has_option`(section: str, option: str) -> bool
- `has_section`(section: str) -> bool
- `options`(section: str) -> list[str]
- `get_section`(section: str) -> TConfigSectionOut
- `get`(section: str, option: str) -> str
- `getlist`(section: str, option: str) -> list[str]
- `getregexlist`(section: str, option: str) -> list[str]
- `from_args`() -> None
- `from_file`(filename: str, warn: Callable[<ast.Tuple object at 0x11d94ce50>], our_file: bool) -> bool
- `copy`() -> CoverageConfig
- `_set_attr_from_config_option`(cp: TConfigParser, attr: str, where: str, type_: str) -> bool
- `get_plugin_options`(plugin: str) -> TConfigSectionOut
- `set_option`(option_name: str, value: TConfigValueIn | TConfigSectionIn) -> None
- `get_option`(option_name: str) -> TConfigValueOut | None
- `post_process_file`(path: str) -> str
- `post_process`() -> None
- `debug_info`() -> list[tuple[<ast.Tuple object at 0x11d996d90>]]

### Implementation
**HandyConfigParser**
  - d: dict[<ast.Tuple object at 0x11d90cbd0>]
  - v: str
**CoverageConfig**
  - cp: TConfigParser
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/config.py`  
**Dependencies**: `__future__.annotations`, `collections`, `configparser`, `copy`, `os`, `os.path`, `re`, `typing.Any`, `typing.Callable`, `typing.Union`, `collections.abc.Iterable`, `coverage.exceptions.ConfigError`, `coverage.misc.isolate_module`, `coverage.misc.human_sorted_items`, `coverage.misc.substitute_variables`, `coverage.tomlconfig.TomlConfigParser`, `coverage.tomlconfig.TomlDecodeError`, `coverage.types.TConfigurable`, `coverage.types.TConfigSectionIn`, `coverage.types.TConfigValueIn`, `coverage.types.TConfigSectionOut`, `coverage.types.TConfigValueOut`, `coverage.types.TPluginConfig`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.version
:::{doc} _make_version:15
Create a readable version string from version_info tuple components.
:::
:::{doc} _make_url:34
Make the URL people should start at for this version of coverage.py.
:::
**Imports**: `__future__.annotations`
### Interface
- `_make_version`(major: int, minor: int, micro: int, releaselevel: str, serial: int, dev: int) -> str
- `_make_url`(major: int, minor: int, micro: int, releaselevel: str, serial: int, dev: int) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/version.py`  
**Dependencies**: `__future__.annotations`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.env
:::{doc} PYBEHAVIOR:44
Flags indicating this Python's behavior.
:::
:::{doc} debug_info:174
Return a list of (name, value) pairs for printing debug information.
:::
**Imports**: `__future__.annotations`, `os`, `platform`, `sys`, `typing.Any`, `collections.abc.Iterable`
**Type References**: [[PYBEHAVIOR]]

### Interface
- `debug_info`() -> Iterable[tuple[<ast.Tuple object at 0x11d9d6390>]]

### Implementation
**PYBEHAVIOR**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/env.py`  
**Dependencies**: `__future__.annotations`, `os`, `platform`, `sys`, `typing.Any`, `collections.abc.Iterable`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.sysmon
:::{doc} CodeInfo:161
The information we want about each code object.
:::
:::{doc} bytes_to_lines:170
Make a dict mapping byte code offsets to line numbers.
:::
:::{doc} SysMonitor:180
Python implementation of the raw data tracer for PEP669 implementations.
:::
**Imports**: `__future__.annotations`, `functools`, `inspect`, `os`, `os.path`, `sys`, `threading`, `traceback`, `dataclasses.dataclass`, `types.CodeType`, `types.FrameType`, `typing.Any`, `typing.Callable`, `typing.TYPE_CHECKING`, `typing.cast`, `coverage.debug.short_filename`, `coverage.debug.short_stack`, `coverage.misc.isolate_module`, `coverage.types.AnyCallable`, `coverage.types.TArc`, `coverage.types.TFileDisposition`, `coverage.types.TLineNo`, `coverage.types.TShouldStartContextFn`, `coverage.types.TShouldTraceFn`, `coverage.types.TTraceData`, `coverage.types.TTraceFileData`, `coverage.types.Tracer`, `coverage.types.TWarnFn`
**Type References**: [[CodeInfo]], [[LoggingWrapper]], [[None]], [[SysMonitor]], [[TTraceFileData]]

### Interface
- `bytes_to_lines`(code: CodeType) -> dict[<ast.Tuple object at 0x11da23f90>]
- `log`(msg: str) -> None
- `arg_repr`(arg: Any) -> str
- `panopticon`() -> AnyCallable
- `__init__`(wrapped: Any, namespace: str) -> None
- `__repr__`() -> str
- `start`() -> None
- `stop`() -> None
- `post_fork`() -> None
- `activity`() -> bool
- `reset_activity`() -> None
- `get_stats`() -> dict[<ast.Tuple object at 0x11da2eed0>] | None
- `sysmon_py_start`(code: CodeType, instruction_offset: int) -> MonitorReturn
- `sysmon_py_resume_arcs`(code: CodeType, instruction_offset: int) -> MonitorReturn
- `sysmon_py_return_arcs`(code: CodeType, instruction_offset: int, retval: object) -> MonitorReturn
- `sysmon_py_unwind_arcs`(code: CodeType, instruction_offset: int, exception: BaseException) -> MonitorReturn
- `sysmon_line_lines`(code: CodeType, line_number: int) -> MonitorReturn
- `sysmon_line_arcs`(code: CodeType, line_number: int) -> MonitorReturn
- `__getattr__`(name: str) -> Callable[<ast.Tuple object at 0x11d9eded0>]
- `_decorator`(meth: AnyCallable) -> AnyCallable
- `callers_frame`() -> FrameType
- `_wrapped`(self: Any) -> Any

### Implementation
**CodeInfo**
  - tracing: bool
  - file_data: TTraceFileData | None
  - byte_to_line: dict[<ast.Tuple object at 0x11da22390>] | None
**SysMonitor**
  - tracing_code: bool | None
  - file_data: TTraceFileData | None
**LoggingWrapper**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/sysmon.py`  
**Dependencies**: `__future__.annotations`, `functools`, `inspect`, `os`, `os.path`, `sys`, `threading`, `traceback`, `dataclasses.dataclass`, `types.CodeType`, `types.FrameType`, `typing.Any`, `typing.Callable`, `typing.TYPE_CHECKING`, `typing.cast`, `coverage.debug.short_filename`, `coverage.debug.short_stack`, `coverage.misc.isolate_module`, `coverage.types.AnyCallable`, `coverage.types.TArc`, `coverage.types.TFileDisposition`, `coverage.types.TLineNo`, `coverage.types.TShouldStartContextFn`, `coverage.types.TShouldTraceFn`, `coverage.types.TTraceData`, `coverage.types.TTraceFileData`, `coverage.types.Tracer`, `coverage.types.TWarnFn`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.templite
:::{doc} TempliteSyntaxError:22
Raised when a template has a syntax error.
:::
:::{doc} TempliteValueError:27
Raised when an expression won't evaluate in a template.
:::
:::{doc} CodeBuilder:32
Build source code conveniently.
:::
:::{doc} Templite:78
A simple template renderer, for a nano-subset of Django syntax.

Supported constructs are extended variable access::

    {{var.modifier.modifier|filter|filter}}

loops::

    {% for var in list %}...{% endfor %}

and ifs::

    {% if var %}...{% endif %}

Comments are within curly-hash markers::

    {# This will be ignored #}

Lines between `{% joined %}` and `{% endjoined %}` will have lines stripped
and joined.  Be careful, this could join words together!

Any of these constructs can have a hyphen at the end (`-}}`, `-%}`, `-#}`),
which will collapse the white space following the tag.

Construct a Templite with the template text, then use `render` against a
dictionary context to create a finished string::

    templite = Templite('''
        <h1>Hello {{name|upper}}!</h1>
        {% for topic in topics %}
            <p>You are interested in {{topic}}.</p>
        {% endif %}
        ''',
        {"upper": str.upper},
    )
    text = templite.render({
        "name": "Ned",
        "topics": ["Python", "Geometry", "Juggling"],
    })
:::
**Imports**: `__future__.annotations`, `re`, `typing.Any`, `typing.Callable`, `typing.NoReturn`, `typing.cast`
**Type References**: [[Any]], [[CodeBuilder]], [[Templite]], [[TempliteSyntaxError]], [[TempliteValueError]]

### Interface
- `__init__`(text: str) -> None
- `__str__`() -> str
- `add_line`(line: str) -> None
- `add_section`() -> CodeBuilder
- `indent`() -> None
- `dedent`() -> None
- `get_globals`() -> dict[<ast.Tuple object at 0x11da74fd0>]
- `_expr_code`(expr: str) -> str
- `_syntax_error`(msg: str, thing: Any) -> NoReturn
- `_variable`(name: str, vars_set: set[str]) -> None
- `render`(context: dict[<ast.Tuple object at 0x11dab2ed0>] | None) -> str
- `_do_dots`(value: Any) -> Any
- `flush_output`() -> None

### Implementation
**TempliteSyntaxError**

**TempliteValueError**

**CodeBuilder**
  - global_namespace: dict[<ast.Tuple object at 0x11da757d0>]
**Templite**
  - buffered: list[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/templite.py`  
**Dependencies**: `__future__.annotations`, `re`, `typing.Any`, `typing.Callable`, `typing.NoReturn`, `typing.cast`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.results
:::{doc} analysis_from_file_reporter:23
Create an Analysis from a FileReporter.
:::
:::{doc} Analysis:81
The results of analyzing a FileReporter.
:::
:::{doc} Numbers:246
The numerical results of measuring coverage.

This holds the basic statistics from `Analysis`, and is used to roll
up statistics across files.
:::
:::{doc} display_covered:319
Return a displayable total percentage, as a string.

Note that "0" is only returned when the value is truly zero, and "100"
is only returned when the value is truly 100.  Rounding can never
result in either "0" or "100".
:::
:::{doc} _line_ranges:337
Produce a list of ranges for `format_lines`.
:::
:::{doc} format_lines:364
Nicely format a list of line numbers.

Format a list of line numbers for printing by coalescing groups of lines as
long as the lines represent consecutive statements.  This will coalesce
even if there are gaps between statements.

For example, if `statements` is [1,2,3,4,5,10,11,12,13,14] and
`lines` is [1,2,5,10,11,13,14] then the result will be "1-2, 5-11, 13-14".

Both `lines` and `statements` can be any iterable. All of the elements of
`lines` must be in `statements`, and all of the values must be positive
integers.

If `arcs` is provided, they are (start,[end,end,end]) pairs that will be
included in the output as long as start isn't in `lines`.
:::
:::{doc} should_fail_under:399
Determine if a total should fail due to fail-under.

`total` is a float, the coverage measurement total. `fail_under` is the
fail_under setting to compare with. `precision` is the number of digits
to consider after the decimal point.

Returns True if the total should fail.
:::
**Imports**: `__future__.annotations`, `collections`, `dataclasses`, `collections.abc.Container`, `collections.abc.Iterable`, `typing.TYPE_CHECKING`, `coverage.exceptions.ConfigError`, `coverage.misc.nice_pair`, `coverage.types.TArc`, `coverage.types.TLineNo`, `coverage.data.CoverageData`, `coverage.plugin.FileReporter`
**Type References**: [[Analysis]], [[Iterable]], [[Numbers]], [[TArc]], [[TLineNo]]

### Interface
- `analysis_from_file_reporter`(data: CoverageData, precision: int, file_reporter: FileReporter, filename: str) -> Analysis
- `display_covered`(pc: float, precision: int) -> str
- `_line_ranges`(statements: Iterable[TLineNo], lines: Iterable[TLineNo]) -> list[tuple[<ast.Tuple object at 0x11db30d10>]]
- `format_lines`(statements: Iterable[TLineNo], lines: Iterable[TLineNo], arcs: Iterable[tuple[<ast.Tuple object at 0x11db31750>]] | None) -> str
- `should_fail_under`(total: float, fail_under: float, precision: int) -> bool
- `__post_init__`() -> None
- `narrow`(lines: Container[TLineNo]) -> Analysis
- `missing_formatted`(branches: bool) -> str
- `arcs_missing`() -> list[TArc]
- `_branch_lines`() -> list[TLineNo]
- `_total_branches`() -> int
- `missing_branch_arcs`() -> dict[<ast.Tuple object at 0x11dae0990>]
- `executed_branch_arcs`() -> dict[<ast.Tuple object at 0x11dad2150>]
- `branch_stats`() -> dict[<ast.Tuple object at 0x11dad0290>]
- `n_executed`() -> int
- `n_executed_branches`() -> int
- `pc_covered`() -> float
- `pc_covered_str`() -> str
- `ratio_covered`() -> tuple[<ast.Tuple object at 0x11db1d310>]
- `__add__`(other: Numbers) -> Numbers
- `__radd__`(other: int) -> Numbers

### Implementation
**Analysis**
  - precision: int
  - filename: str
  - has_arcs: bool
  - statements: set[TLineNo]
  - excluded: set[TLineNo]
  - executed: set[TLineNo]
  - arc_possibilities_set: set[TArc]
  - arcs_executed_set: set[TArc]
  - exit_counts: dict[<ast.Tuple object at 0x11dad5590>]
  - no_branch: set[TLineNo]
**Numbers**
  - precision: int
  - n_files: int
  - n_statements: int
  - n_excluded: int
  - n_missing: int
  - n_branches: int
  - n_partial_branches: int
  - n_missing_branches: int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/results.py`  
**Dependencies**: `__future__.annotations`, `collections`, `dataclasses`, `collections.abc.Container`, `collections.abc.Iterable`, `typing.TYPE_CHECKING`, `coverage.exceptions.ConfigError`, `coverage.misc.nice_pair`, `coverage.types.TArc`, `coverage.types.TLineNo`, `coverage.data.CoverageData`, `coverage.plugin.FileReporter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.plugin_support
:::{doc} Plugins:26
The currently loaded collection of coverage.py plugins.
:::
:::{doc} LabelledDebug:141
A Debug writer, but with labels for prepending to the messages.
:::
:::{doc} DebugPluginWrapper:162
Wrap a plugin, and use debug to report on what it's doing.
:::
:::{doc} DebugFileTracerWrapper:205
A debugging `FileTracer`.
:::
:::{doc} DebugFileReporterWrapper:242
A debugging `FileReporter`.
:::
**Imports**: `__future__.annotations`, `os`, `os.path`, `sys`, `types.FrameType`, `typing.Any`, `collections.abc.Iterable`, `collections.abc.Iterator`, `coverage.exceptions.PluginError`, `coverage.misc.isolate_module`, `coverage.plugin.CoveragePlugin`, `coverage.plugin.FileTracer`, `coverage.plugin.FileReporter`, `coverage.types.TArc`, `coverage.types.TConfigurable`, `coverage.types.TDebugCtl`, `coverage.types.TLineNo`, `coverage.types.TPluginConfig`, `coverage.types.TSourceTokenLines`
**Type References**: [[DebugFileReporterWrapper]], [[DebugFileTracerWrapper]], [[DebugPluginWrapper]], [[LabelledDebug]], [[Plugins]]

### Interface
- `__init__`(filename: str, reporter: FileReporter, debug: LabelledDebug) -> None
- `load_plugins`(modules: Iterable[str], config: TPluginConfig, debug: TDebugCtl | None) -> Plugins
- `add_file_tracer`(plugin: CoveragePlugin) -> None
- `add_configurer`(plugin: CoveragePlugin) -> None
- `add_dynamic_context`(plugin: CoveragePlugin) -> None
- `add_noop`(plugin: CoveragePlugin) -> None
- `_add_plugin`(plugin: CoveragePlugin, specialized: list[CoveragePlugin] | None) -> None
- `__bool__`() -> bool
- `__iter__`() -> Iterator[CoveragePlugin]
- `get`(plugin_name: str) -> CoveragePlugin
- `add_label`(label: str) -> LabelledDebug
- `message_prefix`() -> str
- `write`(message: str) -> None
- `file_tracer`(filename: str) -> FileTracer | None
- `file_reporter`(filename: str) -> FileReporter | str
- `dynamic_context`(frame: FrameType) -> str | None
- `find_executable_files`(src_dir: str) -> Iterable[str]
- `configure`(config: TConfigurable) -> None
- `sys_info`() -> Iterable[tuple[<ast.Tuple object at 0x11db7f890>]]
- `_show_frame`(frame: FrameType) -> str
- `source_filename`() -> str
- `has_dynamic_source_filename`() -> bool
- `dynamic_source_filename`(filename: str, frame: FrameType) -> str | None
- `line_number_range`(frame: FrameType) -> tuple[<ast.Tuple object at 0x11db91ad0>]
- `relative_filename`() -> str
- `lines`() -> set[TLineNo]
- `excluded_lines`() -> set[TLineNo]
- `translate_lines`(lines: Iterable[TLineNo]) -> set[TLineNo]
- `translate_arcs`(arcs: Iterable[TArc]) -> set[TArc]
- `no_branch_lines`() -> set[TLineNo]
- `exit_counts`() -> dict[<ast.Tuple object at 0x11dba5f50>]
- `arcs`() -> set[TArc]
- `source`() -> str
- `source_token_lines`() -> TSourceTokenLines

### Implementation
**Plugins**

**LabelledDebug**

**DebugPluginWrapper**

**DebugFileTracerWrapper**

**DebugFileReporterWrapper**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/plugin_support.py`  
**Dependencies**: `__future__.annotations`, `os`, `os.path`, `sys`, `types.FrameType`, `typing.Any`, `collections.abc.Iterable`, `collections.abc.Iterator`, `coverage.exceptions.PluginError`, `coverage.misc.isolate_module`, `coverage.plugin.CoveragePlugin`, `coverage.plugin.FileTracer`, `coverage.plugin.FileReporter`, `coverage.types.TArc`, `coverage.types.TConfigurable`, `coverage.types.TDebugCtl`, `coverage.types.TLineNo`, `coverage.types.TPluginConfig`, `coverage.types.TSourceTokenLines`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.numbits
:::{doc} nums_to_numbits:26
Convert `nums` into a numbits.

Arguments:
    nums: a reusable iterable of integers, the line numbers to store.

Returns:
    A binary blob.
:::
:::{doc} numbits_to_nums:46
Convert a numbits into a list of numbers.

Arguments:
    numbits: a binary blob, the packed number set.

Returns:
    A list of ints.

When registered as a SQLite function by :func:`register_sqlite_functions`,
this returns a string, a JSON-encoded list of ints.
:::
:::{doc} numbits_union:67
Compute the union of two numbits.

Returns:
    A new numbits, the union of `numbits1` and `numbits2`.
:::
:::{doc} numbits_intersection:77
Compute the intersection of two numbits.

Returns:
    A new numbits, the intersection `numbits1` and `numbits2`.
:::
:::{doc} numbits_any_intersection:88
Is there any number that appears in both numbits?

Determine whether two number sets have a non-empty intersection. This is
faster than computing the intersection.

Returns:
    A bool, True if there is any number in both `numbits1` and `numbits2`.
:::
:::{doc} num_in_numbits:101
Does the integer `num` appear in `numbits`?

Returns:
    A bool, True if `num` is a member of `numbits`.
:::
:::{doc} register_sqlite_functions:113
Define numbits functions in a SQLite connection.

This defines these functions for use in SQLite statements:

* :func:`numbits_union`
* :func:`numbits_intersection`
* :func:`numbits_any_intersection`
* :func:`num_in_numbits`
* :func:`numbits_to_nums`

`connection` is a :class:`sqlite3.Connection <python:sqlite3.Connection>`
object.  After creating the connection, pass it to this function to
register the numbits functions.  Then you can use numbits functions in your
queries::

    import sqlite3
    from coverage.numbits import register_sqlite_functions

    conn = sqlite3.connect("example.db")
    register_sqlite_functions(conn)
    c = conn.cursor()
    # Kind of a nonsense query:
    # Find all the files and contexts that executed line 47 in any file:
    c.execute(
        "select file_id, context_id from line_bits where num_in_numbits(?, numbits)",
        (47,)
    )
:::
**Imports**: `__future__.annotations`, `json`, `sqlite3`, `itertools.zip_longest`, `collections.abc.Iterable`
### Interface
- `nums_to_numbits`(nums: Iterable[int]) -> bytes
- `numbits_to_nums`(numbits: bytes) -> list[int]
- `numbits_union`(numbits1: bytes, numbits2: bytes) -> bytes
- `numbits_intersection`(numbits1: bytes, numbits2: bytes) -> bytes
- `numbits_any_intersection`(numbits1: bytes, numbits2: bytes) -> bool
- `num_in_numbits`(num: int, numbits: bytes) -> bool
- `register_sqlite_functions`(connection: sqlite3.Connection) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/numbits.py`  
**Dependencies**: `__future__.annotations`, `json`, `sqlite3`, `itertools.zip_longest`, `collections.abc.Iterable`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.regions
:::{doc} Context:17
The nested named context of a function or class.
:::
:::{doc} RegionFinder:24
An ast visitor that will find and track regions of code.

Functions and classes are tracked by name. Results are in the .regions
attribute.
:::
:::{doc} code_regions:103
Find function and class regions in source code.

Analyzes the code in `source`, and returns a list of :class:`CodeRegion`
objects describing functions and classes as regions of the code::

    [
        CodeRegion(kind="function", name="func1", start=8, lines={10, 11, 12}),
        CodeRegion(kind="function", name="MyClass.method", start=30, lines={34, 35, 36}),
        CodeRegion(kind="class", name="MyClass", start=25, lines={34, 35, 36}),
    ]

The line numbers will include comments and blank lines.  Later processing
will need to ignore those lines as needed.

Nested functions and classes are excluded from their enclosing region.  No
line should be reported as being part of more than one function, or more
than one class.  Lines in methods are reported as being in a function and
in a class.
:::
**Imports**: `__future__.annotations`, `ast`, `dataclasses`, `typing.cast`, `coverage.plugin.CodeRegion`
**Type References**: [[Context]], [[RegionFinder]]

### Interface
- `code_regions`(source: str) -> list[CodeRegion]
- `__init__`() -> None
- `parse_source`(source: str) -> None
- `fq_node_name`() -> str
- `handle_node`(node: ast.AST) -> None
- `handle_node_body`(node: ast.AST) -> None
- `handle_FunctionDef`(node: ast.FunctionDef | ast.AsyncFunctionDef) -> None
- `handle_ClassDef`(node: ast.ClassDef) -> None

### Implementation
**Context**
  - name: str
  - kind: str
  - lines: set[int]
**RegionFinder**
  - lines: set[int]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/regions.py`  
**Dependencies**: `__future__.annotations`, `ast`, `dataclasses`, `typing.cast`, `coverage.plugin.CodeRegion`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.control
:::{doc} override_config:60
Temporarily tweak the configuration of `cov`.

The arguments are applied to `cov.config` with the `from_args` method.
At the end of the with-statement, the old configuration is restored.
:::
:::{doc} Coverage:78
Programmatic access to coverage.py.

To use::

    from coverage import Coverage

    cov = Coverage()
    cov.start()
    #.. call your code ..
    cov.stop()
    cov.html_report(directory="covhtml")

A context manager is available to do the same thing::

    cov = Coverage()
    with cov.collect():
        #.. call your code ..
    cov.html_report(directory="covhtml")

Note: in keeping with Python custom, names starting with underscore are
not part of the public API. They might stop working at any point.  Please
limit yourself to documented methods to avoid problems.

Methods can raise any of the exceptions described in :ref:`api_exceptions`.
:::
:::{doc} process_startup:1345
Call this at Python start-up to perhaps measure coverage.

If the environment variable COVERAGE_PROCESS_START is defined, coverage
measurement is started.  The value of the variable is the config file
to use.

There are two ways to configure your Python installation to invoke this
function when Python starts:

#. Create or append to sitecustomize.py to add these lines::

    import coverage
    coverage.process_startup()

#. Create a .pth file in your Python installation containing::

    import coverage; coverage.process_startup()

Returns the :class:`Coverage` instance that was started, or None if it was
not started by this call.
:::
:::{doc} _prevent_sub_process_measurement:1398
Stop any subprocess auto-measurement from writing data.
:::
**Imports**: `__future__.annotations`, `atexit`, `collections`, `contextlib`, `functools`, `os`, `os.path`, `platform`, `signal`, `sys`, `threading`, `time`, `warnings`, `types.FrameType`, `typing.cast`, `typing.Any`, `typing.Callable`, `typing.IO`, `collections.abc.Iterable`, `collections.abc.Iterator`, `coverage.env`, `coverage.annotate.AnnotateReporter`, `coverage.collector.Collector`, `coverage.config.CoverageConfig`, `coverage.config.read_coverage_config`, `coverage.context.should_start_context_test_function`, `coverage.context.combine_context_switchers`, `coverage.core.Core`, `coverage.core.HAS_CTRACER`, `coverage.data.CoverageData`, `coverage.data.combine_parallel_data`, `coverage.debug.DebugControl`, `coverage.debug.NoDebugging`, `coverage.debug.short_stack`, `coverage.debug.write_formatted_info`, `coverage.debug.relevant_environment_display`, `coverage.disposition.disposition_debug_msg`, `coverage.exceptions.ConfigError`, `coverage.exceptions.CoverageException`, `coverage.exceptions.CoverageWarning`, `coverage.exceptions.PluginError`, `coverage.files.PathAliases`, `coverage.files.abs_file`, `coverage.files.relative_filename`, `coverage.files.set_relative_directory`, `coverage.html.HtmlReporter`, `coverage.inorout.InOrOut`, `coverage.jsonreport.JsonReporter`, `coverage.lcovreport.LcovReporter`, `coverage.misc.bool_or_none`, `coverage.misc.join_regex`, `coverage.misc.DefaultValue`, `coverage.misc.ensure_dir_for_file`, `coverage.misc.isolate_module`, `coverage.multiproc.patch_multiprocessing`, `coverage.plugin.FileReporter`, `coverage.plugin_support.Plugins`, `coverage.python.PythonFileReporter`, `coverage.report.SummaryReporter`, `coverage.report_core.render_report`, `coverage.results.Analysis`, `coverage.results.analysis_from_file_reporter`, `coverage.types.FilePath`, `coverage.types.TConfigurable`, `coverage.types.TConfigSectionIn`, `coverage.types.TConfigValueIn`, `coverage.types.TConfigValueOut`, `coverage.types.TFileDisposition`, `coverage.types.TLineNo`, `coverage.types.TMorf`, `coverage.xmlreport.XmlReporter`, `coverage.debug.decorate_methods`, `coverage.debug.show_calls`, `coverage`
**Type References**: [[Coverage]], [[FileReporter]]

### Interface
- `override_config`(cov: Coverage) -> Iterator[None]
- `process_startup`() -> Coverage | None
- `_prevent_sub_process_measurement`() -> None
- `current`() -> Coverage | None
- `__init__`(data_file: FilePath | DefaultValue | None, data_suffix: str | bool | None, cover_pylib: bool | None, auto_data: bool, timid: bool | None, branch: bool | None, config_file: FilePath | bool, source: Iterable[str] | None, source_pkgs: Iterable[str] | None, omit: str | Iterable[str] | None, include: str | Iterable[str] | None, debug: Iterable[str] | None, concurrency: str | Iterable[str] | None, check_preimported: bool, context: str | None, messages: bool) -> None
- `_init`() -> None
- `_post_init`() -> None
- `_write_startup_debug`() -> None
- `_should_trace`(filename: str, frame: FrameType) -> TFileDisposition
- `_check_include_omit_etc`(filename: str, frame: FrameType) -> bool
- `_warn`(msg: str, slug: str | None, once: bool) -> None
- `_message`(msg: str) -> None
- `get_option`(option_name: str) -> TConfigValueOut | None
- `set_option`(option_name: str, value: TConfigValueIn | TConfigSectionIn) -> None
- `load`() -> None
- `_init_for_start`() -> None
- `_init_data`(suffix: str | bool | None) -> None
- `start`() -> None
- `stop`() -> None
- `collect`() -> Iterator[None]
- `_atexit`(event: str) -> None
- `_on_sigterm`(signum_unused: int, frame_unused: FrameType | None) -> None
- `erase`() -> None
- `switch_context`(new_context: str) -> None
- `clear_exclude`(which: str) -> None
- `exclude`(regex: str, which: str) -> None
- `_exclude_regex_stale`() -> None
- `_exclude_regex`(which: str) -> str
- `get_exclude_list`(which: str) -> list[str]
- `save`() -> None
- `_make_aliases`() -> PathAliases
- `combine`(data_paths: Iterable[str] | None, strict: bool, keep: bool) -> None
- `get_data`() -> CoverageData
- `_post_save_work`() -> None
- `analysis`(morf: TMorf) -> tuple[<ast.Tuple object at 0x11dcd7350>]
- `analysis2`(morf: TMorf) -> tuple[<ast.Tuple object at 0x11dce0e50>]
- `_analyze`(morf: TMorf) -> Analysis
- `_get_file_reporter`(morf: TMorf) -> FileReporter
- `_get_file_reporters`(morfs: Iterable[TMorf] | None) -> list[tuple[<ast.Tuple object at 0x11dcf0d10>]]
- `_prepare_data_for_reporting`() -> None
- `report`(morfs: Iterable[TMorf] | None, show_missing: bool | None, ignore_errors: bool | None, file: IO[str] | None, omit: str | list[str] | None, include: str | list[str] | None, skip_covered: bool | None, contexts: list[str] | None, skip_empty: bool | None, precision: int | None, sort: str | None, output_format: str | None) -> float
- `annotate`(morfs: Iterable[TMorf] | None, directory: str | None, ignore_errors: bool | None, omit: str | list[str] | None, include: str | list[str] | None, contexts: list[str] | None) -> None
- `html_report`(morfs: Iterable[TMorf] | None, directory: str | None, ignore_errors: bool | None, omit: str | list[str] | None, include: str | list[str] | None, extra_css: str | None, title: str | None, skip_covered: bool | None, show_contexts: bool | None, contexts: list[str] | None, skip_empty: bool | None, precision: int | None) -> float
- `xml_report`(morfs: Iterable[TMorf] | None, outfile: str | None, ignore_errors: bool | None, omit: str | list[str] | None, include: str | list[str] | None, contexts: list[str] | None, skip_empty: bool | None) -> float
- `json_report`(morfs: Iterable[TMorf] | None, outfile: str | None, ignore_errors: bool | None, omit: str | list[str] | None, include: str | list[str] | None, contexts: list[str] | None, pretty_print: bool | None, show_contexts: bool | None) -> float
- `lcov_report`(morfs: Iterable[TMorf] | None, outfile: str | None, ignore_errors: bool | None, omit: str | list[str] | None, include: str | list[str] | None, contexts: list[str] | None) -> float
- `sys_info`() -> Iterable[tuple[<ast.Tuple object at 0x11dd4c3d0>]]
- `plugin_info`(plugins: list[Any]) -> list[str]

### Implementation
**Coverage**
  - _instances: list[Coverage]
  - concurrency: list[str]
  - file_reporter: str | FileReporter
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/control.py`  
**Dependencies**: `__future__.annotations`, `atexit`, `collections`, `contextlib`, `functools`, `os`, `os.path`, `platform`, `signal`, `sys`, `threading`, `time`, `warnings`, `types.FrameType`, `typing.cast`, `typing.Any`, `typing.Callable`, `typing.IO`, `collections.abc.Iterable`, `collections.abc.Iterator`, `coverage.env`, `coverage.annotate.AnnotateReporter`, `coverage.collector.Collector`, `coverage.config.CoverageConfig`, `coverage.config.read_coverage_config`, `coverage.context.should_start_context_test_function`, `coverage.context.combine_context_switchers`, `coverage.core.Core`, `coverage.core.HAS_CTRACER`, `coverage.data.CoverageData`, `coverage.data.combine_parallel_data`, `coverage.debug.DebugControl`, `coverage.debug.NoDebugging`, `coverage.debug.short_stack`, `coverage.debug.write_formatted_info`, `coverage.debug.relevant_environment_display`, `coverage.disposition.disposition_debug_msg`, `coverage.exceptions.ConfigError`, `coverage.exceptions.CoverageException`, `coverage.exceptions.CoverageWarning`, `coverage.exceptions.PluginError`, `coverage.files.PathAliases`, `coverage.files.abs_file`, `coverage.files.relative_filename`, `coverage.files.set_relative_directory`, `coverage.html.HtmlReporter`, `coverage.inorout.InOrOut`, `coverage.jsonreport.JsonReporter`, `coverage.lcovreport.LcovReporter`, `coverage.misc.bool_or_none`, `coverage.misc.join_regex`, `coverage.misc.DefaultValue`, `coverage.misc.ensure_dir_for_file`, `coverage.misc.isolate_module`, `coverage.multiproc.patch_multiprocessing`, `coverage.plugin.FileReporter`, `coverage.plugin_support.Plugins`, `coverage.python.PythonFileReporter`, `coverage.report.SummaryReporter`, `coverage.report_core.render_report`, `coverage.results.Analysis`, `coverage.results.analysis_from_file_reporter`, `coverage.types.FilePath`, `coverage.types.TConfigurable`, `coverage.types.TConfigSectionIn`, `coverage.types.TConfigValueIn`, `coverage.types.TConfigValueOut`, `coverage.types.TFileDisposition`, `coverage.types.TLineNo`, `coverage.types.TMorf`, `coverage.xmlreport.XmlReporter`, `coverage.debug.decorate_methods`, `coverage.debug.show_calls`, `coverage`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.sqlitedb
:::{doc} SqliteDb:20
A simple abstraction over a SQLite database.

Use as a context manager, then you can use it like a
:class:`python:sqlite3.Connection` object::

    with SqliteDb(filename, debug_control) as db:
        with db.execute("select a, b from some_table") as cur:
            for a, b in cur:
                etc(a, b)
:::
**Imports**: `__future__.annotations`, `contextlib`, `re`, `sqlite3`, `typing.cast`, `typing.Any`, `collections.abc.Iterable`, `collections.abc.Iterator`, `coverage.debug.auto_repr`, `coverage.debug.clipped_repr`, `coverage.debug.exc_one_line`, `coverage.exceptions.DataError`, `coverage.types.TDebugCtl`
**Type References**: [[SqliteDb]]

### Interface
- `__init__`(filename: str, debug: TDebugCtl) -> None
- `_connect`() -> None
- `close`() -> None
- `__enter__`() -> SqliteDb
- `__exit__`() -> None
- `_execute`(sql: str, parameters: Iterable[Any]) -> sqlite3.Cursor
- `execute`(sql: str, parameters: Iterable[Any]) -> Iterator[sqlite3.Cursor]
- `execute_void`(sql: str, parameters: Iterable[Any], fail_ok: bool) -> None
- `execute_for_rowid`(sql: str, parameters: Iterable[Any]) -> int
- `execute_one`(sql: str, parameters: Iterable[Any]) -> tuple[<ast.Tuple object at 0x11dd92d90>] | None
- `_executemany`(sql: str, data: list[Any]) -> sqlite3.Cursor
- `executemany_void`(sql: str, data: Iterable[Any]) -> None
- `executescript`(script: str) -> None
- `dump`() -> str

### Implementation
**SqliteDb**
  - rowid: int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/sqlitedb.py`  
**Dependencies**: `__future__.annotations`, `contextlib`, `re`, `sqlite3`, `typing.cast`, `typing.Any`, `collections.abc.Iterable`, `collections.abc.Iterator`, `coverage.debug.auto_repr`, `coverage.debug.clipped_repr`, `coverage.debug.exc_one_line`, `coverage.exceptions.DataError`, `coverage.types.TDebugCtl`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.html
:::{doc} data_filename:44
Return the path to an "htmlfiles" data file of ours.
    
:::
:::{doc} read_data:52
Return the contents of a data file of ours.
:::
:::{doc} write_html:58
Write `html` to `fname`, properly encoded.
:::
:::{doc} LineData:66
The data for each source line of HTML output.
:::
:::{doc} FileData:84
The data for each source file of HTML output.
:::
:::{doc} IndexItem:92
Information for each index entry, to render an index page.
:::
:::{doc} IndexPage:101
Data for each index page.
:::
:::{doc} HtmlDataGeneration:112
Generate structured data to be turned into HTML reports.
:::
:::{doc} FileToReport:204
A file we're considering reporting.
:::
:::{doc} encode_int:217
Create a short HTML-safe string from an integer, using HTML_SAFE.
:::
:::{doc} copy_with_cache_bust:229
Copy `src` to `dest_dir`, adding a hash to the name.

Returns the updated destination file name with hash.
:::
:::{doc} HtmlReporter:246
HTML reporting.
:::
:::{doc} FileInfo:637
Summary of the information from last rendering, to avoid duplicate work.
:::
:::{doc} IncrementalChecker:643
Logic and data to support incremental reporting.

When generating an HTML report, often only a few of the source files have
changed since the last time we made the HTML report.  This means previously
created HTML pages can be reused without generating them again, speeding
the command.

This class manages a JSON data file that captures enough information to
know whether an HTML page for a .py file needs to be regenerated or not.
The data file also needs to store all the information needed to create the
entry for the file on the index page so that if the HTML page is reused,
the index page can still be created to refer to it.

The data looks like::

    {
        "note": "This file is an internal implementation detail ...",
        // A fixed number indicating the data format.  STATUS_FORMAT
        "format": 5,
        // The version of coverage.py
        "version": "7.4.4",
        // A hash of a number of global things, including the configuration
        // settings and the pyfile.html template itself.
        "globals": "540ee119c15d52a68a53fe6f0897346d",
        "files": {
            // An entry for each source file keyed by the flat_rootname().
            "z_7b071bdc2a35fa80___init___py": {
                // Hash of the source, the text of the .py file.
                "hash": "e45581a5b48f879f301c0f30bf77a50c",
                // Information for the index.html file.
                "index": {
                    "url": "z_7b071bdc2a35fa80___init___py.html",
                    "file": "cogapp/__init__.py",
                    "description": "",
                    // The Numbers for this file.
                    "nums": { "precision": 2, "n_files": 1, "n_statements": 43, ... }
                }
            },
            ...
        }
    }
:::
:::{doc} escape:805
HTML-escape the text in `t`.

This is only suitable for HTML text, not attributes.
:::
:::{doc} pair:815
Format a pair of numbers so JavaScript can read them in an attribute.
:::
**Imports**: `__future__.annotations`, `collections`, `dataclasses`, `datetime`, `functools`, `json`, `os`, `re`, `string`, `dataclasses.dataclass`, `dataclasses.field`, `typing.Any`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `coverage`, `coverage.data.CoverageData`, `coverage.data.add_data_to_hash`, `coverage.exceptions.NoDataError`, `coverage.files.flat_rootname`, `coverage.misc.ensure_dir`, `coverage.misc.file_be_gone`, `coverage.misc.Hasher`, `coverage.misc.isolate_module`, `coverage.misc.format_local_datetime`, `coverage.misc.human_sorted`, `coverage.misc.plural`, `coverage.misc.stdout_link`, `coverage.report_core.get_analysis_to_report`, `coverage.results.Analysis`, `coverage.results.Numbers`, `coverage.templite.Templite`, `coverage.types.TLineNo`, `coverage.types.TMorf`, `coverage.version.__url__`, `coverage.Coverage`, `coverage.plugins.FileReporter`
**Type References**: [[FileData]], [[FileInfo]], [[FileToReport]], [[HtmlDataGeneration]], [[HtmlReporter]], [[IncrementalChecker]], [[IndexItem]], [[IndexPage]], [[LineData]], [[None]], [[Numbers]], [[TLineNo]]

### Interface
- `data_filename`(fname: str) -> str
- `read_data`(fname: str) -> str
- `write_html`(fname: str, html: str) -> None
- `encode_int`(n: int) -> str
- `copy_with_cache_bust`(src: str, dest_dir: str) -> str
- `escape`(t: str) -> str
- `pair`(ratio: tuple[<ast.Tuple object at 0x11deb1910>]) -> str
- `__init__`(directory: str) -> None
- `data_for_file`(fr: FileReporter, analysis: Analysis) -> FileData
- `new_index_page`(noun: str, plural_noun: str) -> IndexPage
- `report`(morfs: Iterable[TMorf] | None) -> float
- `make_directory`() -> None
- `copy_static_file`(src: str, slug: str) -> None
- `make_local_static_report_files`() -> None
- `should_report`(analysis: Analysis, index_page: IndexPage) -> bool
- `write_html_page`(ftr: FileToReport) -> None
- `write_file_index_page`(first_html: str, final_html: str) -> None
- `write_region_index_pages`(files_to_report: Iterable[FileToReport]) -> None
- `write_index_page`(index_page: IndexPage) -> str
- `_reset`() -> None
- `read`() -> None
- `write`() -> None
- `check_global_data`() -> None
- `can_skip_file`(data: CoverageData, fr: FileReporter, rootname: str) -> bool
- `index_info`(fname: str) -> IndexItem
- `set_index_info`(fname: str, info: IndexItem) -> None

### Implementation
**LineData**
  - tokens: list[tuple[<ast.Tuple object at 0x11ddb9e10>]]
  - number: TLineNo
  - category: str
  - contexts: list[str]
  - contexts_label: str
  - context_list: list[str]
  - short_annotations: list[str]
  - long_annotations: list[str]
  - html: str
  - context_str: str | None
  - annotate: str | None
  - annotate_long: str | None
  - css_class: str
**FileData**
  - relative_filename: str
  - nums: Numbers
  - lines: list[LineData]
**IndexItem**
  - url: str
  - file: str
  - description: str
  - nums: Numbers
**IndexPage**
  - noun: str
  - plural: str
  - filename: str
  - summaries: list[IndexItem]
  - totals: Numbers
  - skipped_covered_count: int
  - skipped_empty_count: int
**HtmlDataGeneration**

**FileToReport**

**HtmlReporter**

**FileInfo**
  - hash: str
  - index: IndexItem
**IncrementalChecker**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/html.py`  
**Dependencies**: `__future__.annotations`, `collections`, `dataclasses`, `datetime`, `functools`, `json`, `os`, `re`, `string`, `dataclasses.dataclass`, `dataclasses.field`, `typing.Any`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `coverage`, `coverage.data.CoverageData`, `coverage.data.add_data_to_hash`, `coverage.exceptions.NoDataError`, `coverage.files.flat_rootname`, `coverage.misc.ensure_dir`, `coverage.misc.file_be_gone`, `coverage.misc.Hasher`, `coverage.misc.isolate_module`, `coverage.misc.format_local_datetime`, `coverage.misc.human_sorted`, `coverage.misc.plural`, `coverage.misc.stdout_link`, `coverage.report_core.get_analysis_to_report`, `coverage.results.Analysis`, `coverage.results.Numbers`, `coverage.templite.Templite`, `coverage.types.TLineNo`, `coverage.types.TMorf`, `coverage.version.__url__`, `coverage.Coverage`, `coverage.plugins.FileReporter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.cmdline
:::{doc} Opts:35
A namespace class for individual options we'll build parsers from.
:::
:::{doc} CoverageOptionParser:232
Base OptionParser for coverage.py.

Problems don't exit the program.
Defaults are initialized for all options.
:::
:::{doc} GlobalOptionParser:302
Command-line parser for coverage.py global option arguments.
:::
:::{doc} CmdOptionParser:314
Parse one of the new-style commands for coverage.py.
:::
:::{doc} show_help:551
Display an error message, or the named topic.
:::
:::{doc} CoverageScript:601
The command-line interface to coverage.py.
:::
:::{doc} unshell_list:902
Turn a command-line argument into a list.
:::
:::{doc} unglob_args:916
Interpret shell wildcards for platforms that need it.
:::
:::{doc} main:961
The main entry point to coverage.py.

This is installed as the script entry point.
:::
**Imports**: `__future__.annotations`, `glob`, `optparse`, `os`, `os.path`, `shlex`, `sys`, `textwrap`, `traceback`, `typing.cast`, `typing.Any`, `typing.NoReturn`, `coverage`, `coverage.Coverage`, `coverage.env`, `coverage.config.CoverageConfig`, `coverage.control.DEFAULT_DATAFILE`, `coverage.core.HAS_CTRACER`, `coverage.data.combinable_files`, `coverage.data.debug_data_file`, `coverage.debug.info_header`, `coverage.debug.short_stack`, `coverage.debug.write_formatted_info`, `coverage.exceptions._BaseCoverageException`, `coverage.exceptions._ExceptionDuringRun`, `coverage.exceptions.NoSource`, `coverage.execfile.PyRunner`, `coverage.results.display_covered`, `coverage.results.should_fail_under`, `coverage.version.__url__`, `ox_profile.core.launchers.SimpleLauncher`
**Type References**: [[CmdOptionParser]], [[CoverageOptionParser]], [[CoverageScript]], [[GlobalOptionParser]], [[None]], [[OptionParser]], [[OptionParserError]], [[Opts]], [[optparse.OptionParser]]

### Interface
- `show_help`(error: str | None, topic: str | None, parser: optparse.OptionParser | None) -> None
- `unshell_list`(s: str) -> list[str] | None
- `unglob_args`(args: list[str]) -> list[str]
- `main`(argv: list[str] | None) -> int | None
- `__init__`() -> None
- `parse_args_ok`(args: list[str]) -> tuple[<ast.Tuple object at 0x11df3c190>]
- `error`(msg: str) -> NoReturn
- `__eq__`(other: str) -> bool
- `get_prog_name`() -> str
- `command_line`(argv: list[str]) -> int
- `do_help`(options: optparse.Values, args: list[str], parser: optparse.OptionParser) -> bool
- `do_run`(options: optparse.Values, args: list[str]) -> int
- `do_debug`(args: list[str]) -> int

### Implementation
**Opts**

**CoverageOptionParser**

**GlobalOptionParser**

**CmdOptionParser**

**CoverageScript**
  - parser: optparse.OptionParser | None
**OptionParserError**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/cmdline.py`  
**Dependencies**: `__future__.annotations`, `glob`, `optparse`, `os`, `os.path`, `shlex`, `sys`, `textwrap`, `traceback`, `typing.cast`, `typing.Any`, `typing.NoReturn`, `coverage`, `coverage.Coverage`, `coverage.env`, `coverage.config.CoverageConfig`, `coverage.control.DEFAULT_DATAFILE`, `coverage.core.HAS_CTRACER`, `coverage.data.combinable_files`, `coverage.data.debug_data_file`, `coverage.debug.info_header`, `coverage.debug.short_stack`, `coverage.debug.write_formatted_info`, `coverage.exceptions._BaseCoverageException`, `coverage.exceptions._ExceptionDuringRun`, `coverage.exceptions.NoSource`, `coverage.execfile.PyRunner`, `coverage.results.display_covered`, `coverage.results.should_fail_under`, `coverage.version.__url__`, `ox_profile.core.launchers.SimpleLauncher`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.collector
:::{doc} Collector:43
Collects trace data.

Creates a Tracer object for each thread, since they track stack
information.  Each Tracer points to the same shared data, contributing
traced data points.

When the Collector is started, it creates a Tracer for the current thread,
and installs a function to create Tracers for each new thread started.
When the Collector is stopped, all active Tracers are stopped.

Threads started while the Collector is stopped will never have Tracers
associated with them.
:::
**Imports**: `__future__.annotations`, `contextlib`, `functools`, `os`, `sys`, `collections.abc.Mapping`, `types.FrameType`, `typing.cast`, `typing.Any`, `typing.Callable`, `typing.TypeVar`, `coverage.env`, `coverage.config.CoverageConfig`, `coverage.core.Core`, `coverage.data.CoverageData`, `coverage.debug.short_stack`, `coverage.exceptions.ConfigError`, `coverage.misc.human_sorted_items`, `coverage.misc.isolate_module`, `coverage.plugin.CoveragePlugin`, `coverage.types.TArc`, `coverage.types.TCheckIncludeFn`, `coverage.types.TFileDisposition`, `coverage.types.TShouldStartContextFn`, `coverage.types.TShouldTraceFn`, `coverage.types.TTraceData`, `coverage.types.TTraceFn`, `coverage.types.Tracer`, `coverage.types.TWarnFn`, `threading`, `__pypy__`, `greenlet`, `eventlet.greenthread`, `gevent`
**Type References**: [[Collector]], [[None]], [[TArc]], [[TTraceFn]]

### Interface
- `__init__`(core: Core, should_trace: TShouldTraceFn, check_include: TCheckIncludeFn, should_start_context: TShouldStartContextFn | None, file_mapper: Callable[<ast.Tuple object at 0x11dfd4190>], branch: bool, warn: TWarnFn, concurrency: list[str]) -> None
- `__repr__`() -> str
- `use_data`(covdata: CoverageData, context: str | None) -> None
- `tracer_name`() -> str
- `_clear_data`() -> None
- `reset`() -> None
- `lock_data`() -> None
- `unlock_data`() -> None
- `_start_tracer`() -> TTraceFn | None
- `_installation_trace`(frame: FrameType, event: str, arg: Any) -> TTraceFn | None
- `start`() -> None
- `stop`() -> None
- `pause`() -> None
- `resume`() -> None
- `post_fork`() -> None
- `_activity`() -> bool
- `switch_context`(new_context: str | None) -> None
- `disable_plugin`(disposition: TFileDisposition) -> None
- `cached_mapped_file`(filename: str) -> str
- `mapped_file_dict`(d: Mapping[<ast.Tuple object at 0x11e021ed0>]) -> dict[<ast.Tuple object at 0x11e023e90>]
- `plugin_was_disabled`(plugin: CoveragePlugin) -> None
- `flush_data`() -> bool

### Implementation
**Collector**
  - _collectors: list[Collector]
  - fn: TTraceFn | None
  - context: str | None
  - arc_data: dict[<ast.Tuple object at 0x11e02d990>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/collector.py`  
**Dependencies**: `__future__.annotations`, `contextlib`, `functools`, `os`, `sys`, `collections.abc.Mapping`, `types.FrameType`, `typing.cast`, `typing.Any`, `typing.Callable`, `typing.TypeVar`, `coverage.env`, `coverage.config.CoverageConfig`, `coverage.core.Core`, `coverage.data.CoverageData`, `coverage.debug.short_stack`, `coverage.exceptions.ConfigError`, `coverage.misc.human_sorted_items`, `coverage.misc.isolate_module`, `coverage.plugin.CoveragePlugin`, `coverage.types.TArc`, `coverage.types.TCheckIncludeFn`, `coverage.types.TFileDisposition`, `coverage.types.TShouldStartContextFn`, `coverage.types.TShouldTraceFn`, `coverage.types.TTraceData`, `coverage.types.TTraceFn`, `coverage.types.Tracer`, `coverage.types.TWarnFn`, `threading`, `__pypy__`, `greenlet`, `eventlet.greenthread`, `gevent`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage

**Imports**: `__future__.annotations`, `coverage.version.__version__`, `coverage.version.version_info`, `coverage.control.Coverage`, `coverage.control.process_startup`, `coverage.data.CoverageData`, `coverage.exceptions.CoverageException`, `coverage.plugin.CodeRegion`, `coverage.plugin.CoveragePlugin`, `coverage.plugin.FileReporter`, `coverage.plugin.FileTracer`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/__init__.py`  
**Dependencies**: `__future__.annotations`, `coverage.version.__version__`, `coverage.version.version_info`, `coverage.control.Coverage`, `coverage.control.process_startup`, `coverage.data.CoverageData`, `coverage.exceptions.CoverageException`, `coverage.plugin.CodeRegion`, `coverage.plugin.CoveragePlugin`, `coverage.plugin.FileReporter`, `coverage.plugin.FileTracer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.core
:::{doc} Core:45
Information about the central technology enabling execution measurement.
:::
**Imports**: `__future__.annotations`, `os`, `sys`, `typing.Any`, `coverage.env`, `coverage.disposition.FileDisposition`, `coverage.exceptions.ConfigError`, `coverage.misc.isolate_module`, `coverage.pytracer.PyTracer`, `coverage.sysmon.SysMonitor`, `coverage.types.TFileDisposition`, `coverage.types.Tracer`, `coverage.types.TWarnFn`, `coverage.tracer.CTracer`, `coverage.tracer.CFileDisposition`
**Type References**: [[Any]], [[Core]], [[None]], [[TFileDisposition]], [[Tracer]]

### Interface
- `__init__`(warn: TWarnFn, timid: bool, metacov: bool) -> None

### Implementation
**Core**
  - tracer_class: type[Tracer]
  - tracer_kwargs: dict[<ast.Tuple object at 0x11e04be10>]
  - file_disposition_class: type[TFileDisposition]
  - supports_plugins: bool
  - packed_arcs: bool
  - systrace: bool
  - core_name: str | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/core.py`  
**Dependencies**: `__future__.annotations`, `os`, `sys`, `typing.Any`, `coverage.env`, `coverage.disposition.FileDisposition`, `coverage.exceptions.ConfigError`, `coverage.misc.isolate_module`, `coverage.pytracer.PyTracer`, `coverage.sysmon.SysMonitor`, `coverage.types.TFileDisposition`, `coverage.types.Tracer`, `coverage.types.TWarnFn`, `coverage.tracer.CTracer`, `coverage.tracer.CFileDisposition`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.pytracer
:::{doc} PyTracer:56
Python implementation of the raw data tracer.
:::
**Imports**: `__future__.annotations`, `atexit`, `dis`, `itertools`, `sys`, `threading`, `types.FrameType`, `types.ModuleType`, `typing.Any`, `typing.Callable`, `typing.cast`, `coverage.env`, `coverage.types.TArc`, `coverage.types.TFileDisposition`, `coverage.types.TLineNo`, `coverage.types.TShouldStartContextFn`, `coverage.types.TShouldTraceFn`, `coverage.types.TTraceData`, `coverage.types.TTraceFileData`, `coverage.types.TTraceFn`, `coverage.types.TWarnFn`, `coverage.types.Tracer`
**Type References**: [[PyTracer]], [[TLineNo]]

### Interface
- `__init__`() -> None
- `__repr__`() -> str
- `log`(marker: str) -> None
- `_trace`(frame: FrameType, event: str, arg: Any, lineno: TLineNo | None) -> TTraceFn | None
- `start`() -> TTraceFn
- `stop`() -> None
- `activity`() -> bool
- `reset_activity`() -> None
- `get_stats`() -> dict[<ast.Tuple object at 0x11e0b7690>] | None

### Implementation
**PyTracer**
  - flineno: TLineNo
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/pytracer.py`  
**Dependencies**: `__future__.annotations`, `atexit`, `dis`, `itertools`, `sys`, `threading`, `types.FrameType`, `types.ModuleType`, `typing.Any`, `typing.Callable`, `typing.cast`, `coverage.env`, `coverage.types.TArc`, `coverage.types.TFileDisposition`, `coverage.types.TLineNo`, `coverage.types.TShouldStartContextFn`, `coverage.types.TShouldTraceFn`, `coverage.types.TTraceData`, `coverage.types.TTraceFileData`, `coverage.types.TTraceFn`, `coverage.types.TWarnFn`, `coverage.types.Tracer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.types
:::{doc} TTraceFn:40
A Python trace function.
:::
:::{doc} TFileDisposition:58
A simple value type for recording what to do with a file.
:::
:::{doc} Tracer:87
Anything that can report on Python execution.
:::
:::{doc} TConfigurable:134
Something that can proxy to the coverage configuration settings.
:::
:::{doc} TPluginConfig:159
Something that can provide options to a plugin.
:::
:::{doc} TPlugin:175
What all plugins have in common.
:::
:::{doc} TWarnFn:183
A callable warn() function.
:::
:::{doc} TDebugCtl:189
A DebugControl object, or something like it.
:::
:::{doc} TWritable:199
Anything that can be written to.
:::
**Imports**: `__future__.annotations`, `os`, `pathlib`, `collections.abc.Iterable`, `collections.abc.Mapping`, `types.FrameType`, `types.ModuleType`, `typing.Any`, `typing.Callable`, `typing.Optional`, `typing.Protocol`, `typing.Union`, `typing.TYPE_CHECKING`, `coverage.plugin.FileTracer`
**Type References**: [[Callable]], [[FileTracer]], [[Mapping]], [[None]], [[TConfigurable]], [[TDebugCtl]], [[TFileDisposition]], [[TPlugin]], [[TPluginConfig]], [[TShouldStartContextFn]], [[TShouldTraceFn]], [[TTraceData]], [[TTraceFn]], [[TWarnFn]], [[TWritable]], [[Tracer]]

### Interface
- `__call__`(msg: str, slug: str | None, once: bool) -> None
- `__init__`() -> None
- `start`() -> TTraceFn | None
- `stop`() -> None
- `activity`() -> bool
- `reset_activity`() -> None
- `get_stats`() -> dict[<ast.Tuple object at 0x11e0d2c50>] | None
- `get_option`(option_name: str) -> TConfigValueOut | None
- `set_option`(option_name: str, value: TConfigValueIn | TConfigSectionIn) -> None
- `get_plugin_options`(plugin: str) -> TConfigSectionOut
- `should`(option: str) -> bool
- `write`(msg: str) -> None

### Implementation
**TTraceFn**

**TFileDisposition**
  - original_filename: str
  - canonical_filename: str
  - source_filename: str | None
  - trace: bool
  - reason: str
  - file_tracer: FileTracer | None
  - has_dynamic_filename: bool
**Tracer**
  - data: TTraceData
  - trace_arcs: bool
  - should_trace: TShouldTraceFn
  - should_trace_cache: Mapping[<ast.Tuple object at 0x11e0bc910>]
  - should_start_context: TShouldStartContextFn | None
  - switch_context: Callable[<ast.Tuple object at 0x11e0bc150>] | None
  - lock_data: Callable[<ast.Tuple object at 0x11e0d0090>]
  - unlock_data: Callable[<ast.Tuple object at 0x11e0d0950>]
  - warn: TWarnFn
**TConfigurable**

**TPluginConfig**

**TPlugin**
  - _coverage_plugin_name: str
  - _coverage_enabled: bool
**TWarnFn**

**TDebugCtl**

**TWritable**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/types.py`  
**Dependencies**: `__future__.annotations`, `os`, `pathlib`, `collections.abc.Iterable`, `collections.abc.Mapping`, `types.FrameType`, `types.ModuleType`, `typing.Any`, `typing.Callable`, `typing.Optional`, `typing.Protocol`, `typing.Union`, `typing.TYPE_CHECKING`, `coverage.plugin.FileTracer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.annotate
:::{doc} AnnotateReporter:27
Generate annotated source files showing line coverage.

This reporter creates annotated copies of the measured source files. Each
.py file is copied as a .py,cover file, with a left-hand margin annotating
each line::

    > def h(x):
    -     if 0:   #pragma: no cover
    -         pass
    >     if x == 1:
    !         a = 1
    >     else:
    >         a = 2

    > h(2)

Executed lines use ">", lines not executed use "!", lines excluded from
consideration use "-".
:::
**Imports**: `__future__.annotations`, `os`, `re`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `coverage.files.flat_rootname`, `coverage.misc.ensure_dir`, `coverage.misc.isolate_module`, `coverage.plugin.FileReporter`, `coverage.report_core.get_analysis_to_report`, `coverage.results.Analysis`, `coverage.types.TMorf`, `coverage.Coverage`
**Type References**: [[AnnotateReporter]]

### Interface
- `__init__`(coverage: Coverage) -> None
- `report`(morfs: Iterable[TMorf] | None, directory: str | None) -> None
- `annotate_file`(fr: FileReporter, analysis: Analysis) -> None

### Implementation
**AnnotateReporter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/annotate.py`  
**Dependencies**: `__future__.annotations`, `os`, `re`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `coverage.files.flat_rootname`, `coverage.misc.ensure_dir`, `coverage.misc.isolate_module`, `coverage.plugin.FileReporter`, `coverage.report_core.get_analysis_to_report`, `coverage.results.Analysis`, `coverage.types.TMorf`, `coverage.Coverage`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.sqldata
:::{doc} _locked:114
A decorator for methods that should hold self._lock.
:::
:::{doc} CoverageData:127
Manages collected coverage data, including file storage.

This class is the public supported API to the data that coverage.py
collects during program execution.  It includes information about what code
was executed. It does not include information from the analysis phase, to
determine what lines could have been executed, or what lines were not
executed.

.. note::

    The data file is currently a SQLite database file, with a
    :ref:`documented schema <dbschema>`. The schema is subject to change
    though, so be careful about querying it directly. Use this API if you
    can to isolate yourself from changes.

There are a number of kinds of data that can be collected:

* **lines**: the line numbers of source lines that were executed.
  These are always available.

* **arcs**: pairs of source and destination line numbers for transitions
  between source lines.  These are only available if branch coverage was
  used.

* **file tracer names**: the module names of the file tracer plugins that
  handled each file in the data.

Lines, arcs, and file tracer names are stored for each source file. File
names in this API are case-sensitive, even on platforms with
case-insensitive file systems.

A data file either stores lines, or arcs, but not both.

A data file is associated with the data when the :class:`CoverageData`
is created, using the parameters `basename`, `suffix`, and `no_disk`. The
base name can be queried with :meth:`base_filename`, and the actual file
name being used is available from :meth:`data_filename`.

To read an existing coverage.py data file, use :meth:`read`.  You can then
access the line, arc, or file tracer data with :meth:`lines`, :meth:`arcs`,
or :meth:`file_tracer`.

The :meth:`has_arcs` method indicates whether arc data is available.  You
can get a set of the files in the data with :meth:`measured_files`.  As
with most Python containers, you can determine if there is any data at all
by using this object as a boolean value.

The contexts for each line in a file can be read with
:meth:`contexts_by_lineno`.

To limit querying to certain contexts, use :meth:`set_query_context` or
:meth:`set_query_contexts`. These will narrow the focus of subsequent
:meth:`lines`, :meth:`arcs`, and :meth:`contexts_by_lineno` calls. The set
of all measured context names can be retrieved with
:meth:`measured_contexts`.

Most data files will be created by coverage.py itself, but you can use
methods here to create data files if you like.  The :meth:`add_lines`,
:meth:`add_arcs`, and :meth:`add_file_tracers` methods add data, in ways
that are convenient for coverage.py.

To record data for contexts, use :meth:`set_context` to set a context to
be used for subsequent :meth:`add_lines` and :meth:`add_arcs` calls.

To add a source file without any measured data, use :meth:`touch_file`,
or :meth:`touch_files` for a list of such files.

Write the data to its file with :meth:`write`.

You can clear the data in memory with :meth:`erase`.  Data for specific
files can be removed from the database with :meth:`purge_files`.

Two data collections can be combined by using :meth:`update` on one
:class:`CoverageData`, passing it the other.

Data in a :class:`CoverageData` can be serialized and deserialized with
:meth:`dumps` and :meth:`loads`.

The methods used during the coverage.py collection phase
(:meth:`add_lines`, :meth:`add_arcs`, :meth:`set_context`, and
:meth:`add_file_tracers`) are thread-safe.  Other methods may not be.
:::
:::{doc} filename_suffix:1082
Compute a filename suffix for a data file.

If `suffix` is a string or None, simply return it. If `suffix` is True,
then build a suffix incorporating the hostname, process id, and a random
number.

Returns a string or None.
:::
**Imports**: `__future__.annotations`, `collections`, `datetime`, `functools`, `glob`, `itertools`, `os`, `random`, `socket`, `sqlite3`, `string`, `sys`, `textwrap`, `threading`, `zlib`, `typing.cast`, `typing.Any`, `typing.Callable`, `collections.abc.Collection`, `collections.abc.Mapping`, `collections.abc.Sequence`, `coverage.debug.NoDebugging`, `coverage.debug.auto_repr`, `coverage.exceptions.CoverageException`, `coverage.exceptions.DataError`, `coverage.misc.file_be_gone`, `coverage.misc.isolate_module`, `coverage.numbits.numbits_to_nums`, `coverage.numbits.numbits_union`, `coverage.numbits.nums_to_numbits`, `coverage.sqlitedb.SqliteDb`, `coverage.types.AnyCallable`, `coverage.types.FilePath`, `coverage.types.TArc`, `coverage.types.TDebugCtl`, `coverage.types.TLineNo`, `coverage.types.TWarnFn`, `coverage.version.__version__`
**Type References**: [[CoverageData]]

### Interface
- `_locked`(method: AnyCallable) -> AnyCallable
- `filename_suffix`(suffix: str | bool | None) -> str | None
- `_wrapped`(self: CoverageData) -> Any
- `__init__`(basename: FilePath | None, suffix: str | bool | None, no_disk: bool, warn: TWarnFn | None, debug: TDebugCtl | None) -> None
- `_choose_filename`() -> None
- `_reset`() -> None
- `_open_db`() -> None
- `_read_db`() -> None
- `_init_db`(db: SqliteDb) -> None
- `_connect`() -> SqliteDb
- `__bool__`() -> bool
- `dumps`() -> bytes
- `loads`(data: bytes) -> None
- `_file_id`(filename: str, add: bool) -> int | None
- `_context_id`(context: str) -> int | None
- `set_context`(context: str | None) -> None
- `_set_context_id`() -> None
- `base_filename`() -> str
- `data_filename`() -> str
- `add_lines`(line_data: Mapping[<ast.Tuple object at 0x11e116290>]) -> None
- `add_arcs`(arc_data: Mapping[<ast.Tuple object at 0x11e17bf90>]) -> None
- `_choose_lines_or_arcs`(lines: bool, arcs: bool) -> None
- `add_file_tracers`(file_tracers: Mapping[<ast.Tuple object at 0x11e1a1210>]) -> None
- `touch_file`(filename: str, plugin_name: str) -> None
- `touch_files`(filenames: Collection[str], plugin_name: str | None) -> None
- `purge_files`(filenames: Collection[str]) -> None
- `update`(other_data: CoverageData, map_path: Callable[<ast.Tuple object at 0x11e1b74d0>] | None) -> None
- `erase`(parallel: bool) -> None
- `read`() -> None
- `write`() -> None
- `_start_using`() -> None
- `has_arcs`() -> bool
- `measured_files`() -> set[str]
- `measured_contexts`() -> set[str]
- `file_tracer`(filename: str) -> str | None
- `set_query_context`(context: str) -> None
- `set_query_contexts`(contexts: Sequence[str] | None) -> None
- `lines`(filename: str) -> list[TLineNo] | None
- `arcs`(filename: str) -> list[TArc] | None
- `contexts_by_lineno`(filename: str) -> dict[<ast.Tuple object at 0x11e23e610>]
- `sys_info`() -> list[tuple[<ast.Tuple object at 0x11e245750>]]

### Implementation
**CoverageData**
  - lines: dict[<ast.Tuple object at 0x11e1c9210>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/sqldata.py`  
**Dependencies**: `__future__.annotations`, `collections`, `datetime`, `functools`, `glob`, `itertools`, `os`, `random`, `socket`, `sqlite3`, `string`, `sys`, `textwrap`, `threading`, `zlib`, `typing.cast`, `typing.Any`, `typing.Callable`, `collections.abc.Collection`, `collections.abc.Mapping`, `collections.abc.Sequence`, `coverage.debug.NoDebugging`, `coverage.debug.auto_repr`, `coverage.exceptions.CoverageException`, `coverage.exceptions.DataError`, `coverage.misc.file_be_gone`, `coverage.misc.isolate_module`, `coverage.numbits.numbits_to_nums`, `coverage.numbits.numbits_union`, `coverage.numbits.nums_to_numbits`, `coverage.sqlitedb.SqliteDb`, `coverage.types.AnyCallable`, `coverage.types.FilePath`, `coverage.types.TArc`, `coverage.types.TDebugCtl`, `coverage.types.TLineNo`, `coverage.types.TWarnFn`, `coverage.version.__version__`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.disposition
:::{doc} FileDisposition:16
A simple value type for recording what to do with a file.
:::
:::{doc} disposition_init:35
Construct and initialize a new FileDisposition object.
:::
:::{doc} disposition_debug_msg:48
Make a nice debug message of what the FileDisposition is doing.
:::
**Imports**: `__future__.annotations`, `typing.TYPE_CHECKING`, `coverage.types.TFileDisposition`, `coverage.plugin.FileTracer`
**Type References**: [[FileDisposition]], [[FileTracer]], [[None]]

### Interface
- `disposition_init`(cls: type[TFileDisposition], original_filename: str) -> TFileDisposition
- `disposition_debug_msg`(disp: TFileDisposition) -> str
- `__repr__`() -> str

### Implementation
**FileDisposition**
  - original_filename: str
  - canonical_filename: str
  - source_filename: str | None
  - trace: bool
  - reason: str
  - file_tracer: FileTracer | None
  - has_dynamic_filename: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/disposition.py`  
**Dependencies**: `__future__.annotations`, `typing.TYPE_CHECKING`, `coverage.types.TFileDisposition`, `coverage.plugin.FileTracer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.parser
:::{doc} PythonParser:33
Parse code to find executable lines, excluded lines, etc.

This information is all based on static analysis: no code execution is
involved.
:::
:::{doc} ByteParser:418
Parse bytecode to understand the structure of code.
:::
:::{doc} ArcStart:501
The information needed to start an arc.

`lineno` is the line number the arc starts from.

`cause` is an English text fragment used as the `missing_cause_msg` for
AstArcAnalyzer.missing_arc_fragments.  It will be used to describe why an
arc wasn't executed, so should fit well into a sentence of the form,
"Line 17 didn't run because {cause}."  The fragment can include "{lineno}"
to have `lineno` interpolated into it.

As an example, this code::

    if something(x):        # line 1
        func(x)             # line 2
    more_stuff()            # line 3

would have two ArcStarts:

- ArcStart(1, "the condition on line 1 was always true")
- ArcStart(1, "the condition on line 1 was never true")

The first would be used to create an arc from 1 to 3, creating a message like
"line 1 didn't jump to line 3 because the condition on line 1 was always true."

The second would be used for the arc from 1 to 2, creating a message like
"line 1 didn't jump to line 2 because the condition on line 1 was never true."
:::
:::{doc} TAddArcFn:534
The type for AstArcAnalyzer.add_arc().
:::
:::{doc} Block:558
Blocks need to handle various exiting statements in their own ways.

All of these methods take a list of exits, and a callable `add_arc`
function that they can use to add arcs if needed.  They return True if the
exits are handled, or False if the search should continue up the block
stack.
:::
:::{doc} LoopBlock:585
A block on the block stack representing a `for` or `while` loop.
:::
:::{doc} FunctionBlock:603
A block on the block stack representing a function definition.
:::
:::{doc} TryBlock:628
A block on the block stack representing a `try` block.
:::
:::{doc} NodeList:643
A synthetic fictitious node, containing a sequence of nodes.

This is used when collapsing optimized if-statements, to represent the
unconditional execution of one of the clauses.
:::
:::{doc} AstArcAnalyzer:657
Analyze source text with an AST to find executable code paths.

The .analyze() method does the work, and populates these attributes:

`arcs`: a set of (from, to) pairs of the the arcs possible in the code.

`missing_arc_fragments`: a dict mapping (from, to) arcs to lists of
message fragments explaining why the arc is missing from execution::

    { (start, end): [(missing_cause_msg, action_msg), ...], }

For an arc starting from line 17, they should be usable to form complete
sentences like: "Line 17 didn't {action_msg} because {missing_cause_msg}".

NOTE: Starting in July 2024, I've been whittling this down to only report
arc that are part of true branches.  It's not clear how far this work will
go.
:::
**Imports**: `__future__.annotations`, `ast`, `functools`, `collections`, `os`, `re`, `sys`, `token`, `tokenize`, `collections.abc.Iterable`, `collections.abc.Sequence`, `dataclasses.dataclass`, `types.CodeType`, `typing.cast`, `typing.Callable`, `typing.Optional`, `typing.Protocol`, `coverage.env`, `coverage.bytecode.code_objects`, `coverage.debug.short_stack`, `coverage.exceptions.NoSource`, `coverage.exceptions.NotPython`, `coverage.misc.isolate_module`, `coverage.misc.nice_pair`, `coverage.phystokens.generate_tokens`, `coverage.types.TArc`, `coverage.types.TLineNo`, `coverage.python.get_python_source`
**Type References**: [[ArcStart]], [[AstArcAnalyzer]], [[Block]], [[ByteParser]], [[FunctionBlock]], [[LoopBlock]], [[NodeList]], [[None]], [[PythonParser]], [[TAddArcFn]], [[TLineNo]], [[TryBlock]]

### Interface
- `__init__`(filename: str, root_node: ast.AST, statements: set[TLineNo], multiline: dict[<ast.Tuple object at 0x11e321150>]) -> None
- `lines_matching`(regex: str) -> set[TLineNo]
- `_raw_parse`() -> None
- `first_line`(lineno: TLineNo) -> TLineNo
- `first_lines`(linenos: Iterable[TLineNo]) -> set[TLineNo]
- `translate_lines`(lines: Iterable[TLineNo]) -> set[TLineNo]
- `translate_arcs`(arcs: Iterable[TArc]) -> set[TArc]
- `parse_source`() -> None
- `arcs`() -> set[TArc]
- `_analyze_ast`() -> None
- `fix_with_jumps`(arcs: Iterable[TArc]) -> set[TArc]
- `exit_counts`() -> dict[<ast.Tuple object at 0x11e29b590>]
- `_finish_action_msg`(action_msg: str | None, end: TLineNo) -> str
- `missing_arc_description`(start: TLineNo, end: TLineNo) -> str
- `arc_description`(start: TLineNo, end: TLineNo) -> str
- `child_parsers`() -> Iterable[ByteParser]
- `_line_numbers`() -> Iterable[TLineNo]
- `_find_statements`() -> Iterable[TLineNo]
- `__call__`(start: TLineNo, end: TLineNo, missing_cause_msg: str | None, action_msg: str | None) -> None
- `process_break_exits`(exits: set[ArcStart]) -> None
- `process_continue_exits`(exits: set[ArcStart]) -> None
- `process_raise_exits`(exits: set[ArcStart]) -> None
- `process_return_exits`(exits: set[ArcStart]) -> None
- `analyze`() -> None
- `with_jump_fixers`() -> dict[<ast.Tuple object at 0x11e33b910>]
- `_code_object__Module`(node: ast.Module) -> None
- `_code_object__FunctionDef`(node: ast.FunctionDef) -> None
- `_code_object__ClassDef`(node: ast.ClassDef) -> None
- `add_arc`(start: TLineNo, end: TLineNo, missing_cause_msg: str | None, action_msg: str | None) -> None
- `nearest_blocks`() -> Iterable[Block]
- `line_for_node`(node: ast.AST) -> TLineNo
- `_line_decorated`(node: ast.FunctionDef) -> TLineNo
- `_line__Assign`(node: ast.Assign) -> TLineNo
- `_line__Dict`(node: ast.Dict) -> TLineNo
- `_line__List`(node: ast.List) -> TLineNo
- `_line__Module`(node: ast.Module) -> TLineNo
- `node_exits`(node: ast.AST) -> set[ArcStart]
- `process_body`(body: Sequence[ast.AST], from_start: ArcStart | None, prev_starts: set[ArcStart] | None) -> set[ArcStart]
- `find_non_missing_node`(node: ast.AST) -> ast.AST | None
- `_missing__If`(node: ast.If) -> ast.AST | None
- `_missing__NodeList`(node: NodeList) -> ast.AST | None
- `_missing__While`(node: ast.While) -> ast.AST | None
- `is_constant_expr`(node: ast.AST) -> str | None
- `_handle__Break`(node: ast.Break) -> set[ArcStart]
- `_handle_decorated`(node: ast.FunctionDef) -> set[ArcStart]
- `_handle__Continue`(node: ast.Continue) -> set[ArcStart]
- `_handle__For`(node: ast.For) -> set[ArcStart]
- `_handle__If`(node: ast.If) -> set[ArcStart]
- `_handle__NodeList`(node: NodeList) -> set[ArcStart]
- `_handle__Raise`(node: ast.Raise) -> set[ArcStart]
- `_handle__Return`(node: ast.Return) -> set[ArcStart]
- `_handle__Try`(node: ast.Try) -> set[ArcStart]
- `_handle__While`(node: ast.While) -> set[ArcStart]
- `_handle__With`(node: ast.With) -> set[ArcStart]
- `_handle__Match`(node: ast.Match) -> set[ArcStart]

### Implementation
**PythonParser**
  - matches: set[TLineNo]
  - indent: int
  - exclude_indent: int
  - excluding: bool
  - first_line: int
  - empty: bool
  - nesting: int
  - exit_counts: dict[<ast.Tuple object at 0x11e2a1350>]
**ByteParser**

**ArcStart**
  - lineno: TLineNo
  - cause: str
**TAddArcFn**

**Block**

**LoopBlock**

**FunctionBlock**

**TryBlock**

**NodeList**

**AstArcAnalyzer**
  - main_line: TLineNo
  - last: TLineNo | None
  - handler_exits: set[ArcStart]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/parser.py`  
**Dependencies**: `__future__.annotations`, `ast`, `functools`, `collections`, `os`, `re`, `sys`, `token`, `tokenize`, `collections.abc.Iterable`, `collections.abc.Sequence`, `dataclasses.dataclass`, `types.CodeType`, `typing.cast`, `typing.Callable`, `typing.Optional`, `typing.Protocol`, `coverage.env`, `coverage.bytecode.code_objects`, `coverage.debug.short_stack`, `coverage.exceptions.NoSource`, `coverage.exceptions.NotPython`, `coverage.misc.isolate_module`, `coverage.misc.nice_pair`, `coverage.phystokens.generate_tokens`, `coverage.types.TArc`, `coverage.types.TLineNo`, `coverage.python.get_python_source`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.context
:::{doc} combine_context_switchers:15
Create a single context switcher from multiple switchers.

`context_switchers` is a list of functions that take a frame as an
argument and return a string to use as the new context label.

Returns a function that composites `context_switchers` functions, or None
if `context_switchers` is an empty list.

When invoked, the combined switcher calls `context_switchers` one-by-one
until a string is returned.  The combined switcher returns None if all
`context_switchers` return None.
:::
:::{doc} should_start_context_test_function:47
Is this frame calling a test_* function?
:::
:::{doc} qualname_from_frame:55
Get a qualified name for the code running in `frame`.
:::
**Imports**: `__future__.annotations`, `types.FrameType`, `typing.cast`, `collections.abc.Sequence`, `coverage.types.TShouldStartContextFn`
### Interface
- `combine_context_switchers`(context_switchers: Sequence[TShouldStartContextFn]) -> TShouldStartContextFn | None
- `should_start_context_test_function`(frame: FrameType) -> str | None
- `qualname_from_frame`(frame: FrameType) -> str | None
- `should_start_context`(frame: FrameType) -> str | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/context.py`  
**Dependencies**: `__future__.annotations`, `types.FrameType`, `typing.cast`, `collections.abc.Sequence`, `coverage.types.TShouldStartContextFn`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.xmlreport
:::{doc} rate:35
Return the fraction of `hit`/`num`, as a string.
:::
:::{doc} PackageData:44
Data we keep about each "package" (in Java terms).
:::
:::{doc} appendChild:53
Append a child to a parent, in a way mypy will shut up about.
:::
:::{doc} XmlReporter:58
A reporter for writing Cobertura-style XML coverage results.
:::
:::{doc} serialize_xml:259
Serialize a minidom node to XML.
:::
**Imports**: `__future__.annotations`, `os`, `os.path`, `sys`, `time`, `xml.dom.minidom`, `dataclasses.dataclass`, `typing.Any`, `typing.IO`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `coverage.__version__`, `coverage.files`, `coverage.misc.isolate_module`, `coverage.misc.human_sorted`, `coverage.misc.human_sorted_items`, `coverage.plugin.FileReporter`, `coverage.report_core.get_analysis_to_report`, `coverage.results.Analysis`, `coverage.types.TMorf`, `coverage.version.__url__`, `coverage.Coverage`
**Type References**: [[Element]], [[PackageData]], [[XmlReporter]], [[xml.dom.minidom.Element]]

### Interface
- `rate`(hit: int, num: int) -> str
- `appendChild`(parent: Any, child: Any) -> None
- `serialize_xml`(dom: xml.dom.minidom.Document) -> str
- `__init__`(coverage: Coverage) -> None
- `report`(morfs: Iterable[TMorf] | None, outfile: IO[str] | None) -> float
- `xml_file`(fr: FileReporter, analysis: Analysis, has_arcs: bool) -> None

### Implementation
**PackageData**
  - elements: dict[<ast.Tuple object at 0x11e438590>]
  - hits: int
  - lines: int
  - br_hits: int
  - branches: int
**XmlReporter**
  - xclass: xml.dom.minidom.Element
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/xmlreport.py`  
**Dependencies**: `__future__.annotations`, `os`, `os.path`, `sys`, `time`, `xml.dom.minidom`, `dataclasses.dataclass`, `typing.Any`, `typing.IO`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `coverage.__version__`, `coverage.files`, `coverage.misc.isolate_module`, `coverage.misc.human_sorted`, `coverage.misc.human_sorted_items`, `coverage.plugin.FileReporter`, `coverage.report_core.get_analysis_to_report`, `coverage.results.Analysis`, `coverage.types.TMorf`, `coverage.version.__url__`, `coverage.Coverage`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.debug
:::{doc} DebugControl:41
Control and output for debugging.
:::
:::{doc} NoDebugging:112
A replacement for DebugControl that will never try to do anything.
:::
:::{doc} info_header:127
Make a nice header string.
:::
:::{doc} info_formatter:132
Produce a sequence of formatted lines from info.

`info` is a sequence of pairs (label, data).  The produced lines are
nicely formatted, ready to print.
:::
:::{doc} write_formatted_info:159
Write a sequence of (label,data) pairs nicely.

`write` is a function write(str) that accepts each line of output.
`header` is a string to start the section.  `info` is a sequence of
(label, data) pairs, where label is a str, and data can be a single
value, or a list/set/tuple.
:::
:::{doc} exc_one_line:177
Get a one-line summary of an exception, including class name and message.
:::
:::{doc} short_filename:196
Shorten a file name. Directories are replaced by prefixes like 'syspath:'
:::
:::{doc} short_stack:212
Return a string summarizing the call stack.

The string is multi-line, with one line per stack frame. Each line shows
the function name, the file name, and the line number:

    ...
    start_import_stop : /Users/ned/coverage/trunk/tests/coveragetest.py:95
    import_local_file : /Users/ned/coverage/trunk/tests/coveragetest.py:81
    import_local_file : /Users/ned/coverage/trunk/coverage/backward.py:159
    ...

`skip` is the number of closest immediate frames to skip, so that debugging
functions can call this and not be included in the result.

If `full` is true, then include all frames.  Otherwise, initial "boring"
frames (ones in site-packages and earlier) are omitted.

`short_filenames` will shorten filenames using `short_filename`, to reduce
the amount of repetitive noise in stack traces.
:::
:::{doc} dump_stack_frames:266
Print a summary of the stack to `out`.
:::
:::{doc} clipped_repr:271
`repr(text)`, but limited to `numchars`.
:::
:::{doc} short_id:278
Given a 64-bit id, make a shorter 16-bit one.
:::
:::{doc} add_pid_and_tid:286
A filter to add pid and tid to debug messages.
:::
:::{doc} auto_repr:296
A function implementing an automatic __repr__ for debugging.
:::
:::{doc} simplify:311
Turn things which are nearly dict/list/etc into dict/list/etc.
:::
:::{doc} pp:323
Debug helper to pretty-print data, including SimpleNamespace objects.
:::
:::{doc} filter_text:329
Run `text` through a series of filters.

`filters` is a list of functions. Each takes a string and returns a
string.  Each is run in turn. After each filter, the text is split into
lines, and each line is passed through the next filter.

Returns: the final string that results after all of the filters have
run.
:::
:::{doc} CwdTracker:351
A class to add cwd info to debug messages.
:::
:::{doc} ProcessTracker:365
Track process creation for debug logging.
:::
:::{doc} PytestTracker:393
Track the current pytest test name to add to debug messages.
:::
:::{doc} DebugOutputFile:407
A file-like object that includes pid and cwd information.
:::
:::{doc} log:504
Write a log message as forcefully as possible.
:::
:::{doc} decorate_methods:512
A class decorator to apply a decorator to methods.
:::
:::{doc} break_in_pudb:532
A function decorator to stop in the debugger for each call.
:::
:::{doc} show_calls:547
A method decorator to debug-log each call to the function.
:::
:::{doc} relevant_environment_display:585
Filter environment variables for a debug display.

Select variables to display (with COV or PY in the name, or HOME, TEMP, or
TMP), and also cloak sensitive values with asterisks.

Arguments:
    env: a dict of environment variable names and values.

Returns:
    A list of pairs (name, value) to show.
:::
**Imports**: `__future__.annotations`, `atexit`, `contextlib`, `functools`, `inspect`, `itertools`, `os`, `pprint`, `re`, `reprlib`, `sys`, `traceback`, `types`, `_thread`, `typing.overload`, `typing.Any`, `typing.Callable`, `typing.IO`, `collections.abc.Iterable`, `collections.abc.Iterator`, `collections.abc.Mapping`, `coverage.misc.human_sorted_items`, `coverage.misc.isolate_module`, `coverage.types.AnyCallable`, `coverage.types.TWritable`, `coverage`, `pudb`
**Type References**: [[CwdTracker]], [[DebugControl]], [[DebugOutputFile]], [[Iterable]], [[NoDebugging]], [[ProcessTracker]], [[PytestTracker]]

### Interface
- `info_header`(label: str) -> str
- `info_formatter`(info: Iterable[tuple[<ast.Tuple object at 0x11e488650>]]) -> Iterator[str]
- `write_formatted_info`(write: Callable[<ast.Tuple object at 0x11e4c4f50>], header: str, info: Iterable[tuple[<ast.Tuple object at 0x11e4c4950>]]) -> None
- `exc_one_line`(exc: Exception) -> str
- `short_filename`(filename: str | None) -> str | None
- `short_stack`(skip: int, full: bool, frame_ids: bool, short_filenames: bool) -> str
- `dump_stack_frames`(out: TWritable, skip: int) -> None
- `clipped_repr`(text: str, numchars: int) -> str
- `short_id`(id64: int) -> int
- `add_pid_and_tid`(text: str) -> str
- `auto_repr`(self: Any) -> str
- `simplify`(v: Any) -> Any
- `pp`(v: Any) -> None
- `filter_text`(text: str, filters: Iterable[Callable[<ast.Tuple object at 0x11e4e8a90>]]) -> str
- `log`(msg: str, stack: bool) -> None
- `decorate_methods`(decorator: Callable[<ast.Tuple object at 0x11e52c150>], butnot: Iterable[str], private: bool) -> Callable[<ast.Tuple object at 0x11e52eb90>]
- `break_in_pudb`(func: AnyCallable) -> AnyCallable
- `show_calls`(show_args: bool, show_stack: bool, show_return: bool) -> Callable[<ast.Tuple object at 0x11e550e50>]
- `relevant_environment_display`(env: Mapping[<ast.Tuple object at 0x11e551350>]) -> list[tuple[<ast.Tuple object at 0x11e55cf50>]]
- `__init__`(outfile: IO[str] | None, filters: Iterable[Callable[<ast.Tuple object at 0x11e503590>]]) -> Any
- `__repr__`() -> str
- `should`(option: str) -> bool
- `without_callers`() -> Iterator[None]
- `write`(text: str) -> None
- `filter`(text: str) -> str
- `get_one`(fileobj: IO[str] | None, file_name: str | None, filters: Iterable[Callable[<ast.Tuple object at 0x11e510d10>]], interim: bool) -> DebugOutputFile
- `_set_singleton_data`(the_one: DebugOutputFile, interim: bool) -> None
- `_get_singleton_data`() -> tuple[<ast.Tuple object at 0x11e51bbd0>]
- `_del_singleton_data`() -> None
- `flush`() -> None
- `_decorator`(func: AnyCallable) -> AnyCallable
- `_wrapper`(self: Any) -> Any

### Implementation
**DebugControl**

**NoDebugging**

**CwdTracker**

**ProcessTracker**

**PytestTracker**

**DebugOutputFile**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/debug.py`  
**Dependencies**: `__future__.annotations`, `atexit`, `contextlib`, `functools`, `inspect`, `itertools`, `os`, `pprint`, `re`, `reprlib`, `sys`, `traceback`, `types`, `_thread`, `typing.overload`, `typing.Any`, `typing.Callable`, `typing.IO`, `collections.abc.Iterable`, `collections.abc.Iterator`, `collections.abc.Mapping`, `coverage.misc.human_sorted_items`, `coverage.misc.isolate_module`, `coverage.types.AnyCallable`, `coverage.types.TWritable`, `coverage`, `pudb`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.python
:::{doc} read_python_source:31
Read the Python source text from `filename`.

Returns bytes.
:::
:::{doc} get_python_source:43
Return the source code, as unicode.
:::
:::{doc} get_zip_bytes:78
Get data from `filename` if it is a zip file path.

Returns the bytestring data read from the zip file, or None if no zip file
could be found or `filename` isn't in it.  The data returned will be
an empty string if the file is empty.
:::
:::{doc} source_for_file:101
Return the source filename for `filename`.

Given a file name being traced, return the best guess as to the source
file to attribute it to.
:::
:::{doc} source_for_morf:130
Get the source filename for the module-or-file `morf`.
:::
:::{doc} PythonFileReporter:145
Report support for a Python file.
:::
**Imports**: `__future__.annotations`, `os.path`, `types`, `zipimport`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `coverage.env`, `coverage.exceptions.CoverageException`, `coverage.exceptions.NoSource`, `coverage.files.canonical_filename`, `coverage.files.relative_filename`, `coverage.files.zip_location`, `coverage.misc.isolate_module`, `coverage.misc.join_regex`, `coverage.parser.PythonParser`, `coverage.phystokens.source_token_lines`, `coverage.phystokens.source_encoding`, `coverage.plugin.CodeRegion`, `coverage.plugin.FileReporter`, `coverage.regions.code_regions`, `coverage.types.TArc`, `coverage.types.TLineNo`, `coverage.types.TMorf`, `coverage.types.TSourceTokenLines`, `coverage.Coverage`
**Type References**: [[None]], [[PythonFileReporter]]

### Interface
- `read_python_source`(filename: str) -> bytes
- `get_python_source`(filename: str) -> str
- `get_zip_bytes`(filename: str) -> bytes | None
- `source_for_file`(filename: str) -> str
- `source_for_morf`(morf: TMorf) -> str
- `__init__`(morf: TMorf, coverage: Coverage | None) -> None
- `__repr__`() -> str
- `relative_filename`() -> str
- `parser`() -> PythonParser
- `lines`() -> set[TLineNo]
- `excluded_lines`() -> set[TLineNo]
- `translate_lines`(lines: Iterable[TLineNo]) -> set[TLineNo]
- `translate_arcs`(arcs: Iterable[TArc]) -> set[TArc]
- `no_branch_lines`() -> set[TLineNo]
- `arcs`() -> set[TArc]
- `exit_counts`() -> dict[<ast.Tuple object at 0x11e5932d0>]
- `missing_arc_description`(start: TLineNo, end: TLineNo, executed_arcs: Iterable[TArc] | None) -> str
- `arc_description`(start: TLineNo, end: TLineNo) -> str
- `source`() -> str
- `should_be_python`() -> bool
- `source_token_lines`() -> TSourceTokenLines
- `code_regions`() -> Iterable[CodeRegion]
- `code_region_kinds`() -> Iterable[tuple[<ast.Tuple object at 0x11e5a0890>]]

### Implementation
**PythonFileReporter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/python.py`  
**Dependencies**: `__future__.annotations`, `os.path`, `types`, `zipimport`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `coverage.env`, `coverage.exceptions.CoverageException`, `coverage.exceptions.NoSource`, `coverage.files.canonical_filename`, `coverage.files.relative_filename`, `coverage.files.zip_location`, `coverage.misc.isolate_module`, `coverage.misc.join_regex`, `coverage.parser.PythonParser`, `coverage.phystokens.source_token_lines`, `coverage.phystokens.source_encoding`, `coverage.plugin.CodeRegion`, `coverage.plugin.FileReporter`, `coverage.regions.code_regions`, `coverage.types.TArc`, `coverage.types.TLineNo`, `coverage.types.TMorf`, `coverage.types.TSourceTokenLines`, `coverage.Coverage`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.plugin
:::{doc} CoveragePlugin:129
Base class for coverage.py plug-ins.
:::
:::{doc} CoveragePluginBase:257
Plugins produce specialized objects, which point back to the original plugin.
:::
:::{doc} FileTracer:262
Support needed for files during the execution phase.

File tracer plug-ins implement subclasses of FileTracer to return from
their :meth:`~CoveragePlugin.file_tracer` method.

You may construct this object from :meth:`CoveragePlugin.file_tracer` any
way you like.  A natural choice would be to pass the file name given to
`file_tracer`.

`FileTracer` objects should only be created in the
:meth:`CoveragePlugin.file_tracer` method.

See :ref:`howitworks` for details of the different coverage.py phases.
:::
:::{doc} CodeRegion:350
Data for a region of code found by :meth:`FileReporter.code_regions`.
:::
:::{doc} FileReporter:379
Support needed for files during the analysis and reporting phases.

File tracer plug-ins implement a subclass of `FileReporter`, and return
instances from their :meth:`CoveragePlugin.file_reporter` method.

There are many methods here, but only :meth:`lines` is required, to provide
the set of executable lines in the file.

See :ref:`howitworks` for details of the different coverage.py phases.
:::
**Imports**: `__future__.annotations`, `dataclasses`, `functools`, `types.FrameType`, `typing.Any`, `collections.abc.Iterable`, `coverage.files`, `coverage.misc._needs_to_implement`, `coverage.types.TArc`, `coverage.types.TConfigurable`, `coverage.types.TLineNo`, `coverage.types.TSourceTokenLines`
**Type References**: [[CodeRegion]], [[CoveragePlugin]], [[CoveragePluginBase]], [[FileReporter]], [[FileTracer]]

### Interface
- `file_tracer`(filename: str) -> FileTracer | None
- `file_reporter`(filename: str) -> FileReporter | str
- `dynamic_context`(frame: FrameType) -> str | None
- `find_executable_files`(src_dir: str) -> Iterable[str]
- `configure`(config: TConfigurable) -> None
- `sys_info`() -> Iterable[tuple[<ast.Tuple object at 0x11e5abb10>]]
- `source_filename`() -> str
- `has_dynamic_source_filename`() -> bool
- `dynamic_source_filename`(filename: str, frame: FrameType) -> str | None
- `line_number_range`(frame: FrameType) -> tuple[<ast.Tuple object at 0x11e5a8dd0>]
- `__lt__`(other: Any) -> bool
- `__init__`(filename: str) -> None
- `__repr__`() -> str
- `relative_filename`() -> str
- `source`() -> str
- `lines`() -> set[TLineNo]
- `excluded_lines`() -> set[TLineNo]
- `translate_lines`(lines: Iterable[TLineNo]) -> set[TLineNo]
- `arcs`() -> set[TArc]
- `no_branch_lines`() -> set[TLineNo]
- `translate_arcs`(arcs: Iterable[TArc]) -> set[TArc]
- `exit_counts`() -> dict[<ast.Tuple object at 0x11e5cd890>]
- `missing_arc_description`(start: TLineNo, end: TLineNo, executed_arcs: Iterable[TArc] | None) -> str
- `arc_description`(start: TLineNo, end: TLineNo) -> str
- `source_token_lines`() -> TSourceTokenLines
- `code_regions`() -> Iterable[CodeRegion]
- `code_region_kinds`() -> Iterable[tuple[<ast.Tuple object at 0x11e5d4f90>]]
- `__eq__`(other: Any) -> bool

### Implementation
**CoveragePlugin**
  - _coverage_plugin_name: str
  - _coverage_enabled: bool
**CoveragePluginBase**
  - _coverage_plugin: CoveragePlugin
**FileTracer**

**CodeRegion**
  - kind: str
  - name: str
  - start: int
  - lines: set[int]
**FileReporter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/plugin.py`  
**Dependencies**: `__future__.annotations`, `dataclasses`, `functools`, `types.FrameType`, `typing.Any`, `collections.abc.Iterable`, `coverage.files`, `coverage.misc._needs_to_implement`, `coverage.types.TArc`, `coverage.types.TConfigurable`, `coverage.types.TLineNo`, `coverage.types.TSourceTokenLines`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.exceptions
:::{doc} _BaseCoverageException:8
The base-base of all Coverage exceptions.
:::
:::{doc} CoverageException:13
The base class of all exceptions raised by Coverage.py.
:::
:::{doc} ConfigError:18
A problem with a config file, or a value in one.
:::
:::{doc} DataError:23
An error in using a data file.
:::
:::{doc} NoDataError:27
We didn't have data to work with.
:::
:::{doc} NoSource:32
We couldn't find the source for a module.
:::
:::{doc} NoCode:37
We couldn't find any code at all.
:::
:::{doc} NotPython:42
A source file turned out not to be parsable Python.
:::
:::{doc} PluginError:47
A plugin misbehaved.
:::
:::{doc} _ExceptionDuringRun:52
An exception happened while running customer code.

Construct it with three arguments, the values from `sys.exc_info`.
:::
:::{doc} CoverageWarning:61
A warning from Coverage.py.
:::
**Imports**: `__future__.annotations`
**Type References**: [[ConfigError]], [[CoverageException]], [[CoverageWarning]], [[DataError]], [[NoCode]], [[NoDataError]], [[NoSource]], [[NotPython]], [[PluginError]], [[_BaseCoverageException]], [[_ExceptionDuringRun]]


### Implementation
**_BaseCoverageException**

**CoverageException**

**ConfigError**

**DataError**

**NoDataError**

**NoSource**

**NoCode**

**NotPython**

**PluginError**

**_ExceptionDuringRun**

**CoverageWarning**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/exceptions.py`  
**Dependencies**: `__future__.annotations`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.inorout
:::{doc} canonical_path:63
Return the canonical path of the module or file `morf`.

If the module is a package, then return its directory. If it is a
module, then return its file, unless `directory` is True, in which
case return its enclosing directory.
:::
:::{doc} name_for_module:77
Get the name of the module for a filename and frame.

For configurability's sake, we allow __main__ modules to be matched by
their importable name.

If loaded via runpy (aka -m), we can usually recover the "original"
full dotted module name, otherwise, we resort to interpreting the
file name to get the module's name.  In the case that the module name
can't be determined, None is returned.
:::
:::{doc} module_is_namespace:111
Is the module object `mod` a PEP420 namespace module?
:::
:::{doc} module_has_file:116
Does the module object `mod` have an existing __file__ ?
:::
:::{doc} file_and_path_for_module:124
Find the file and search path for `modulename`.

Returns:
    filename: The filename of the module, or None.
    path: A list (possibly empty) of directories to find submodules in.
:::
:::{doc} add_stdlib_paths:145
Add paths where the stdlib can be found to the set `paths`.
:::
:::{doc} add_third_party_paths:157
Add locations for third-party packages to the set `paths`.
:::
:::{doc} add_coverage_paths:171
Add paths where coverage.py code can be found to the set `paths`.
:::
:::{doc} InOrOut:180
Machinery for determining what files to measure.
:::
**Imports**: `__future__.annotations`, `importlib.util`, `inspect`, `itertools`, `os`, `os.path`, `platform`, `re`, `sys`, `sysconfig`, `traceback`, `types.FrameType`, `types.ModuleType`, `typing.cast`, `typing.Any`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `coverage.env`, `coverage.disposition.FileDisposition`, `coverage.disposition.disposition_init`, `coverage.exceptions.CoverageException`, `coverage.exceptions.PluginError`, `coverage.files.TreeMatcher`, `coverage.files.GlobMatcher`, `coverage.files.ModuleMatcher`, `coverage.files.prep_patterns`, `coverage.files.find_python_files`, `coverage.files.canonical_filename`, `coverage.misc.isolate_module`, `coverage.misc.sys_modules_saved`, `coverage.python.source_for_file`, `coverage.python.source_for_morf`, `coverage.types.TFileDisposition`, `coverage.types.TMorf`, `coverage.types.TWarnFn`, `coverage.types.TDebugCtl`, `coverage.config.CoverageConfig`, `coverage.plugin_support.Plugins`, `_structseq`, `_pypy_irc_topic`
**Type References**: [[InOrOut]], [[ModuleType]]

### Interface
- `canonical_path`(morf: TMorf, directory: bool) -> str
- `name_for_module`(filename: str, frame: FrameType | None) -> str
- `module_is_namespace`(mod: ModuleType) -> bool
- `module_has_file`(mod: ModuleType) -> bool
- `file_and_path_for_module`(modulename: str) -> tuple[<ast.Tuple object at 0x11e5e5a90>]
- `add_stdlib_paths`(paths: set[str]) -> None
- `add_third_party_paths`(paths: set[str]) -> None
- `add_coverage_paths`(paths: set[str]) -> None
- `__init__`(config: CoverageConfig, warn: TWarnFn, debug: TDebugCtl | None, include_namespace_packages: bool) -> None
- `should_trace`(filename: str, frame: FrameType | None) -> TFileDisposition
- `check_include_omit_etc`(filename: str, frame: FrameType | None) -> str | None
- `warn_conflicting_settings`() -> None
- `warn_already_imported_files`() -> None
- `warn_unimported_source`() -> None
- `_warn_about_unmeasured_code`(pkg: str) -> None
- `find_possibly_unexecuted_files`() -> Iterable[tuple[<ast.Tuple object at 0x11e686190>]]
- `_find_plugin_files`(src_dir: str) -> Iterable[tuple[<ast.Tuple object at 0x11e687610>]]
- `_find_executable_files`(src_dir: str) -> Iterable[tuple[<ast.Tuple object at 0x11e68dd50>]]
- `sys_info`() -> Iterable[tuple[<ast.Tuple object at 0x11e69c990>]]
- `_debug`(msg: str) -> None
- `nope`(disp: TFileDisposition, reason: str) -> TFileDisposition

### Implementation
**InOrOut**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/inorout.py`  
**Dependencies**: `__future__.annotations`, `importlib.util`, `inspect`, `itertools`, `os`, `os.path`, `platform`, `re`, `sys`, `sysconfig`, `traceback`, `types.FrameType`, `types.ModuleType`, `typing.cast`, `typing.Any`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `coverage.env`, `coverage.disposition.FileDisposition`, `coverage.disposition.disposition_init`, `coverage.exceptions.CoverageException`, `coverage.exceptions.PluginError`, `coverage.files.TreeMatcher`, `coverage.files.GlobMatcher`, `coverage.files.ModuleMatcher`, `coverage.files.prep_patterns`, `coverage.files.find_python_files`, `coverage.files.canonical_filename`, `coverage.misc.isolate_module`, `coverage.misc.sys_modules_saved`, `coverage.python.source_for_file`, `coverage.python.source_for_morf`, `coverage.types.TFileDisposition`, `coverage.types.TMorf`, `coverage.types.TWarnFn`, `coverage.types.TDebugCtl`, `coverage.config.CoverageConfig`, `coverage.plugin_support.Plugins`, `_structseq`, `_pypy_irc_topic`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.jsonreport
:::{doc} JsonReporter:34
A reporter for writing JSON coverage results.
:::
:::{doc} _convert_branch_arcs:173
Convert branch arcs to a list of two-element tuples.
:::
**Imports**: `__future__.annotations`, `datetime`, `json`, `sys`, `collections.abc.Iterable`, `typing.Any`, `typing.IO`, `typing.TYPE_CHECKING`, `coverage.__version__`, `coverage.report_core.get_analysis_to_report`, `coverage.results.Analysis`, `coverage.results.Numbers`, `coverage.types.TMorf`, `coverage.types.TLineNo`, `coverage.Coverage`, `coverage.data.CoverageData`, `coverage.plugin.FileReporter`
**Type References**: [[JsonObj]], [[JsonReporter]]

### Interface
- `_convert_branch_arcs`(branch_arcs: dict[<ast.Tuple object at 0x11e6d2090>]) -> Iterable[tuple[<ast.Tuple object at 0x11e6d3110>]]
- `__init__`(coverage: Coverage) -> None
- `make_summary`(nums: Numbers) -> JsonObj
- `make_branch_summary`(nums: Numbers) -> JsonObj
- `report`(morfs: Iterable[TMorf] | None, outfile: IO[str]) -> float
- `report_one_file`(coverage_data: CoverageData, analysis: Analysis, file_reporter: FileReporter) -> JsonObj
- `make_region_data`(coverage_data: CoverageData, narrowed_analysis: Analysis) -> JsonObj

### Implementation
**JsonReporter**
  - reported_file: JsonObj
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/jsonreport.py`  
**Dependencies**: `__future__.annotations`, `datetime`, `json`, `sys`, `collections.abc.Iterable`, `typing.Any`, `typing.IO`, `typing.TYPE_CHECKING`, `coverage.__version__`, `coverage.report_core.get_analysis_to_report`, `coverage.results.Analysis`, `coverage.results.Numbers`, `coverage.types.TMorf`, `coverage.types.TLineNo`, `coverage.Coverage`, `coverage.data.CoverageData`, `coverage.plugin.FileReporter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.report_core
:::{doc} Reporter:26
What we expect of reporters.
:::
:::{doc} render_report:35
Run a one-file report generator, managing the output file.

This function ensures the output file is ready to be written to. Then writes
the report to it. Then closes the file and cleans up.
:::
:::{doc} get_analysis_to_report:74
Get the files to report on.

For each morf in `morfs`, if it should be reported on (based on the omit
and include configuration options), yield a pair, the `FileReporter` and
`Analysis` for the morf.
:::
**Imports**: `__future__.annotations`, `sys`, `typing.Callable`, `typing.IO`, `typing.Protocol`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `collections.abc.Iterator`, `coverage.exceptions.NoDataError`, `coverage.exceptions.NotPython`, `coverage.files.prep_patterns`, `coverage.files.GlobMatcher`, `coverage.misc.ensure_dir_for_file`, `coverage.misc.file_be_gone`, `coverage.plugin.FileReporter`, `coverage.results.Analysis`, `coverage.types.TMorf`, `coverage.Coverage`
**Type References**: [[Reporter]]

### Interface
- `render_report`(output_path: str, reporter: Reporter, morfs: Iterable[TMorf] | None, msgfn: Callable[<ast.Tuple object at 0x11e6d9550>]) -> float
- `get_analysis_to_report`(coverage: Coverage, morfs: Iterable[TMorf] | None) -> Iterator[tuple[<ast.Tuple object at 0x11e6e75d0>]]
- `report`(morfs: Iterable[TMorf] | None, outfile: IO[str]) -> float

### Implementation
**Reporter**
  - report_type: str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/report_core.py`  
**Dependencies**: `__future__.annotations`, `sys`, `typing.Callable`, `typing.IO`, `typing.Protocol`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `collections.abc.Iterator`, `coverage.exceptions.NoDataError`, `coverage.exceptions.NotPython`, `coverage.files.prep_patterns`, `coverage.files.GlobMatcher`, `coverage.misc.ensure_dir_for_file`, `coverage.misc.file_be_gone`, `coverage.plugin.FileReporter`, `coverage.results.Analysis`, `coverage.types.TMorf`, `coverage.Coverage`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.bytecode
:::{doc} code_objects:12
Iterate over all the code objects in `code`.
:::
**Imports**: `__future__.annotations`, `types.CodeType`, `collections.abc.Iterator`
### Interface
- `code_objects`(code: CodeType) -> Iterator[CodeType]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/bytecode.py`  
**Dependencies**: `__future__.annotations`, `types.CodeType`, `collections.abc.Iterator`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.tomlconfig
:::{doc} TomlDecodeError:29
An exception class that exists even when toml isn't installed.
:::
:::{doc} TomlConfigParser:36
TOML file reading with the interface of HandyConfigParser.
:::
**Imports**: `__future__.annotations`, `os`, `re`, `typing.Any`, `typing.Callable`, `typing.TypeVar`, `collections.abc.Iterable`, `coverage.env`, `coverage.exceptions.ConfigError`, `coverage.misc.import_third_party`, `coverage.misc.isolate_module`, `coverage.misc.substitute_variables`, `coverage.types.TConfigSectionOut`, `coverage.types.TConfigValueOut`, `tomllib`
**Type References**: [[TomlConfigParser]], [[TomlDecodeError]]

### Interface
- `__init__`(our_file: bool) -> None
- `read`(filenames: Iterable[str]) -> list[str]
- `_get_section`(section: str) -> tuple[<ast.Tuple object at 0x11e6fe310>]
- `_get`(section: str, option: str) -> tuple[<ast.Tuple object at 0x11e6f7990>]
- `_get_single`(section: str, option: str) -> Any
- `has_option`(section: str, option: str) -> bool
- `real_section`(section: str) -> str | None
- `has_section`(section: str) -> bool
- `options`(section: str) -> list[str]
- `get_section`(section: str) -> TConfigSectionOut
- `get`(section: str, option: str) -> Any
- `_check_type`(section: str, option: str, value: Any, type_: type[TWant], converter: Callable[<ast.Tuple object at 0x11e722290>] | None, type_desc: str) -> TWant
- `getboolean`(section: str, option: str) -> bool
- `_get_list`(section: str, option: str) -> tuple[<ast.Tuple object at 0x11e72be50>]
- `getlist`(section: str, option: str) -> list[str]
- `getregexlist`(section: str, option: str) -> list[str]
- `getint`(section: str, option: str) -> int
- `getfloat`(section: str, option: str) -> float

### Implementation
**TomlDecodeError**

**TomlConfigParser**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/tomlconfig.py`  
**Dependencies**: `__future__.annotations`, `os`, `re`, `typing.Any`, `typing.Callable`, `typing.TypeVar`, `collections.abc.Iterable`, `coverage.env`, `coverage.exceptions.ConfigError`, `coverage.misc.import_third_party`, `coverage.misc.isolate_module`, `coverage.misc.substitute_variables`, `coverage.types.TConfigSectionOut`, `coverage.types.TConfigValueOut`, `tomllib`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.execfile
:::{doc} DummyLoader:30
A shim for the pep302 __loader__, emulating pkgutil.ImpLoader.

Currently only implements the .fullname attribute
:::
:::{doc} find_module:39
Find the module named `modulename`.

Returns the file path of the module, the name of the enclosing
package, and the spec.
:::
:::{doc} PyRunner:69
Multi-stage execution of Python code.

This is meant to emulate real Python execution as closely as possible.
:::
:::{doc} run_python_module:257
Run a Python module, as though with ``python -m name args...``.

`args` is the argument array to present as sys.argv, including the first
element naming the module being executed.

This is a helper for tests, to encapsulate how to use PyRunner.
:::
:::{doc} run_python_file:271
Run a Python file as if it were the main program on the command line.

`args` is the argument array to present as sys.argv, including the first
element naming the file being executed.  `package` is the name of the
enclosing package, if any.

This is a helper for tests, to encapsulate how to use PyRunner.
:::
:::{doc} make_code_from_py:286
Get source from `filename` and make a code object of it.
:::
:::{doc} make_code_from_pyc:297
Get a code object from a .pyc file.
:::
**Imports**: `__future__.annotations`, `importlib.machinery`, `importlib.util`, `inspect`, `marshal`, `os`, `struct`, `sys`, `importlib.machinery.ModuleSpec`, `types.CodeType`, `types.ModuleType`, `typing.Any`, `coverage.exceptions.CoverageException`, `coverage.exceptions._ExceptionDuringRun`, `coverage.exceptions.NoCode`, `coverage.exceptions.NoSource`, `coverage.files.canonical_filename`, `coverage.files.python_reported_file`, `coverage.misc.isolate_module`, `coverage.python.get_python_source`
**Type References**: [[DummyLoader]], [[None]], [[PyRunner]]

### Interface
- `find_module`(modulename: str) -> tuple[<ast.Tuple object at 0x11e745790>]
- `run_python_module`(args: list[str]) -> None
- `run_python_file`(args: list[str]) -> None
- `make_code_from_py`(filename: str) -> CodeType
- `make_code_from_pyc`(filename: str) -> CodeType
- `__init__`(args: list[str], as_module: bool) -> None
- `prepare`() -> None
- `_prepare2`() -> None
- `run`() -> None

### Implementation
**DummyLoader**

**PyRunner**
  - path0: str | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/execfile.py`  
**Dependencies**: `__future__.annotations`, `importlib.machinery`, `importlib.util`, `inspect`, `marshal`, `os`, `struct`, `sys`, `importlib.machinery.ModuleSpec`, `types.CodeType`, `types.ModuleType`, `typing.Any`, `coverage.exceptions.CoverageException`, `coverage.exceptions._ExceptionDuringRun`, `coverage.exceptions.NoCode`, `coverage.exceptions.NoSource`, `coverage.files.canonical_filename`, `coverage.files.python_reported_file`, `coverage.misc.isolate_module`, `coverage.python.get_python_source`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.multiproc
:::{doc} ProcessWithCoverage:27
A replacement for multiprocess.Process that starts coverage.
:::
:::{doc} Stowaway:64
An object to pickle, so when it is unpickled, it can apply the monkey-patch.
:::
:::{doc} patch_multiprocessing:76
Monkey-patch the multiprocessing module.

This enables coverage measurement of processes started by multiprocessing.
This involves aggressive monkey-patching.

`rcfile` is the path to the rcfile being used.
:::
**Imports**: `__future__.annotations`, `multiprocessing`, `multiprocessing.process`, `os`, `os.path`, `sys`, `traceback`, `typing.Any`, `coverage.debug.DebugControl`, `multiprocessing.spawn`, `coverage.Coverage`
**Type References**: [[DebugControl]], [[None]], [[ProcessWithCoverage]], [[Stowaway]]

### Interface
- `patch_multiprocessing`(rcfile: str) -> None
- `_bootstrap`() -> Any
- `__init__`(rcfile: str) -> None
- `__getstate__`() -> dict[<ast.Tuple object at 0x11e7a0850>]
- `__setstate__`(state: dict[<ast.Tuple object at 0x11e7a02d0>]) -> None
- `get_preparation_data_with_stowaway`(name: str) -> dict[<ast.Tuple object at 0x11e79d090>]

### Implementation
**ProcessWithCoverage**
  - debug: DebugControl | None
**Stowaway**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/multiproc.py`  
**Dependencies**: `__future__.annotations`, `multiprocessing`, `multiprocessing.process`, `os`, `os.path`, `sys`, `traceback`, `typing.Any`, `coverage.debug.DebugControl`, `multiprocessing.spawn`, `coverage.Coverage`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.__main__

**Imports**: `__future__.annotations`, `sys`, `coverage.cmdline.main`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/__main__.py`  
**Dependencies**: `__future__.annotations`, `sys`, `coverage.cmdline.main`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.report
:::{doc} SummaryReporter:24
A reporter for writing the summary report.
:::
**Imports**: `__future__.annotations`, `sys`, `typing.Any`, `typing.IO`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `coverage.exceptions.ConfigError`, `coverage.exceptions.NoDataError`, `coverage.misc.human_sorted_items`, `coverage.plugin.FileReporter`, `coverage.report_core.get_analysis_to_report`, `coverage.results.Analysis`, `coverage.results.Numbers`, `coverage.types.TMorf`, `coverage.Coverage`
**Type References**: [[SummaryReporter]]

### Interface
- `__init__`(coverage: Coverage) -> None
- `write`(line: str) -> None
- `write_items`(items: Iterable[str]) -> None
- `_report_text`(header: list[str], lines_values: list[list[Any]], total_line: list[Any], end_lines: list[str]) -> None
- `_report_markdown`(header: list[str], lines_values: list[list[Any]], total_line: list[Any], end_lines: list[str]) -> None
- `report`(morfs: Iterable[TMorf] | None, outfile: IO[str] | None) -> float
- `tabular_report`() -> None
- `report_one_file`(fr: FileReporter, analysis: Analysis) -> None

### Implementation
**SummaryReporter**
  - total_line_items: list[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/report.py`  
**Dependencies**: `__future__.annotations`, `sys`, `typing.Any`, `typing.IO`, `typing.TYPE_CHECKING`, `collections.abc.Iterable`, `coverage.exceptions.ConfigError`, `coverage.exceptions.NoDataError`, `coverage.misc.human_sorted_items`, `coverage.plugin.FileReporter`, `coverage.report_core.get_analysis_to_report`, `coverage.results.Analysis`, `coverage.results.Numbers`, `coverage.types.TMorf`, `coverage.Coverage`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.coverage.data
:::{doc} line_counts:29
Return a dict summarizing the line coverage data.

Keys are based on the file names, and values are the number of executed
lines.  If `fullpath` is true, then the keys are the full pathnames of
the files, otherwise they are the basenames of the files.

Returns a dict mapping file names to counts of lines.
:::
:::{doc} add_data_to_hash:53
Contribute `filename`'s data to the `hasher`.

`hasher` is a `coverage.misc.Hasher` instance to be updated with
the file's data.  It should only get the results data, not the run
data.
:::
:::{doc} combinable_files:68
Make a list of data files to be combined.

`data_file` is a path to a data file.  `data_paths` is a list of files or
directories of files.

Returns a list of absolute file paths.
:::
:::{doc} combine_parallel_data:99
Combine a number of data files together.

`data` is a CoverageData.

Treat `data.filename` as a file prefix, and combine the data from all
of the data files starting with that prefix plus a dot.

If `aliases` is provided, it's a `PathAliases` object that is used to
re-map paths to match the local machine's.

If `data_paths` is provided, it is a list of directories or files to
combine.  Directories are searched for files that start with
`data.filename` plus dot as a prefix, and those files are combined.

If `data_paths` is not provided, then the directory portion of
`data.filename` is used as the directory to search for data files.

Unless `keep` is True every data file found and combined is then deleted
from disk. If a file cannot be read, a warning will be issued, and the
file will not be deleted.

If `strict` is true, and no files are found to combine, an error is
raised.

`message` is a function to use for printing messages to the user.
:::
:::{doc} debug_data_file:203
Implementation of 'coverage debug data'.
:::
:::{doc} sorted_lines:225
Get the sorted lines for a file, for tests.
:::
**Imports**: `__future__.annotations`, `functools`, `glob`, `hashlib`, `os.path`, `typing.Callable`, `collections.abc.Iterable`, `coverage.exceptions.CoverageException`, `coverage.exceptions.NoDataError`, `coverage.files.PathAliases`, `coverage.misc.Hasher`, `coverage.misc.file_be_gone`, `coverage.misc.human_sorted`, `coverage.misc.plural`, `coverage.sqldata.CoverageData`
**Type References**: [[Callable]]

### Interface
- `line_counts`(data: CoverageData, fullpath: bool) -> dict[<ast.Tuple object at 0x11e828650>]
- `add_data_to_hash`(data: CoverageData, filename: str, hasher: Hasher) -> None
- `combinable_files`(data_file: str, data_paths: Iterable[str] | None) -> list[str]
- `combine_parallel_data`(data: CoverageData, aliases: PathAliases | None, data_paths: Iterable[str] | None, strict: bool, keep: bool, message: Callable[<ast.Tuple object at 0x11e833bd0>] | None) -> None
- `debug_data_file`(filename: str) -> None
- `sorted_lines`(data: CoverageData, filename: str) -> list[int]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/coverage/data.py`  
**Dependencies**: `__future__.annotations`, `functools`, `glob`, `hashlib`, `os.path`, `typing.Callable`, `collections.abc.Iterable`, `coverage.exceptions.CoverageException`, `coverage.exceptions.NoDataError`, `coverage.files.PathAliases`, `coverage.misc.Hasher`, `coverage.misc.file_be_gone`, `coverage.misc.human_sorted`, `coverage.misc.plural`, `coverage.sqldata.CoverageData`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.skipping
:::{doc} evaluate_condition:87
Evaluate a single skipif/xfail condition.

If an old-style string condition is given, it is eval()'d, otherwise the
condition is bool()'d. If this fails, an appropriately formatted pytest.fail
is raised.

Returns (result, reason). The reason is only relevant if the result is True.
:::
:::{doc} Skip:161
The result of evaluate_skip_marks().
:::
:::{doc} evaluate_skip_marks:167
Evaluate skip and skipif marks on item, returning Skip if triggered.
:::
:::{doc} Xfail:196
The result of evaluate_xfail_marks().
:::
:::{doc} evaluate_xfail_marks:207
Evaluate xfail marks on item, returning Xfail if triggered.
:::
**Imports**: `__future__.annotations`, `collections.abc.Mapping`, `dataclasses`, `os`, `platform`, `sys`, `traceback`, `typing.Generator`, `typing.Optional`, `_pytest.config.Config`, `_pytest.config.hookimpl`, `_pytest.config.argparsing.Parser`, `_pytest.mark.structures.Mark`, `_pytest.nodes.Item`, `_pytest.outcomes.fail`, `_pytest.outcomes.skip`, `_pytest.outcomes.xfail`, `_pytest.reports.BaseReport`, `_pytest.reports.TestReport`, `_pytest.runner.CallInfo`, `_pytest.stash.StashKey`, `pytest`
**Type References**: [[BaseException]], [[None]], [[Skip]], [[Xfail]]

### Interface
- `pytest_addoption`(parser: Parser) -> None
- `pytest_configure`(config: Config) -> None
- `evaluate_condition`(item: Item, mark: Mark, condition: object) -> tuple[<ast.Tuple object at 0x11e85ccd0>]
- `evaluate_skip_marks`(item: Item) -> Skip | None
- `evaluate_xfail_marks`(item: Item) -> Xfail | None
- `pytest_runtest_setup`(item: Item) -> None
- `pytest_runtest_call`(item: Item) -> Generator[None]
- `pytest_runtest_makereport`(item: Item, call: CallInfo[None]) -> Generator[<ast.Tuple object at 0x11e8aba50>]
- `pytest_report_teststatus`(report: BaseReport) -> tuple[<ast.Tuple object at 0x11e8b5010>] | None
- `nop`() -> Any

### Implementation
**Skip**
  - reason: str
**Xfail**
  - reason: str
  - run: bool
  - strict: bool
  - raises: tuple[<ast.Tuple object at 0x11e88d3d0>] | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/skipping.py`  
**Dependencies**: `__future__.annotations`, `collections.abc.Mapping`, `dataclasses`, `os`, `platform`, `sys`, `traceback`, `typing.Generator`, `typing.Optional`, `_pytest.config.Config`, `_pytest.config.hookimpl`, `_pytest.config.argparsing.Parser`, `_pytest.mark.structures.Mark`, `_pytest.nodes.Item`, `_pytest.outcomes.fail`, `_pytest.outcomes.skip`, `_pytest.outcomes.xfail`, `_pytest.reports.BaseReport`, `_pytest.reports.TestReport`, `_pytest.runner.CallInfo`, `_pytest.stash.StashKey`, `pytest`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.logging
:::{doc} DatetimeFormatter:63
A logging formatter which formats record with
:func:`datetime.datetime.strftime` formatter instead of
:func:`time.strftime` in case of microseconds in format string.
:::
:::{doc} ColoredLevelFormatter:82
A logging formatter which colorizes the %(levelname)..s part of the
log format passed to __init__.
:::
:::{doc} PercentStyleMultiline:142
A logging style with special support for multiline messages.

If the message of a record consists of multiple lines, this style
formats the message as if each line were logged separately.
:::
:::{doc} pytest_addoption:240
Add options to control log capturing.
:::
:::{doc} catching_logs:344
Context manager that prepares the whole logging machinery properly.
:::
:::{doc} LogCaptureHandler:375
A logging handler that stores log records and the log text.
:::
:::{doc} LogCaptureFixture:406
Provides access and control of log capturing.
:::
:::{doc} caplog:598
Access and control log capturing.

Captured logs are available through the following properties/methods::

* caplog.messages        -> list of format-interpolated log messages
* caplog.text            -> string containing formatted log output
* caplog.records         -> list of logging.LogRecord instances
* caplog.record_tuples   -> list of (logger_name, level, message) tuples
* caplog.clear()         -> clear captured records and formatted log output string
:::
:::{doc} LoggingPlugin:643
Attaches to the logging module and captures log messages for each test.
:::
:::{doc} _FileHandler:877
A logging FileHandler with pytest tweaks.
:::
:::{doc} _LiveLoggingStreamHandler:885
A logging StreamHandler used by the live logging feature: it will
write a newline before the first log message in each test.

During live logging we must also explicitly disable stdout/stderr
capturing otherwise it will get captured and won't appear in the
terminal.
:::
:::{doc} _LiveLoggingNullHandler:944
A logging handler used when live logging is disabled.
:::
**Imports**: `__future__.annotations`, `contextlib.contextmanager`, `contextlib.nullcontext`, `datetime.datetime`, `datetime.timedelta`, `datetime.timezone`, `io`, `io.StringIO`, `logging`, `logging.LogRecord`, `os`, `pathlib.Path`, `re`, `types.TracebackType`, `typing.AbstractSet`, `typing.Dict`, `typing.final`, `typing.Generator`, `typing.Generic`, `typing.List`, `typing.Literal`, `typing.Mapping`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `_pytest.nodes`, `_pytest._io.TerminalWriter`, `_pytest.capture.CaptureManager`, `_pytest.config._strtobool`, `_pytest.config.Config`, `_pytest.config.create_terminal_writer`, `_pytest.config.hookimpl`, `_pytest.config.UsageError`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.fixture`, `_pytest.fixtures.FixtureRequest`, `_pytest.main.Session`, `_pytest.stash.StashKey`, `_pytest.terminal.TerminalReporter`
**Type References**: [[ColoredLevelFormatter]], [[DatetimeFormatter]], [[Formatter]], [[LogCaptureFixture]], [[LogCaptureHandler]], [[LogRecord]], [[LoggingPlugin]], [[Mapping]], [[PercentStyleMultiline]], [[TerminalReporter]], [[TextIOWrapper]], [[_FileHandler]], [[_LiveLoggingNullHandler]], [[_LiveLoggingStreamHandler]], [[catching_logs]], [[io.TextIOWrapper]], [[logging.Formatter]], [[logging.LogRecord]]

### Interface
- `_remove_ansi_escape_sequences`(text: str) -> str
- `get_option_ini`(config: Config) -> Any
- `pytest_addoption`(parser: Parser) -> None
- `caplog`(request: FixtureRequest) -> Generator[LogCaptureFixture]
- `get_log_level_for_setting`(config: Config) -> int | None
- `pytest_configure`(config: Config) -> None
- `formatTime`(record: LogRecord, datefmt: str | None) -> str
- `__init__`(terminal_reporter: TerminalReporter, capture_manager: CaptureManager | None) -> None
- `add_color_level`(level: int) -> None
- `format`(record: logging.LogRecord) -> str
- `_get_auto_indent`(auto_indent_option: int | str | bool | None) -> int
- `add_option_ini`() -> Any
- `__enter__`() -> _HandlerType
- `__exit__`(exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: TracebackType | None) -> None
- `emit`(record: logging.LogRecord) -> None
- `reset`() -> None
- `clear`() -> None
- `handleError`(record: logging.LogRecord) -> None
- `_finalize`() -> None
- `handler`() -> LogCaptureHandler
- `get_records`(when: Literal[<ast.Tuple object at 0x11e8d7c10>]) -> list[logging.LogRecord]
- `text`() -> str
- `records`() -> list[logging.LogRecord]
- `record_tuples`() -> list[tuple[<ast.Tuple object at 0x11e8d4d10>]]
- `messages`() -> list[str]
- `_force_enable_logging`(level: int | str, logger_obj: logging.Logger) -> int
- `set_level`(level: int | str, logger: str | None) -> None
- `at_level`(level: int | str, logger: str | None) -> Generator[None]
- `filtering`(filter_: logging.Filter) -> Generator[None]
- `_disable_loggers`(loggers_to_disable: list[str]) -> None
- `_create_formatter`() -> Any
- `set_log_path`(fname: str) -> None
- `_log_cli_enabled`() -> bool
- `pytest_sessionstart`() -> Generator[None]
- `pytest_collection`() -> Generator[None]
- `pytest_runtestloop`(session: Session) -> Generator[<ast.Tuple object at 0x11e98fa90>]
- `pytest_runtest_logstart`() -> None
- `pytest_runtest_logreport`() -> None
- `_runtest_for`(item: nodes.Item, when: str) -> Generator[None]
- `pytest_runtest_setup`(item: nodes.Item) -> Generator[None]
- `pytest_runtest_call`(item: nodes.Item) -> Generator[None]
- `pytest_runtest_teardown`(item: nodes.Item) -> Generator[None]
- `pytest_runtest_logfinish`() -> None
- `pytest_sessionfinish`() -> Generator[None]
- `pytest_unconfigure`() -> None
- `set_when`(when: str) -> None

### Implementation
**DatetimeFormatter**

**ColoredLevelFormatter**
  - LOGLEVEL_COLOROPTS: Mapping[<ast.Tuple object at 0x11e8dc350>]
**PercentStyleMultiline**

**catching_logs**

**LogCaptureHandler**

**LogCaptureFixture**
  - original_disable_level: int
**LoggingPlugin**
  - stream: io.TextIOWrapper
  - empty: dict[<ast.Tuple object at 0x11e9a06d0>]
  - formatter: logging.Formatter
**_FileHandler**

**_LiveLoggingStreamHandler**
  - stream: TerminalReporter
**_LiveLoggingNullHandler**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/logging.py`  
**Dependencies**: `__future__.annotations`, `contextlib.contextmanager`, `contextlib.nullcontext`, `datetime.datetime`, `datetime.timedelta`, `datetime.timezone`, `io`, `io.StringIO`, `logging`, `logging.LogRecord`, `os`, `pathlib.Path`, `re`, `types.TracebackType`, `typing.AbstractSet`, `typing.Dict`, `typing.final`, `typing.Generator`, `typing.Generic`, `typing.List`, `typing.Literal`, `typing.Mapping`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `_pytest.nodes`, `_pytest._io.TerminalWriter`, `_pytest.capture.CaptureManager`, `_pytest.config._strtobool`, `_pytest.config.Config`, `_pytest.config.create_terminal_writer`, `_pytest.config.hookimpl`, `_pytest.config.UsageError`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.fixture`, `_pytest.fixtures.FixtureRequest`, `_pytest.main.Session`, `_pytest.stash.StashKey`, `_pytest.terminal.TerminalReporter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.unittest
:::{doc} _is_skipped:433
Return True if the given object has been marked with @unittest.skip.
:::
**Imports**: `__future__.annotations`, `inspect`, `sys`, `traceback`, `types`, `typing.Any`, `typing.Callable`, `typing.Generator`, `typing.Iterable`, `typing.Tuple`, `typing.Type`, `typing.TYPE_CHECKING`, `typing.Union`, `_pytest._code`, `_pytest.compat.is_async_function`, `_pytest.config.hookimpl`, `_pytest.fixtures.FixtureRequest`, `_pytest.nodes.Collector`, `_pytest.nodes.Item`, `_pytest.outcomes.exit`, `_pytest.outcomes.fail`, `_pytest.outcomes.skip`, `_pytest.outcomes.xfail`, `_pytest.python.Class`, `_pytest.python.Function`, `_pytest.python.Module`, `_pytest.runner.CallInfo`, `pytest`, `exceptiongroup.ExceptionGroup`, `unittest`, `twisted.trial.unittest`, `unittest.TestLoader`, `_pytest.debugging.maybe_wrap_pytest_function_for_tracing`, `twisted.trial.itrial.IReporter`, `zope.interface.classImplements`
**Type References**: [[Any]], [[ExceptionInfo]], [[None]], [[TestCaseFunction]], [[UnitTestCase]], [[_pytest._code.ExceptionInfo]]

### Interface
- `pytest_pycollect_makeitem`(collector: Module | Class, name: str, obj: object) -> UnitTestCase | None
- `pytest_runtest_makereport`(item: Item, call: CallInfo[None]) -> None
- `pytest_runtest_protocol`(item: Item) -> Generator[<ast.Tuple object at 0x11ea4c510>]
- `_is_skipped`() -> bool
- `newinstance`() -> Any
- `collect`() -> Iterable[Item | Collector]
- `_register_unittest_setup_class_fixture`(cls: type) -> None
- `_register_unittest_setup_method_fixture`(cls: type) -> None
- `_getinstance`() -> Any
- `_testcase`() -> Any
- `setup`() -> None
- `teardown`() -> None
- `startTest`(testcase: unittest.TestCase) -> None
- `_addexcinfo`(rawexcinfo: _SysExcInfoType) -> None
- `addError`(testcase: unittest.TestCase, rawexcinfo: _SysExcInfoType) -> None
- `addFailure`(testcase: unittest.TestCase, rawexcinfo: _SysExcInfoType) -> None
- `addSkip`(testcase: unittest.TestCase, reason: str) -> None
- `addExpectedFailure`(testcase: unittest.TestCase, rawexcinfo: _SysExcInfoType, reason: str) -> None
- `addUnexpectedSuccess`(testcase: unittest.TestCase, reason: twisted.trial.unittest.Todo | None) -> None
- `addSuccess`(testcase: unittest.TestCase) -> None
- `stopTest`(testcase: unittest.TestCase) -> None
- `addDuration`(testcase: unittest.TestCase, elapsed: float) -> None
- `runtest`() -> None
- `_traceback_filter`(excinfo: _pytest._code.ExceptionInfo[BaseException]) -> _pytest._code.Traceback
- `process_teardown_exceptions`() -> None
- `unittest_setup_class_fixture`(request: FixtureRequest) -> Generator[None]
- `unittest_setup_method_fixture`(request: FixtureRequest) -> Generator[None]
- `excstore`() -> Any

### Implementation
**UnitTestCase**

**TestCaseFunction**
  - _excinfo: list[_pytest._code.ExceptionInfo[BaseException]] | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/unittest.py`  
**Dependencies**: `__future__.annotations`, `inspect`, `sys`, `traceback`, `types`, `typing.Any`, `typing.Callable`, `typing.Generator`, `typing.Iterable`, `typing.Tuple`, `typing.Type`, `typing.TYPE_CHECKING`, `typing.Union`, `_pytest._code`, `_pytest.compat.is_async_function`, `_pytest.config.hookimpl`, `_pytest.fixtures.FixtureRequest`, `_pytest.nodes.Collector`, `_pytest.nodes.Item`, `_pytest.outcomes.exit`, `_pytest.outcomes.fail`, `_pytest.outcomes.skip`, `_pytest.outcomes.xfail`, `_pytest.python.Class`, `_pytest.python.Function`, `_pytest.python.Module`, `_pytest.runner.CallInfo`, `pytest`, `exceptiongroup.ExceptionGroup`, `unittest`, `twisted.trial.unittest`, `unittest.TestLoader`, `_pytest.debugging.maybe_wrap_pytest_function_for_tracing`, `twisted.trial.itrial.IReporter`, `zope.interface.classImplements`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.python_path

**Imports**: `__future__.annotations`, `sys`, `pytest`, `pytest.Config`, `pytest.Parser`
### Interface
- `pytest_addoption`(parser: Parser) -> None
- `pytest_load_initial_conftests`(early_config: Config) -> None
- `pytest_unconfigure`(config: Config) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/python_path.py`  
**Dependencies**: `__future__.annotations`, `sys`, `pytest`, `pytest.Config`, `pytest.Parser`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.runner
:::{doc} show_test_item:146
Show test function, parameters and the fixtures of the test item.
:::
:::{doc} _update_current_test_var:193
Update :envvar:`PYTEST_CURRENT_TEST` to reflect the current item and stage.

If ``when`` is None, delete ``PYTEST_CURRENT_TEST`` from the environment.
:::
:::{doc} check_interactive_exception:252
Check whether the call raised an exception that should be reported as
interactive.
:::
:::{doc} CallInfo:272
Result/Exception info of a function invocation.
:::
:::{doc} SetupState:422
Shared state for setting up/tearing down test items or collectors
in a session.

Suppose we have a collection tree as follows:

<Session session>
    <Module mod1>
        <Function item1>
    <Module mod2>
        <Function item2>

The SetupState maintains a stack. The stack starts out empty:

    []

During the setup phase of item1, setup(item1) is called. What it does
is:

    push session to stack, run session.setup()
    push mod1 to stack, run mod1.setup()
    push item1 to stack, run item1.setup()

The stack is:

    [session, mod1, item1]

While the stack is in this shape, it is allowed to add finalizers to
each of session, mod1, item1 using addfinalizer().

During the teardown phase of item1, teardown_exact(item2) is called,
where item2 is the next item to item1. What it does is:

    pop item1 from stack, run its teardowns
    pop mod1 from stack, run its teardowns

mod1 was popped because it ended its purpose with item1. The stack is:

    [session]

During the setup phase of item2, setup(item2) is called. What it does
is:

    push mod2 to stack, run mod2.setup()
    push item2 to stack, run item2.setup()

Stack:

    [session, mod2, item2]

During the teardown phase of item2, teardown_exact(None) is called,
because item2 is the last item. What it does is:

    pop item2 from stack, run its teardowns
    pop mod2 from stack, run its teardowns
    pop session from stack, run its teardowns

Stack:

    []

The end!
:::
**Imports**: `__future__.annotations`, `bdb`, `dataclasses`, `os`, `sys`, `types`, `typing.Callable`, `typing.cast`, `typing.final`, `typing.Generic`, `typing.Literal`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `reports.BaseReport`, `reports.CollectErrorRepr`, `reports.CollectReport`, `reports.TestReport`, `_pytest.timing`, `_pytest._code.code.ExceptionChainRepr`, `_pytest._code.code.ExceptionInfo`, `_pytest._code.code.TerminalRepr`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.nodes.Collector`, `_pytest.nodes.Directory`, `_pytest.nodes.Item`, `_pytest.nodes.Node`, `_pytest.outcomes.Exit`, `_pytest.outcomes.OutcomeException`, `_pytest.outcomes.Skipped`, `_pytest.outcomes.TEST_OUTCOME`, `exceptiongroup.BaseExceptionGroup`, `_pytest.main.Session`, `_pytest.terminal.TerminalReporter`
**Type References**: [[BaseException]], [[CallInfo]], [[Callable]], [[CollectReport]], [[ExceptionInfo]], [[Literal]], [[None]], [[SetupState]], [[TResult]], [[TerminalRepr]], [[TestReport]]

### Interface
- `pytest_addoption`(parser: Parser) -> None
- `pytest_terminal_summary`(terminalreporter: TerminalReporter) -> None
- `pytest_sessionstart`(session: Session) -> None
- `pytest_sessionfinish`(session: Session) -> None
- `pytest_runtest_protocol`(item: Item, nextitem: Item | None) -> bool
- `runtestprotocol`(item: Item, log: bool, nextitem: Item | None) -> list[TestReport]
- `show_test_item`(item: Item) -> None
- `pytest_runtest_setup`(item: Item) -> None
- `pytest_runtest_call`(item: Item) -> None
- `pytest_runtest_teardown`(item: Item, nextitem: Item | None) -> None
- `_update_current_test_var`(item: Item, when: Literal[<ast.Tuple object at 0x11ea8ec90>] | None) -> None
- `pytest_report_teststatus`(report: BaseReport) -> tuple[<ast.Tuple object at 0x11ea7bb90>] | None
- `call_and_report`(item: Item, when: Literal[<ast.Tuple object at 0x11ea7b450>], log: bool) -> TestReport
- `check_interactive_exception`(call: CallInfo[object], report: BaseReport) -> bool
- `pytest_runtest_makereport`(item: Item, call: CallInfo[None]) -> TestReport
- `pytest_make_collect_report`(collector: Collector) -> CollectReport
- `collect_one_node`(collector: Collector) -> CollectReport
- `__init__`() -> None
- `result`() -> TResult
- `from_call`(func: Callable[<ast.Tuple object at 0x11eabbd90>], when: Literal[<ast.Tuple object at 0x11eac0150>], reraise: type[BaseException] | tuple[<ast.Tuple object at 0x11eac07d0>] | None) -> CallInfo[TResult]
- `__repr__`() -> str
- `collect`() -> list[Item | Collector]
- `setup`(item: Item) -> None
- `addfinalizer`(finalizer: Callable[<ast.Tuple object at 0x11eaf2a90>], node: Node) -> None
- `teardown_exact`(nextitem: Item | None) -> None

### Implementation
**CallInfo**
  - _result: TResult | None
  - excinfo: ExceptionInfo[BaseException] | None
  - start: float
  - stop: float
  - duration: float
  - when: Literal[<ast.Tuple object at 0x11eab8450>]
  - result: TResult | None
**SetupState**
  - exceptions: list[BaseException]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/runner.py`  
**Dependencies**: `__future__.annotations`, `bdb`, `dataclasses`, `os`, `sys`, `types`, `typing.Callable`, `typing.cast`, `typing.final`, `typing.Generic`, `typing.Literal`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `reports.BaseReport`, `reports.CollectErrorRepr`, `reports.CollectReport`, `reports.TestReport`, `_pytest.timing`, `_pytest._code.code.ExceptionChainRepr`, `_pytest._code.code.ExceptionInfo`, `_pytest._code.code.TerminalRepr`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.nodes.Collector`, `_pytest.nodes.Directory`, `_pytest.nodes.Item`, `_pytest.nodes.Node`, `_pytest.outcomes.Exit`, `_pytest.outcomes.OutcomeException`, `_pytest.outcomes.Skipped`, `_pytest.outcomes.TEST_OUTCOME`, `exceptiongroup.BaseExceptionGroup`, `_pytest.main.Session`, `_pytest.terminal.TerminalReporter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.helpconfig
:::{doc} HelpAction:19
An argparse Action that will raise an exception in order to skip the
rest of the argument parsing when --help is passed.

This prevents argparse from quitting due to missing required arguments
when any are defined, for example by ``pytest_addoption``.
This is similar to the way that the builtin argparse --help option is
implemented by raising SystemExit.
:::
**Imports**: `__future__.annotations`, `argparse.Action`, `os`, `sys`, `typing.Generator`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.PrintHelp`, `_pytest.config.argparsing.Parser`, `_pytest.terminal.TerminalReporter`, `pytest`, `textwrap`
**Type References**: [[HelpAction]], [[None]], [[TerminalReporter]]

### Interface
- `pytest_addoption`(parser: Parser) -> None
- `pytest_cmdline_parse`() -> Generator[<ast.Tuple object at 0x11eb14590>]
- `showversion`(config: Config) -> None
- `pytest_cmdline_main`(config: Config) -> int | ExitCode | None
- `showhelp`(config: Config) -> None
- `getpluginversioninfo`(config: Config) -> list[str]
- `pytest_report_header`(config: Config) -> list[str]
- `__init__`() -> Any
- `__call__`() -> Any
- `unset_tracing`() -> None

### Implementation
**HelpAction**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/helpconfig.py`  
**Dependencies**: `__future__.annotations`, `argparse.Action`, `os`, `sys`, `typing.Generator`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.PrintHelp`, `_pytest.config.argparsing.Parser`, `_pytest.terminal.TerminalReporter`, `pytest`, `textwrap`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.pastebin
:::{doc} create_new_paste:72
Create a new paste using the bpaste.net service.

:contents: Paste contents string.
:returns: URL to the pasted contents, or an error message.
:::
**Imports**: `__future__.annotations`, `io.StringIO`, `tempfile`, `typing.IO`, `_pytest.config.Config`, `_pytest.config.create_terminal_writer`, `_pytest.config.argparsing.Parser`, `_pytest.stash.StashKey`, `_pytest.terminal.TerminalReporter`, `pytest`, `re`, `urllib.parse.urlencode`, `urllib.request.urlopen`
### Interface
- `pytest_addoption`(parser: Parser) -> None
- `pytest_configure`(config: Config) -> None
- `pytest_unconfigure`(config: Config) -> None
- `create_new_paste`(contents: str | bytes) -> str
- `pytest_terminal_summary`(terminalreporter: TerminalReporter) -> None
- `tee_write`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/pastebin.py`  
**Dependencies**: `__future__.annotations`, `io.StringIO`, `tempfile`, `typing.IO`, `_pytest.config.Config`, `_pytest.config.create_terminal_writer`, `_pytest.config.argparsing.Parser`, `_pytest.stash.StashKey`, `_pytest.terminal.TerminalReporter`, `pytest`, `re`, `urllib.parse.urlencode`, `urllib.request.urlopen`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.compat
:::{doc} legacy_path:32
Internal wrapper to prepare lazy proxies for legacy_path instances
:::
:::{doc} iscoroutinefunction:51
Return True if func is a coroutine function (a function defined with async
def syntax, and doesn't contain yield), or a function decorated with
@asyncio.coroutine.

Note: copied and modified from Python 3.5's builtin coroutines.py to avoid
importing asyncio directly, which in turns also initializes the "logging"
module as a side-effect (see issue #8).
:::
:::{doc} is_async_function:63
Return True if the given function seems to be an async function or
an async generator.
:::
:::{doc} num_mock_patch_args:83
Return number of arguments used up by mock arguments (if any).
:::
:::{doc} getfuncargnames:102
Return the names of a function's mandatory arguments.

Should return the names of all function arguments that:
* Aren't bound to an instance or type as in instance or class methods.
* Don't have default values.
* Aren't bound with functools.partial.
* Aren't replaced with mocks.

The cls arguments indicate that the function should be treated as a bound
method even though it's not unless the function is a static method.

The name parameter should be the original name in which the function was collected.
:::
:::{doc} ascii_escaped:190
If val is pure ASCII, return it as an str, otherwise, escape
bytes objects into a sequence of escaped bytes:

b'\xc3\xb4\xc5\xd6' -> r'\xc3\xb4\xc5\xd6'

and escapes strings into a sequence of escaped unicode ids, e.g.:

r'4\nV\U00043efa\x0eMXWB\x1e\u3028\u15fd\xcd\U0007d944'

Note:
   The obvious "v.decode('unicode-escape')" will return
   valid UTF-8 unicode if it finds them in bytes, but we
   want to return escaped bytes for any byte, even if they match
   a UTF-8 string.
:::
:::{doc} _PytestWrapper:214
Dummy wrapper around a function object for internal use only.

Used to correctly unwrap the underlying function object when we are
creating fixtures, because we wrap the function object ourselves with a
decorator to issue warnings when the fixture function is called directly.
:::
:::{doc} get_real_func:225
Get the real function object of the (possibly) wrapped object by
functools.wraps or functools.partial.
:::
:::{doc} get_real_method:252
Attempt to obtain the real function object that might be wrapping
``obj``, while at the same time returning a bound method to ``holder`` if
the original object was a bound method.
:::
:::{doc} safe_getattr:273
Like getattr but return default upon any Exception or any OutcomeException.

Attribute access can potentially fail for 'evil' Python objects.
See issue #214.
It catches OutcomeException because of #2490 (issue #580), new outcomes
are derived from BaseException instead of Exception (for more details
check #2707).
:::
:::{doc} safe_isclass:290
Ignore any exception via isinstance on Python 3.
:::
:::{doc} get_user_id:298
Return the current process's real user id or None if it could not be
determined.

:return: The user id or None if it could not be determined.
:::
**Imports**: `__future__.annotations`, `dataclasses`, `enum`, `functools`, `inspect`, `inspect.Parameter`, `inspect.signature`, `os`, `pathlib.Path`, `sys`, `typing.Any`, `typing.Callable`, `typing.Final`, `typing.NoReturn`, `py`, `_pytest.outcomes.TEST_OUTCOME`, `_pytest._io.saferepr.saferepr`, `_pytest.outcomes.fail`
**Type References**: [[Any]], [[Final]], [[NotSetType]], [[_PytestWrapper]]

### Interface
- `legacy_path`(path: str | os.PathLike[str]) -> LEGACY_PATH
- `is_generator`(func: object) -> bool
- `iscoroutinefunction`(func: object) -> bool
- `is_async_function`(func: object) -> bool
- `getlocation`(curdir: str | os.PathLike[str] | None) -> str
- `num_mock_patch_args`() -> int
- `getfuncargnames`(function: Callable[<ast.Tuple object at 0x11eb8d8d0>]) -> tuple[<ast.Tuple object at 0x11eb85050>]
- `get_default_arg_names`(function: Callable[<ast.Tuple object at 0x11eb84b50>]) -> tuple[<ast.Tuple object at 0x11eba83d0>]
- `ascii_escaped`(val: bytes | str) -> str
- `get_real_func`() -> Any
- `get_real_method`() -> Any
- `getimfunc`() -> Any
- `safe_getattr`(object: Any, name: str, default: Any) -> Any
- `safe_isclass`(obj: object) -> bool
- `get_user_id`() -> int | None
- `assert_never`(value: NoReturn) -> NoReturn

### Implementation
**NotSetType**

**_PytestWrapper**
  - obj: Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/compat.py`  
**Dependencies**: `__future__.annotations`, `dataclasses`, `enum`, `functools`, `inspect`, `inspect.Parameter`, `inspect.signature`, `os`, `pathlib.Path`, `sys`, `typing.Any`, `typing.Callable`, `typing.Final`, `typing.NoReturn`, `py`, `_pytest.outcomes.TEST_OUTCOME`, `_pytest._io.saferepr.saferepr`, `_pytest.outcomes.fail`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest._version

**Imports**: `typing.Tuple`, `typing.Union`
**Type References**: [[VERSION_TUPLE]]

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/_version.py`  
**Dependencies**: `typing.Tuple`, `typing.Union`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.terminal
:::{doc} MoreQuietAction:76
A modified copy of the argparse count action which counts down and updates
the legacy quiet attribute at the same time.

Used to unify verbosity handling.
:::
:::{doc} TestShortLogReport:113
Used to store the test status result category, shortletter and verbose word.
For example ``"rerun", "R", ("RERUN", {"yellow": True})``.

:ivar category:
    The class of result, for example ``“passed”``, ``“skipped”``, ``“error”``, or the empty string.

:ivar letter:
    The short letter shown as testing progresses, for example ``"."``, ``"s"``, ``"E"``, or the empty string.

:ivar word:
    Verbose word is shown as testing progresses in verbose mode, for example ``"PASSED"``, ``"SKIPPED"``,
    ``"ERROR"``, or the empty string.
:::
:::{doc} WarningReport:333
Simple structure to hold warnings information captured by ``pytest_warning_recorded``.

:ivar str message:
    User friendly message about the warning.
:ivar str|None nodeid:
    nodeid that generated the warning (see ``get_location``).
:ivar tuple fslocation:
    File system location of the source of the warning (see ``get_location``).
:::
:::{doc} _format_trimmed:1428
Format msg into format, ellipsizing it if doesn't fit in available_width.

Returns None if even the ellipsis can't fit.
:::
:::{doc} _get_line_with_reprcrash_message:1453
Get summary line for a report, trying to add reprcrash message.
:::
:::{doc} format_session_duration:1550
Format the given seconds in a human readable manner to show in the final summary.
:::
:::{doc} _get_raw_skip_reason:1559
Get the reason string of a skip/xfail/xpass test report.

The string is just the part given by the user.
:::
**Imports**: `__future__.annotations`, `argparse`, `collections.Counter`, `dataclasses`, `datetime`, `functools.partial`, `inspect`, `pathlib.Path`, `platform`, `sys`, `textwrap`, `typing.Any`, `typing.Callable`, `typing.ClassVar`, `typing.final`, `typing.Generator`, `typing.Literal`, `typing.Mapping`, `typing.NamedTuple`, `typing.Sequence`, `typing.TextIO`, `typing.TYPE_CHECKING`, `warnings`, `pluggy`, `_pytest.nodes`, `_pytest.timing`, `_pytest._code.ExceptionInfo`, `_pytest._code.code.ExceptionRepr`, `_pytest._io.TerminalWriter`, `_pytest._io.wcwidth.wcswidth`, `_pytest._version`, `_pytest.assertion.util.running_on_ci`, `_pytest.config._PluggyPlugin`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.hookimpl`, `_pytest.config.argparsing.Parser`, `_pytest.nodes.Item`, `_pytest.nodes.Node`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.bestrelpath`, `_pytest.reports.BaseReport`, `_pytest.reports.CollectReport`, `_pytest.reports.TestReport`, `_pytest.main.Session`, `_pytest.config`, `_pytest.warnings.warning_record_to_str`
**Type References**: [[BaseReport]], [[ClassVar]], [[CollectReport]], [[Mapping]], [[MoreQuietAction]], [[Node]], [[None]], [[TerminalReporter]], [[TestReport]], [[TestShortLogReport]], [[WarningReport]]

### Interface
- `pytest_addoption`(parser: Parser) -> None
- `pytest_configure`(config: Config) -> None
- `getreportopt`(config: Config) -> str
- `pytest_report_teststatus`(report: BaseReport) -> tuple[<ast.Tuple object at 0x11ec49990>]
- `_get_node_id_with_markup`(tw: TerminalWriter, config: Config, rep: BaseReport) -> Any
- `_format_trimmed`(format: str, msg: str, available_width: int) -> str | None
- `_get_line_with_reprcrash_message`(config: Config, rep: BaseReport, tw: TerminalWriter, word_markup: dict[<ast.Tuple object at 0x11ee18c90>]) -> str
- `_folded_skips`(startpath: Path, skipped: Sequence[CollectReport]) -> list[tuple[<ast.Tuple object at 0x11ee32310>]]
- `pluralize`(count: int, noun: str) -> tuple[<ast.Tuple object at 0x11ee38690>]
- `_plugin_nameversions`() -> list[str]
- `format_session_duration`(seconds: float) -> str
- `_get_raw_skip_reason`(report: TestReport) -> str
- `__init__`(config: Config, file: TextIO | None) -> None
- `__call__`(parser: argparse.ArgumentParser, namespace: argparse.Namespace, values: str | Sequence[object] | None, option_string: str | None) -> None
- `get_location`(config: Config) -> str | None
- `_determine_show_progress_info`() -> Literal[<ast.Tuple object at 0x11ec2ab10>]
- `verbosity`() -> int
- `showheader`() -> bool
- `no_header`() -> bool
- `no_summary`() -> bool
- `showfspath`(value: bool | None) -> None
- `showlongtestinfo`() -> bool
- `hasopt`(char: str) -> bool
- `write_fspath_result`(nodeid: str, res: str) -> None
- `write_ensure_prefix`(prefix: str, extra: str) -> None
- `ensure_newline`() -> None
- `wrap_write`(content: str) -> None
- `write`(content: str) -> None
- `flush`() -> None
- `write_line`(line: str | bytes) -> None
- `rewrite`(line: str) -> None
- `write_sep`(sep: str, title: str | None, fullwidth: int | None) -> None
- `section`(title: str, sep: str) -> None
- `line`(msg: str) -> None
- `_add_stats`(category: str, items: Sequence[Any]) -> None
- `pytest_internalerror`(excrepr: ExceptionRepr) -> bool
- `pytest_warning_recorded`(warning_message: warnings.WarningMessage, nodeid: str) -> None
- `pytest_plugin_registered`(plugin: _PluggyPlugin) -> None
- `pytest_deselected`(items: Sequence[Item]) -> None
- `pytest_runtest_logstart`(nodeid: str, location: tuple[<ast.Tuple object at 0x11ecd4ad0>]) -> None
- `pytest_runtest_logreport`(report: TestReport) -> None
- `_is_last_item`() -> bool
- `pytest_runtestloop`() -> Generator[<ast.Tuple object at 0x11eca8ad0>]
- `_get_progress_information_message`() -> str
- `_write_progress_information_if_past_edge`() -> None
- `_write_progress_information_filling_space`() -> None
- `_width_of_current_line`() -> int
- `pytest_collection`() -> None
- `pytest_collectreport`(report: CollectReport) -> None
- `report_collect`(final: bool) -> None
- `pytest_sessionstart`(session: Session) -> None
- `_write_report_lines_from_hooks`(lines: Sequence[str | Sequence[str]]) -> None
- `pytest_report_header`(config: Config) -> list[str]
- `pytest_collection_finish`(session: Session) -> None
- `_printcollecteditems`(items: Sequence[Item]) -> None
- `pytest_sessionfinish`(session: Session, exitstatus: int | ExitCode) -> Generator[None]
- `pytest_terminal_summary`() -> Generator[None]
- `pytest_keyboard_interrupt`(excinfo: ExceptionInfo[BaseException]) -> None
- `pytest_unconfigure`() -> None
- `_report_keyboardinterrupt`() -> None
- `_locationline`(nodeid: str, fspath: str, lineno: int | None, domain: str) -> str
- `_getfailureheadline`() -> Any
- `_getcrashline`() -> Any
- `getreports`(name: str) -> Any
- `summary_warnings`() -> None
- `summary_passes`() -> None
- `summary_xpasses`() -> None
- `summary_passes_combined`(which_reports: str, sep_title: str, needed_opt: str) -> None
- `_get_teardown_reports`(nodeid: str) -> list[TestReport]
- `_handle_teardown_sections`(nodeid: str) -> None
- `print_teardown_sections`(rep: TestReport) -> None
- `summary_failures`() -> None
- `summary_xfailures`() -> None
- `summary_failures_combined`(which_reports: str, sep_title: str) -> None
- `summary_errors`() -> None
- `_outrep_summary`(rep: BaseReport) -> None
- `summary_stats`() -> None
- `short_test_summary`() -> None
- `_get_main_color`() -> tuple[<ast.Tuple object at 0x11eddf150>]
- `_determine_main_color`(unknown_type_seen: bool) -> str
- `_set_main_color`() -> None
- `build_summary_stats_line`() -> tuple[<ast.Tuple object at 0x11edf0210>]
- `_get_reports_to_display`(key: str) -> list[Any]
- `_build_normal_summary_stats_line`() -> tuple[<ast.Tuple object at 0x11edf8c50>]
- `_build_collect_only_summary_stats_line`() -> tuple[<ast.Tuple object at 0x11ee06750>]
- `mywriter`() -> Any
- `mkrel`(nodeid: str) -> str
- `show_simple`(lines: list[str]) -> None
- `show_xfailed`(lines: list[str]) -> None
- `show_xpassed`(lines: list[str]) -> None
- `show_skipped_folded`(lines: list[str]) -> None
- `show_skipped_unfolded`(lines: list[str]) -> None
- `show_skipped`(lines: list[str]) -> None
- `collapsed_location_report`(reports: list[WarningReport]) -> str

### Implementation
**MoreQuietAction**

**TestShortLogReport**
  - category: str
  - letter: str
  - word: str | tuple[<ast.Tuple object at 0x11ebe9d90>]
**WarningReport**
  - message: str
  - nodeid: str | None
  - fslocation: tuple[<ast.Tuple object at 0x11ec48e10>] | None
  - count_towards_summary: ClassVar
**TerminalReporter**
  - cfg: str
  - verbosity: int
  - stack: list[Node]
  - REPORTCHAR_ACTIONS: Mapping[<ast.Tuple object at 0x11edd2d90>]
  - lines: list[str]
  - unknown_types: list[str]
  - testpaths: list[str]
  - all_warnings: list[WarningReport] | None
  - reports_grouped_by_message: dict[<ast.Tuple object at 0x11ed508d0>]
  - reports: list[BaseReport]
  - skipped: list[CollectReport]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/terminal.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `collections.Counter`, `dataclasses`, `datetime`, `functools.partial`, `inspect`, `pathlib.Path`, `platform`, `sys`, `textwrap`, `typing.Any`, `typing.Callable`, `typing.ClassVar`, `typing.final`, `typing.Generator`, `typing.Literal`, `typing.Mapping`, `typing.NamedTuple`, `typing.Sequence`, `typing.TextIO`, `typing.TYPE_CHECKING`, `warnings`, `pluggy`, `_pytest.nodes`, `_pytest.timing`, `_pytest._code.ExceptionInfo`, `_pytest._code.code.ExceptionRepr`, `_pytest._io.TerminalWriter`, `_pytest._io.wcwidth.wcswidth`, `_pytest._version`, `_pytest.assertion.util.running_on_ci`, `_pytest.config._PluggyPlugin`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.hookimpl`, `_pytest.config.argparsing.Parser`, `_pytest.nodes.Item`, `_pytest.nodes.Node`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.bestrelpath`, `_pytest.reports.BaseReport`, `_pytest.reports.CollectReport`, `_pytest.reports.TestReport`, `_pytest.main.Session`, `_pytest.config`, `_pytest.warnings.warning_record_to_str`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.warnings
:::{doc} catch_warnings_for_item:28
Context manager that catches warnings generated in the contained execution block.

``item`` can be None if we are not in the context of an item execution.

Each warning captured triggers the ``pytest_warning_recorded`` hook.
:::
:::{doc} warning_record_to_str:77
Convert a warnings.WarningMessage to a string.
:::
**Imports**: `__future__.annotations`, `contextlib.contextmanager`, `sys`, `typing.Generator`, `typing.Literal`, `warnings`, `_pytest.config.apply_warning_filters`, `_pytest.config.Config`, `_pytest.config.parse_warning_filter`, `_pytest.main.Session`, `_pytest.nodes.Item`, `_pytest.terminal.TerminalReporter`, `pytest`, `tracemalloc`
### Interface
- `pytest_configure`(config: Config) -> None
- `catch_warnings_for_item`(config: Config, when: Literal[<ast.Tuple object at 0x11ee5e1d0>], item: Item | None) -> Generator[None]
- `warning_record_to_str`(warning_message: warnings.WarningMessage) -> str
- `pytest_runtest_protocol`(item: Item) -> Generator[<ast.Tuple object at 0x11ee659d0>]
- `pytest_collection`(session: Session) -> Generator[<ast.Tuple object at 0x11ee643d0>]
- `pytest_terminal_summary`(terminalreporter: TerminalReporter) -> Generator[None]
- `pytest_sessionfinish`(session: Session) -> Generator[None]
- `pytest_load_initial_conftests`(early_config: Config) -> Generator[None]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/warnings.py`  
**Dependencies**: `__future__.annotations`, `contextlib.contextmanager`, `sys`, `typing.Generator`, `typing.Literal`, `warnings`, `_pytest.config.apply_warning_filters`, `_pytest.config.Config`, `_pytest.config.parse_warning_filter`, `_pytest.main.Session`, `_pytest.nodes.Item`, `_pytest.terminal.TerminalReporter`, `pytest`, `tracemalloc`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.pytester_assertions
:::{doc} assert_outcomes:37
Assert that the specified outcomes appear with the respective
numbers (0 means it didn't occur) in the text output from a test run.
:::
**Imports**: `__future__.annotations`, `typing.Sequence`, `_pytest.reports.CollectReport`, `_pytest.reports.TestReport`
### Interface
- `assertoutcome`(outcomes: tuple[<ast.Tuple object at 0x11ee7f750>], passed: int, skipped: int, failed: int) -> None
- `assert_outcomes`(outcomes: dict[<ast.Tuple object at 0x11ee7cd90>], passed: int, skipped: int, failed: int, errors: int, xpassed: int, xfailed: int, warnings: int | None, deselected: int | None) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/pytester_assertions.py`  
**Dependencies**: `__future__.annotations`, `typing.Sequence`, `_pytest.reports.CollectReport`, `_pytest.reports.TestReport`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.deprecated

**Imports**: `__future__.annotations`, `warnings.warn`, `_pytest.warning_types.PytestDeprecationWarning`, `_pytest.warning_types.PytestRemovedIn9Warning`, `_pytest.warning_types.UnformattedWarning`
### Interface
- `check_ispytest`(ispytest: bool) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/deprecated.py`  
**Dependencies**: `__future__.annotations`, `warnings.warn`, `_pytest.warning_types.PytestDeprecationWarning`, `_pytest.warning_types.PytestRemovedIn9Warning`, `_pytest.warning_types.UnformattedWarning`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.recwarn
:::{doc} recwarn:35
Return a :class:`WarningsRecorder` instance that records all warnings emitted by test functions.

See :ref:`warnings` for information on warning categories.
:::
:::{doc} deprecated_call:54
Assert that code produces a ``DeprecationWarning`` or ``PendingDeprecationWarning`` or ``FutureWarning``.

This function can be used as a context manager::

    >>> import warnings
    >>> def api_call_v2():
    ...     warnings.warn('use v3 of this api', DeprecationWarning)
    ...     return 200

    >>> import pytest
    >>> with pytest.deprecated_call():
    ...    assert api_call_v2() == 200

It can also be used by passing a function and ``*args`` and ``**kwargs``,
in which case it will ensure calling ``func(*args, **kwargs)`` produces one of
the warnings types above. The return value is the return value of the function.

In the context manager form you may use the keyword argument ``match`` to assert
that the warning matches a text or regex.

The context manager produces a list of :class:`warnings.WarningMessage` objects,
one for each warning raised.
:::
:::{doc} warns:105
Assert that code raises a particular class of warning.

Specifically, the parameter ``expected_warning`` can be a warning class or tuple
of warning classes, and the code inside the ``with`` block must issue at least one
warning of that class or classes.

This helper produces a list of :class:`warnings.WarningMessage` objects, one for
each warning emitted (regardless of whether it is an ``expected_warning`` or not).
Since pytest 8.0, unmatched warnings are also re-emitted when the context closes.

This function can be used as a context manager::

    >>> import pytest
    >>> with pytest.warns(RuntimeWarning):
    ...    warnings.warn("my warning", RuntimeWarning)

In the context manager form you may use the keyword argument ``match`` to assert
that the warning matches a text or regex::

    >>> with pytest.warns(UserWarning, match='must be 0 or None'):
    ...     warnings.warn("value must be 0 or None", UserWarning)

    >>> with pytest.warns(UserWarning, match=r'must be \d+$'):
    ...     warnings.warn("value must be 42", UserWarning)

    >>> with pytest.warns(UserWarning):  # catch re-emitted warning
    ...     with pytest.warns(UserWarning, match=r'must be \d+$'):
    ...         warnings.warn("this is not here", UserWarning)
    Traceback (most recent call last):
      ...
    Failed: DID NOT WARN. No warnings of type ...UserWarning... were emitted...

**Using with** ``pytest.mark.parametrize``

When using :ref:`pytest.mark.parametrize ref` it is possible to parametrize tests
such that some runs raise a warning and others do not.

This could be achieved in the same way as with exceptions, see
:ref:`parametrizing_conditional_raising` for an example.
:::
:::{doc} WarningsRecorder:169
A context manager to record raised warnings.

Each recorded warning is an instance of :class:`warnings.WarningMessage`.

Adapted from `warnings.catch_warnings`.

.. note::
    ``DeprecationWarning`` and ``PendingDeprecationWarning`` are treated
    differently; see :ref:`ensuring_function_triggers`.
:::
**Imports**: `__future__.annotations`, `pprint.pformat`, `re`, `types.TracebackType`, `typing.Any`, `typing.Callable`, `typing.final`, `typing.Generator`, `typing.Iterator`, `typing.overload`, `typing.Pattern`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `warnings`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.fixture`, `_pytest.outcomes.Exit`, `_pytest.outcomes.fail`, `typing_extensions.Self`
**Type References**: [[None]], [[WarningsChecker]], [[WarningsRecorder]]

### Interface
- `recwarn`() -> Generator[WarningsRecorder]
- `deprecated_call`(func: Callable[<ast.Tuple object at 0x11ee9b610>] | None) -> WarningsRecorder | Any
- `warns`(expected_warning: type[Warning] | tuple[<ast.Tuple object at 0x11ee97610>]) -> WarningsChecker | Any
- `__init__`(expected_warning: type[Warning] | tuple[<ast.Tuple object at 0x11eec2850>], match_expr: str | Pattern[str] | None) -> None
- `list`() -> list[warnings.WarningMessage]
- `__getitem__`(i: int) -> warnings.WarningMessage
- `__iter__`() -> Iterator[warnings.WarningMessage]
- `__len__`() -> int
- `pop`(cls: type[Warning]) -> warnings.WarningMessage
- `clear`() -> None
- `__enter__`() -> Self
- `__exit__`(exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: TracebackType | None) -> None
- `matches`(warning: warnings.WarningMessage) -> bool
- `found_str`() -> str

### Implementation
**WarningsRecorder**
  - best_idx: int | None
**WarningsChecker**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/recwarn.py`  
**Dependencies**: `__future__.annotations`, `pprint.pformat`, `re`, `types.TracebackType`, `typing.Any`, `typing.Callable`, `typing.final`, `typing.Generator`, `typing.Iterator`, `typing.overload`, `typing.Pattern`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `warnings`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.fixture`, `_pytest.outcomes.Exit`, `_pytest.outcomes.fail`, `typing_extensions.Self`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.tmpdir
:::{doc} TempPathFactory:43
Factory for temporary directories under the common base temp directory,
as discussed at :ref:`temporary directory location and retention`.
:::
:::{doc} get_user:200
Return the current user name, or None if getuser() does not work
in the current environment (see #1010).
:::
:::{doc} pytest_configure:212
Create a TempPathFactory and attach it to the config object.

This is to comply with existing plugins which expect the handler to be
available at pytest_configure time, but ideally should be moved entirely
to the tmp_path_factory session fixture.
:::
:::{doc} tmp_path_factory:241
Return a :class:`pytest.TempPathFactory` instance for the test session.
:::
:::{doc} tmp_path:256
Return a temporary directory (as :class:`pathlib.Path` object)
which is unique to each test function invocation.
The temporary directory is created as a subdirectory
of the base temporary directory, with configurable retention,
as discussed in :ref:`temporary directory location and retention`.
:::
:::{doc} pytest_sessionfinish:281
After each session, remove base directory if all the tests passed,
the policy is "failed", and the basetemp is not specified by a user.
:::
**Imports**: `__future__.annotations`, `dataclasses`, `os`, `pathlib.Path`, `re`, `shutil.rmtree`, `tempfile`, `typing.Any`, `typing.Dict`, `typing.final`, `typing.Generator`, `typing.Literal`, `pathlib.cleanup_dead_symlinks`, `pathlib.LOCK_TIMEOUT`, `pathlib.make_numbered_dir`, `pathlib.make_numbered_dir_with_cleanup`, `pathlib.rm_rf`, `_pytest.compat.get_user_id`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.hookimpl`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.fixture`, `_pytest.fixtures.FixtureRequest`, `_pytest.monkeypatch.MonkeyPatch`, `_pytest.nodes.Item`, `_pytest.reports.TestReport`, `_pytest.stash.StashKey`, `getpass`
**Type References**: [[Any]], [[None]], [[Path]], [[RetentionType]], [[TempPathFactory]]

### Interface
- `get_user`() -> str | None
- `pytest_configure`(config: Config) -> None
- `pytest_addoption`(parser: Parser) -> None
- `tmp_path_factory`(request: FixtureRequest) -> TempPathFactory
- `_mk_tmp`(request: FixtureRequest, factory: TempPathFactory) -> Path
- `tmp_path`(request: FixtureRequest, tmp_path_factory: TempPathFactory) -> Generator[Path]
- `pytest_sessionfinish`(exitstatus: int | ExitCode) -> Any
- `pytest_runtest_makereport`(item: Item) -> Generator[<ast.Tuple object at 0x11ef3c110>]
- `__init__`(given_basetemp: Path | None, retention_count: int, retention_policy: RetentionType, basetemp: Path | None) -> None
- `from_config`(config: Config) -> TempPathFactory
- `_ensure_relative_to_basetemp`(basename: str) -> str
- `mktemp`(basename: str, numbered: bool) -> Path
- `getbasetemp`() -> Path

### Implementation
**TempPathFactory**
  - _given_basetemp: Path | None
  - _trace: Any
  - _basetemp: Path | None
  - _retention_count: int
  - _retention_policy: RetentionType
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/tmpdir.py`  
**Dependencies**: `__future__.annotations`, `dataclasses`, `os`, `pathlib.Path`, `re`, `shutil.rmtree`, `tempfile`, `typing.Any`, `typing.Dict`, `typing.final`, `typing.Generator`, `typing.Literal`, `pathlib.cleanup_dead_symlinks`, `pathlib.LOCK_TIMEOUT`, `pathlib.make_numbered_dir`, `pathlib.make_numbered_dir_with_cleanup`, `pathlib.rm_rf`, `_pytest.compat.get_user_id`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.hookimpl`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.fixture`, `_pytest.fixtures.FixtureRequest`, `_pytest.monkeypatch.MonkeyPatch`, `_pytest.nodes.Item`, `_pytest.reports.TestReport`, `_pytest.stash.StashKey`, `getpass`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest

**Imports**: `__future__.annotations`, `_version.version`, `_version.version_tuple`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/__init__.py`  
**Dependencies**: `__future__.annotations`, `_version.version`, `_version.version_tuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.stash
:::{doc} StashKey:16
``StashKey`` is an object used as a key to a :class:`Stash`.

A ``StashKey`` is associated with the type ``T`` of the value of the key.

A ``StashKey`` is unique and cannot conflict with another key.

.. versionadded:: 7.0
:::
:::{doc} Stash:29
``Stash`` is a type-safe heterogeneous mutable mapping that
allows keys and value types to be defined separately from
where it (the ``Stash``) is created.

Usually you will be given an object which has a ``Stash``, for example
:class:`~pytest.Config` or a :class:`~_pytest.nodes.Node`:

.. code-block:: python

    stash: Stash = some_object.stash

If a module or plugin wants to store data in this ``Stash``, it creates
:class:`StashKey`\s for its keys (at the module level):

.. code-block:: python

    # At the top-level of the module
    some_str_key = StashKey[str]()
    some_bool_key = StashKey[bool]()

To store information:

.. code-block:: python

    # Value type must match the key.
    stash[some_str_key] = "value"
    stash[some_bool_key] = True

To retrieve the information:

.. code-block:: python

    # The static type of some_str is str.
    some_str = stash[some_str_key]
    # The static type of some_bool is bool.
    some_bool = stash[some_bool_key]

.. versionadded:: 7.0
:::
**Imports**: `__future__.annotations`, `typing.Any`, `typing.cast`, `typing.Generic`, `typing.TypeVar`
**Type References**: [[Stash]], [[StashKey]]

### Interface
- `__init__`() -> None
- `__setitem__`(key: StashKey[T], value: T) -> None
- `__getitem__`(key: StashKey[T]) -> T
- `get`(key: StashKey[T], default: D) -> T | D
- `setdefault`(key: StashKey[T], default: T) -> T
- `__delitem__`(key: StashKey[T]) -> None
- `__contains__`(key: StashKey[T]) -> bool
- `__len__`() -> int

### Implementation
**StashKey**

**Stash**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/stash.py`  
**Dependencies**: `__future__.annotations`, `typing.Any`, `typing.cast`, `typing.Generic`, `typing.TypeVar`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.debugging
:::{doc} _validate_usepdb_cls:30
Validate syntax of --pdbcls option.
:::
:::{doc} pytestPDB:92
Pseudo PDB that defers to the real pdb.
:::
:::{doc} wrap_pytest_function_for_tracing:306
Change the Python function object of the given Function item by a
wrapper which actually enters pdb before calling the python function
itself, effectively leaving the user in the pdb prompt in the first
statement of the function.
:::
:::{doc} maybe_wrap_pytest_function_for_tracing:325
Wrap the given pytestfunct item for tracing support if --trace was given in
the command line.
:::
**Imports**: `__future__.annotations`, `argparse`, `functools`, `sys`, `types`, `typing.Any`, `typing.Callable`, `typing.Generator`, `unittest`, `_pytest.outcomes`, `_pytest._code.ExceptionInfo`, `_pytest.capture.CaptureManager`, `_pytest.config.Config`, `_pytest.config.ConftestImportFailure`, `_pytest.config.hookimpl`, `_pytest.config.PytestPluginManager`, `_pytest.config.argparsing.Parser`, `_pytest.config.exceptions.UsageError`, `_pytest.nodes.Node`, `_pytest.reports.BaseReport`, `_pytest.runner.CallInfo`, `pdb`, `doctest.UnexpectedException`, `_pytest.config`, `_pytest.config`, `pdb`, `pdb`
**Type References**: [[Any]], [[Callable]], [[CaptureManager]], [[Config]], [[None]], [[PdbInvoke]], [[PdbTrace]], [[PytestPdbWrapper]], [[PytestPluginManager]], [[pytestPDB]]

### Interface
- `_validate_usepdb_cls`(value: str) -> tuple[<ast.Tuple object at 0x11ef74510>]
- `pytest_addoption`(parser: Parser) -> None
- `pytest_configure`(config: Config) -> None
- `wrap_pytest_function_for_tracing`() -> None
- `maybe_wrap_pytest_function_for_tracing`() -> None
- `_enter_pdb`(node: Node, excinfo: ExceptionInfo[BaseException], rep: BaseReport) -> BaseReport
- `_postmortem_traceback`(excinfo: ExceptionInfo[BaseException]) -> types.TracebackType
- `post_mortem`(t: types.TracebackType) -> None
- `fin`() -> None
- `_is_capturing`(capman: CaptureManager | None) -> str | bool
- `_import_pdb_cls`(capman: CaptureManager | None) -> Any
- `_get_pdb_wrapper_class`(capman: CaptureManager | None) -> Any
- `_init_pdb`() -> Any
- `set_trace`() -> None
- `pytest_exception_interact`(node: Node, call: CallInfo[Any], report: BaseReport) -> None
- `pytest_internalerror`(excinfo: ExceptionInfo[BaseException]) -> None
- `pytest_pyfunc_call`() -> Generator[<ast.Tuple object at 0x11efa8650>]
- `wrapper`() -> None
- `do_debug`() -> Any
- `do_continue`() -> Any
- `do_quit`() -> Any
- `setup`() -> Any
- `get_stack`() -> Any

### Implementation
**pytestPDB**
  - _pluginmanager: PytestPluginManager | None
  - _config: Config | None
  - _saved: list[tuple[<ast.Tuple object at 0x11ef5ded0>]]
  - _wrapped_pdb_cls: tuple[<ast.Tuple object at 0x11ef5d390>] | None
  - capman: CaptureManager | None
**PdbInvoke**

**PdbTrace**

**PytestPdbWrapper**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/debugging.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `functools`, `sys`, `types`, `typing.Any`, `typing.Callable`, `typing.Generator`, `unittest`, `_pytest.outcomes`, `_pytest._code.ExceptionInfo`, `_pytest.capture.CaptureManager`, `_pytest.config.Config`, `_pytest.config.ConftestImportFailure`, `_pytest.config.hookimpl`, `_pytest.config.PytestPluginManager`, `_pytest.config.argparsing.Parser`, `_pytest.config.exceptions.UsageError`, `_pytest.nodes.Node`, `_pytest.reports.BaseReport`, `_pytest.runner.CallInfo`, `pdb`, `doctest.UnexpectedException`, `_pytest.config`, `_pytest.config`, `pdb`, `pdb`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.python_api
:::{doc} ApproxBase:63
Provide shared utilities for making approximate comparisons between
numbers or sequences of numbers.
:::
:::{doc} _recursive_sequence_map:127
Recursively map a function over a sequence of arbitrary depth
:::
:::{doc} ApproxNumpy:138
Perform approximate comparisons where the expected value is numpy array.
:::
:::{doc} ApproxMapping:242
Perform approximate comparisons where the expected value is a mapping
with numeric values (the keys can be anything).
:::
:::{doc} ApproxSequenceLike:318
Perform approximate comparisons where the expected value is a sequence of numbers.
:::
:::{doc} ApproxScalar:387
Perform approximate comparisons where the expected value is a single number.
:::
:::{doc} ApproxDecimal:521
Perform approximate comparisons where the expected value is a Decimal.
:::
:::{doc} approx:528
Assert that two numbers (or two ordered sequences of numbers) are equal to each other
within some tolerance.

Due to the :doc:`python:tutorial/floatingpoint`, numbers that we
would intuitively expect to be equal are not always so::

    >>> 0.1 + 0.2 == 0.3
    False

This problem is commonly encountered when writing tests, e.g. when making
sure that floating-point values are what you expect them to be.  One way to
deal with this problem is to assert that two floating-point numbers are
equal to within some appropriate tolerance::

    >>> abs((0.1 + 0.2) - 0.3) < 1e-6
    True

However, comparisons like this are tedious to write and difficult to
understand.  Furthermore, absolute comparisons like the one above are
usually discouraged because there's no tolerance that works well for all
situations.  ``1e-6`` is good for numbers around ``1``, but too small for
very big numbers and too big for very small ones.  It's better to express
the tolerance as a fraction of the expected value, but relative comparisons
like that are even more difficult to write correctly and concisely.

The ``approx`` class performs floating-point comparisons using a syntax
that's as intuitive as possible::

    >>> from pytest import approx
    >>> 0.1 + 0.2 == approx(0.3)
    True

The same syntax also works for ordered sequences of numbers::

    >>> (0.1 + 0.2, 0.2 + 0.4) == approx((0.3, 0.6))
    True

``numpy`` arrays::

    >>> import numpy as np                                                          # doctest: +SKIP
    >>> np.array([0.1, 0.2]) + np.array([0.2, 0.4]) == approx(np.array([0.3, 0.6])) # doctest: +SKIP
    True

And for a ``numpy`` array against a scalar::

    >>> import numpy as np                                         # doctest: +SKIP
    >>> np.array([0.1, 0.2]) + np.array([0.2, 0.1]) == approx(0.3) # doctest: +SKIP
    True

Only ordered sequences are supported, because ``approx`` needs
to infer the relative position of the sequences without ambiguity. This means
``sets`` and other unordered sequences are not supported.

Finally, dictionary *values* can also be compared::

    >>> {'a': 0.1 + 0.2, 'b': 0.2 + 0.4} == approx({'a': 0.3, 'b': 0.6})
    True

The comparison will be true if both mappings have the same keys and their
respective values match the expected tolerances.

**Tolerances**

By default, ``approx`` considers numbers within a relative tolerance of
``1e-6`` (i.e. one part in a million) of its expected value to be equal.
This treatment would lead to surprising results if the expected value was
``0.0``, because nothing but ``0.0`` itself is relatively close to ``0.0``.
To handle this case less surprisingly, ``approx`` also considers numbers
within an absolute tolerance of ``1e-12`` of its expected value to be
equal.  Infinity and NaN are special cases.  Infinity is only considered
equal to itself, regardless of the relative tolerance.  NaN is not
considered equal to anything by default, but you can make it be equal to
itself by setting the ``nan_ok`` argument to True.  (This is meant to
facilitate comparing arrays that use NaN to mean "no data".)

Both the relative and absolute tolerances can be changed by passing
arguments to the ``approx`` constructor::

    >>> 1.0001 == approx(1)
    False
    >>> 1.0001 == approx(1, rel=1e-3)
    True
    >>> 1.0001 == approx(1, abs=1e-3)
    True

If you specify ``abs`` but not ``rel``, the comparison will not consider
the relative tolerance at all.  In other words, two numbers that are within
the default relative tolerance of ``1e-6`` will still be considered unequal
if they exceed the specified absolute tolerance.  If you specify both
``abs`` and ``rel``, the numbers will be considered equal if either
tolerance is met::

    >>> 1 + 1e-8 == approx(1)
    True
    >>> 1 + 1e-8 == approx(1, abs=1e-12)
    False
    >>> 1 + 1e-8 == approx(1, rel=1e-6, abs=1e-12)
    True

You can also use ``approx`` to compare nonnumeric types, or dicts and
sequences containing nonnumeric types, in which case it falls back to
strict equality. This can be useful for comparing dicts and sequences that
can contain optional values::

    >>> {"required": 1.0000005, "optional": None} == approx({"required": 1, "optional": None})
    True
    >>> [None, 1.0000005] == approx([None,1])
    True
    >>> ["foo", 1.0000005] == approx([None,1])
    False

If you're thinking about using ``approx``, then you might want to know how
it compares to other good ways of comparing floating-point numbers.  All of
these algorithms are based on relative and absolute tolerances and should
agree for the most part, but they do have meaningful differences:

- ``math.isclose(a, b, rel_tol=1e-9, abs_tol=0.0)``:  True if the relative
  tolerance is met w.r.t. either ``a`` or ``b`` or if the absolute
  tolerance is met.  Because the relative tolerance is calculated w.r.t.
  both ``a`` and ``b``, this test is symmetric (i.e.  neither ``a`` nor
  ``b`` is a "reference value").  You have to specify an absolute tolerance
  if you want to compare to ``0.0`` because there is no tolerance by
  default.  More information: :py:func:`math.isclose`.

- ``numpy.isclose(a, b, rtol=1e-5, atol=1e-8)``: True if the difference
  between ``a`` and ``b`` is less that the sum of the relative tolerance
  w.r.t. ``b`` and the absolute tolerance.  Because the relative tolerance
  is only calculated w.r.t. ``b``, this test is asymmetric and you can
  think of ``b`` as the reference value.  Support for comparing sequences
  is provided by :py:func:`numpy.allclose`.  More information:
  :std:doc:`numpy:reference/generated/numpy.isclose`.

- ``unittest.TestCase.assertAlmostEqual(a, b)``: True if ``a`` and ``b``
  are within an absolute tolerance of ``1e-7``.  No relative tolerance is
  considered , so this function is not appropriate for very large or very
  small numbers.  Also, it's only available in subclasses of ``unittest.TestCase``
  and it's ugly because it doesn't follow PEP8.  More information:
  :py:meth:`unittest.TestCase.assertAlmostEqual`.

- ``a == pytest.approx(b, rel=1e-6, abs=1e-12)``: True if the relative
  tolerance is met w.r.t. ``b`` or if the absolute tolerance is met.
  Because the relative tolerance is only calculated w.r.t. ``b``, this test
  is asymmetric and you can think of ``b`` as the reference value.  In the
  special case that you explicitly specify an absolute tolerance but not a
  relative tolerance, only the absolute tolerance is considered.

.. note::

    ``approx`` can handle numpy arrays, but we recommend the
    specialised test helpers in :std:doc:`numpy:reference/routines.testing`
    if you need support for comparisons, NaNs, or ULP-based tolerances.

    To match strings using regex, you can use
    `Matches <https://github.com/asottile/re-assert#re_assertmatchespattern-str-args-kwargs>`_
    from the
    `re_assert package <https://github.com/asottile/re-assert>`_.

.. warning::

   .. versionchanged:: 3.2

   In order to avoid inconsistent behavior, :py:exc:`TypeError` is
   raised for ``>``, ``>=``, ``<`` and ``<=`` comparisons.
   The example below illustrates the problem::

       assert approx(0.1) > 0.1 + 1e-10  # calls approx(0.1).__gt__(0.1 + 1e-10)
       assert 0.1 + 1e-10 > approx(0.1)  # calls approx(0.1).__lt__(0.1 + 1e-10)

   In the second example one expects ``approx(0.1).__le__(0.1 + 1e-10)``
   to be called. But instead, ``approx(0.1).__lt__(0.1 + 1e-10)`` is used to
   comparison. This is because the call hierarchy of rich comparisons
   follows a fixed behavior. More information: :py:meth:`object.__ge__`

.. versionchanged:: 3.7.1
   ``approx`` raises ``TypeError`` when it encounters a dict value or
   sequence element of nonnumeric type.

.. versionchanged:: 6.1.0
   ``approx`` falls back to strict equality for nonnumeric types instead
   of raising ``TypeError``.
:::
:::{doc} _is_numpy_array:753
Return true if the given object is implicitly convertible to ndarray,
and numpy is already imported.
:::
:::{doc} _as_numpy_array:761
Return an ndarray if the given object is implicitly convertible to ndarray,
and numpy is already imported, otherwise None.
:::
:::{doc} raises:802
Assert that a code block/function call raises an exception type, or one of its subclasses.

:param expected_exception:
    The expected exception type, or a tuple if one of multiple possible
    exception types are expected. Note that subclasses of the passed exceptions
    will also match.

:kwparam str | re.Pattern[str] | None match:
    If specified, a string containing a regular expression,
    or a regular expression object, that is tested against the string
    representation of the exception and its :pep:`678` `__notes__`
    using :func:`re.search`.

    To match a literal string that may contain :ref:`special characters
    <re-syntax>`, the pattern can first be escaped with :func:`re.escape`.

    (This is only used when ``pytest.raises`` is used as a context manager,
    and passed through to the function otherwise.
    When using ``pytest.raises`` as a function, you can use:
    ``pytest.raises(Exc, func, match="passed on").match("my pattern")``.)

Use ``pytest.raises`` as a context manager, which will capture the exception of the given
type, or any of its subclasses::

    >>> import pytest
    >>> with pytest.raises(ZeroDivisionError):
    ...    1/0

If the code block does not raise the expected exception (:class:`ZeroDivisionError` in the example
above), or no exception at all, the check will fail instead.

You can also use the keyword argument ``match`` to assert that the
exception matches a text or regex::

    >>> with pytest.raises(ValueError, match='must be 0 or None'):
    ...     raise ValueError("value must be 0 or None")

    >>> with pytest.raises(ValueError, match=r'must be \d+$'):
    ...     raise ValueError("value must be 42")

The ``match`` argument searches the formatted exception string, which includes any
`PEP-678 <https://peps.python.org/pep-0678/>`__ ``__notes__``:

    >>> with pytest.raises(ValueError, match=r"had a note added"):  # doctest: +SKIP
    ...     e = ValueError("value must be 42")
    ...     e.add_note("had a note added")
    ...     raise e

The context manager produces an :class:`ExceptionInfo` object which can be used to inspect the
details of the captured exception::

    >>> with pytest.raises(ValueError) as exc_info:
    ...     raise ValueError("value must be 42")
    >>> assert exc_info.type is ValueError
    >>> assert exc_info.value.args[0] == "value must be 42"

.. warning::

   Given that ``pytest.raises`` matches subclasses, be wary of using it to match :class:`Exception` like this::

       with pytest.raises(Exception):  # Careful, this will catch ANY exception raised.
           some_function()

   Because :class:`Exception` is the base class of almost all exceptions, it is easy for this to hide
   real bugs, where the user wrote this expecting a specific exception, but some other exception is being
   raised due to a bug introduced during a refactoring.

   Avoid using ``pytest.raises`` to catch :class:`Exception` unless certain that you really want to catch
   **any** exception raised.

.. note::

   When using ``pytest.raises`` as a context manager, it's worthwhile to
   note that normal context manager rules apply and that the exception
   raised *must* be the final line in the scope of the context manager.
   Lines of code after that, within the scope of the context manager will
   not be executed. For example::

       >>> value = 15
       >>> with pytest.raises(ValueError) as exc_info:
       ...     if value > 10:
       ...         raise ValueError("value must be <= 10")
       ...     assert exc_info.type is ValueError  # This will not execute.

   Instead, the following approach must be taken (note the difference in
   scope)::

       >>> with pytest.raises(ValueError) as exc_info:
       ...     if value > 10:
       ...         raise ValueError("value must be <= 10")
       ...
       >>> assert exc_info.type is ValueError

**Using with** ``pytest.mark.parametrize``

When using :ref:`pytest.mark.parametrize ref`
it is possible to parametrize tests such that
some runs raise an exception and others do not.

See :ref:`parametrizing_conditional_raising` for an example.

.. seealso::

    :ref:`assertraises` for more examples and detailed discussion.

**Legacy form**

It is possible to specify a callable by passing a to-be-called lambda::

    >>> raises(ZeroDivisionError, lambda: 1/0)
    <ExceptionInfo ...>

or you can specify an arbitrary callable with arguments::

    >>> def f(x): return 1/x
    ...
    >>> raises(ZeroDivisionError, f, 0)
    <ExceptionInfo ...>
    >>> raises(ZeroDivisionError, f, x=0)
    <ExceptionInfo ...>

The form above is fully supported but discouraged for new code because the
context manager form is regarded as more readable and less error-prone.

.. note::
    Similar to caught exception objects in Python, explicitly clearing
    local references to returned ``ExceptionInfo`` objects can
    help the Python interpreter speed up its garbage collection.

    Clearing those references breaks a reference cycle
    (``ExceptionInfo`` --> caught exception --> frame stack raising
    the exception --> current frame stack --> local variables -->
    ``ExceptionInfo``) which makes Python keep all objects referenced
    from that cycle (including all local variables in the current
    frame) alive until the next cyclic garbage collection run.
    More detailed information can be found in the official Python
    documentation for :ref:`the try statement <python:try>`.
:::
**Imports**: `__future__.annotations`, `collections.abc.Collection`, `collections.abc.Sized`, `decimal.Decimal`, `math`, `numbers.Complex`, `pprint`, `re`, `types.TracebackType`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.ContextManager`, `typing.final`, `typing.Mapping`, `typing.overload`, `typing.Pattern`, `typing.Sequence`, `typing.Tuple`, `typing.Type`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `_pytest._code`, `_pytest.outcomes.fail`, `numpy.ndarray`, `sys`, `itertools`, `math`, `numpy`, `numpy`, `math`, `math`
**Type References**: [[Any]], [[ApproxBase]], [[ApproxDecimal]], [[ApproxMapping]], [[ApproxNumpy]], [[ApproxScalar]], [[ApproxSequenceLike]], [[Decimal]], [[E]], [[None]], [[Pattern]], [[RaisesContext]]

### Interface
- `_compare_approx`(full_object: object, message_data: Sequence[tuple[<ast.Tuple object at 0x11efedad0>]], number_of_elements: int, different_ids: Sequence[object], max_abs_diff: float, max_rel_diff: float) -> list[str]
- `_recursive_sequence_map`() -> Any
- `approx`(nan_ok: bool) -> ApproxBase
- `_is_sequence_like`(expected: object) -> bool
- `_is_numpy_array`(obj: object) -> bool
- `_as_numpy_array`(obj: object) -> ndarray | None
- `raises`(expected_exception: type[E] | tuple[<ast.Tuple object at 0x11f0844d0>]) -> RaisesContext[E] | _pytest._code.ExceptionInfo[E]
- `__init__`(expected_exception: type[E] | tuple[<ast.Tuple object at 0x11f0a02d0>], message: str, match_expr: str | Pattern[str] | None) -> None
- `__repr__`() -> str
- `_repr_compare`(other_side: Sequence[float]) -> list[str]
- `__eq__`() -> bool
- `__bool__`() -> Any
- `__ne__`() -> bool
- `_approx_scalar`() -> ApproxScalar
- `_yield_comparisons`() -> Any
- `_check_type`() -> None
- `tolerance`() -> Any
- `__enter__`() -> _pytest._code.ExceptionInfo[E]
- `__exit__`(exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: TracebackType | None) -> bool
- `get_value_from_nested_list`(nested_list: list[Any], nd_index: tuple[<ast.Tuple object at 0x11efcc390>]) -> Any
- `set_default`() -> Any

### Implementation
**ApproxBase**

**ApproxNumpy**
  - value: Any
**ApproxMapping**

**ApproxSequenceLike**

**ApproxScalar**
  - DEFAULT_ABSOLUTE_TOLERANCE: float | Decimal
  - DEFAULT_RELATIVE_TOLERANCE: float | Decimal
  - result: bool
**ApproxDecimal**

**RaisesContext**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/python_api.py`  
**Dependencies**: `__future__.annotations`, `collections.abc.Collection`, `collections.abc.Sized`, `decimal.Decimal`, `math`, `numbers.Complex`, `pprint`, `re`, `types.TracebackType`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.ContextManager`, `typing.final`, `typing.Mapping`, `typing.overload`, `typing.Pattern`, `typing.Sequence`, `typing.Tuple`, `typing.Type`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `_pytest._code`, `_pytest.outcomes.fail`, `numpy.ndarray`, `sys`, `itertools`, `math`, `numpy`, `numpy`, `math`, `math`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest._argcomplete
:::{doc} FastFilesCompleter:74
Fast file completer class.
:::
**Imports**: `__future__.annotations`, `argparse`, `glob.glob`, `os`, `sys`, `typing.Any`, `argcomplete.completers`
**Type References**: [[FastFilesCompleter]], [[None]]

### Interface
- `__init__`(directories: bool) -> None
- `__call__`(prefix: str) -> list[str]
- `try_argcomplete`(parser: argparse.ArgumentParser) -> None

### Implementation
**FastFilesCompleter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/_argcomplete.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `glob.glob`, `os`, `sys`, `typing.Any`, `argcomplete.completers`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.unraisableexception
:::{doc} catch_unraisable_exception:20
Context manager catching unraisable exception using sys.unraisablehook.

Storing the exception value (cm.unraisable.exc_value) creates a reference
cycle. The reference cycle is broken explicitly when the context manager
exits.

Storing the object (cm.unraisable.object) can resurrect it if it is set to
an object which is being finalized. Exiting the context manager clears the
stored object.

Usage:
    with catch_unraisable_exception() as cm:
        # code creating an "unraisable exception"
        ...
        # check the unraisable exception: use cm.unraisable
        ...
    # cm.unraisable attribute no longer exists at this point
    # (to break a reference cycle)
:::
**Imports**: `__future__.annotations`, `sys`, `traceback`, `types.TracebackType`, `typing.Any`, `typing.Callable`, `typing.Generator`, `typing.TYPE_CHECKING`, `warnings`, `pytest`, `typing_extensions.Self`
**Type References**: [[catch_unraisable_exception]]

### Interface
- `unraisable_exception_runtest_hook`() -> Generator[None]
- `pytest_runtest_setup`() -> Generator[None]
- `pytest_runtest_call`() -> Generator[None]
- `pytest_runtest_teardown`() -> Generator[None]
- `__init__`() -> None
- `_hook`(unraisable: sys.UnraisableHookArgs) -> None
- `__enter__`() -> Self
- `__exit__`(exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: TracebackType | None) -> None

### Implementation
**catch_unraisable_exception**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/unraisableexception.py`  
**Dependencies**: `__future__.annotations`, `sys`, `traceback`, `types.TracebackType`, `typing.Any`, `typing.Callable`, `typing.Generator`, `typing.TYPE_CHECKING`, `warnings`, `pytest`, `typing_extensions.Self`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.capture
:::{doc} _colorama_workaround:67
Ensure colorama is imported so that it attaches to the correct stdio
handles on Windows.

colorama uses the terminal on import time. So if something does the
first import of colorama while I/O capture is active, colorama will
fail in various ways.
:::
:::{doc} _windowsconsoleio_workaround:82
Workaround for Windows Unicode console handling.

Python 3.6 implemented Unicode console handling for Windows. This works
by reading/writing to the raw console handle using
``{Read,Write}ConsoleW``.

The problem is that we are going to ``dup2`` over the stdio file
descriptors when doing ``FDCapture`` and this will ``CloseHandle`` the
handles used by Python to write to the console. Though there is still some
weirdness and the console handle seems to only be closed randomly and not
on the first call to ``CloseHandle``, or maybe it gets reopened with the
same handle value when we suspend capturing.

The workaround in this case will reopen stdio with a different fd which
also means a different handle by replicating the logic in
"Py_lifecycle.c:initstdio/create_stdio".

:param stream:
    In practice ``sys.stdout`` or ``sys.stderr``, but given
    here as parameter for unittesting purposes.

See https://github.com/pytest-dev/py/issues/103.
:::
:::{doc} FDCaptureBinary:539
Capture IO to/from a given OS-level file descriptor.

snap() produces `bytes`.
:::
:::{doc} FDCapture:561
Capture IO to/from a given OS-level file descriptor.

snap() produces text.
:::
:::{doc} CaptureManager:709
The capture plugin.

Manages that the appropriate capture method is enabled/disabled during
collection and each test phase (setup, call, teardown). After each of
those points, the captured output is obtained and attached to the
collection/runtest report.

There are two levels of capture:

* global: enabled by default and can be suppressed by the ``-s``
  option. This is always enabled/disabled during collection and each test
  phase.

* fixture: when a test function or one of its fixture depend on the
  ``capsys`` or ``capfd`` fixtures. In this case special handling is
  needed to ensure the fixtures take precedence over the global capture.
:::
:::{doc} CaptureFixture:896
Object returned by the :fixture:`capsys`, :fixture:`capsysbinary`,
:fixture:`capfd` and :fixture:`capfdbinary` fixtures.
:::
:::{doc} capsys:978
Enable text capturing of writes to ``sys.stdout`` and ``sys.stderr``.

The captured output is made available via ``capsys.readouterr()`` method
calls, which return a ``(out, err)`` namedtuple.
``out`` and ``err`` will be ``text`` objects.

Returns an instance of :class:`CaptureFixture[str] <pytest.CaptureFixture>`.

Example:

.. code-block:: python

    def test_output(capsys):
        print("hello")
        captured = capsys.readouterr()
        assert captured.out == "hello\n"
:::
:::{doc} capsysbinary:1006
Enable bytes capturing of writes to ``sys.stdout`` and ``sys.stderr``.

The captured output is made available via ``capsysbinary.readouterr()``
method calls, which return a ``(out, err)`` namedtuple.
``out`` and ``err`` will be ``bytes`` objects.

Returns an instance of :class:`CaptureFixture[bytes] <pytest.CaptureFixture>`.

Example:

.. code-block:: python

    def test_output(capsysbinary):
        print("hello")
        captured = capsysbinary.readouterr()
        assert captured.out == b"hello\n"
:::
:::{doc} capfd:1034
Enable text capturing of writes to file descriptors ``1`` and ``2``.

The captured output is made available via ``capfd.readouterr()`` method
calls, which return a ``(out, err)`` namedtuple.
``out`` and ``err`` will be ``text`` objects.

Returns an instance of :class:`CaptureFixture[str] <pytest.CaptureFixture>`.

Example:

.. code-block:: python

    def test_system_echo(capfd):
        os.system('echo "hello"')
        captured = capfd.readouterr()
        assert captured.out == "hello\n"
:::
:::{doc} capfdbinary:1062
Enable bytes capturing of writes to file descriptors ``1`` and ``2``.

The captured output is made available via ``capfd.readouterr()`` method
calls, which return a ``(out, err)`` namedtuple.
``out`` and ``err`` will be ``byte`` objects.

Returns an instance of :class:`CaptureFixture[bytes] <pytest.CaptureFixture>`.

Example:

.. code-block:: python

    def test_system_echo(capfdbinary):
        os.system('echo "hello"')
        captured = capfdbinary.readouterr()
        assert captured.out == b"hello\n"
:::
**Imports**: `__future__.annotations`, `abc`, `collections`, `contextlib`, `io`, `io.UnsupportedOperation`, `os`, `sys`, `tempfile.TemporaryFile`, `types.TracebackType`, `typing.Any`, `typing.AnyStr`, `typing.BinaryIO`, `typing.Final`, `typing.final`, `typing.Generator`, `typing.Generic`, `typing.Iterable`, `typing.Iterator`, `typing.Literal`, `typing.NamedTuple`, `typing.TextIO`, `typing.TYPE_CHECKING`, `_pytest.config.Config`, `_pytest.config.hookimpl`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.fixture`, `_pytest.fixtures.SubRequest`, `_pytest.nodes.Collector`, `_pytest.nodes.File`, `_pytest.nodes.Item`, `_pytest.reports.CollectReport`, `typing_extensions.Self`, `colorama`
**Type References**: [[AnyStr]], [[CaptureBase]], [[CaptureFixture]], [[CaptureIO]], [[CaptureManager]], [[CaptureResult]], [[DontReadFromInput]], [[EncodedFile]], [[FDCapture]], [[FDCaptureBase]], [[FDCaptureBinary]], [[MultiCapture]], [[NoCapture]], [[SysCapture]], [[SysCaptureBase]], [[SysCaptureBinary]], [[TeeCaptureIO]]

### Interface
- `pytest_addoption`(parser: Parser) -> None
- `_colorama_workaround`() -> None
- `_windowsconsoleio_workaround`(stream: TextIO) -> None
- `pytest_load_initial_conftests`(early_config: Config) -> Generator[None]
- `_get_multicapture`(method: _CaptureMethod) -> MultiCapture[str]
- `capsys`(request: SubRequest) -> Generator[CaptureFixture[str]]
- `capsysbinary`(request: SubRequest) -> Generator[CaptureFixture[bytes]]
- `capfd`(request: SubRequest) -> Generator[CaptureFixture[str]]
- `capfdbinary`(request: SubRequest) -> Generator[CaptureFixture[bytes]]
- `_reopen_stdio`() -> Any
- `name`() -> str
- `mode`() -> str
- `__init__`(captureclass: type[CaptureBase[AnyStr]], request: SubRequest) -> None
- `getvalue`() -> str
- `write`(data: str) -> int
- `encoding`() -> str
- `read`(size: int) -> str
- `__next__`() -> str
- `readlines`(hint: int | None) -> list[str]
- `__iter__`() -> Iterator[str]
- `fileno`() -> int
- `flush`() -> None
- `isatty`() -> bool
- `close`() -> None
- `readable`() -> bool
- `seek`(offset: int, whence: int) -> int
- `seekable`() -> bool
- `tell`() -> int
- `truncate`(size: int | None) -> int
- `writelines`(lines: Iterable[str]) -> None
- `writable`() -> bool
- `__enter__`() -> Self
- `__exit__`(type: type[BaseException] | None, value: BaseException | None, traceback: TracebackType | None) -> None
- `buffer`() -> BinaryIO
- `start`() -> None
- `done`() -> None
- `suspend`(in_: bool) -> None
- `resume`() -> None
- `writeorg`(data: str) -> None
- `snap`() -> str
- `repr`(class_name: str) -> str
- `__repr__`() -> str
- `_assert_state`(op: str, states: tuple[<ast.Tuple object at 0x11f164ad0>]) -> None
- `start_capturing`() -> None
- `pop_outerr_to_orig`() -> tuple[<ast.Tuple object at 0x11f19df50>]
- `suspend_capturing`(in_: bool) -> None
- `resume_capturing`() -> None
- `stop_capturing`() -> None
- `is_started`() -> bool
- `readouterr`() -> CaptureResult[AnyStr]
- `is_capturing`() -> str | bool
- `is_globally_capturing`() -> bool
- `start_global_capturing`() -> None
- `stop_global_capturing`() -> None
- `resume_global_capture`() -> None
- `suspend_global_capture`(in_: bool) -> None
- `read_global_capture`() -> CaptureResult[str]
- `set_fixture`(capture_fixture: CaptureFixture[Any]) -> None
- `unset_fixture`() -> None
- `activate_fixture`() -> None
- `deactivate_fixture`() -> None
- `suspend_fixture`() -> None
- `resume_fixture`() -> None
- `global_and_fixture_disabled`() -> Generator[None]
- `item_capture`(when: str, item: Item) -> Generator[None]
- `pytest_make_collect_report`(collector: Collector) -> Generator[<ast.Tuple object at 0x11f1ec410>]
- `pytest_runtest_setup`(item: Item) -> Generator[None]
- `pytest_runtest_call`(item: Item) -> Generator[None]
- `pytest_runtest_teardown`(item: Item) -> Generator[None]
- `pytest_keyboard_interrupt`() -> None
- `pytest_internalerror`() -> None
- `_start`() -> None
- `_suspend`() -> None
- `_resume`() -> None
- `_is_started`() -> bool
- `disabled`() -> Generator[None]

### Implementation
**EncodedFile**

**CaptureIO**

**TeeCaptureIO**

**DontReadFromInput**

**CaptureBase**
  - EMPTY_BUFFER: AnyStr
**NoCapture**

**SysCaptureBase**

**SysCaptureBinary**

**SysCapture**

**FDCaptureBase**

**FDCaptureBinary**

**FDCapture**

**MultiCapture**

**CaptureManager**

**CaptureFixture**
  - capmanager: CaptureManager
**CaptureResult**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/capture.py`  
**Dependencies**: `__future__.annotations`, `abc`, `collections`, `contextlib`, `io`, `io.UnsupportedOperation`, `os`, `sys`, `tempfile.TemporaryFile`, `types.TracebackType`, `typing.Any`, `typing.AnyStr`, `typing.BinaryIO`, `typing.Final`, `typing.final`, `typing.Generator`, `typing.Generic`, `typing.Iterable`, `typing.Iterator`, `typing.Literal`, `typing.NamedTuple`, `typing.TextIO`, `typing.TYPE_CHECKING`, `_pytest.config.Config`, `_pytest.config.hookimpl`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.fixture`, `_pytest.fixtures.SubRequest`, `_pytest.nodes.Collector`, `_pytest.nodes.File`, `_pytest.nodes.Item`, `_pytest.reports.CollectReport`, `typing_extensions.Self`, `colorama`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.hookspec
:::{doc} pytest_addhooks:57
Called at plugin registration time to allow adding new hooks via a call to
:func:`pluginmanager.add_hookspecs(module_or_class, prefix) <pytest.PytestPluginManager.add_hookspecs>`.

:param pluginmanager: The pytest plugin manager.

.. note::
    This hook is incompatible with hook wrappers.

Use in conftest plugins
=======================

If a conftest plugin implements this hook, it will be called immediately
when the conftest is registered.
:::
:::{doc} pytest_plugin_registered:75
A new pytest plugin got registered.

:param plugin: The plugin module or instance.
:param plugin_name: The name by which the plugin is registered.
:param manager: The pytest plugin manager.

.. note::
    This hook is incompatible with hook wrappers.

Use in conftest plugins
=======================

If a conftest plugin implements this hook, it will be called immediately
when the conftest is registered, once for each plugin registered thus far
(including itself!), and for all plugins thereafter when they are
registered.
:::
:::{doc} pytest_addoption:100
Register argparse-style options and ini-style config values,
called once at the beginning of a test run.

:param parser:
    To add command line options, call
    :py:func:`parser.addoption(...) <pytest.Parser.addoption>`.
    To add ini-file values call :py:func:`parser.addini(...)
    <pytest.Parser.addini>`.

:param pluginmanager:
    The pytest plugin manager, which can be used to install :py:func:`~pytest.hookspec`'s
    or :py:func:`~pytest.hookimpl`'s and allow one plugin to call another plugin's hooks
    to change how command line options are added.

Options can later be accessed through the
:py:class:`config <pytest.Config>` object, respectively:

- :py:func:`config.getoption(name) <pytest.Config.getoption>` to
  retrieve the value of a command line option.

- :py:func:`config.getini(name) <pytest.Config.getini>` to retrieve
  a value read from an ini-style file.

The config object is passed around on many internal objects via the ``.config``
attribute or can be retrieved as the ``pytestconfig`` fixture.

.. note::
    This hook is incompatible with hook wrappers.

Use in conftest plugins
=======================

If a conftest plugin implements this hook, it will be called immediately
when the conftest is registered.

This hook is only called for :ref:`initial conftests <pluginorder>`.
:::
:::{doc} pytest_configure:141
Allow plugins and conftest files to perform initial configuration.

.. note::
    This hook is incompatible with hook wrappers.

:param config: The pytest config object.

Use in conftest plugins
=======================

This hook is called for every :ref:`initial conftest <pluginorder>` file
after command line options have been parsed. After that, the hook is called
for other conftest files as they are registered.
:::
:::{doc} pytest_cmdline_parse:165
Return an initialized :class:`~pytest.Config`, parsing the specified args.

Stops at first non-None result, see :ref:`firstresult`.

.. note::
    This hook is only called for plugin classes passed to the
    ``plugins`` arg when using `pytest.main`_ to perform an in-process
    test run.

:param pluginmanager: The pytest plugin manager.
:param args: List of arguments passed on the command line.
:returns: A pytest config object.

Use in conftest plugins
=======================

This hook is not called for conftest files.
:::
:::{doc} pytest_load_initial_conftests:188
Called to implement the loading of :ref:`initial conftest files
<pluginorder>` ahead of command line option parsing.

:param early_config: The pytest config object.
:param args: Arguments passed on the command line.
:param parser: To add command line options.

Use in conftest plugins
=======================

This hook is not called for conftest files.
:::
:::{doc} pytest_cmdline_main:206
Called for performing the main command line action.

The default implementation will invoke the configure hooks and
:hook:`pytest_runtestloop`.

Stops at first non-None result, see :ref:`firstresult`.

:param config: The pytest config object.
:returns: The exit code.

Use in conftest plugins
=======================

This hook is only called for :ref:`initial conftests <pluginorder>`.
:::
:::{doc} pytest_collection:230
Perform the collection phase for the given session.

Stops at first non-None result, see :ref:`firstresult`.
The return value is not used, but only stops further processing.

The default collection phase is this (see individual hooks for full details):

1. Starting from ``session`` as the initial collector:

  1. ``pytest_collectstart(collector)``
  2. ``report = pytest_make_collect_report(collector)``
  3. ``pytest_exception_interact(collector, call, report)`` if an interactive exception occurred
  4. For each collected node:

    1. If an item, ``pytest_itemcollected(item)``
    2. If a collector, recurse into it.

  5. ``pytest_collectreport(report)``

2. ``pytest_collection_modifyitems(session, config, items)``

  1. ``pytest_deselected(items)`` for any deselected items (may be called multiple times)

3. ``pytest_collection_finish(session)``
4. Set ``session.items`` to the list of collected items
5. Set ``session.testscollected`` to the number of collected items

You can implement this hook to only perform some action before collection,
for example the terminal plugin uses it to start displaying the collection
counter (and returns `None`).

:param session: The pytest session object.

Use in conftest plugins
=======================

This hook is only called for :ref:`initial conftests <pluginorder>`.
:::
:::{doc} pytest_collection_modifyitems:271
Called after collection has been performed. May filter or re-order
the items in-place.

When items are deselected (filtered out from ``items``),
the hook :hook:`pytest_deselected` must be called explicitly
with the deselected items to properly notify other plugins,
e.g. with ``config.hook.pytest_deselected(deselected_items)``.

:param session: The pytest session object.
:param config: The pytest config object.
:param items: List of item objects.

Use in conftest plugins
=======================

Any conftest plugin can implement this hook.
:::
:::{doc} pytest_collection_finish:293
Called after collection has been performed and modified.

:param session: The pytest session object.

Use in conftest plugins
=======================

Any conftest plugin can implement this hook.
:::
:::{doc} pytest_ignore_collect:313
Return ``True`` to ignore this path for collection.

Return ``None`` to let other plugins ignore the path for collection.

Returning ``False`` will forcefully *not* ignore this path for collection,
without giving a chance for other plugins to ignore this path.

This hook is consulted for all files and directories prior to calling
more specific hooks.

Stops at first non-None result, see :ref:`firstresult`.

:param collection_path: The path to analyze.
:type collection_path: pathlib.Path
:param path: The path to analyze (deprecated).
:param config: The pytest config object.

.. versionchanged:: 7.0.0
    The ``collection_path`` parameter was added as a :class:`pathlib.Path`
    equivalent of the ``path`` parameter. The ``path`` parameter
    has been deprecated.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given collection path, only
conftest files in parent directories of the collection path are consulted
(if the path is a directory, its own conftest file is *not* consulted - a
directory cannot ignore itself!).
:::
:::{doc} pytest_collect_directory:349
Create a :class:`~pytest.Collector` for the given directory, or None if
not relevant.

.. versionadded:: 8.0

For best results, the returned collector should be a subclass of
:class:`~pytest.Directory`, but this is not required.

The new node needs to have the specified ``parent`` as a parent.

Stops at first non-None result, see :ref:`firstresult`.

:param path: The path to analyze.
:type path: pathlib.Path

See :ref:`custom directory collectors` for a simple example of use of this
hook.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given collection path, only
conftest files in parent directories of the collection path are consulted
(if the path is a directory, its own conftest file is *not* consulted - a
directory cannot collect itself!).
:::
:::{doc} pytest_collect_file:385
Create a :class:`~pytest.Collector` for the given path, or None if not relevant.

For best results, the returned collector should be a subclass of
:class:`~pytest.File`, but this is not required.

The new node needs to have the specified ``parent`` as a parent.

:param file_path: The path to analyze.
:type file_path: pathlib.Path
:param path: The path to collect (deprecated).

.. versionchanged:: 7.0.0
    The ``file_path`` parameter was added as a :class:`pathlib.Path`
    equivalent of the ``path`` parameter. The ``path`` parameter
    has been deprecated.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given file path, only
conftest files in parent directories of the file path are consulted.
:::
:::{doc} pytest_collectstart:415
Collector starts collecting.

:param collector:
    The collector.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given collector, only
conftest files in the collector's directory and its parent directories are
consulted.
:::
:::{doc} pytest_itemcollected:430
We just collected a test item.

:param item:
    The item.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given item, only conftest
files in the item's directory and its parent directories are consulted.
:::
:::{doc} pytest_collectreport:444
Collector finished collecting.

:param report:
    The collect report.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given collector, only
conftest files in the collector's directory and its parent directories are
consulted.
:::
:::{doc} pytest_deselected:459
Called for deselected test items, e.g. by keyword.

Note that this hook has two integration aspects for plugins:

- it can be *implemented* to be notified of deselected items
- it must be *called* from :hook:`pytest_collection_modifyitems`
  implementations when items are deselected (to properly notify other plugins).

May be called multiple times.

:param items:
    The items.

Use in conftest plugins
=======================

Any conftest file can implement this hook.
:::
:::{doc} pytest_make_collect_report:481
Perform :func:`collector.collect() <pytest.Collector.collect>` and return
a :class:`~pytest.CollectReport`.

Stops at first non-None result, see :ref:`firstresult`.

:param collector:
    The collector.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given collector, only
conftest files in the collector's directory and its parent directories are
consulted.
:::
:::{doc} pytest_pycollect_makemodule:512
Return a :class:`pytest.Module` collector or None for the given path.

This hook will be called for each matching test module path.
The :hook:`pytest_collect_file` hook needs to be used if you want to
create test modules for files that do not match as a test module.

Stops at first non-None result, see :ref:`firstresult`.

:param module_path: The path of the module to collect.
:type module_path: pathlib.Path
:param path: The path of the module to collect (deprecated).

.. versionchanged:: 7.0.0
    The ``module_path`` parameter was added as a :class:`pathlib.Path`
    equivalent of the ``path`` parameter.

    The ``path`` parameter has been deprecated in favor of ``fspath``.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given parent collector,
only conftest files in the collector's directory and its parent directories
are consulted.
:::
:::{doc} pytest_pycollect_makeitem:543
Return a custom item/collector for a Python object in a module, or None.

Stops at first non-None result, see :ref:`firstresult`.

:param collector:
    The module/class collector.
:param name:
    The name of the object in the module/class.
:param obj:
    The object.
:returns:
    The created items/collectors.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given collector, only
conftest files in the collector's directory and its parent directories
are consulted.
:::
:::{doc} pytest_pyfunc_call:569
Call underlying test function.

Stops at first non-None result, see :ref:`firstresult`.

:param pyfuncitem:
    The function item.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given item, only
conftest files in the item's directory and its parent directories
are consulted.
:::
:::{doc} pytest_generate_tests:586
Generate (multiple) parametrized calls to a test function.

:param metafunc:
    The :class:`~pytest.Metafunc` helper for the test function.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given function definition,
only conftest files in the functions's directory and its parent directories
are consulted.
:::
:::{doc} pytest_make_parametrize_id:602
Return a user-friendly string representation of the given ``val``
that will be used by @pytest.mark.parametrize calls, or None if the hook
doesn't know about ``val``.

The parameter name is available as ``argname``, if required.

Stops at first non-None result, see :ref:`firstresult`.

:param config: The pytest config object.
:param val: The parametrized value.
:param argname: The automatic parameter name produced by pytest.

Use in conftest plugins
=======================

Any conftest file can implement this hook.
:::
:::{doc} pytest_runtestloop:628
Perform the main runtest loop (after collection finished).

The default hook implementation performs the runtest protocol for all items
collected in the session (``session.items``), unless the collection failed
or the ``collectonly`` pytest option is set.

If at any point :py:func:`pytest.exit` is called, the loop is
terminated immediately.

If at any point ``session.shouldfail`` or ``session.shouldstop`` are set, the
loop is terminated after the runtest protocol for the current item is finished.

:param session: The pytest session object.

Stops at first non-None result, see :ref:`firstresult`.
The return value is not used, but only stops further processing.

Use in conftest plugins
=======================

Any conftest file can implement this hook.
:::
:::{doc} pytest_runtest_protocol:654
Perform the runtest protocol for a single test item.

The default runtest protocol is this (see individual hooks for full details):

- ``pytest_runtest_logstart(nodeid, location)``

- Setup phase:
    - ``call = pytest_runtest_setup(item)`` (wrapped in ``CallInfo(when="setup")``)
    - ``report = pytest_runtest_makereport(item, call)``
    - ``pytest_runtest_logreport(report)``
    - ``pytest_exception_interact(call, report)`` if an interactive exception occurred

- Call phase, if the setup passed and the ``setuponly`` pytest option is not set:
    - ``call = pytest_runtest_call(item)`` (wrapped in ``CallInfo(when="call")``)
    - ``report = pytest_runtest_makereport(item, call)``
    - ``pytest_runtest_logreport(report)``
    - ``pytest_exception_interact(call, report)`` if an interactive exception occurred

- Teardown phase:
    - ``call = pytest_runtest_teardown(item, nextitem)`` (wrapped in ``CallInfo(when="teardown")``)
    - ``report = pytest_runtest_makereport(item, call)``
    - ``pytest_runtest_logreport(report)``
    - ``pytest_exception_interact(call, report)`` if an interactive exception occurred

- ``pytest_runtest_logfinish(nodeid, location)``

:param item: Test item for which the runtest protocol is performed.
:param nextitem: The scheduled-to-be-next test item (or None if this is the end my friend).

Stops at first non-None result, see :ref:`firstresult`.
The return value is not used, but only stops further processing.

Use in conftest plugins
=======================

Any conftest file can implement this hook.
:::
:::{doc} pytest_runtest_logstart:694
Called at the start of running the runtest protocol for a single item.

See :hook:`pytest_runtest_protocol` for a description of the runtest protocol.

:param nodeid: Full node ID of the item.
:param location: A tuple of ``(filename, lineno, testname)``
    where ``filename`` is a file path relative to ``config.rootpath``
    and ``lineno`` is 0-based.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given item, only conftest
files in the item's directory and its parent directories are consulted.
:::
:::{doc} pytest_runtest_logfinish:712
Called at the end of running the runtest protocol for a single item.

See :hook:`pytest_runtest_protocol` for a description of the runtest protocol.

:param nodeid: Full node ID of the item.
:param location: A tuple of ``(filename, lineno, testname)``
    where ``filename`` is a file path relative to ``config.rootpath``
    and ``lineno`` is 0-based.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given item, only conftest
files in the item's directory and its parent directories are consulted.
:::
:::{doc} pytest_runtest_setup:732
Called to perform the setup phase for a test item.

The default implementation runs ``setup()`` on ``item`` and all of its
parents (which haven't been setup yet). This includes obtaining the
values of fixtures required by the item (which haven't been obtained
yet).

:param item:
    The item.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given item, only conftest
files in the item's directory and its parent directories are consulted.
:::
:::{doc} pytest_runtest_call:751
Called to run the test for test item (the call phase).

The default implementation calls ``item.runtest()``.

:param item:
    The item.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given item, only conftest
files in the item's directory and its parent directories are consulted.
:::
:::{doc} pytest_runtest_teardown:767
Called to perform the teardown phase for a test item.

The default implementation runs the finalizers and calls ``teardown()``
on ``item`` and all of its parents (which need to be torn down). This
includes running the teardown phase of fixtures required by the item (if
they go out of scope).

:param item:
    The item.
:param nextitem:
    The scheduled-to-be-next test item (None if no further test item is
    scheduled). This argument is used to perform exact teardowns, i.e.
    calling just enough finalizers so that nextitem only needs to call
    setup functions.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given item, only conftest
files in the item's directory and its parent directories are consulted.
:::
:::{doc} pytest_runtest_makereport:792
Called to create a :class:`~pytest.TestReport` for each of
the setup, call and teardown runtest phases of a test item.

See :hook:`pytest_runtest_protocol` for a description of the runtest protocol.

:param item: The item.
:param call: The :class:`~pytest.CallInfo` for the phase.

Stops at first non-None result, see :ref:`firstresult`.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given item, only conftest
files in the item's directory and its parent directories are consulted.
:::
:::{doc} pytest_runtest_logreport:811
Process the :class:`~pytest.TestReport` produced for each
of the setup, call and teardown runtest phases of an item.

See :hook:`pytest_runtest_protocol` for a description of the runtest protocol.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given item, only conftest
files in the item's directory and its parent directories are consulted.
:::
:::{doc} pytest_report_to_serializable:826
Serialize the given report object into a data structure suitable for
sending over the wire, e.g. converted to JSON.

:param config: The pytest config object.
:param report: The report.

Use in conftest plugins
=======================

Any conftest file can implement this hook. The exact details may depend
on the plugin which calls the hook.
:::
:::{doc} pytest_report_from_serializable:845
Restore a report object previously serialized with
:hook:`pytest_report_to_serializable`.

:param config: The pytest config object.

Use in conftest plugins
=======================

Any conftest file can implement this hook. The exact details may depend
on the plugin which calls the hook.
:::
:::{doc} pytest_fixture_setup:868
Perform fixture setup execution.

:param fixturedef:
    The fixture definition object.
:param request:
    The fixture request object.
:returns:
    The return value of the call to the fixture function.

Stops at first non-None result, see :ref:`firstresult`.

.. note::
    If the fixture function returns None, other implementations of
    this hook function will continue to be called, according to the
    behavior of the :ref:`firstresult` option.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given fixture, only
conftest files in the fixture scope's directory and its parent directories
are consulted.
:::
:::{doc} pytest_fixture_post_finalizer:896
Called after fixture teardown, but before the cache is cleared, so
the fixture result ``fixturedef.cached_result`` is still available (not
``None``).

:param fixturedef:
    The fixture definition object.
:param request:
    The fixture request object.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given fixture, only
conftest files in the fixture scope's directory and its parent directories
are consulted.
:::
:::{doc} pytest_sessionstart:922
Called after the ``Session`` object has been created and before performing collection
and entering the run test loop.

:param session: The pytest session object.

Use in conftest plugins
=======================

This hook is only called for :ref:`initial conftests <pluginorder>`.
:::
:::{doc} pytest_sessionfinish:935
Called after whole test run finished, right before returning the exit status to the system.

:param session: The pytest session object.
:param exitstatus: The status which pytest will return to the system.

Use in conftest plugins
=======================

Any conftest file can implement this hook.
:::
:::{doc} pytest_unconfigure:951
Called before test process is exited.

:param config: The pytest config object.

Use in conftest plugins
=======================

Any conftest file can implement this hook.
:::
:::{doc} pytest_assertrepr_compare:968
Return explanation for comparisons in failing assert expressions.

Return None for no custom explanation, otherwise return a list
of strings. The strings will be joined by newlines but any newlines
*in* a string will be escaped. Note that all but the first line will
be indented slightly, the intention is for the first line to be a summary.

:param config: The pytest config object.
:param op: The operator, e.g. `"=="`, `"!="`, `"not in"`.
:param left: The left operand.
:param right: The right operand.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given item, only conftest
files in the item's directory and its parent directories are consulted.
:::
:::{doc} pytest_assertion_pass:991
Called whenever an assertion passes.

.. versionadded:: 5.0

Use this hook to do some processing after a passing assertion.
The original assertion information is available in the `orig` string
and the pytest introspected assertion information is available in the
`expl` string.

This hook must be explicitly enabled by the ``enable_assertion_pass_hook``
ini-file option:

.. code-block:: ini

    [pytest]
    enable_assertion_pass_hook=true

You need to **clean the .pyc** files in your project directory and interpreter libraries
when enabling this option, as assertions will require to be re-written.

:param item: pytest item object of current test.
:param lineno: Line number of the assert statement.
:param orig: String with the original assertion.
:param expl: String with the assert explanation.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given item, only conftest
files in the item's directory and its parent directories are consulted.
:::
:::{doc} pytest_report_header:1037
Return a string or list of strings to be displayed as header info for terminal reporting.

:param config: The pytest config object.
:param start_path: The starting dir.
:type start_path: pathlib.Path
:param startdir: The starting dir (deprecated).

.. note::

    Lines returned by a plugin are displayed before those of plugins which
    ran before it.
    If you want to have your line(s) displayed first, use
    :ref:`trylast=True <plugin-hookorder>`.

.. versionchanged:: 7.0.0
    The ``start_path`` parameter was added as a :class:`pathlib.Path`
    equivalent of the ``startdir`` parameter. The ``startdir`` parameter
    has been deprecated.

Use in conftest plugins
=======================

This hook is only called for :ref:`initial conftests <pluginorder>`.
:::
:::{doc} pytest_report_collectionfinish:1073
Return a string or list of strings to be displayed after collection
has finished successfully.

These strings will be displayed after the standard "collected X items" message.

.. versionadded:: 3.2

:param config: The pytest config object.
:param start_path: The starting dir.
:type start_path: pathlib.Path
:param startdir: The starting dir (deprecated).
:param items: List of pytest items that are going to be executed; this list should not be modified.

.. note::

    Lines returned by a plugin are displayed before those of plugins which
    ran before it.
    If you want to have your line(s) displayed first, use
    :ref:`trylast=True <plugin-hookorder>`.

.. versionchanged:: 7.0.0
    The ``start_path`` parameter was added as a :class:`pathlib.Path`
    equivalent of the ``startdir`` parameter. The ``startdir`` parameter
    has been deprecated.

Use in conftest plugins
=======================

Any conftest plugin can implement this hook.
:::
:::{doc} pytest_report_teststatus:1112
Return result-category, shortletter and verbose word for status
reporting.

The result-category is a category in which to count the result, for
example "passed", "skipped", "error" or the empty string.

The shortletter is shown as testing progresses, for example ".", "s",
"E" or the empty string.

The verbose word is shown as testing progresses in verbose mode, for
example "PASSED", "SKIPPED", "ERROR" or the empty string.

pytest may style these implicitly according to the report outcome.
To provide explicit styling, return a tuple for the verbose word,
for example ``"rerun", "R", ("RERUN", {"yellow": True})``.

:param report: The report object whose status is to be returned.
:param config: The pytest config object.
:returns: The test status.

Stops at first non-None result, see :ref:`firstresult`.

Use in conftest plugins
=======================

Any conftest plugin can implement this hook.
:::
:::{doc} pytest_terminal_summary:1144
Add a section to terminal summary reporting.

:param terminalreporter: The internal terminal reporter object.
:param exitstatus: The exit status that will be reported back to the OS.
:param config: The pytest config object.

.. versionadded:: 4.2
    The ``config`` parameter.

Use in conftest plugins
=======================

Any conftest plugin can implement this hook.
:::
:::{doc} pytest_warning_recorded:1166
Process a warning captured by the internal pytest warnings plugin.

:param warning_message:
    The captured warning. This is the same object produced by :class:`warnings.catch_warnings`,
    and contains the same attributes as the parameters of :py:func:`warnings.showwarning`.

:param when:
    Indicates when the warning was captured. Possible values:

    * ``"config"``: during pytest configuration/initialization stage.
    * ``"collect"``: during test collection.
    * ``"runtest"``: during test execution.

:param nodeid:
    Full id of the item. Empty string for warnings that are not specific to
    a particular node.

:param location:
    When available, holds information about the execution context of the captured
    warning (filename, linenumber, function). ``function`` evaluates to <module>
    when the execution context is at the module level.

.. versionadded:: 6.0

Use in conftest plugins
=======================

Any conftest file can implement this hook. If the warning is specific to a
particular node, only conftest files in parent directories of the node are
consulted.
:::
:::{doc} pytest_markeval_namespace:1210
Called when constructing the globals dictionary used for
evaluating string conditions in xfail/skipif markers.

This is useful when the condition for a marker requires
objects that are expensive or impossible to obtain during
collection time, which is required by normal boolean
conditions.

.. versionadded:: 6.2

:param config: The pytest config object.
:returns: A dictionary of additional globals to add.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given item, only conftest
files in parent directories of the item are consulted.
:::
:::{doc} pytest_internalerror:1239
Called for internal errors.

Return True to suppress the fallback handling of printing an
INTERNALERROR message directly to sys.stderr.

:param excrepr: The exception repr object.
:param excinfo: The exception info.

Use in conftest plugins
=======================

Any conftest plugin can implement this hook.
:::
:::{doc} pytest_keyboard_interrupt:1258
Called for keyboard interrupt.

:param excinfo: The exception info.

Use in conftest plugins
=======================

Any conftest plugin can implement this hook.
:::
:::{doc} pytest_exception_interact:1272
Called when an exception was raised which can potentially be
interactively handled.

May be called during collection (see :hook:`pytest_make_collect_report`),
in which case ``report`` is a :class:`~pytest.CollectReport`.

May be called during runtest of an item (see :hook:`pytest_runtest_protocol`),
in which case ``report`` is a :class:`~pytest.TestReport`.

This hook is not called if the exception that was raised is an internal
exception like ``skip.Exception``.

:param node:
    The item or collector.
:param call:
    The call information. Contains the exception.
:param report:
    The collection or test report.

Use in conftest plugins
=======================

Any conftest file can implement this hook. For a given node, only conftest
files in parent directories of the node are consulted.
:::
:::{doc} pytest_enter_pdb:1304
Called upon pdb.set_trace().

Can be used by plugins to take special action just before the python
debugger enters interactive mode.

:param config: The pytest config object.
:param pdb: The Pdb instance.

Use in conftest plugins
=======================

Any conftest plugin can implement this hook.
:::
:::{doc} pytest_leave_pdb:1320
Called when leaving pdb (e.g. with continue after pdb.set_trace()).

Can be used by plugins to take special action just after the python
debugger leaves interactive mode.

:param config: The pytest config object.
:param pdb: The Pdb instance.

Use in conftest plugins
=======================

Any conftest plugin can implement this hook.
:::
**Imports**: `__future__.annotations`, `pathlib.Path`, `typing.Any`, `typing.Mapping`, `typing.Sequence`, `typing.TYPE_CHECKING`, `pluggy.HookspecMarker`, `deprecated.HOOK_LEGACY_PATH_ARG`, `pdb`, `typing.Literal`, `warnings`, `_pytest._code.code.ExceptionInfo`, `_pytest._code.code.ExceptionRepr`, `_pytest.compat.LEGACY_PATH`, `_pytest.config._PluggyPlugin`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.PytestPluginManager`, `_pytest.config.argparsing.Parser`, `_pytest.fixtures.FixtureDef`, `_pytest.fixtures.SubRequest`, `_pytest.main.Session`, `_pytest.nodes.Collector`, `_pytest.nodes.Item`, `_pytest.outcomes.Exit`, `_pytest.python.Class`, `_pytest.python.Function`, `_pytest.python.Metafunc`, `_pytest.python.Module`, `_pytest.reports.CollectReport`, `_pytest.reports.TestReport`, `_pytest.runner.CallInfo`, `_pytest.terminal.TerminalReporter`, `_pytest.terminal.TestShortLogReport`
### Interface
- `pytest_addhooks`(pluginmanager: PytestPluginManager) -> None
- `pytest_plugin_registered`(plugin: _PluggyPlugin, plugin_name: str, manager: PytestPluginManager) -> None
- `pytest_addoption`(parser: Parser, pluginmanager: PytestPluginManager) -> None
- `pytest_configure`(config: Config) -> None
- `pytest_cmdline_parse`(pluginmanager: PytestPluginManager, args: list[str]) -> Config | None
- `pytest_load_initial_conftests`(early_config: Config, parser: Parser, args: list[str]) -> None
- `pytest_cmdline_main`(config: Config) -> ExitCode | int | None
- `pytest_collection`(session: Session) -> object | None
- `pytest_collection_modifyitems`(session: Session, config: Config, items: list[Item]) -> None
- `pytest_collection_finish`(session: Session) -> None
- `pytest_ignore_collect`(collection_path: Path, path: LEGACY_PATH, config: Config) -> bool | None
- `pytest_collect_directory`(path: Path, parent: Collector) -> Collector | None
- `pytest_collect_file`(file_path: Path, path: LEGACY_PATH, parent: Collector) -> Collector | None
- `pytest_collectstart`(collector: Collector) -> None
- `pytest_itemcollected`(item: Item) -> None
- `pytest_collectreport`(report: CollectReport) -> None
- `pytest_deselected`(items: Sequence[Item]) -> None
- `pytest_make_collect_report`(collector: Collector) -> CollectReport | None
- `pytest_pycollect_makemodule`(module_path: Path, path: LEGACY_PATH) -> Module | None
- `pytest_pycollect_makeitem`(collector: Module | Class, name: str, obj: object) -> None | Item | Collector | list[Item | Collector]
- `pytest_pyfunc_call`(pyfuncitem: Function) -> object | None
- `pytest_generate_tests`(metafunc: Metafunc) -> None
- `pytest_make_parametrize_id`(config: Config, val: object, argname: str) -> str | None
- `pytest_runtestloop`(session: Session) -> object | None
- `pytest_runtest_protocol`(item: Item, nextitem: Item | None) -> object | None
- `pytest_runtest_logstart`(nodeid: str, location: tuple[<ast.Tuple object at 0x11f253690>]) -> None
- `pytest_runtest_logfinish`(nodeid: str, location: tuple[<ast.Tuple object at 0x11f25c110>]) -> None
- `pytest_runtest_setup`(item: Item) -> None
- `pytest_runtest_call`(item: Item) -> None
- `pytest_runtest_teardown`(item: Item, nextitem: Item | None) -> None
- `pytest_runtest_makereport`(item: Item, call: CallInfo[None]) -> TestReport | None
- `pytest_runtest_logreport`(report: TestReport) -> None
- `pytest_report_to_serializable`(config: Config, report: CollectReport | TestReport) -> dict[<ast.Tuple object at 0x11f25f4d0>] | None
- `pytest_report_from_serializable`(config: Config, data: dict[<ast.Tuple object at 0x11f25fb90>]) -> CollectReport | TestReport | None
- `pytest_fixture_setup`(fixturedef: FixtureDef[Any], request: SubRequest) -> object | None
- `pytest_fixture_post_finalizer`(fixturedef: FixtureDef[Any], request: SubRequest) -> None
- `pytest_sessionstart`(session: Session) -> None
- `pytest_sessionfinish`(session: Session, exitstatus: int | ExitCode) -> None
- `pytest_unconfigure`(config: Config) -> None
- `pytest_assertrepr_compare`(config: Config, op: str, left: object, right: object) -> list[str] | None
- `pytest_assertion_pass`(item: Item, lineno: int, orig: str, expl: str) -> None
- `pytest_report_header`(config: Config, start_path: Path, startdir: LEGACY_PATH) -> str | list[str]
- `pytest_report_collectionfinish`(config: Config, start_path: Path, startdir: LEGACY_PATH, items: Sequence[Item]) -> str | list[str]
- `pytest_report_teststatus`(report: CollectReport | TestReport, config: Config) -> TestShortLogReport | tuple[<ast.Tuple object at 0x11f27ac90>]
- `pytest_terminal_summary`(terminalreporter: TerminalReporter, exitstatus: ExitCode, config: Config) -> None
- `pytest_warning_recorded`(warning_message: warnings.WarningMessage, when: Literal[<ast.Tuple object at 0x11f2800d0>], nodeid: str, location: tuple[<ast.Tuple object at 0x11f2805d0>] | None) -> None
- `pytest_markeval_namespace`(config: Config) -> dict[<ast.Tuple object at 0x11f281410>]
- `pytest_internalerror`(excrepr: ExceptionRepr, excinfo: ExceptionInfo[BaseException]) -> bool | None
- `pytest_keyboard_interrupt`(excinfo: ExceptionInfo[KeyboardInterrupt | Exit]) -> None
- `pytest_exception_interact`(node: Item | Collector, call: CallInfo[Any], report: CollectReport | TestReport) -> None
- `pytest_enter_pdb`(config: Config, pdb: pdb.Pdb) -> None
- `pytest_leave_pdb`(config: Config, pdb: pdb.Pdb) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/hookspec.py`  
**Dependencies**: `__future__.annotations`, `pathlib.Path`, `typing.Any`, `typing.Mapping`, `typing.Sequence`, `typing.TYPE_CHECKING`, `pluggy.HookspecMarker`, `deprecated.HOOK_LEGACY_PATH_ARG`, `pdb`, `typing.Literal`, `warnings`, `_pytest._code.code.ExceptionInfo`, `_pytest._code.code.ExceptionRepr`, `_pytest.compat.LEGACY_PATH`, `_pytest.config._PluggyPlugin`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.PytestPluginManager`, `_pytest.config.argparsing.Parser`, `_pytest.fixtures.FixtureDef`, `_pytest.fixtures.SubRequest`, `_pytest.main.Session`, `_pytest.nodes.Collector`, `_pytest.nodes.Item`, `_pytest.outcomes.Exit`, `_pytest.python.Class`, `_pytest.python.Function`, `_pytest.python.Metafunc`, `_pytest.python.Module`, `_pytest.reports.CollectReport`, `_pytest.reports.TestReport`, `_pytest.runner.CallInfo`, `_pytest.terminal.TerminalReporter`, `_pytest.terminal.TestShortLogReport`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.timing

**Imports**: `__future__.annotations`, `time.perf_counter`, `time.sleep`, `time.time`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/timing.py`  
**Dependencies**: `__future__.annotations`, `time.perf_counter`, `time.sleep`, `time.time`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.pytester
:::{doc} _pytest:198
Return a helper which offers a gethookrecorder(hook) method which
returns a HookRecorder instance which helps to make assertions about called
hooks.
:::
:::{doc} get_public_names:215
Only return names from iterator values without a leading underscore.
:::
:::{doc} RecordedHookCall:221
A recorded call to a hook.

The arguments to the hook call are set as attributes.
For example:

.. code-block:: python

    calls = hook_recorder.getcalls("pytest_runtest_setup")
    # Suppose pytest_runtest_setup was called once with `item=an_item`.
    assert calls[0].item is an_item
:::
:::{doc} HookRecorder:249
Record all hooks called in a plugin manager.

Hook recorders are created by :class:`Pytester`.

This wraps all the hook calls in the plugin manager, recording each call
before propagating the normal calls.
:::
:::{doc} linecomp:460
A :class: `LineComp` instance for checking that an input linearly
contains a sequence of strings.
:::
:::{doc} LineMatcher_fixture:467
A reference to the :class: `LineMatcher`.

This is instantiable with a list of lines (without their trailing newlines).
This is useful for testing large texts, such as the output of commands.
:::
:::{doc} pytester:477
Facilities to write tests/configuration files, execute pytest in isolation, and match
against expected output, perfect for black-box testing of pytest plugins.

It attempts to isolate the test run from external factors as much as possible, modifying
the current working directory to ``path`` and environment variables during initialization.

It is particularly useful for testing plugins. It is similar to the :fixture:`tmp_path`
fixture but provides methods which aid in testing pytest itself.
:::
:::{doc} RunResult:518
The result of running a command from :class:`~pytest.Pytester`.
:::
:::{doc} Pytester:647
Facilities to write tests/configuration files, execute pytest in isolation, and match
against expected output, perfect for black-box testing of pytest plugins.

It attempts to isolate the test run from external factors as much as possible, modifying
the current working directory to :attr:`path` and environment variables during initialization.
:::
:::{doc} LineMatcher:1543
Flexible matching of text.

This is a convenience class to test large texts like the output of
commands.

The constructor takes a list of lines without their trailing newlines, i.e.
``text.splitlines()``.
:::
**Imports**: `__future__.annotations`, `collections.abc`, `contextlib`, `fnmatch.fnmatch`, `gc`, `importlib`, `io.StringIO`, `locale`, `os`, `pathlib.Path`, `platform`, `re`, `shutil`, `subprocess`, `sys`, `traceback`, `typing.Any`, `typing.Callable`, `typing.Final`, `typing.final`, `typing.Generator`, `typing.IO`, `typing.Iterable`, `typing.Literal`, `typing.overload`, `typing.Sequence`, `typing.TextIO`, `typing.TYPE_CHECKING`, `weakref.WeakKeyDictionary`, `iniconfig.IniConfig`, `iniconfig.SectionWrapper`, `_pytest.timing`, `_pytest._code.Source`, `_pytest.capture._get_multicapture`, `_pytest.compat.NOTSET`, `_pytest.compat.NotSetType`, `_pytest.config._PluggyPlugin`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.hookimpl`, `_pytest.config.main`, `_pytest.config.PytestPluginManager`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.fixture`, `_pytest.fixtures.FixtureRequest`, `_pytest.main.Session`, `_pytest.monkeypatch.MonkeyPatch`, `_pytest.nodes.Collector`, `_pytest.nodes.Item`, `_pytest.outcomes.fail`, `_pytest.outcomes.importorskip`, `_pytest.outcomes.skip`, `_pytest.pathlib.bestrelpath`, `_pytest.pathlib.make_numbered_dir`, `_pytest.reports.CollectReport`, `_pytest.reports.TestReport`, `_pytest.tmpdir.TempPathFactory`, `_pytest.warning_types.PytestWarning`, `pexpect`, `_pytest.config.get_config`, `_pytest.pytester_assertions.assertoutcome`, `_pytest.pytester_assertions.assert_outcomes`, `_pytest.config`
**Type References**: [[Collect]], [[Final]], [[HookRecorder]], [[Item]], [[LineComp]], [[LineMatcher]], [[LsofFdLeakChecker]], [[Path]], [[PytestArg]], [[Pytester]], [[RecordedHookCall]], [[RunResult]], [[SysModulesSnapshot]], [[SysPathsSnapshot]], [[TimeoutExpired]], [[reprec]]

### Interface
- `pytest_addoption`(parser: Parser) -> None
- `pytest_configure`(config: Config) -> None
- `_pytest`(request: FixtureRequest) -> PytestArg
- `get_public_names`(values: Iterable[str]) -> list[str]
- `linecomp`() -> LineComp
- `LineMatcher_fixture`(request: FixtureRequest) -> type[LineMatcher]
- `pytester`(request: FixtureRequest, tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch) -> Pytester
- `_sys_snapshot`() -> Generator[None]
- `_config_for_test`() -> Generator[Config]
- `get_open_files`() -> list[tuple[<ast.Tuple object at 0x11f2b9ad0>]]
- `matching_platform`() -> bool
- `pytest_runtest_protocol`(item: Item) -> Generator[<ast.Tuple object at 0x11f2a3450>]
- `__init__`(lines: list[str]) -> None
- `gethookrecorder`() -> HookRecorder
- `__repr__`() -> str
- `finish_recording`() -> None
- `getcalls`(names: str | Iterable[str]) -> list[RecordedHookCall]
- `assert_contains`(entries: Sequence[tuple[<ast.Tuple object at 0x11f3adfd0>]]) -> None
- `popcall`(name: str) -> RecordedHookCall
- `getcall`(name: str) -> RecordedHookCall
- `getreports`(names: str | Iterable[str]) -> Sequence[CollectReport | TestReport]
- `matchreport`(inamepart: str, names: str | Iterable[str], when: str | None) -> CollectReport | TestReport
- `getfailures`(names: str | Iterable[str]) -> Sequence[CollectReport | TestReport]
- `getfailedcollections`() -> Sequence[CollectReport]
- `listoutcomes`() -> tuple[<ast.Tuple object at 0x11f309c90>]
- `countoutcomes`() -> list[int]
- `assertoutcome`(passed: int, skipped: int, failed: int) -> None
- `clear`() -> None
- `parseoutcomes`() -> dict[<ast.Tuple object at 0x11f2ea710>]
- `parse_summary_nouns`() -> dict[<ast.Tuple object at 0x11f2d7bd0>]
- `assert_outcomes`(passed: int, skipped: int, failed: int, errors: int, xpassed: int, xfailed: int, warnings: int | None, deselected: int | None) -> None
- `restore`() -> None
- `path`() -> Path
- `_finalize`() -> None
- `__take_sys_modules_snapshot`() -> SysModulesSnapshot
- `make_hook_recorder`(pluginmanager: PytestPluginManager) -> HookRecorder
- `chdir`() -> None
- `_makefile`(ext: str, lines: Sequence[Any | bytes], files: dict[<ast.Tuple object at 0x11f2a5c90>], encoding: str) -> Path
- `makefile`(ext: str) -> Path
- `makeconftest`(source: str) -> Path
- `makeini`(source: str) -> Path
- `getinicfg`(source: str) -> SectionWrapper
- `makepyprojecttoml`(source: str) -> Path
- `makepyfile`() -> Path
- `maketxtfile`() -> Path
- `syspathinsert`(path: str | os.PathLike[str] | None) -> None
- `mkdir`(name: str | os.PathLike[str]) -> Path
- `mkpydir`(name: str | os.PathLike[str]) -> Path
- `copy_example`(name: str | None) -> Path
- `getnode`(config: Config, arg: str | os.PathLike[str]) -> Collector | Item
- `getpathnode`(path: str | os.PathLike[str]) -> Collector | Item
- `genitems`(colitems: Sequence[Item | Collector]) -> list[Item]
- `runitem`(source: str) -> Any
- `inline_runsource`(source: str) -> HookRecorder
- `inline_genitems`() -> tuple[<ast.Tuple object at 0x11f3ccfd0>]
- `inline_run`() -> HookRecorder
- `runpytest_inprocess`() -> RunResult
- `runpytest`() -> RunResult
- `_ensure_basetemp`(args: Sequence[str | os.PathLike[str]]) -> list[str | os.PathLike[str]]
- `parseconfig`() -> Config
- `parseconfigure`() -> Config
- `getitem`(source: str | os.PathLike[str], funcname: str) -> Item
- `getitems`(source: str | os.PathLike[str]) -> list[Item]
- `getmodulecol`(source: str | os.PathLike[str]) -> Any
- `collect_by_name`(modcol: Collector, name: str) -> Item | Collector | None
- `popen`(cmdargs: Sequence[str | os.PathLike[str]], stdout: int | TextIO, stderr: int | TextIO, stdin: NotSetType | bytes | IO[Any] | int) -> Any
- `run`() -> RunResult
- `_dump_lines`() -> Any
- `_getpytestargs`() -> tuple[<ast.Tuple object at 0x11f436c50>]
- `runpython`(script: os.PathLike[str]) -> RunResult
- `runpython_c`(command: str) -> RunResult
- `runpytest_subprocess`() -> RunResult
- `spawn_pytest`(string: str, expect_timeout: float) -> pexpect.spawn
- `spawn`(cmd: str, expect_timeout: float) -> pexpect.spawn
- `assert_contains_lines`(lines2: Sequence[str]) -> None
- `__str__`() -> str
- `_getlines`(lines2: str | Sequence[str] | Source) -> Sequence[str]
- `fnmatch_lines_random`(lines2: Sequence[str]) -> None
- `re_match_lines_random`(lines2: Sequence[str]) -> None
- `_match_lines_random`(lines2: Sequence[str], match_func: Callable[<ast.Tuple object at 0x11f46bd10>]) -> None
- `get_lines_after`(fnline: str) -> Sequence[str]
- `_log`() -> None
- `_log_text`() -> str
- `fnmatch_lines`(lines2: Sequence[str]) -> None
- `re_match_lines`(lines2: Sequence[str]) -> None
- `_match_lines`(lines2: Sequence[str], match_func: Callable[<ast.Tuple object at 0x11f47fed0>], match_nickname: str) -> None
- `no_fnmatch_line`(pat: str) -> None
- `no_re_match_line`(pat: str) -> None
- `_no_match_line`(pat: str, match_func: Callable[<ast.Tuple object at 0x11f49e610>], match_nickname: str) -> None
- `_fail`(msg: str) -> None
- `str`() -> str
- `isopen`(line: str) -> bool
- `__getattr__`(key: str) -> Any
- `before`(hook_name: str) -> None
- `after`(hook_name: str) -> None
- `preserve_module`() -> Any
- `to_text`(s: Any | bytes) -> str
- `handle_timeout`() -> None

### Implementation
**LsofFdLeakChecker**

**PytestArg**

**RecordedHookCall**

**HookRecorder**

**RunResult**

**SysModulesSnapshot**

**SysPathsSnapshot**

**Pytester**
  - CLOSE_STDIN: Final
  - example_dir: Path
  - result: list[Item]
  - name: str
**LineComp**

**LineMatcher**

**TimeoutExpired**

**Collect**

**reprec**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/pytester.py`  
**Dependencies**: `__future__.annotations`, `collections.abc`, `contextlib`, `fnmatch.fnmatch`, `gc`, `importlib`, `io.StringIO`, `locale`, `os`, `pathlib.Path`, `platform`, `re`, `shutil`, `subprocess`, `sys`, `traceback`, `typing.Any`, `typing.Callable`, `typing.Final`, `typing.final`, `typing.Generator`, `typing.IO`, `typing.Iterable`, `typing.Literal`, `typing.overload`, `typing.Sequence`, `typing.TextIO`, `typing.TYPE_CHECKING`, `weakref.WeakKeyDictionary`, `iniconfig.IniConfig`, `iniconfig.SectionWrapper`, `_pytest.timing`, `_pytest._code.Source`, `_pytest.capture._get_multicapture`, `_pytest.compat.NOTSET`, `_pytest.compat.NotSetType`, `_pytest.config._PluggyPlugin`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.hookimpl`, `_pytest.config.main`, `_pytest.config.PytestPluginManager`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.fixture`, `_pytest.fixtures.FixtureRequest`, `_pytest.main.Session`, `_pytest.monkeypatch.MonkeyPatch`, `_pytest.nodes.Collector`, `_pytest.nodes.Item`, `_pytest.outcomes.fail`, `_pytest.outcomes.importorskip`, `_pytest.outcomes.skip`, `_pytest.pathlib.bestrelpath`, `_pytest.pathlib.make_numbered_dir`, `_pytest.reports.CollectReport`, `_pytest.reports.TestReport`, `_pytest.tmpdir.TempPathFactory`, `_pytest.warning_types.PytestWarning`, `pexpect`, `_pytest.config.get_config`, `_pytest.pytester_assertions.assertoutcome`, `_pytest.pytester_assertions.assert_outcomes`, `_pytest.config`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.faulthandler
:::{doc} pytest_enter_pdb:92
Cancel any traceback dumping due to timeout before entering pdb.
:::
:::{doc} pytest_exception_interact:100
Cancel any traceback dumping due to an interactive exception being
raised.
:::
**Imports**: `__future__.annotations`, `os`, `sys`, `typing.Generator`, `_pytest.config.Config`, `_pytest.config.argparsing.Parser`, `_pytest.nodes.Item`, `_pytest.stash.StashKey`, `pytest`, `faulthandler`, `faulthandler`, `faulthandler`, `faulthandler`, `faulthandler`
### Interface
- `pytest_addoption`(parser: Parser) -> None
- `pytest_configure`(config: Config) -> None
- `pytest_unconfigure`(config: Config) -> None
- `get_stderr_fileno`() -> int
- `get_timeout_config_value`(config: Config) -> float
- `pytest_runtest_protocol`(item: Item) -> Generator[<ast.Tuple object at 0x11f4b2490>]
- `pytest_enter_pdb`() -> None
- `pytest_exception_interact`() -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/faulthandler.py`  
**Dependencies**: `__future__.annotations`, `os`, `sys`, `typing.Generator`, `_pytest.config.Config`, `_pytest.config.argparsing.Parser`, `_pytest.nodes.Item`, `_pytest.stash.StashKey`, `pytest`, `faulthandler`, `faulthandler`, `faulthandler`, `faulthandler`, `faulthandler`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.outcomes
:::{doc} OutcomeException:18
OutcomeException and its subclass instances indicate and contain info
about test and collection outcomes.
:::
:::{doc} Failed:64
Raised from an explicit call to pytest.fail().
:::
:::{doc} Exit:70
Raised for immediate program exits (no tracebacks/summaries).
:::
:::{doc} exit:106
Exit testing process.

:param reason:
    The message to show as the reason for exiting pytest.  reason has a default value
    only because `msg` is deprecated.

:param returncode:
    Return code to be used when exiting pytest. None means the same as ``0`` (no error), same as :func:`sys.exit`.

:raises pytest.exit.Exception:
    The exception that is raised.
:::
:::{doc} skip:127
Skip an executing test with the given message.

This function should be called only during testing (setup, call or teardown) or
during collection by using the ``allow_module_level`` flag.  This function can
be called in doctests as well.

:param reason:
    The message to show the user as reason for the skip.

:param allow_module_level:
    Allows this function to be called at module level.
    Raising the skip exception at module level will stop
    the execution of the module and prevent the collection of all tests in the module,
    even those defined before the `skip` call.

    Defaults to False.

:raises pytest.skip.Exception:
    The exception that is raised.

.. note::
    It is better to use the :ref:`pytest.mark.skipif ref` marker when
    possible to declare a test to be skipped under certain conditions
    like mismatching platforms or dependencies.
    Similarly, use the ``# doctest: +SKIP`` directive (see :py:data:`doctest.SKIP`)
    to skip a doctest statically.
:::
:::{doc} fail:164
Explicitly fail an executing test with the given message.

:param reason:
    The message to show the user as reason for the failure.

:param pytrace:
    If False, msg represents the full failure information and no
    python traceback will be reported.

:raises pytest.fail.Exception:
    The exception that is raised.
:::
:::{doc} XFailed:181
Raised from an explicit call to pytest.xfail().
:::
:::{doc} xfail:186
Imperatively xfail an executing test or setup function with the given reason.

This function should be called only during testing (setup, call or teardown).

No other code is executed after using ``xfail()`` (it is implemented
internally by raising an exception).

:param reason:
    The message to show the user as reason for the xfail.

.. note::
    It is better to use the :ref:`pytest.mark.xfail ref` marker when
    possible to declare a test to be xfailed under certain conditions
    like known bugs or missing features.

:raises pytest.xfail.Exception:
    The exception that is raised.
:::
:::{doc} importorskip:209
Import and return the requested module ``modname``, or skip the
current test if the module cannot be imported.

:param modname:
    The name of the module to import.
:param minversion:
    If given, the imported module's ``__version__`` attribute must be at
    least this minimal version, otherwise the test is still skipped.
:param reason:
    If given, this reason is shown as the message when the module cannot
    be imported.
:param exc_type:
    The exception that should be captured in order to skip modules.
    Must be :py:class:`ImportError` or a subclass.

    If the module can be imported but raises :class:`ImportError`, pytest will
    issue a warning to the user, as often users expect the module not to be
    found (which would raise :class:`ModuleNotFoundError` instead).

    This warning can be suppressed by passing ``exc_type=ImportError`` explicitly.

    See :ref:`import-or-skip-import-error` for details.


:returns:
    The imported module. This should be assigned to its canonical name.

:raises pytest.skip.Exception:
    If the module cannot be imported.

Example::

    docutils = pytest.importorskip("docutils")

.. versionadded:: 8.2

    The ``exc_type`` parameter.
:::
**Imports**: `__future__.annotations`, `sys`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.NoReturn`, `typing.Protocol`, `typing.Type`, `typing.TypeVar`, `warning_types.PytestDeprecationWarning`, `warnings`, `packaging.version.Version`
**Type References**: [[Exit]], [[Failed]], [[None]], [[OutcomeException]], [[Skipped]], [[Warning]], [[XFailed]], [[_WithException]]

### Interface
- `_with_exception`(exception_type: _ET) -> Callable[<ast.Tuple object at 0x11f4cd990>]
- `exit`(reason: str, returncode: int | None) -> NoReturn
- `skip`(reason: str) -> NoReturn
- `fail`(reason: str, pytrace: bool) -> NoReturn
- `xfail`(reason: str) -> NoReturn
- `importorskip`(modname: str, minversion: str | None, reason: str | None) -> Any
- `__init__`(msg: str, returncode: int | None) -> None
- `__repr__`() -> str
- `decorate`(func: _F) -> _WithException[<ast.Tuple object at 0x11f4cde10>]

### Implementation
**OutcomeException**

**Skipped**

**Failed**

**Exit**

**_WithException**
  - Exception: _ET
  - __call__: _F
**XFailed**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/outcomes.py`  
**Dependencies**: `__future__.annotations`, `sys`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.NoReturn`, `typing.Protocol`, `typing.Type`, `typing.TypeVar`, `warning_types.PytestDeprecationWarning`, `warnings`, `packaging.version.Version`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.stepwise

**Imports**: `__future__.annotations`, `_pytest.nodes`, `_pytest.cacheprovider.Cache`, `_pytest.config.Config`, `_pytest.config.argparsing.Parser`, `_pytest.main.Session`, `_pytest.reports.TestReport`
**Type References**: [[StepwisePlugin]]

### Interface
- `pytest_addoption`(parser: Parser) -> None
- `pytest_configure`(config: Config) -> None
- `pytest_sessionfinish`() -> None
- `__init__`(config: Config) -> None
- `pytest_sessionstart`(session: Session) -> None
- `pytest_collection_modifyitems`(config: Config, items: list[nodes.Item]) -> None
- `pytest_runtest_logreport`(report: TestReport) -> None
- `pytest_report_collectionfinish`() -> str | None

### Implementation
**StepwisePlugin**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/stepwise.py`  
**Dependencies**: `__future__.annotations`, `_pytest.nodes`, `_pytest.cacheprovider.Cache`, `_pytest.config.Config`, `_pytest.config.argparsing.Parser`, `_pytest.main.Session`, `_pytest.reports.TestReport`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.junitxml
:::{doc} bin_xml_escape:40
Visually escape invalid XML characters.

For example, transforms
    'hello\aworld\b'
into
    'hello#x07world#x08'
Note that the #xABs are *not* XML escapes - missing the ampersand &#xAB.
The idea is to escape visually for the user rather than for XML itself.
:::
:::{doc} _warn_incompatibility_with_xunit2:264
Emit a PytestWarning about the given fixture being incompatible with newer xunit revisions.
:::
:::{doc} record_property:280
Add extra properties to the calling test.

User properties become part of the test report and are available to the
configured reporters, like JUnit XML.

The fixture is callable with ``name, value``. The value is automatically
XML-encoded.

Example::

    def test_function(record_property):
        record_property("example_key", 1)
:::
:::{doc} record_xml_attribute:303
Add extra xml attributes to the tag for the calling test.

The fixture is callable with ``name, value``. The value is
automatically XML-encoded.
:::
:::{doc} _check_record_param_type:331
Used by record_testsuite_property to check that the given parameter name is of the proper
type.
:::
:::{doc} record_testsuite_property:341
Record a new ``<property>`` tag as child of the root ``<testsuite>``.

This is suitable to writing global information regarding the entire test
suite, and is compatible with ``xunit2`` JUnit family.

This is a ``session``-scoped fixture which is called with ``(name, value)``. Example:

.. code-block:: python

    def test_foo(record_testsuite_property):
        record_testsuite_property("ARCH", "PPC")
        record_testsuite_property("STORAGE_TYPE", "CEPH")

:param name:
    The property name.
:param value:
    The property value. Will be converted to a string.

.. warning::

    Currently this fixture **does not work** with the
    `pytest-xdist <https://github.com/pytest-dev/pytest-xdist>`__ plugin. See
    :issue:`7767` for details.
:::
**Imports**: `__future__.annotations`, `datetime.datetime`, `datetime.timezone`, `functools`, `os`, `platform`, `re`, `typing.Callable`, `typing.Match`, `xml.etree.ElementTree`, `_pytest.nodes`, `_pytest.timing`, `_pytest._code.code.ExceptionRepr`, `_pytest._code.code.ReprFileLocation`, `_pytest.config.Config`, `_pytest.config.filename_arg`, `_pytest.config.argparsing.Parser`, `_pytest.fixtures.FixtureRequest`, `_pytest.reports.TestReport`, `_pytest.stash.StashKey`, `_pytest.terminal.TerminalReporter`, `pytest`, `_pytest.warning_types.PytestWarning`, `_pytest.warning_types.PytestExperimentalApiWarning`
**Type References**: [[LogXML]], [[None]], [[ReprFileLocation]], [[TestReport]], [[_NodeReporter]]

### Interface
- `bin_xml_escape`(arg: object) -> str
- `merge_family`() -> None
- `_warn_incompatibility_with_xunit2`(request: FixtureRequest, fixture_name: str) -> None
- `record_property`(request: FixtureRequest) -> Callable[<ast.Tuple object at 0x120a25390>]
- `record_xml_attribute`(request: FixtureRequest) -> Callable[<ast.Tuple object at 0x120a16810>]
- `_check_record_param_type`(param: str, v: str) -> None
- `record_testsuite_property`(request: FixtureRequest) -> Callable[<ast.Tuple object at 0x120a0ed50>]
- `pytest_addoption`(parser: Parser) -> None
- `pytest_configure`(config: Config) -> None
- `pytest_unconfigure`(config: Config) -> None
- `mangle_test_address`(address: str) -> list[str]
- `repl`(matchobj: Match[str]) -> str
- `__init__`(prefix: str | None, suite_name: str, logging: str, report_duration: str, log_passing_tests: bool) -> None
- `append`(node: ET.Element) -> None
- `add_property`(name: str, value: object) -> None
- `add_attribute`(name: str, value: object) -> None
- `make_properties_node`() -> ET.Element | None
- `record_testreport`(testreport: TestReport) -> None
- `to_xml`() -> ET.Element
- `_add_simple`(tag: str, message: str, data: str | None) -> None
- `write_captured_output`(report: TestReport) -> None
- `_prepare_content`(content: str, header: str) -> str
- `_write_content`(report: TestReport, content: str, jheader: str) -> None
- `append_pass`(report: TestReport) -> None
- `append_failure`(report: TestReport) -> None
- `append_collect_error`(report: TestReport) -> None
- `append_collect_skipped`(report: TestReport) -> None
- `append_error`(report: TestReport) -> None
- `append_skipped`(report: TestReport) -> None
- `finalize`(report: TestReport) -> None
- `append_property`(name: str, value: object) -> None
- `add_attr_noop`(name: str, value: object) -> None
- `record_func`(name: str, value: object) -> None
- `node_reporter`(report: TestReport | str) -> _NodeReporter
- `add_stats`(key: str) -> None
- `_opentestcase`(report: TestReport) -> _NodeReporter
- `pytest_runtest_logreport`(report: TestReport) -> None
- `update_testcase_duration`(report: TestReport) -> None
- `pytest_collectreport`(report: TestReport) -> None
- `pytest_internalerror`(excrepr: ExceptionRepr) -> None
- `pytest_sessionstart`() -> None
- `pytest_sessionfinish`() -> None
- `pytest_terminal_summary`(terminalreporter: TerminalReporter) -> None
- `add_global_property`(name: str, value: object) -> None
- `_get_global_properties_node`() -> ET.Element | None

### Implementation
**_NodeReporter**
  - attrs: dict[<ast.Tuple object at 0x11f531010>]
  - reprcrash: ReprFileLocation | None
**LogXML**
  - nodeid: str | TestReport
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/junitxml.py`  
**Dependencies**: `__future__.annotations`, `datetime.datetime`, `datetime.timezone`, `functools`, `os`, `platform`, `re`, `typing.Callable`, `typing.Match`, `xml.etree.ElementTree`, `_pytest.nodes`, `_pytest.timing`, `_pytest._code.code.ExceptionRepr`, `_pytest._code.code.ReprFileLocation`, `_pytest.config.Config`, `_pytest.config.filename_arg`, `_pytest.config.argparsing.Parser`, `_pytest.fixtures.FixtureRequest`, `_pytest.reports.TestReport`, `_pytest.stash.StashKey`, `_pytest.terminal.TerminalReporter`, `pytest`, `_pytest.warning_types.PytestWarning`, `_pytest.warning_types.PytestExperimentalApiWarning`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.python
:::{doc} path_matches_patterns:201
Return whether path matches any of the patterns in the list of globs given.
:::
:::{doc} PyobjMixin:249
this mix-in inherits from Node to carry over the typing information

as its intended to always mix in before a node
its position in the mro is unaffected
:::
:::{doc} Module:542
Collector for test classes and functions in a Python module.
:::
:::{doc} Package:625
Collector for files and directories in a Python packages -- directories
with an `__init__.py` file.

.. note::

    Directories without an `__init__.py` file are instead collected by
    :class:`~pytest.Dir` by default. Both are :class:`~pytest.Directory`
    collectors.

.. versionchanged:: 8.0

    Now inherits from :class:`~pytest.Directory`.
:::
:::{doc} _call_with_optional_argument:708
Call the given function with the given argument if func accepts one argument, otherwise
calls func without arguments.
:::
:::{doc} _get_first_non_fixture_func:720
Return the attribute from the given object to be used as a setup/teardown
xunit-style function, but only if not marked as a fixture to avoid calling it twice.
:::
:::{doc} Class:731
Collector for test methods (and nested classes) in a Python class.
:::
:::{doc} IdMaker:853
Make IDs for a parametrization.
:::
:::{doc} CallSpec2:1024
A planned parameterized invocation of a test function.

Calculated during collection for a given test function's Metafunc.
Once collection is over, each callspec is turned into a single Item
and stored in item.callspec.
:::
:::{doc} Metafunc:1091
Objects passed to the :hook:`pytest_generate_tests` hook.

They help to inspect a test function and to generate tests according to
test configuration or values specified in the class or module where a
test function is defined.
:::
:::{doc} _find_parametrized_scope:1449
Find the most appropriate scope for a parametrized call based on its arguments.

When there's at least one direct argument, always use "function" scope.

When a test function is parametrized and all its arguments are indirect
(e.g. fixtures), return the most narrow scope based on the fixtures used.

Related to issue #1832, based on code posted by @Kingdread.
:::
:::{doc} Function:1494
Item responsible for setting up and executing a Python test function.

:param name:
    The full function name, including any decorations like those
    added by parametrization (``my_func[my_param]``).
:param parent:
    The parent Node.
:param config:
    The pytest Config object.
:param callspec:
    If given, this function has been parametrized and the callspec contains
    meta information about the parametrization.
:param callobj:
    If given, the object which will be called when the Function is invoked,
    otherwise the callobj will be obtained from ``parent`` using ``originalname``.
:param keywords:
    Keywords bound to the function object for "-k" matching.
:param session:
    The pytest Session object.
:param fixtureinfo:
    Fixture information already resolved at this fixture node..
:param originalname:
    The attribute name to use for accessing the underlying function object.
    Defaults to ``name``. Set this if name is different from the original name,
    for example when it contains decorations like those added by parametrization
    (``my_func[my_param]``).
:::
:::{doc} FunctionDefinition:1672
This class is a stop gap solution until we evolve to have actual function
definition nodes and manage to get rid of ``metafunc``.
:::
**Imports**: `__future__.annotations`, `abc`, `collections.Counter`, `collections.defaultdict`, `dataclasses`, `enum`, `fnmatch`, `functools.partial`, `inspect`, `itertools`, `os`, `pathlib.Path`, `types`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.final`, `typing.Generator`, `typing.Iterable`, `typing.Iterator`, `typing.Literal`, `typing.Mapping`, `typing.Pattern`, `typing.Sequence`, `typing.TYPE_CHECKING`, `warnings`, `_pytest`, `_pytest.fixtures`, `_pytest.nodes`, `_pytest._code.filter_traceback`, `_pytest._code.getfslineno`, `_pytest._code.code.ExceptionInfo`, `_pytest._code.code.TerminalRepr`, `_pytest._code.code.Traceback`, `_pytest._io.saferepr.saferepr`, `_pytest.compat.ascii_escaped`, `_pytest.compat.get_default_arg_names`, `_pytest.compat.get_real_func`, `_pytest.compat.getimfunc`, `_pytest.compat.is_async_function`, `_pytest.compat.is_generator`, `_pytest.compat.LEGACY_PATH`, `_pytest.compat.NOTSET`, `_pytest.compat.safe_getattr`, `_pytest.compat.safe_isclass`, `_pytest.config.Config`, `_pytest.config.hookimpl`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.FixtureDef`, `_pytest.fixtures.FixtureRequest`, `_pytest.fixtures.FuncFixtureInfo`, `_pytest.fixtures.get_scope_node`, `_pytest.main.Session`, `_pytest.mark.MARK_GEN`, `_pytest.mark.ParameterSet`, `_pytest.mark.structures.get_unpacked_marks`, `_pytest.mark.structures.Mark`, `_pytest.mark.structures.MarkDecorator`, `_pytest.mark.structures.normalize_mark_list`, `_pytest.outcomes.fail`, `_pytest.outcomes.skip`, `_pytest.pathlib.fnmatch_ex`, `_pytest.pathlib.import_path`, `_pytest.pathlib.ImportPathMismatchError`, `_pytest.pathlib.scandir`, `_pytest.scope._ScopeName`, `_pytest.scope.Scope`, `_pytest.stash.StashKey`, `_pytest.warning_types.PytestCollectionWarning`, `_pytest.warning_types.PytestReturnNotNoneWarning`, `_pytest.warning_types.PytestUnhandledCoroutineWarning`, `typing_extensions.Self`
**Type References**: [[CallSpec2]], [[Callable]], [[Class]], [[Collector]], [[Config]], [[FixtureDef]], [[Function]], [[FunctionDefinition]], [[IdMaker]], [[Item]], [[Literal]], [[Mapping]], [[Mark]], [[Metafunc]], [[Module]], [[None]], [[Package]], [[PyCollector]], [[PyobjMixin]], [[Sequence]], [[_EmptyClass]], [[nodes.Collector]], [[nodes.Item]]

### Interface
- `pytest_addoption`(parser: Parser) -> None
- `pytest_generate_tests`(metafunc: Metafunc) -> None
- `pytest_configure`(config: Config) -> None
- `async_warn_and_skip`(nodeid: str) -> None
- `pytest_pyfunc_call`(pyfuncitem: Function) -> object | None
- `pytest_collect_directory`(path: Path, parent: nodes.Collector) -> nodes.Collector | None
- `pytest_collect_file`(file_path: Path, parent: nodes.Collector) -> Module | None
- `path_matches_patterns`(path: Path, patterns: Iterable[str]) -> bool
- `pytest_pycollect_makemodule`(module_path: Path) -> Module
- `pytest_pycollect_makeitem`(collector: Module | Class, name: str, obj: object) -> None | nodes.Item | nodes.Collector | list[nodes.Item | nodes.Collector]
- `importtestmodule`(path: Path, config: Config) -> Any
- `_call_with_optional_argument`() -> None
- `_get_first_non_fixture_func`(obj: object, names: Iterable[str]) -> object | None
- `hasinit`(obj: object) -> bool
- `hasnew`(obj: object) -> bool
- `get_direct_param_fixture_func`(request: FixtureRequest) -> Any
- `_find_parametrized_scope`(argnames: Sequence[str], arg2fixturedefs: Mapping[<ast.Tuple object at 0x120c5ad50>], indirect: bool | Sequence[str]) -> Scope
- `_ascii_escaped_by_config`(val: str | bytes, config: Config | None) -> str
- `module`() -> Any
- `cls`() -> Any
- `instance`() -> Any
- `obj`() -> Any
- `_getobj`() -> Any
- `getmodpath`(stopatmodule: bool, includemodule: bool) -> str
- `reportinfo`() -> tuple[<ast.Tuple object at 0x120bb9810>]
- `funcnamefilter`(name: str) -> bool
- `isnosetest`(obj: object) -> bool
- `classnamefilter`(name: str) -> bool
- `istestfunction`(obj: object, name: str) -> bool
- `istestclass`(obj: object, name: str) -> bool
- `_matches_prefix_or_glob_option`(option_name: str, name: str) -> bool
- `collect`() -> Iterable[nodes.Item | nodes.Collector]
- `_genfunctions`(name: str) -> Iterator[Function]
- `_register_setup_module_fixture`() -> None
- `_register_setup_function_fixture`() -> None
- `__init__`(name: str, config: Config | None, callspec: CallSpec2 | None, keywords: Mapping[<ast.Tuple object at 0x120c6bd90>] | None, session: Session | None, fixtureinfo: FuncFixtureInfo | None, originalname: str | None) -> None
- `setup`() -> None
- `from_parent`() -> Self
- `newinstance`() -> Any
- `_register_setup_class_fixture`() -> None
- `_register_setup_method_fixture`() -> None
- `make_unique_parameterset_ids`() -> list[str]
- `_resolve_ids`() -> Iterable[str]
- `_idval`(val: object, argname: str, idx: int) -> str
- `_idval_from_function`(val: object, argname: str, idx: int) -> str | None
- `_idval_from_hook`(val: object, argname: str) -> str | None
- `_idval_from_value`(val: object) -> str | None
- `_idval_from_value_required`(val: object, idx: int) -> str
- `_idval_from_argname`(argname: str, idx: int) -> str
- `setmulti`() -> CallSpec2
- `getparam`(name: str) -> object
- `id`() -> str
- `parametrize`(argnames: str | Sequence[str], argvalues: Iterable[ParameterSet | Sequence[object] | object], indirect: bool | Sequence[str], ids: Iterable[object | None] | Callable[<ast.Tuple object at 0x120c18250>] | None, scope: _ScopeName | None) -> None
- `_resolve_parameter_set_ids`(argnames: Sequence[str], ids: Iterable[object | None] | Callable[<ast.Tuple object at 0x120c39190>] | None, parametersets: Sequence[ParameterSet], nodeid: str) -> list[str]
- `_validate_ids`(ids: Iterable[object | None], parametersets: Sequence[ParameterSet], func_name: str) -> list[object | None]
- `_resolve_args_directness`(argnames: Sequence[str], indirect: bool | Sequence[str]) -> dict[<ast.Tuple object at 0x120c4ec90>]
- `_validate_if_using_arg_names`(argnames: Sequence[str], indirect: bool | Sequence[str]) -> None
- `_initrequest`() -> None
- `function`() -> Any
- `_getinstance`() -> Any
- `_pyfuncitem`() -> Any
- `runtest`() -> None
- `_traceback_filter`(excinfo: ExceptionInfo[BaseException]) -> Traceback
- `repr_failure`(excinfo: ExceptionInfo[BaseException]) -> str | TerminalRepr
- `xunit_setup_module_fixture`() -> Generator[None]
- `xunit_setup_function_fixture`() -> Generator[None]
- `sort_key`(entry: os.DirEntry[str]) -> object
- `xunit_setup_class_fixture`() -> Generator[None]
- `xunit_setup_method_fixture`() -> Generator[None]

### Implementation
**PyobjMixin**

**_EmptyClass**

**PyCollector**
  - seen: set[str]
  - dict_values: list[list[nodes.Item | nodes.Collector]]
  - values: list[nodes.Item | nodes.Collector]
**Module**

**Package**
  - col: nodes.Collector | None
  - cols: Sequence[nodes.Collector]
**Class**

**IdMaker**
  - argnames: Sequence[str]
  - parametersets: Sequence[ParameterSet]
  - idfn: Callable[<ast.Tuple object at 0x120b063d0>] | None
  - ids: Sequence[object | None] | None
  - config: Config | None
  - nodeid: str | None
  - func_name: str | None
  - id_suffixes: dict[<ast.Tuple object at 0x120bc4210>]
  - id: str | None
  - name: str
**CallSpec2**
  - params: dict[<ast.Tuple object at 0x120bf8bd0>]
  - indices: dict[<ast.Tuple object at 0x120bf9290>]
  - _arg2scope: Mapping[<ast.Tuple object at 0x120bf9950>]
  - _idlist: Sequence[str]
  - marks: list[Mark]
**Metafunc**
  - arg_directness: dict[<ast.Tuple object at 0x120c47b50>]
  - default: dict[<ast.Tuple object at 0x120c23750>]
**Function**

**FunctionDefinition**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/python.py`  
**Dependencies**: `__future__.annotations`, `abc`, `collections.Counter`, `collections.defaultdict`, `dataclasses`, `enum`, `fnmatch`, `functools.partial`, `inspect`, `itertools`, `os`, `pathlib.Path`, `types`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.final`, `typing.Generator`, `typing.Iterable`, `typing.Iterator`, `typing.Literal`, `typing.Mapping`, `typing.Pattern`, `typing.Sequence`, `typing.TYPE_CHECKING`, `warnings`, `_pytest`, `_pytest.fixtures`, `_pytest.nodes`, `_pytest._code.filter_traceback`, `_pytest._code.getfslineno`, `_pytest._code.code.ExceptionInfo`, `_pytest._code.code.TerminalRepr`, `_pytest._code.code.Traceback`, `_pytest._io.saferepr.saferepr`, `_pytest.compat.ascii_escaped`, `_pytest.compat.get_default_arg_names`, `_pytest.compat.get_real_func`, `_pytest.compat.getimfunc`, `_pytest.compat.is_async_function`, `_pytest.compat.is_generator`, `_pytest.compat.LEGACY_PATH`, `_pytest.compat.NOTSET`, `_pytest.compat.safe_getattr`, `_pytest.compat.safe_isclass`, `_pytest.config.Config`, `_pytest.config.hookimpl`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.FixtureDef`, `_pytest.fixtures.FixtureRequest`, `_pytest.fixtures.FuncFixtureInfo`, `_pytest.fixtures.get_scope_node`, `_pytest.main.Session`, `_pytest.mark.MARK_GEN`, `_pytest.mark.ParameterSet`, `_pytest.mark.structures.get_unpacked_marks`, `_pytest.mark.structures.Mark`, `_pytest.mark.structures.MarkDecorator`, `_pytest.mark.structures.normalize_mark_list`, `_pytest.outcomes.fail`, `_pytest.outcomes.skip`, `_pytest.pathlib.fnmatch_ex`, `_pytest.pathlib.import_path`, `_pytest.pathlib.ImportPathMismatchError`, `_pytest.pathlib.scandir`, `_pytest.scope._ScopeName`, `_pytest.scope.Scope`, `_pytest.stash.StashKey`, `_pytest.warning_types.PytestCollectionWarning`, `_pytest.warning_types.PytestReturnNotNoneWarning`, `_pytest.warning_types.PytestUnhandledCoroutineWarning`, `typing_extensions.Self`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.reports
:::{doc} TestReport:255
Basic test report object (also used for setup and teardown calls if
they fail).

Reports can contain arbitrary extra attributes.
:::
:::{doc} CollectReport:399
Collection report object.

Reports can contain arbitrary extra attributes.
:::
:::{doc} _report_to_json:483
Return the contents of this report as a dict of builtin entries,
suitable for serialization.

This was originally the serialize_report() function from xdist (ca03269).
:::
:::{doc} _report_kwargs_from_json:556
Return **kwargs that can be used to construct a TestReport or
CollectReport instance.

This was originally the serialize_report() function from xdist (ca03269).
:::
**Imports**: `__future__.annotations`, `dataclasses`, `io.StringIO`, `os`, `pprint.pprint`, `typing.Any`, `typing.cast`, `typing.final`, `typing.Iterable`, `typing.Iterator`, `typing.Literal`, `typing.Mapping`, `typing.NoReturn`, `typing.Sequence`, `typing.TYPE_CHECKING`, `_pytest._code.code.ExceptionChainRepr`, `_pytest._code.code.ExceptionInfo`, `_pytest._code.code.ExceptionRepr`, `_pytest._code.code.ReprEntry`, `_pytest._code.code.ReprEntryNative`, `_pytest._code.code.ReprExceptionInfo`, `_pytest._code.code.ReprFileLocation`, `_pytest._code.code.ReprFuncArgs`, `_pytest._code.code.ReprLocals`, `_pytest._code.code.ReprTraceback`, `_pytest._code.code.TerminalRepr`, `_pytest._io.TerminalWriter`, `_pytest.config.Config`, `_pytest.nodes.Collector`, `_pytest.nodes.Item`, `_pytest.outcomes.fail`, `_pytest.outcomes.skip`, `typing_extensions.Self`, `_pytest.runner.CallInfo`
**Type References**: [[Any]], [[BaseReport]], [[CollectErrorRepr]], [[CollectReport]], [[ExceptionChainRepr]], [[ExceptionInfo]], [[Literal]], [[None]], [[ReprEntry]], [[ReprEntryNative]], [[ReprExceptionInfo]], [[TerminalRepr]], [[TestReport]]

### Interface
- `getworkerinfoline`() -> Any
- `_report_unserialization_failure`(type_name: str, report_class: type[BaseReport]) -> NoReturn
- `pytest_report_to_serializable`(report: CollectReport | TestReport) -> dict[<ast.Tuple object at 0x120d232d0>] | None
- `pytest_report_from_serializable`(data: dict[<ast.Tuple object at 0x120d23890>]) -> CollectReport | TestReport | None
- `_report_to_json`(report: BaseReport) -> dict[<ast.Tuple object at 0x120d47e50>]
- `_report_kwargs_from_json`(reportdict: dict[<ast.Tuple object at 0x120d50390>]) -> dict[<ast.Tuple object at 0x120d65f50>]
- `__init__`(msg: str) -> None
- `toterminal`(out: TerminalWriter) -> None
- `get_sections`(prefix: str) -> Iterator[tuple[<ast.Tuple object at 0x120cb83d0>]]
- `longreprtext`() -> str
- `caplog`() -> str
- `capstdout`() -> str
- `capstderr`() -> str
- `passed`() -> bool
- `failed`() -> bool
- `skipped`() -> bool
- `fspath`() -> str
- `count_towards_summary`() -> bool
- `head_line`() -> str | None
- `_get_verbose_word_with_markup`(config: Config, default_markup: Mapping[<ast.Tuple object at 0x120cf52d0>]) -> tuple[<ast.Tuple object at 0x120cdb6d0>]
- `_to_json`() -> dict[<ast.Tuple object at 0x120cdaad0>]
- `_from_json`(reportdict: dict[<ast.Tuple object at 0x120cda550>]) -> Self
- `__repr__`() -> str
- `from_item_and_call`(item: Item, call: CallInfo[None]) -> TestReport
- `location`() -> tuple[<ast.Tuple object at 0x120d1b910>] | None
- `serialize_repr_entry`(entry: ReprEntry | ReprEntryNative) -> dict[<ast.Tuple object at 0x120d33750>]
- `serialize_repr_traceback`(reprtraceback: ReprTraceback) -> dict[<ast.Tuple object at 0x120d3ca50>]
- `serialize_repr_crash`(reprcrash: ReprFileLocation | None) -> dict[<ast.Tuple object at 0x120d3d950>] | None
- `serialize_exception_longrepr`(rep: BaseReport) -> dict[<ast.Tuple object at 0x120d44bd0>]
- `deserialize_repr_entry`() -> Any
- `deserialize_repr_traceback`() -> Any
- `deserialize_repr_crash`(repr_crash_dict: dict[<ast.Tuple object at 0x120d59790>] | None) -> Any
- `__getattr__`(key: str) -> Any

### Implementation
**BaseReport**
  - when: str | None
  - location: tuple[<ast.Tuple object at 0x120cc2ed0>] | None
  - longrepr: None | ExceptionInfo[BaseException] | tuple[<ast.Tuple object at 0x120cc2550>] | str | TerminalRepr
  - sections: list[tuple[<ast.Tuple object at 0x120cc1e90>]]
  - nodeid: str
  - outcome: Literal[<ast.Tuple object at 0x120cc1950>]
**TestReport**
  - wasxfail: str
  - outcome: Literal[<ast.Tuple object at 0x120d01cd0>]
  - longrepr: None | ExceptionInfo[BaseException] | tuple[<ast.Tuple object at 0x120d02510>] | str | TerminalRepr
**CollectReport**

**CollectErrorRepr**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/reports.py`  
**Dependencies**: `__future__.annotations`, `dataclasses`, `io.StringIO`, `os`, `pprint.pprint`, `typing.Any`, `typing.cast`, `typing.final`, `typing.Iterable`, `typing.Iterator`, `typing.Literal`, `typing.Mapping`, `typing.NoReturn`, `typing.Sequence`, `typing.TYPE_CHECKING`, `_pytest._code.code.ExceptionChainRepr`, `_pytest._code.code.ExceptionInfo`, `_pytest._code.code.ExceptionRepr`, `_pytest._code.code.ReprEntry`, `_pytest._code.code.ReprEntryNative`, `_pytest._code.code.ReprExceptionInfo`, `_pytest._code.code.ReprFileLocation`, `_pytest._code.code.ReprFuncArgs`, `_pytest._code.code.ReprLocals`, `_pytest._code.code.ReprTraceback`, `_pytest._code.code.TerminalRepr`, `_pytest._io.TerminalWriter`, `_pytest.config.Config`, `_pytest.nodes.Collector`, `_pytest.nodes.Item`, `_pytest.outcomes.fail`, `_pytest.outcomes.skip`, `typing_extensions.Self`, `_pytest.runner.CallInfo`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.doctest
:::{doc} _check_all_skipped:451
Raise pytest.skip() if all examples in the given DocTest have the SKIP
option set.
:::
:::{doc} _is_mocked:461
Return if an object is possibly a mock object by checking the
existence of a highly improbable attribute.
:::
:::{doc} _patch_unwrap_mock_aware:471
Context manager which replaces ``inspect.unwrap`` with a version
that's aware of mock objects and doesn't recurse into them.
:::
:::{doc} _get_checker:682
Return a doctest.OutputChecker subclass that supports some
additional options:

* ALLOW_UNICODE and ALLOW_BYTES options to ignore u'' and b''
  prefixes (respectively) in string literals. Useful when the same
  doctest should run in Python 2 and Python 3.

* NUMBER to ignore floating-point differences smaller than the
  precision of the literal number in the doctest.

An inner class is used to avoid importing "doctest" at the module
level.
:::
:::{doc} _get_allow_unicode_flag:702
Register and return the ALLOW_UNICODE flag.
:::
:::{doc} _get_allow_bytes_flag:709
Register and return the ALLOW_BYTES flag.
:::
:::{doc} _get_number_flag:716
Register and return the NUMBER flag.
:::
:::{doc} _get_report_choice:723
Return the actual `doctest` module flag value.

We want to do it as late as possible to avoid importing `doctest` and all
its dependencies when parsing options, as it adds overhead and breaks tests.
:::
:::{doc} doctest_namespace:741
Fixture that returns a :py:class:`dict` that will be injected into the
namespace of doctests.

Usually this fixture is used in conjunction with another ``autouse`` fixture:

.. code-block:: python

    @pytest.fixture(autouse=True)
    def add_np(doctest_namespace):
        doctest_namespace["np"] = numpy

For more details: :ref:`doctest_namespace`.
:::
**Imports**: `__future__.annotations`, `bdb`, `contextlib.contextmanager`, `functools`, `inspect`, `os`, `pathlib.Path`, `platform`, `sys`, `traceback`, `types`, `typing.Any`, `typing.Callable`, `typing.Generator`, `typing.Iterable`, `typing.Pattern`, `typing.Sequence`, `typing.TYPE_CHECKING`, `warnings`, `_pytest.outcomes`, `_pytest._code.code.ExceptionInfo`, `_pytest._code.code.ReprFileLocation`, `_pytest._code.code.TerminalRepr`, `_pytest._io.TerminalWriter`, `_pytest.compat.safe_getattr`, `_pytest.config.Config`, `_pytest.config.argparsing.Parser`, `_pytest.fixtures.fixture`, `_pytest.fixtures.TopRequest`, `_pytest.nodes.Collector`, `_pytest.nodes.Item`, `_pytest.outcomes.OutcomeException`, `_pytest.outcomes.skip`, `_pytest.pathlib.fnmatch_ex`, `_pytest.python.Module`, `_pytest.python_api.approx`, `_pytest.warning_types.PytestWarning`, `doctest`, `typing_extensions.Self`, `doctest`, `doctest`, `doctest`, `doctest`, `re`, `doctest`, `doctest`, `doctest`, `doctest`, `doctest`, `doctest`, `doctest`
**Type References**: [[DocTestFailure]], [[DoctestItem]], [[DoctestModule]], [[DoctestTextfile]], [[LiteralsOutputChecker]], [[MockAwareDocTestFinder]], [[MultipleDoctestFailures]], [[None]], [[OutputChecker]], [[PytestDoctestRunner]], [[ReprFailDoctest]], [[Sequence]], [[doctest.DocTestFailure]], [[doctest.OutputChecker]]

### Interface
- `pytest_addoption`(parser: Parser) -> None
- `pytest_unconfigure`() -> None
- `pytest_collect_file`(file_path: Path, parent: Collector) -> DoctestModule | DoctestTextfile | None
- `_is_setup_py`(path: Path) -> bool
- `_is_doctest`(config: Config, path: Path, parent: Collector) -> bool
- `_is_main_py`(path: Path) -> bool
- `_init_runner_class`() -> type[doctest.DocTestRunner]
- `_get_runner`(checker: doctest.OutputChecker | None, verbose: bool | None, optionflags: int, continue_on_failure: bool) -> doctest.DocTestRunner
- `_get_flag_lookup`() -> dict[<ast.Tuple object at 0x120de1210>]
- `get_optionflags`(config: Config) -> int
- `_get_continue_on_failure`(config: Config) -> bool
- `_check_all_skipped`(test: doctest.DocTest) -> None
- `_is_mocked`(obj: object) -> bool
- `_patch_unwrap_mock_aware`() -> Generator[None]
- `_init_checker_class`() -> type[doctest.OutputChecker]
- `_get_checker`() -> doctest.OutputChecker
- `_get_allow_unicode_flag`() -> int
- `_get_allow_bytes_flag`() -> int
- `_get_number_flag`() -> int
- `_get_report_choice`(key: str) -> int
- `doctest_namespace`() -> dict[<ast.Tuple object at 0x120e4b250>]
- `__init__`(checker: doctest.OutputChecker | None, verbose: bool | None, optionflags: int, continue_on_failure: bool) -> None
- `toterminal`(tw: TerminalWriter) -> None
- `from_parent`(parent: DoctestTextfile | DoctestModule) -> Self
- `_initrequest`() -> None
- `setup`() -> None
- `runtest`() -> None
- `_disable_output_capturing_for_darwin`() -> None
- `repr_failure`(excinfo: ExceptionInfo[BaseException]) -> str | TerminalRepr
- `reportinfo`() -> tuple[<ast.Tuple object at 0x120dd7550>]
- `collect`() -> Iterable[DoctestItem]
- `_mock_aware_unwrap`(func: Callable[<ast.Tuple object at 0x120df5b50>]) -> Any
- `report_failure`(test: doctest.DocTest, example: doctest.Example, got: str) -> None
- `report_unexpected_exception`(test: doctest.DocTest, example: doctest.Example, exc_info: tuple[<ast.Tuple object at 0x120db00d0>]) -> None
- `check_output`(want: str, got: str, optionflags: int) -> bool
- `_remove_unwanted_precision`(want: str, got: str) -> str
- `remove_prefixes`(regex: Pattern[str], txt: str) -> str
- `_find_lineno`() -> Any
- `_find`() -> None
- `_from_module`() -> Any

### Implementation
**ReprFailDoctest**

**MultipleDoctestFailures**

**DoctestItem**
  - failures: Sequence[doctest.DocTestFailure | doctest.UnexpectedException] | None
**DoctestTextfile**

**DoctestModule**

**PytestDoctestRunner**

**LiteralsOutputChecker**
  - fraction: str | None
  - exponent: str | None
**MockAwareDocTestFinder**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/doctest.py`  
**Dependencies**: `__future__.annotations`, `bdb`, `contextlib.contextmanager`, `functools`, `inspect`, `os`, `pathlib.Path`, `platform`, `sys`, `traceback`, `types`, `typing.Any`, `typing.Callable`, `typing.Generator`, `typing.Iterable`, `typing.Pattern`, `typing.Sequence`, `typing.TYPE_CHECKING`, `warnings`, `_pytest.outcomes`, `_pytest._code.code.ExceptionInfo`, `_pytest._code.code.ReprFileLocation`, `_pytest._code.code.TerminalRepr`, `_pytest._io.TerminalWriter`, `_pytest.compat.safe_getattr`, `_pytest.config.Config`, `_pytest.config.argparsing.Parser`, `_pytest.fixtures.fixture`, `_pytest.fixtures.TopRequest`, `_pytest.nodes.Collector`, `_pytest.nodes.Item`, `_pytest.outcomes.OutcomeException`, `_pytest.outcomes.skip`, `_pytest.pathlib.fnmatch_ex`, `_pytest.python.Module`, `_pytest.python_api.approx`, `_pytest.warning_types.PytestWarning`, `doctest`, `typing_extensions.Self`, `doctest`, `doctest`, `doctest`, `doctest`, `re`, `doctest`, `doctest`, `doctest`, `doctest`, `doctest`, `doctest`, `doctest`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.setuponly

**Imports**: `__future__.annotations`, `typing.Generator`, `_pytest._io.saferepr.saferepr`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.argparsing.Parser`, `_pytest.fixtures.FixtureDef`, `_pytest.fixtures.SubRequest`, `_pytest.scope.Scope`, `pytest`
### Interface
- `pytest_addoption`(parser: Parser) -> None
- `pytest_fixture_setup`(fixturedef: FixtureDef[object], request: SubRequest) -> Generator[<ast.Tuple object at 0x120e4f2d0>]
- `pytest_fixture_post_finalizer`(fixturedef: FixtureDef[object], request: SubRequest) -> None
- `_show_fixture_action`(fixturedef: FixtureDef[object], config: Config, msg: str) -> None
- `pytest_cmdline_main`(config: Config) -> int | ExitCode | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/setuponly.py`  
**Dependencies**: `__future__.annotations`, `typing.Generator`, `_pytest._io.saferepr.saferepr`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.argparsing.Parser`, `_pytest.fixtures.FixtureDef`, `_pytest.fixtures.SubRequest`, `_pytest.scope.Scope`, `pytest`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.nodes
:::{doc} NodeMeta:84
Metaclass used by :class:`Node` to enforce that direct construction raises
:class:`Failed`.

This behaviour supports the indirection introduced with :meth:`Node.from_parent`,
the named constructor to be used instead of direct construction. The design
decision to enforce indirection with :class:`NodeMeta` was made as a
temporary aid for refactoring the collection tree, which was diagnosed to
have :class:`Node` objects whose creational patterns were overly entangled.
Once the refactoring is complete, this metaclass can be removed.

See https://github.com/pytest-dev/pytest/projects/3 for an overview of the
progress on detangling the :class:`Node` classes.
:::
:::{doc} Node:128
Base class of :class:`Collector` and :class:`Item`, the components of
the test collection tree.

``Collector``\'s are the internal nodes of the tree, and ``Item``\'s are the
leaf nodes.
:::
:::{doc} get_fslocation_from_item:480
Try to extract the actual location from a node, depending on available attributes:

* "location": a pair (path, lineno)
* "obj": a Python object that the node wraps.
* "path": just a path

:rtype: A tuple of (str|Path, int) with filename and 0-based line number.
:::
:::{doc} Collector:499
Base class of all collectors.

Collector create children through `collect()` and thus iteratively build
the collection tree.
:::
:::{doc} FSCollector:554
Base class for filesystem collectors.
:::
:::{doc} File:624
Base class for collecting tests from a file.

:ref:`non-python tests`.
:::
:::{doc} Directory:631
Base class for collecting files from a directory.

A basic directory collector does the following: goes over the files and
sub-directories in the directory and creates collectors for them by calling
the hooks :hook:`pytest_collect_directory` and :hook:`pytest_collect_file`,
after checking that they are not ignored using
:hook:`pytest_ignore_collect`.

The default directory collectors are :class:`~pytest.Dir` and
:class:`~pytest.Package`.

.. versionadded:: 8.0

:ref:`custom directory collectors`.
:::
:::{doc} Item:649
Base class of all test invocation items.

Note that for a single function there might be multiple test invocation items.
:::
**Imports**: `__future__.annotations`, `abc`, `functools.cached_property`, `inspect.signature`, `os`, `pathlib`, `pathlib.Path`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.Iterable`, `typing.Iterator`, `typing.MutableMapping`, `typing.NoReturn`, `typing.overload`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `warnings`, `pluggy`, `_pytest._code`, `_pytest._code.getfslineno`, `_pytest._code.code.ExceptionInfo`, `_pytest._code.code.TerminalRepr`, `_pytest._code.code.Traceback`, `_pytest._code.code.TracebackStyle`, `_pytest.compat.LEGACY_PATH`, `_pytest.config.Config`, `_pytest.config.ConftestImportFailure`, `_pytest.config.compat._check_path`, `_pytest.deprecated.NODE_CTOR_FSPATH_ARG`, `_pytest.mark.structures.Mark`, `_pytest.mark.structures.MarkDecorator`, `_pytest.mark.structures.NodeKeywords`, `_pytest.outcomes.fail`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.commonpath`, `_pytest.stash.Stash`, `_pytest.warning_types.PytestWarning`, `typing_extensions.Self`, `_pytest.main.Session`, `_pytest.mark.MARK_GEN`, `_pytest.fixtures.FixtureLookupError`, `warning_types.PytestDeprecationWarning`
**Type References**: [[Callable]], [[CollectError]], [[Collector]], [[Directory]], [[FSCollector]], [[File]], [[Item]], [[LEGACY_PATH]], [[Node]], [[NodeMeta]], [[None]], [[Traceback]]

### Interface
- `_imply_path`(node_type: type[Node], path: Path | None, fspath: LEGACY_PATH | None) -> Path
- `get_fslocation_from_item`(node: Node) -> tuple[<ast.Tuple object at 0x120ee51d0>]
- `_check_initialpaths_for_relpath`(session: Session, path: Path) -> str | None
- `__call__`() -> NoReturn
- `_create`(cls: type[_T]) -> _T
- `__init__`(config: Config | None, session: Session | None, nodeid: str | None) -> None
- `from_parent`() -> Self
- `ihook`() -> pluggy.HookRelay
- `__repr__`() -> str
- `warn`(warning: Warning) -> None
- `nodeid`() -> str
- `__hash__`() -> int
- `setup`() -> None
- `teardown`() -> None
- `iter_parents`() -> Iterator[Node]
- `listchain`() -> list[Node]
- `add_marker`(marker: str | MarkDecorator, append: bool) -> None
- `iter_markers`(name: str | None) -> Iterator[Mark]
- `iter_markers_with_node`(name: str | None) -> Iterator[tuple[<ast.Tuple object at 0x120eb4fd0>]]
- `get_closest_marker`(name: str, default: Mark | None) -> Mark | None
- `listextrakeywords`() -> set[str]
- `listnames`() -> list[str]
- `addfinalizer`(fin: Callable[<ast.Tuple object at 0x120ec5010>]) -> None
- `getparent`(cls: type[_NodeType]) -> _NodeType | None
- `_traceback_filter`(excinfo: ExceptionInfo[BaseException]) -> Traceback
- `_repr_failure_py`(excinfo: ExceptionInfo[BaseException], style: TracebackStyle | None) -> TerminalRepr
- `repr_failure`(excinfo: ExceptionInfo[BaseException]) -> str | TerminalRepr
- `collect`() -> Iterable[Item | Collector]
- `_check_item_and_collector_diamond_inheritance`() -> None
- `runtest`() -> None
- `add_report_section`(when: str, key: str, content: str) -> None
- `reportinfo`() -> tuple[<ast.Tuple object at 0x120f24cd0>]
- `location`() -> tuple[<ast.Tuple object at 0x120f26e10>]

### Implementation
**NodeMeta**

**Node**
  - fspath: LEGACY_PATH
  - parent: Node | None
  - item: Node | None
  - extra_keywords: set[str]
  - tbfilter: bool | Callable[<ast.Tuple object at 0x120ecd710>]
**Collector**

**FSCollector**

**File**

**Directory**

**Item**

**CollectError**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/nodes.py`  
**Dependencies**: `__future__.annotations`, `abc`, `functools.cached_property`, `inspect.signature`, `os`, `pathlib`, `pathlib.Path`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.Iterable`, `typing.Iterator`, `typing.MutableMapping`, `typing.NoReturn`, `typing.overload`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `warnings`, `pluggy`, `_pytest._code`, `_pytest._code.getfslineno`, `_pytest._code.code.ExceptionInfo`, `_pytest._code.code.TerminalRepr`, `_pytest._code.code.Traceback`, `_pytest._code.code.TracebackStyle`, `_pytest.compat.LEGACY_PATH`, `_pytest.config.Config`, `_pytest.config.ConftestImportFailure`, `_pytest.config.compat._check_path`, `_pytest.deprecated.NODE_CTOR_FSPATH_ARG`, `_pytest.mark.structures.Mark`, `_pytest.mark.structures.MarkDecorator`, `_pytest.mark.structures.NodeKeywords`, `_pytest.outcomes.fail`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.commonpath`, `_pytest.stash.Stash`, `_pytest.warning_types.PytestWarning`, `typing_extensions.Self`, `_pytest.main.Session`, `_pytest.mark.MARK_GEN`, `_pytest.fixtures.FixtureLookupError`, `warning_types.PytestDeprecationWarning`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.threadexception
:::{doc} catch_threading_exception:20
Context manager catching threading.Thread exception using
threading.excepthook.

Storing exc_value using a custom hook can create a reference cycle. The
reference cycle is broken explicitly when the context manager exits.

Storing thread using a custom hook can resurrect it if it is set to an
object which is being finalized. Exiting the context manager clears the
stored object.

Usage:
    with threading_helper.catch_threading_exception() as cm:
        # code spawning a thread which raises an exception
        ...
        # check the thread exception: use cm.args
        ...
    # cm.args attribute no longer exists at this point
    # (to break a reference cycle)
:::
**Imports**: `__future__.annotations`, `threading`, `traceback`, `types.TracebackType`, `typing.Any`, `typing.Callable`, `typing.Generator`, `typing.TYPE_CHECKING`, `warnings`, `pytest`, `typing_extensions.Self`
**Type References**: [[catch_threading_exception]]

### Interface
- `thread_exception_runtest_hook`() -> Generator[None]
- `pytest_runtest_setup`() -> Generator[None]
- `pytest_runtest_call`() -> Generator[None]
- `pytest_runtest_teardown`() -> Generator[None]
- `__init__`() -> None
- `_hook`(args: threading.ExceptHookArgs) -> None
- `__enter__`() -> Self
- `__exit__`(exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: TracebackType | None) -> None

### Implementation
**catch_threading_exception**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/threadexception.py`  
**Dependencies**: `__future__.annotations`, `threading`, `traceback`, `types.TracebackType`, `typing.Any`, `typing.Callable`, `typing.Generator`, `typing.TYPE_CHECKING`, `warnings`, `pytest`, `typing_extensions.Self`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.main
:::{doc} wrap_session:270
Skeleton command line program.
:::
:::{doc} _main:333
Default command line protocol for initialization, session,
running tests and reporting.
:::
:::{doc} _in_venv:370
Attempt to detect if ``path`` is the root of a Virtual Environment by
checking for the existence of the pyvenv.cfg file.

[https://peps.python.org/pep-0405/]

For regression protection we also check for conda environments that do not include pyenv.cfg yet --
https://github.com/conda/conda/issues/13337 is the conda issue tracking adding pyenv.cfg.

Checking for the `conda-meta/history` file per https://github.com/pytest-dev/pytest/issues/12652#issuecomment-2246336902.
:::
:::{doc} Interrupted:468
Signals that the test run was interrupted.
:::
:::{doc} Failed:474
Signals a stop as failed test run.
:::
:::{doc} Dir:491
Collector of files in a file system directory.

.. versionadded:: 8.0

.. note::

    Python directories with an `__init__.py` file are instead collected by
    :class:`~pytest.Package` by default. Both are :class:`~pytest.Directory`
    collectors.
:::
:::{doc} Session:543
The root of the collection tree.

``Session`` collects the initial paths given as arguments to pytest.
:::
:::{doc} search_pypath:980
Search sys.path for the given a dotted module name, and return its file
system path if found.
:::
:::{doc} CollectionArgument:999
A resolved collection argument.
:::
:::{doc} resolve_collection_argument:1007
Parse path arguments optionally containing selection parts and return (fspath, names).

Command-line arguments can point to files and/or directories, and optionally contain
parts for specific tests selection, for example:

    "pkg/tests/test_foo.py::TestClass::test_foo"

This function ensures the path exists, and returns a resolved `CollectionArgument`:

    CollectionArgument(
        path=Path("/full/path/to/pkg/tests/test_foo.py"),
        parts=["TestClass", "test_foo"],
        module_name=None,
    )

When as_pypath is True, expects that the command-line argument actually contains
module paths instead of file-system paths:

    "pkg.tests.test_foo::TestClass::test_foo"

In which case we search sys.path for a matching module, and then return the *path* to the
found module, which may look like this:

    CollectionArgument(
        path=Path("/home/u/myvenv/lib/site-packages/pkg/tests/test_foo.py"),
        parts=["TestClass", "test_foo"],
        module_name="pkg.tests.test_foo",
    )

If the path doesn't exist, raise UsageError.
If the path is a directory and selection parts are present, raise UsageError.
:::
**Imports**: `__future__.annotations`, `argparse`, `dataclasses`, `fnmatch`, `functools`, `importlib`, `importlib.util`, `os`, `pathlib.Path`, `sys`, `typing.AbstractSet`, `typing.Callable`, `typing.Dict`, `typing.final`, `typing.Iterable`, `typing.Iterator`, `typing.Literal`, `typing.overload`, `typing.Sequence`, `typing.TYPE_CHECKING`, `warnings`, `pluggy`, `_pytest.nodes`, `_pytest._code`, `_pytest.config.Config`, `_pytest.config.directory_arg`, `_pytest.config.ExitCode`, `_pytest.config.hookimpl`, `_pytest.config.PytestPluginManager`, `_pytest.config.UsageError`, `_pytest.config.argparsing.Parser`, `_pytest.config.compat.PathAwareHookProxy`, `_pytest.outcomes.exit`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.bestrelpath`, `_pytest.pathlib.fnmatch_ex`, `_pytest.pathlib.safe_exists`, `_pytest.pathlib.scandir`, `_pytest.reports.CollectReport`, `_pytest.reports.TestReport`, `_pytest.runner.collect_one_node`, `_pytest.runner.SetupState`, `_pytest.warning_types.PytestWarning`, `typing_extensions.Self`, `_pytest.fixtures.FixtureManager`
**Type References**: [[CollectionArgument]], [[Collector]], [[Dir]], [[ExitCode]], [[FSHookProxy]], [[Failed]], [[FixtureManager]], [[HookRelay]], [[Interrupted]], [[Item]], [[None]], [[Path]], [[Sequence]], [[Session]], [[SetupState]], [[_bestrelpath_cache]], [[nodes.Collector]], [[nodes.Item]], [[pluggy.HookRelay]]

### Interface
- `pytest_addoption`(parser: Parser) -> None
- `validate_basetemp`(path: str) -> str
- `wrap_session`(config: Config, doit: Callable[<ast.Tuple object at 0x120fcdf90>]) -> int | ExitCode
- `pytest_cmdline_main`(config: Config) -> int | ExitCode
- `_main`(config: Config, session: Session) -> int | ExitCode | None
- `pytest_collection`(session: Session) -> None
- `pytest_runtestloop`(session: Session) -> bool
- `_in_venv`(path: Path) -> bool
- `pytest_ignore_collect`(collection_path: Path, config: Config) -> bool | None
- `pytest_collect_directory`(path: Path, parent: nodes.Collector) -> nodes.Collector | None
- `pytest_collection_modifyitems`(items: list[nodes.Item], config: Config) -> None
- `search_pypath`(module_name: str) -> str | None
- `resolve_collection_argument`(invocation_path: Path, arg: str) -> CollectionArgument
- `is_ancestor`(base: Path, query: Path) -> bool
- `__init__`(config: Config) -> None
- `__getattr__`(name: str) -> pluggy.HookCaller
- `__missing__`(path: Path) -> str
- `from_parent`(parent: nodes.Collector) -> Self
- `collect`() -> Iterator[nodes.Item | nodes.Collector]
- `from_config`(config: Config) -> Session
- `__repr__`() -> str
- `shouldstop`(value: bool | str) -> None
- `shouldfail`(value: bool | str) -> None
- `startpath`() -> Path
- `_node_location_to_relpath`(node_path: Path) -> str
- `pytest_collectstart`() -> None
- `pytest_runtest_logreport`(report: TestReport | CollectReport) -> None
- `isinitpath`(path: str | os.PathLike[str]) -> bool
- `gethookproxy`(fspath: os.PathLike[str]) -> pluggy.HookRelay
- `_collect_path`(path: Path, path_cache: dict[<ast.Tuple object at 0x12200bb90>]) -> Sequence[nodes.Collector]
- `perform_collect`(args: Sequence[str] | None, genitems: bool) -> Sequence[nodes.Item | nodes.Collector]
- `_collect_one_node`(node: nodes.Collector, handle_dupes: bool) -> tuple[<ast.Tuple object at 0x122040510>]
- `genitems`(node: nodes.Item | nodes.Collector) -> Iterator[nodes.Item]

### Implementation
**FSHookProxy**

**Interrupted**

**Failed**

**_bestrelpath_cache**
  - path: Path
**Dir**
  - col: nodes.Collector | None
  - cols: Sequence[nodes.Collector]
**Session**
  - _setupstate: SetupState
  - _fixturemanager: FixtureManager
  - exitstatus: int | ExitCode
  - session: Session
  - proxy: pluggy.HookRelay
  - items: Sequence[nodes.Item | nodes.Collector]
  - path_cache: dict[<ast.Tuple object at 0x122040c10>]
  - col: nodes.Collector | None
  - cols: Sequence[nodes.Collector]
  - initialpaths: list[Path]
  - initialpaths_with_parents: list[Path]
  - work: list[tuple[<ast.Tuple object at 0x12204d850>]]
  - subnodes: Sequence[nodes.Collector | nodes.Item]
**CollectionArgument**
  - path: Path
  - parts: Sequence[str]
  - module_name: str | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/main.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `dataclasses`, `fnmatch`, `functools`, `importlib`, `importlib.util`, `os`, `pathlib.Path`, `sys`, `typing.AbstractSet`, `typing.Callable`, `typing.Dict`, `typing.final`, `typing.Iterable`, `typing.Iterator`, `typing.Literal`, `typing.overload`, `typing.Sequence`, `typing.TYPE_CHECKING`, `warnings`, `pluggy`, `_pytest.nodes`, `_pytest._code`, `_pytest.config.Config`, `_pytest.config.directory_arg`, `_pytest.config.ExitCode`, `_pytest.config.hookimpl`, `_pytest.config.PytestPluginManager`, `_pytest.config.UsageError`, `_pytest.config.argparsing.Parser`, `_pytest.config.compat.PathAwareHookProxy`, `_pytest.outcomes.exit`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.bestrelpath`, `_pytest.pathlib.fnmatch_ex`, `_pytest.pathlib.safe_exists`, `_pytest.pathlib.scandir`, `_pytest.reports.CollectReport`, `_pytest.reports.TestReport`, `_pytest.runner.collect_one_node`, `_pytest.runner.SetupState`, `_pytest.warning_types.PytestWarning`, `typing_extensions.Self`, `_pytest.fixtures.FixtureManager`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.monkeypatch
:::{doc} monkeypatch:31
A convenient fixture for monkey-patching.

The fixture provides these methods to modify objects, dictionaries, or
:data:`os.environ`:

* :meth:`monkeypatch.setattr(obj, name, value, raising=True) <pytest.MonkeyPatch.setattr>`
* :meth:`monkeypatch.delattr(obj, name, raising=True) <pytest.MonkeyPatch.delattr>`
* :meth:`monkeypatch.setitem(mapping, name, value) <pytest.MonkeyPatch.setitem>`
* :meth:`monkeypatch.delitem(obj, name, raising=True) <pytest.MonkeyPatch.delitem>`
* :meth:`monkeypatch.setenv(name, value, prepend=None) <pytest.MonkeyPatch.setenv>`
* :meth:`monkeypatch.delenv(name, raising=True) <pytest.MonkeyPatch.delenv>`
* :meth:`monkeypatch.syspath_prepend(path) <pytest.MonkeyPatch.syspath_prepend>`
* :meth:`monkeypatch.chdir(path) <pytest.MonkeyPatch.chdir>`
* :meth:`monkeypatch.context() <pytest.MonkeyPatch.context>`

All modifications will be undone after the requesting test function or
fixture has finished. The ``raising`` parameter determines if a :class:`KeyError`
or :class:`AttributeError` will be raised if the set/deletion operation does not have the
specified target.

To undo modifications done by the fixture in a contained scope,
use :meth:`context() <pytest.MonkeyPatch.context>`.
:::
:::{doc} MonkeyPatch:117
Helper to conveniently monkeypatch attributes/items/environment
variables/syspath.

Returned by the :fixture:`monkeypatch` fixture.

.. versionchanged:: 6.2
    Can now also be used directly as `pytest.MonkeyPatch()`, for when
    the fixture is not available. In this case, use
    :meth:`with MonkeyPatch.context() as mp: <context>` or remember to call
    :meth:`undo` explicitly.
:::
**Imports**: `__future__.annotations`, `contextlib.contextmanager`, `os`, `re`, `sys`, `typing.Any`, `typing.final`, `typing.Generator`, `typing.Mapping`, `typing.MutableMapping`, `typing.overload`, `typing.TypeVar`, `warnings`, `_pytest.fixtures.fixture`, `_pytest.warning_types.PytestWarning`, `inspect`, `inspect`, `importlib.invalidate_caches`, `pkg_resources.fixup_namespace_packages`
**Type References**: [[MonkeyPatch]], [[MutableMapping]], [[Notset]]

### Interface
- `monkeypatch`() -> Generator[MonkeyPatch]
- `resolve`(name: str) -> object
- `annotated_getattr`(obj: object, name: str, ann: str) -> object
- `derive_importpath`(import_path: str, raising: bool) -> tuple[<ast.Tuple object at 0x122091f10>]
- `__repr__`() -> str
- `__init__`() -> None
- `context`() -> Generator[MonkeyPatch]
- `setattr`(target: str | object, name: object | str, value: object, raising: bool) -> None
- `delattr`(target: object | str, name: str | Notset, raising: bool) -> None
- `setitem`(dic: Mapping[<ast.Tuple object at 0x1220c28d0>], name: K, value: V) -> None
- `delitem`(dic: Mapping[<ast.Tuple object at 0x1220c3d90>], name: K, raising: bool) -> None
- `setenv`(name: str, value: str, prepend: str | None) -> None
- `delenv`(name: str, raising: bool) -> None
- `syspath_prepend`() -> None
- `chdir`(path: str | os.PathLike[str]) -> None
- `undo`() -> None

### Implementation
**Notset**

**MonkeyPatch**
  - environ: MutableMapping[<ast.Tuple object at 0x1220d4b10>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/monkeypatch.py`  
**Dependencies**: `__future__.annotations`, `contextlib.contextmanager`, `os`, `re`, `sys`, `typing.Any`, `typing.final`, `typing.Generator`, `typing.Mapping`, `typing.MutableMapping`, `typing.overload`, `typing.TypeVar`, `warnings`, `_pytest.fixtures.fixture`, `_pytest.warning_types.PytestWarning`, `inspect`, `inspect`, `importlib.invalidate_caches`, `pkg_resources.fixup_namespace_packages`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.legacypath
:::{doc} Testdir:42
Similar to :class:`Pytester`, but this class works with legacy legacy_path objects instead.

All methods just forward to an internal :class:`Pytester` instance, converting results
to `legacy_path` objects as necessary.
:::
:::{doc} TempdirFactory:268
Backward compatibility wrapper that implements ``py.path.local``
for :class:`TempPathFactory`.

.. note::
    These days, it is preferred to use ``tmp_path_factory``.

    :ref:`About the tmpdir and tmpdir_factory fixtures<tmpdir and tmpdir_factory>`.
:::
:::{doc} Cache_makedir:323
Return a directory path object with the given name.

Same as :func:`mkdir`, but returns a legacy py path instance.
:::
:::{doc} FixtureRequest_fspath:331
(deprecated) The file system path of the test module which collected this test.
:::
:::{doc} TerminalReporter_startdir:336
The directory from which pytest was invoked.

Prefer to use ``startpath`` which is a :class:`pathlib.Path`.

:type: LEGACY_PATH
:::
:::{doc} Config_invocation_dir:346
The directory from which pytest was invoked.

Prefer to use :attr:`invocation_params.dir <InvocationParams.dir>`,
which is a :class:`pathlib.Path`.

:type: LEGACY_PATH
:::
:::{doc} Config_rootdir:357
The path to the :ref:`rootdir <rootdir>`.

Prefer to use :attr:`rootpath`, which is a :class:`pathlib.Path`.

:type: LEGACY_PATH
:::
:::{doc} Config_inifile:367
The path to the :ref:`configfile <configfiles>`.

Prefer to use :attr:`inipath`, which is a :class:`pathlib.Path`.

:type: Optional[LEGACY_PATH]
:::
:::{doc} Session_startdir:377
The path from which pytest was invoked.

Prefer to use ``startpath`` which is a :class:`pathlib.Path`.

:type: LEGACY_PATH
:::
:::{doc} Node_fspath:398
(deprecated) returns a legacy_path copy of self.path
:::
:::{doc} pytest_load_initial_conftests:408
Monkeypatch legacy path attributes in several classes, as early as possible.
:::
:::{doc} pytest_configure:440
Installs the LegacyTmpdirPlugin if the ``tmpdir`` plugin is also installed.
:::
**Imports**: `__future__.annotations`, `dataclasses`, `pathlib.Path`, `shlex`, `subprocess`, `typing.Final`, `typing.final`, `typing.TYPE_CHECKING`, `iniconfig.SectionWrapper`, `_pytest.cacheprovider.Cache`, `_pytest.compat.LEGACY_PATH`, `_pytest.compat.legacy_path`, `_pytest.config.Config`, `_pytest.config.hookimpl`, `_pytest.config.PytestPluginManager`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.fixture`, `_pytest.fixtures.FixtureRequest`, `_pytest.main.Session`, `_pytest.monkeypatch.MonkeyPatch`, `_pytest.nodes.Collector`, `_pytest.nodes.Item`, `_pytest.nodes.Node`, `_pytest.pytester.HookRecorder`, `_pytest.pytester.Pytester`, `_pytest.pytester.RunResult`, `_pytest.terminal.TerminalReporter`, `_pytest.tmpdir.TempPathFactory`, `pexpect`
**Type References**: [[Final]], [[LegacyTestdirPlugin]], [[LegacyTmpdirPlugin]], [[TempPathFactory]], [[TempdirFactory]], [[Testdir]]

### Interface
- `Cache_makedir`(self: Cache, name: str) -> LEGACY_PATH
- `FixtureRequest_fspath`(self: FixtureRequest) -> LEGACY_PATH
- `TerminalReporter_startdir`(self: TerminalReporter) -> LEGACY_PATH
- `Config_invocation_dir`(self: Config) -> LEGACY_PATH
- `Config_rootdir`(self: Config) -> LEGACY_PATH
- `Config_inifile`(self: Config) -> LEGACY_PATH | None
- `Session_startdir`(self: Session) -> LEGACY_PATH
- `Config__getini_unknown_type`(name: str, type: str, value: str | list[str]) -> Any
- `Node_fspath`(self: Node) -> LEGACY_PATH
- `Node_fspath_set`(self: Node, value: LEGACY_PATH) -> None
- `pytest_load_initial_conftests`(early_config: Config) -> None
- `pytest_configure`(config: Config) -> None
- `pytest_plugin_registered`(plugin: object, manager: PytestPluginManager) -> None
- `__init__`(tmppath_factory: TempPathFactory) -> None
- `tmpdir`(tmp_path: Path) -> LEGACY_PATH
- `test_tmproot`() -> LEGACY_PATH
- `request`() -> Any
- `plugins`() -> Any
- `monkeypatch`() -> MonkeyPatch
- `make_hook_recorder`() -> HookRecorder
- `chdir`() -> None
- `finalize`() -> None
- `makefile`() -> LEGACY_PATH
- `makeconftest`() -> LEGACY_PATH
- `makeini`() -> LEGACY_PATH
- `getinicfg`(source: str) -> SectionWrapper
- `makepyprojecttoml`() -> LEGACY_PATH
- `makepyfile`() -> LEGACY_PATH
- `maketxtfile`() -> LEGACY_PATH
- `syspathinsert`() -> None
- `mkdir`() -> LEGACY_PATH
- `mkpydir`() -> LEGACY_PATH
- `copy_example`() -> LEGACY_PATH
- `getnode`(config: Config) -> Item | Collector | None
- `getpathnode`() -> Any
- `genitems`(colitems: list[Item | Collector]) -> list[Item]
- `runitem`() -> Any
- `inline_runsource`() -> Any
- `inline_genitems`() -> Any
- `inline_run`() -> Any
- `runpytest_inprocess`() -> RunResult
- `runpytest`() -> RunResult
- `parseconfig`() -> Config
- `parseconfigure`() -> Config
- `getitem`() -> Any
- `getitems`() -> Any
- `getmodulecol`() -> Any
- `collect_by_name`(modcol: Collector, name: str) -> Item | Collector | None
- `popen`() -> Any
- `run`() -> RunResult
- `runpython`() -> RunResult
- `runpython_c`() -> Any
- `runpytest_subprocess`() -> RunResult
- `spawn_pytest`(string: str, expect_timeout: float) -> pexpect.spawn
- `spawn`(cmd: str, expect_timeout: float) -> pexpect.spawn
- `__repr__`() -> str
- `__str__`() -> str
- `testdir`(pytester: Pytester) -> Testdir
- `mktemp`(basename: str, numbered: bool) -> LEGACY_PATH
- `getbasetemp`() -> LEGACY_PATH
- `tmpdir_factory`(request: FixtureRequest) -> TempdirFactory

### Implementation
**Testdir**
  - CLOSE_STDIN: Final
  - TimeoutExpired: Final
**LegacyTestdirPlugin**

**TempdirFactory**
  - _tmppath_factory: TempPathFactory
**LegacyTmpdirPlugin**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/legacypath.py`  
**Dependencies**: `__future__.annotations`, `dataclasses`, `pathlib.Path`, `shlex`, `subprocess`, `typing.Final`, `typing.final`, `typing.TYPE_CHECKING`, `iniconfig.SectionWrapper`, `_pytest.cacheprovider.Cache`, `_pytest.compat.LEGACY_PATH`, `_pytest.compat.legacy_path`, `_pytest.config.Config`, `_pytest.config.hookimpl`, `_pytest.config.PytestPluginManager`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.fixture`, `_pytest.fixtures.FixtureRequest`, `_pytest.main.Session`, `_pytest.monkeypatch.MonkeyPatch`, `_pytest.nodes.Collector`, `_pytest.nodes.Item`, `_pytest.nodes.Node`, `_pytest.pytester.HookRecorder`, `_pytest.pytester.Pytester`, `_pytest.pytester.RunResult`, `_pytest.terminal.TerminalReporter`, `_pytest.tmpdir.TempPathFactory`, `pexpect`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.setupplan

**Imports**: `__future__.annotations`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.argparsing.Parser`, `_pytest.fixtures.FixtureDef`, `_pytest.fixtures.SubRequest`, `pytest`
### Interface
- `pytest_addoption`(parser: Parser) -> None
- `pytest_fixture_setup`(fixturedef: FixtureDef[object], request: SubRequest) -> object | None
- `pytest_cmdline_main`(config: Config) -> int | ExitCode | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/setupplan.py`  
**Dependencies**: `__future__.annotations`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.argparsing.Parser`, `_pytest.fixtures.FixtureDef`, `_pytest.fixtures.SubRequest`, `pytest`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.pathlib
:::{doc} on_rm_rf_error:73
Handle known read-only errors during rmtree.

The returned value is used only by our own tests.
:::
:::{doc} ensure_extended_length_path:132
Get the extended-length version of a path (Windows).

On Windows, by default, the maximum length of a path (MAX_PATH) is 260
characters, and operations on paths longer than that fail. But it is possible
to overcome this by converting the path to "extended-length" form before
performing the operation:
https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#maximum-path-length-limitation

On Windows, this function returns the extended-length absolute version of path.
On other platforms it returns path unchanged.
:::
:::{doc} get_extended_length_path_str:150
Convert a path to a Windows extended length path.
:::
:::{doc} rm_rf:162
Remove the path contents recursively, even if some elements
are read-only.
:::
:::{doc} find_prefixed:173
Find all elements in root that begin with the prefix, case-insensitive.
:::
:::{doc} extract_suffixes:181
Return the parts of the paths following the prefix.

:param iter: Iterator over path names.
:param prefix: Expected prefix of the path names.
:::
:::{doc} find_suffixes:192
Combine find_prefixes and extract_suffixes.
:::
:::{doc} parse_num:197
Parse number path suffixes, returns -1 on error.
:::
:::{doc} _force_symlink:205
Helper to create the current symlink.

It's full of race conditions that are reasonably OK to ignore
for the context of best effort linking to the latest test run.

The presumption being that in case of much parallelism
the inaccuracy is going to be acceptable.
:::
:::{doc} make_numbered_dir:225
Create a directory with an increased number as suffix for the given prefix.
:::
:::{doc} create_cleanup_lock:246
Create a lock to prevent premature folder cleanup.
:::
:::{doc} register_cleanup_lock_removal:263
Register a cleanup function for removing a lock, by default on atexit.
:::
:::{doc} maybe_delete_a_numbered_dir:282
Remove a numbered directory if its lock can be obtained and it does
not seem to be in use.
:::
:::{doc} ensure_deletable:310
Check if `path` is deletable based on whether the lock file is expired.
:::
:::{doc} try_cleanup:338
Try to cleanup a folder if we can ensure it's deletable.
:::
:::{doc} cleanup_candidates:344
List candidates for numbered directories to be removed - follows py.path.
:::
:::{doc} cleanup_numbered_dir:363
Cleanup for lock driven numbered directories.
:::
:::{doc} make_numbered_dir_with_cleanup:377
Create a numbered dir with a cleanup lock and remove old ones.
:::
:::{doc} fnmatch_ex:419
A port of FNMatcher from py.path.common which works with PurePath() instances.

The difference between this algorithm and PurePath.match() is that the
latter matches "**" glob expressions for each part of the path, while
this algorithm uses the whole path instead.

For example:
    "tests/foo/bar/doc/test_foo.py" matches pattern "tests/**/doc/test*.py"
    with this algorithm, but not with PurePath.match().

This algorithm was ported to keep backward-compatibility with existing
settings which assume paths match according this logic.

References:
* https://bugs.python.org/issue29249
* https://bugs.python.org/issue34731
:::
:::{doc} symlink_or_skip:460
Make a symlink, or skip the test in case symlinks are not supported.
:::
:::{doc} ImportMode:472
Possible values for `mode` parameter of `import_path`.
:::
:::{doc} ImportPathMismatchError:480
Raised on import_path() if there is a mismatch of __file__'s.

This can happen when `import_path` is called multiple times with different filenames that has
the same basename but reside in packages
(for example "/tests1/test_foo.py" and "/tests2/test_foo.py").
:::
:::{doc} import_path:489
Import and return a module from the given path, which can be a file (a module) or
a directory (a package).

:param path:
    Path to the file to import.

:param mode:
    Controls the underlying import mechanism that will be used:

    * ImportMode.prepend: the directory containing the module (or package, taking
      `__init__.py` files into account) will be put at the *start* of `sys.path` before
      being imported with `importlib.import_module`.

    * ImportMode.append: same as `prepend`, but the directory will be appended
      to the end of `sys.path`, if not already in `sys.path`.

    * ImportMode.importlib: uses more fine control mechanisms provided by `importlib`
      to import the module, which avoids having to muck with `sys.path` at all. It effectively
      allows having same-named test modules in different places.

:param root:
    Used as an anchor when mode == ImportMode.importlib to obtain
    a unique name for the module being imported so it can safely be stored
    into ``sys.modules``.

:param consider_namespace_packages:
    If True, consider namespace packages when resolving module names.

:raises ImportPathMismatchError:
    If after importing the given `path` and the module `__file__`
    are different. Only raised in `prepend` and `append` modes.
:::
:::{doc} _import_module_using_spec:615
Tries to import a module by its canonical name, path, and its parent location.

:param module_name:
    The expected module name, will become the key of `sys.modules`.

:param module_path:
    The file path of the module, for example `/foo/bar/test_demo.py`.
    If module is a package, pass the path to the  `__init__.py` of the package.
    If module is a namespace package, pass directory path.

:param module_location:
    The parent location of the module.
    If module is a package, pass the directory containing the `__init__.py` file.

:param insert_modules:
    If True, will call `insert_missing_modules` to create empty intermediate modules
    with made-up module names (when importing test files not reachable from `sys.path`).

Example 1 of parent_module_*:

    module_name:        "a.b.c.demo"
    module_path:        Path("a/b/c/demo.py")
    module_location:    Path("a/b/c/")
    if "a.b.c" is package ("a/b/c/__init__.py" exists), then
        parent_module_name:         "a.b.c"
        parent_module_path:         Path("a/b/c/__init__.py")
        parent_module_location:     Path("a/b/c/")
    else:
        parent_module_name:         "a.b.c"
        parent_module_path:         Path("a/b/c")
        parent_module_location:     Path("a/b/")

Example 2 of parent_module_*:

    module_name:        "a.b.c"
    module_path:        Path("a/b/c/__init__.py")
    module_location:    Path("a/b/c/")
    if  "a.b" is package ("a/b/__init__.py" exists), then
        parent_module_name:         "a.b"
        parent_module_path:         Path("a/b/__init__.py")
        parent_module_location:     Path("a/b/")
    else:
        parent_module_name:         "a.b"
        parent_module_path:         Path("a/b/")
        parent_module_location:     Path("a/")
:::
:::{doc} spec_matches_module_path:728
Return true if the given ModuleSpec can be used to import the given module path.
:::
:::{doc} module_name_from_path:760
Return a dotted module name based on the given path, anchored on root.

For example: path="projects/src/tests/test_foo.py" and root="/projects", the
resulting module name will be "src.tests.test_foo".
:::
:::{doc} insert_missing_modules:791
Used by ``import_path`` to create intermediate modules when using mode=importlib.

When we want to import a module as "src.tests.test_foo" for example, we need
to create empty modules "src" and "src.tests" after inserting "src.tests.test_foo",
otherwise "src.tests.test_foo" is not importable by ``__import__``.
:::
:::{doc} resolve_package_path:829
Return the Python package path by looking for the last
directory upwards which still contains an __init__.py.

Returns None if it cannot be determined.
:::
:::{doc} resolve_pkg_root_and_module_name:846
Return the path to the directory of the root package that contains the
given Python file, and its module name:

    src/
        app/
            __init__.py
            core/
                __init__.py
                models.py

Passing the full path to `models.py` will yield Path("src") and "app.core.models".

If consider_namespace_packages is True, then we additionally check upwards in the hierarchy
for namespace packages:

https://packaging.python.org/en/latest/guides/packaging-namespace-packages

Raises CouldNotResolvePathError if the given path does not belong to a package (missing any __init__.py files).
:::
:::{doc} is_importable:890
Return if the given module path could be imported normally by Python, akin to the user
entering the REPL and importing the corresponding module name directly, and corresponds
to the module_path specified.

:param module_name:
    Full module name that we want to check if is importable.
    For example, "app.models".

:param module_path:
    Full path to the python module/package we want to check if is importable.
    For example, "/projects/src/app/models.py".
:::
:::{doc} compute_module_name:916
Compute a module name based on a path and a root anchor.
:::
:::{doc} CouldNotResolvePathError:936
Custom exception raised by resolve_pkg_root_and_module_name.
:::
:::{doc} scandir:940
Scan a directory recursively, in breadth-first order.

The returned entries are sorted according to the given key.
The default is to sort by name.
:::
:::{doc} visit:965
Walk a directory recursively, in breadth-first order.

The `recurse` predicate determines whether a directory is recursed.

Entries at each directory level are sorted.
:::
:::{doc} absolutepath:981
Convert a path to an absolute path using os.path.abspath.

Prefer this over Path.resolve() (see #6523).
Prefer this over Path.absolute() (not public, doesn't normalize).
:::
:::{doc} commonpath:990
Return the common part shared with the other path, or None if there is
no common part.

If one path is relative and one is absolute, returns None.
:::
:::{doc} bestrelpath:1002
Return a string which is a relative path from directory to dest such
that directory/bestrelpath == dest.

The paths must be either both absolute or both relative.

If no such path can be determined, returns dest.
:::
:::{doc} safe_exists:1031
Like Path.exists(), but account for input arguments that might be too long (#11394).
:::
**Imports**: `__future__.annotations`, `atexit`, `contextlib`, `enum.Enum`, `errno.EBADF`, `errno.ELOOP`, `errno.ENOENT`, `errno.ENOTDIR`, `fnmatch`, `functools.partial`, `importlib.machinery.ModuleSpec`, `importlib.machinery.PathFinder`, `importlib.util`, `itertools`, `os`, `os.path.expanduser`, `os.path.expandvars`, `os.path.isabs`, `os.path.sep`, `pathlib.Path`, `pathlib.PurePath`, `posixpath.sep`, `shutil`, `sys`, `types`, `types.ModuleType`, `typing.Any`, `typing.Callable`, `typing.Iterable`, `typing.Iterator`, `typing.TypeVar`, `uuid`, `warnings`, `_pytest.compat.assert_never`, `_pytest.outcomes.skip`, `_pytest.warning_types.PytestWarning`, `importlib._bootstrap_external._NamespaceLoader`, `importlib.machinery.NamespaceLoader`, `stat`
**Type References**: [[CouldNotResolvePathError]], [[ImportMode]], [[ImportPathMismatchError]], [[ModuleType]], [[None]], [[Path]]

### Interface
- `_ignore_error`(exception: Exception) -> bool
- `get_lock_path`(path: _AnyPurePath) -> _AnyPurePath
- `on_rm_rf_error`(func: Callable[<ast.Tuple object at 0x122198150>] | None, path: str, excinfo: BaseException | tuple[<ast.Tuple object at 0x12218bb10>]) -> bool
- `ensure_extended_length_path`(path: Path) -> Path
- `get_extended_length_path_str`(path: str) -> str
- `rm_rf`(path: Path) -> None
- `find_prefixed`(root: Path, prefix: str) -> Iterator[os.DirEntry[str]]
- `extract_suffixes`(iter: Iterable[os.DirEntry[str]], prefix: str) -> Iterator[str]
- `find_suffixes`(root: Path, prefix: str) -> Iterator[str]
- `parse_num`(maybe_num: str) -> int
- `_force_symlink`(root: Path, target: str | PurePath, link_to: str | Path) -> None
- `make_numbered_dir`(root: Path, prefix: str, mode: int) -> Path
- `create_cleanup_lock`(p: Path) -> Path
- `register_cleanup_lock_removal`(lock_path: Path, register: Any) -> Any
- `maybe_delete_a_numbered_dir`(path: Path) -> None
- `ensure_deletable`(path: Path, consider_lock_dead_if_created_before: float) -> bool
- `try_cleanup`(path: Path, consider_lock_dead_if_created_before: float) -> None
- `cleanup_candidates`(root: Path, prefix: str, keep: int) -> Iterator[Path]
- `cleanup_dead_symlinks`(root: Path) -> None
- `cleanup_numbered_dir`(root: Path, prefix: str, keep: int, consider_lock_dead_if_created_before: float) -> None
- `make_numbered_dir_with_cleanup`(root: Path, prefix: str, keep: int, lock_timeout: float, mode: int) -> Path
- `resolve_from_str`(input: str, rootpath: Path) -> Path
- `fnmatch_ex`(pattern: str, path: str | os.PathLike[str]) -> bool
- `parts`(s: str) -> set[str]
- `symlink_or_skip`(src: os.PathLike[str] | str, dst: os.PathLike[str] | str) -> None
- `import_path`(path: str | os.PathLike[str]) -> ModuleType
- `_import_module_using_spec`(module_name: str, module_path: Path, module_location: Path) -> ModuleType | None
- `spec_matches_module_path`(module_spec: ModuleSpec | None, module_path: Path) -> bool
- `module_name_from_path`(path: Path, root: Path) -> str
- `insert_missing_modules`(modules: dict[<ast.Tuple object at 0x122243010>], module_name: str) -> None
- `resolve_package_path`(path: Path) -> Path | None
- `resolve_pkg_root_and_module_name`(path: Path) -> tuple[<ast.Tuple object at 0x122257ed0>]
- `is_importable`(module_name: str, module_path: Path) -> bool
- `compute_module_name`(root: Path, module_path: Path) -> str | None
- `scandir`(path: str | os.PathLike[str], sort_key: Callable[<ast.Tuple object at 0x1222645d0>]) -> list[os.DirEntry[str]]
- `visit`(path: str | os.PathLike[str], recurse: Callable[<ast.Tuple object at 0x1222672d0>]) -> Iterator[os.DirEntry[str]]
- `absolutepath`(path: str | os.PathLike[str]) -> Path
- `commonpath`(path1: Path, path2: Path) -> Path | None
- `bestrelpath`(directory: Path, dest: Path) -> str
- `safe_exists`(p: Path) -> bool
- `chmod_rw`(p: str) -> None
- `cleanup_on_exit`(lock_path: Path, original_pid: int) -> None
- `_is_same`(f1: str, f2: str) -> bool

### Implementation
**ImportMode**

**ImportPathMismatchError**

**CouldNotResolvePathError**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/pathlib.py`  
**Dependencies**: `__future__.annotations`, `atexit`, `contextlib`, `enum.Enum`, `errno.EBADF`, `errno.ELOOP`, `errno.ENOENT`, `errno.ENOTDIR`, `fnmatch`, `functools.partial`, `importlib.machinery.ModuleSpec`, `importlib.machinery.PathFinder`, `importlib.util`, `itertools`, `os`, `os.path.expanduser`, `os.path.expandvars`, `os.path.isabs`, `os.path.sep`, `pathlib.Path`, `pathlib.PurePath`, `posixpath.sep`, `shutil`, `sys`, `types`, `types.ModuleType`, `typing.Any`, `typing.Callable`, `typing.Iterable`, `typing.Iterator`, `typing.TypeVar`, `uuid`, `warnings`, `_pytest.compat.assert_never`, `_pytest.outcomes.skip`, `_pytest.warning_types.PytestWarning`, `importlib._bootstrap_external._NamespaceLoader`, `importlib.machinery.NamespaceLoader`, `stat`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.scope
:::{doc} Scope:22
Represents one of the possible fixture scopes in pytest.

Scopes are ordered from lower to higher, that is:

          ->>> higher ->>>

Function < Class < Module < Package < Session

          <<<- lower  <<<-
:::
**Imports**: `__future__.annotations`, `enum.Enum`, `functools.total_ordering`, `typing.Literal`, `_pytest.outcomes.fail`
**Type References**: [[Scope]]

### Interface
- `next_lower`() -> Scope
- `next_higher`() -> Scope
- `__lt__`(other: Scope) -> bool
- `from_user`(scope_name: _ScopeName, descr: str, where: str | None) -> Scope

### Implementation
**Scope**
  - Function: _ScopeName
  - Class: _ScopeName
  - Module: _ScopeName
  - Package: _ScopeName
  - Session: _ScopeName
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/scope.py`  
**Dependencies**: `__future__.annotations`, `enum.Enum`, `functools.total_ordering`, `typing.Literal`, `_pytest.outcomes.fail`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.freeze_support
:::{doc} freeze_includes:10
Return a list of module names used by pytest that should be
included by cx_freeze.
:::
:::{doc} _iter_all_modules:19
Iterate over the names of all modules that can be found in the given
package, recursively.

    >>> import _pytest
    >>> list(_iter_all_modules(_pytest))
    ['_pytest._argcomplete', '_pytest._code.code', ...]
:::
**Imports**: `__future__.annotations`, `types`, `typing.Iterator`, `_pytest`, `os`, `pkgutil`
### Interface
- `freeze_includes`() -> list[str]
- `_iter_all_modules`(package: str | types.ModuleType, prefix: str) -> Iterator[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/freeze_support.py`  
**Dependencies**: `__future__.annotations`, `types`, `typing.Iterator`, `_pytest`, `os`, `pkgutil`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.fixtures
:::{doc} getfixturemarker:156
Return fixturemarker or None if it doesn't exist or raised
exceptions.
:::
:::{doc} get_parametrized_fixture_argkeys:183
Return list of keys for all parametrized arguments which match
the specified scope.
:::
:::{doc} FuncFixtureInfo:297
Fixture-related information for a fixture-requesting item (e.g. test
function).

This is used to examine the fixtures which an item requests statically
(known during collection). This includes autouse fixtures, fixtures
requested by the `usefixtures` marker, fixtures requested in the function
parameters, and the transitive closure of these.

An item may also request fixtures dynamically (using `request.getfixturevalue`);
these are not reflected here.
:::
:::{doc} FixtureRequest:355
The type of the ``request`` fixture.

A request object gives access to the requesting test context and has a
``param`` attribute in case the fixture is parametrized.
:::
:::{doc} TopRequest:662
The type of the ``request`` fixture in a test function.
:::
:::{doc} SubRequest:704
The type of the ``request`` fixture in a fixture function requested
(transitively) by a test function.
:::
:::{doc} FixtureLookupError:791
Could not return a requested fixture (missing or invalid).
:::
:::{doc} _teardown_yield_fixture:902
Execute the teardown of a fixture function by advancing the iterator
after the yield and ensure the iteration ends (if not it means there is
more than one yield in the function).
:::
:::{doc} FixtureDef:944
A container for a fixture definition.

Note: At this time, only explicitly documented fields and methods are
considered public stable API.
:::
:::{doc} resolve_fixture_function:1105
Get the actual callable that can be called to obtain the fixture
value.
:::
:::{doc} pytest_fixture_setup:1129
Execution of fixture setup.
:::
:::{doc} wrap_function_to_error_out_if_called_directly:1153
Wrap the given fixture function so we can raise an error about it being called directly,
instead of used as an argument in a test function.
:::
:::{doc} fixture:1243
Decorator to mark a fixture factory function.

This decorator can be used, with or without parameters, to define a
fixture function.

The name of the fixture function can later be referenced to cause its
invocation ahead of running tests: test modules or classes can use the
``pytest.mark.usefixtures(fixturename)`` marker.

Test functions can directly use fixture names as input arguments in which
case the fixture instance returned from the fixture function will be
injected.

Fixtures can provide their values to test functions using ``return`` or
``yield`` statements. When using ``yield`` the code block after the
``yield`` statement is executed as teardown code regardless of the test
outcome, and must yield exactly once.

:param scope:
    The scope for which this fixture is shared; one of ``"function"``
    (default), ``"class"``, ``"module"``, ``"package"`` or ``"session"``.

    This parameter may also be a callable which receives ``(fixture_name, config)``
    as parameters, and must return a ``str`` with one of the values mentioned above.

    See :ref:`dynamic scope` in the docs for more information.

:param params:
    An optional list of parameters which will cause multiple invocations
    of the fixture function and all of the tests using it. The current
    parameter is available in ``request.param``.

:param autouse:
    If True, the fixture func is activated for all tests that can see it.
    If False (the default), an explicit reference is needed to activate
    the fixture.

:param ids:
    Sequence of ids each corresponding to the params so that they are
    part of the test id. If no ids are provided they will be generated
    automatically from the params.

:param name:
    The name of the fixture. This defaults to the name of the decorated
    function. If a fixture is used in the same module in which it is
    defined, the function name of the fixture will be shadowed by the
    function arg that requests the fixture; one way to resolve this is to
    name the decorated function ``fixture_<fixturename>`` and then use
    ``@pytest.fixture(name='<fixturename>')``.
:::
:::{doc} yield_fixture:1318
(Return a) decorator to mark a yield-fixture factory function.

.. deprecated:: 3.0
    Use :py:func:`pytest.fixture` directly instead.
:::
:::{doc} pytestconfig:1345
Session-scoped fixture that returns the session's :class:`pytest.Config`
object.

Example::

    def test_foo(pytestconfig):
        if pytestconfig.get_verbosity() > 0:
            ...
:::
:::{doc} _get_direct_parametrize_args:1395
Return all direct parametrization arguments of a node, so we don't
mistake them for fixtures.

Check https://github.com/pytest-dev/pytest/issues/5036.

These things are done later as well when dealing with parametrization
so this could be improved.
:::
:::{doc} deduplicate_names:1414
De-duplicate the sequence of names while keeping the original order.
:::
:::{doc} FixtureManager:1420
pytest fixture definitions and information is stored and managed
from this class.

During collection fm.parsefactories() is called multiple times to parse
fixture function definitions into FixtureDef objects and internal
data structures.

During collection of test functions, metafunc-mechanics instantiate
a FuncFixtureInfo object which is cached per node/func-name.
This FuncFixtureInfo object is later retrieved by Function nodes
which themselves offer a fixturenames attribute.

The FuncFixtureInfo object holds information about fixtures and FixtureDefs
relevant for a particular function. An initial list of fixtures is
assembled like this:

- ini-defined usefixtures
- autouse-marked fixtures along the collection chain up from the function
- usefixtures markers at module/class/function level
- test function funcargs

Subsequently the funcfixtureinfo.fixturenames attribute is computed
as the closure of the fixtures needed to setup the initial fixtures,
i.e. fixtures needed by fixture functions themselves are appended
to the fixturenames list.

Upon the test-setup phases all fixturenames are instantiated, retrieved
by a lookup of their FuncFixtureInfo.
:::
**Imports**: `__future__.annotations`, `abc`, `collections.defaultdict`, `collections.deque`, `dataclasses`, `functools`, `inspect`, `os`, `pathlib.Path`, `sys`, `types`, `typing.AbstractSet`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.Dict`, `typing.Final`, `typing.final`, `typing.Generator`, `typing.Generic`, `typing.Iterable`, `typing.Iterator`, `typing.Mapping`, `typing.MutableMapping`, `typing.NoReturn`, `typing.Optional`, `typing.OrderedDict`, `typing.overload`, `typing.Sequence`, `typing.Tuple`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `typing.Union`, `warnings`, `_pytest`, `_pytest.nodes`, `_pytest._code.getfslineno`, `_pytest._code.Source`, `_pytest._code.code.FormattedExcinfo`, `_pytest._code.code.TerminalRepr`, `_pytest._io.TerminalWriter`, `_pytest.compat._PytestWrapper`, `_pytest.compat.assert_never`, `_pytest.compat.get_real_func`, `_pytest.compat.get_real_method`, `_pytest.compat.getfuncargnames`, `_pytest.compat.getimfunc`, `_pytest.compat.getlocation`, `_pytest.compat.is_generator`, `_pytest.compat.NOTSET`, `_pytest.compat.NotSetType`, `_pytest.compat.safe_getattr`, `_pytest.compat.safe_isclass`, `_pytest.config._PluggyPlugin`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.deprecated.MARKED_FIXTURE`, `_pytest.deprecated.YIELD_FIXTURE`, `_pytest.main.Session`, `_pytest.mark.Mark`, `_pytest.mark.ParameterSet`, `_pytest.mark.structures.MarkDecorator`, `_pytest.outcomes.fail`, `_pytest.outcomes.skip`, `_pytest.outcomes.TEST_OUTCOME`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.bestrelpath`, `_pytest.scope._ScopeName`, `_pytest.scope.HIGH_SCOPES`, `_pytest.scope.Scope`, `exceptiongroup.BaseExceptionGroup`, `_pytest.python.CallSpec2`, `_pytest.python.Function`, `_pytest.python.Metafunc`, `_pytest.python.Package`, `_pytest.python`, `_pytest.main.wrap_session`, `_pytest.config`, `_pytest.main.wrap_session`, `_pytest.config`
**Type References**: [[BaseException]], [[CallSpec2]], [[Callable]], [[FixtureArgKey]], [[FixtureDef]], [[FixtureFunctionMarker]], [[FixtureLookupError]], [[FixtureLookupErrorRepr]], [[FixtureManager]], [[FixtureRequest]], [[FixtureValue]], [[FuncFixtureInfo]], [[InitVar]], [[Item]], [[Node]], [[None]], [[OrderedDict]], [[OrderedSet]], [[Path]], [[PseudoFixtureDef]], [[Scope]], [[Sequence]], [[SubRequest]], [[TopRequest]], [[dataclasses.InitVar]], [[nodes.Item]], [[nodes.Node]]

### Interface
- `pytest_sessionstart`(session: Session) -> None
- `get_scope_package`(node: nodes.Item, fixturedef: FixtureDef[object]) -> nodes.Node | None
- `get_scope_node`(node: nodes.Node, scope: Scope) -> nodes.Node | None
- `getfixturemarker`(obj: object) -> FixtureFunctionMarker | None
- `get_parametrized_fixture_argkeys`(item: nodes.Item, scope: Scope) -> Iterator[FixtureArgKey]
- `reorder_items`(items: Sequence[nodes.Item]) -> list[nodes.Item]
- `reorder_items_atscope`(items: OrderedSet[nodes.Item], argkeys_by_item: Mapping[<ast.Tuple object at 0x1222a99d0>], items_by_argkey: Mapping[<ast.Tuple object at 0x1222a92d0>], scope: Scope) -> OrderedSet[nodes.Item]
- `call_fixture_func`(fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest) -> FixtureValue
- `_teardown_yield_fixture`() -> None
- `_eval_scope_callable`(scope_callable: Callable[<ast.Tuple object at 0x1223cd110>], fixture_name: str, config: Config) -> _ScopeName
- `resolve_fixture_function`(fixturedef: FixtureDef[FixtureValue], request: FixtureRequest) -> _FixtureFunc[FixtureValue]
- `pytest_fixture_setup`(fixturedef: FixtureDef[FixtureValue], request: SubRequest) -> FixtureValue
- `wrap_function_to_error_out_if_called_directly`(function: FixtureFunction, fixture_marker: FixtureFunctionMarker) -> FixtureFunction
- `fixture`(fixture_function: FixtureFunction | None) -> FixtureFunctionMarker | FixtureFunction
- `yield_fixture`() -> Any
- `pytestconfig`(request: FixtureRequest) -> Config
- `pytest_addoption`(parser: Parser) -> None
- `pytest_cmdline_main`(config: Config) -> int | ExitCode | None
- `_get_direct_parametrize_args`(node: nodes.Node) -> set[str]
- `deduplicate_names`() -> tuple[<ast.Tuple object at 0x122451e50>]
- `show_fixtures_per_test`(config: Config) -> int | ExitCode
- `_pretty_fixture_path`(invocation_dir: Path) -> str
- `_show_fixtures_per_test`(config: Config, session: Session) -> None
- `showfixtures`(config: Config) -> int | ExitCode
- `_showfixtures_main`(config: Config, session: Session) -> None
- `write_docstring`(tw: TerminalWriter, doc: str, indent: str) -> None
- `prune_dependency_tree`() -> None
- `__init__`(session: Session) -> None
- `_fixturemanager`() -> FixtureManager
- `_scope`() -> Scope
- `scope`() -> _ScopeName
- `_check_scope`(requested_fixturedef: FixtureDef[object] | PseudoFixtureDef[object], requested_scope: Scope) -> None
- `fixturenames`() -> list[str]
- `node`() -> Any
- `config`() -> Config
- `function`() -> Any
- `cls`() -> Any
- `instance`() -> Any
- `module`() -> Any
- `path`() -> Path
- `keywords`() -> MutableMapping[<ast.Tuple object at 0x122393190>]
- `session`() -> Session
- `addfinalizer`(finalizer: Callable[<ast.Tuple object at 0x1223e2410>]) -> None
- `applymarker`(marker: str | MarkDecorator) -> None
- `raiseerror`(msg: str | None) -> NoReturn
- `getfixturevalue`(argname: str) -> Any
- `_iter_chain`() -> Iterator[SubRequest]
- `_get_active_fixturedef`(argname: str) -> FixtureDef[object] | PseudoFixtureDef[object]
- `_check_fixturedef_without_param`(fixturedef: FixtureDef[object]) -> None
- `_get_fixturestack`() -> list[FixtureDef[Any]]
- `__repr__`() -> str
- `_fillfixtures`() -> None
- `_format_fixturedef_line`(fixturedef: FixtureDef[object]) -> str
- `formatrepr`() -> FixtureLookupErrorRepr
- `toterminal`(tw: TerminalWriter) -> None
- `finish`(request: SubRequest) -> None
- `execute`(request: SubRequest) -> FixtureValue
- `cache_key`(request: SubRequest) -> object
- `result`() -> Any
- `__post_init__`(_ispytest: bool) -> None
- `__call__`(function: FixtureFunction) -> FixtureFunction
- `getfixtureinfo`(node: nodes.Item, func: Callable[<ast.Tuple object at 0x12245cf50>] | None, cls: type | None) -> FuncFixtureInfo
- `pytest_plugin_registered`(plugin: _PluggyPlugin, plugin_name: str) -> None
- `_getautousenames`(node: nodes.Node) -> Iterator[str]
- `_getusefixturesnames`(node: nodes.Item) -> Iterator[str]
- `getfixtureclosure`(parentnode: nodes.Node, initialnames: tuple[<ast.Tuple object at 0x122475350>], ignore_args: AbstractSet[str]) -> tuple[<ast.Tuple object at 0x122481e90>]
- `pytest_generate_tests`(metafunc: Metafunc) -> None
- `pytest_collection_modifyitems`(items: list[nodes.Item]) -> None
- `_register_fixture`() -> None
- `parsefactories`(node_or_obj: nodes.Node | object, nodeid: str | NotSetType | None) -> None
- `getfixturedefs`(argname: str, node: nodes.Node) -> Sequence[FixtureDef[Any]] | None
- `_matchfactories`(fixturedefs: Iterable[FixtureDef[Any]], node: nodes.Node) -> Iterator[FixtureDef[Any]]
- `get_best_relpath`() -> str
- `write_fixture`(fixture_def: FixtureDef[object]) -> None
- `write_item`(item: nodes.Item) -> None
- `sort_by_scope`(arg_name: str) -> Scope
- `get_parametrize_mark_argnames`(mark: Mark) -> Sequence[str]

### Implementation
**PseudoFixtureDef**
  - cached_result: _FixtureCachedResult[FixtureValue]
  - _scope: Scope
**FixtureArgKey**
  - argname: str
  - param_index: int
  - scoped_item_path: Path | None
  - item_cls: type | None
**FuncFixtureInfo**
  - argnames: tuple[<ast.Tuple object at 0x1222d0190>]
  - initialnames: tuple[<ast.Tuple object at 0x1222c7d90>]
  - names_closure: list[str]
  - name2fixturedefs: dict[<ast.Tuple object at 0x1222c7750>]
  - closure: set[str]
**FixtureRequest**
  - node: nodes.Node
**TopRequest**

**SubRequest**
  - node: nodes.Node | None
**FixtureLookupError**
  - tblines: list[str]
**FixtureLookupErrorRepr**

**FixtureDef**
  - exceptions: list[BaseException]
**FixtureFunctionMarker**
  - scope: _ScopeName | Callable[<ast.Tuple object at 0x122415050>]
  - params: tuple[<ast.Tuple object at 0x122415590>] | None
  - autouse: bool
  - ids: tuple[<ast.Tuple object at 0x122415c90>] | Callable[<ast.Tuple object at 0x122416090>] | None
  - name: str | None
  - _ispytest: dataclasses.InitVar[bool]
**FixtureManager**
  - arg2fixturedefs: dict[<ast.Tuple object at 0x122475d90>]
  - holderobj_tp: object
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/fixtures.py`  
**Dependencies**: `__future__.annotations`, `abc`, `collections.defaultdict`, `collections.deque`, `dataclasses`, `functools`, `inspect`, `os`, `pathlib.Path`, `sys`, `types`, `typing.AbstractSet`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.Dict`, `typing.Final`, `typing.final`, `typing.Generator`, `typing.Generic`, `typing.Iterable`, `typing.Iterator`, `typing.Mapping`, `typing.MutableMapping`, `typing.NoReturn`, `typing.Optional`, `typing.OrderedDict`, `typing.overload`, `typing.Sequence`, `typing.Tuple`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `typing.Union`, `warnings`, `_pytest`, `_pytest.nodes`, `_pytest._code.getfslineno`, `_pytest._code.Source`, `_pytest._code.code.FormattedExcinfo`, `_pytest._code.code.TerminalRepr`, `_pytest._io.TerminalWriter`, `_pytest.compat._PytestWrapper`, `_pytest.compat.assert_never`, `_pytest.compat.get_real_func`, `_pytest.compat.get_real_method`, `_pytest.compat.getfuncargnames`, `_pytest.compat.getimfunc`, `_pytest.compat.getlocation`, `_pytest.compat.is_generator`, `_pytest.compat.NOTSET`, `_pytest.compat.NotSetType`, `_pytest.compat.safe_getattr`, `_pytest.compat.safe_isclass`, `_pytest.config._PluggyPlugin`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.deprecated.MARKED_FIXTURE`, `_pytest.deprecated.YIELD_FIXTURE`, `_pytest.main.Session`, `_pytest.mark.Mark`, `_pytest.mark.ParameterSet`, `_pytest.mark.structures.MarkDecorator`, `_pytest.outcomes.fail`, `_pytest.outcomes.skip`, `_pytest.outcomes.TEST_OUTCOME`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.bestrelpath`, `_pytest.scope._ScopeName`, `_pytest.scope.HIGH_SCOPES`, `_pytest.scope.Scope`, `exceptiongroup.BaseExceptionGroup`, `_pytest.python.CallSpec2`, `_pytest.python.Function`, `_pytest.python.Metafunc`, `_pytest.python.Package`, `_pytest.python`, `_pytest.main.wrap_session`, `_pytest.config`, `_pytest.main.wrap_session`, `_pytest.config`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.cacheprovider
:::{doc} Cache:57
Instance of the `cache` fixture.
:::
:::{doc} LFPlugin:319
Plugin which implements the --lf (run last-failing) option.
:::
:::{doc} NFPlugin:432
Plugin which implements the --nf (run new-first) option.
:::
:::{doc} cache:556
Return a cache object that can persist state between testing sessions.

cache.get(key, default)
cache.set(key, value)

Keys must be ``/`` separated strings, where the first part is usually the
name of your plugin or application to avoid clashes with other cache users.

Values can be any object handled by the json stdlib module.
:::
:::{doc} pytest_report_header:571
Display cachedir with --cache-show and if non-default.
:::
**Imports**: `__future__.annotations`, `dataclasses`, `errno`, `json`, `os`, `pathlib.Path`, `tempfile`, `typing.final`, `typing.Generator`, `typing.Iterable`, `pathlib.resolve_from_str`, `pathlib.rm_rf`, `reports.CollectReport`, `_pytest.nodes`, `_pytest._io.TerminalWriter`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.hookimpl`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.fixture`, `_pytest.fixtures.FixtureRequest`, `_pytest.main.Session`, `_pytest.nodes.Directory`, `_pytest.nodes.File`, `_pytest.reports.TestReport`, `pprint.pformat`, `warnings`, `_pytest.warning_types.PytestCacheWarning`, `_pytest.main.wrap_session`
**Type References**: [[Cache]], [[Config]], [[Item]], [[LFPlugin]], [[LFPluginCollSkipfiles]], [[LFPluginCollWrapper]], [[NFPlugin]], [[Path]], [[nodes.Item]]

### Interface
- `pytest_addoption`(parser: Parser) -> None
- `pytest_cmdline_main`(config: Config) -> int | ExitCode | None
- `pytest_configure`(config: Config) -> None
- `cache`(request: FixtureRequest) -> Cache
- `pytest_report_header`(config: Config) -> str | None
- `cacheshow`(config: Config, session: Session) -> int
- `__init__`(config: Config) -> None
- `for_config`(config: Config) -> Cache
- `clear_cache`(cachedir: Path, _ispytest: bool) -> None
- `cache_dir_from_config`(config: Config) -> Path
- `warn`(fmt: str) -> None
- `_mkdir`(path: Path) -> None
- `mkdir`(name: str) -> Path
- `_getvaluepath`(key: str) -> Path
- `get`(key: str) -> Any
- `set`(key: str, value: object) -> None
- `_ensure_cache_dir_and_supporting_files`() -> None
- `pytest_make_collect_report`(collector: nodes.Collector) -> CollectReport | None
- `get_last_failed_paths`() -> set[Path]
- `pytest_report_collectionfinish`() -> str | None
- `pytest_runtest_logreport`(report: TestReport) -> None
- `pytest_collectreport`(report: CollectReport) -> None
- `pytest_collection_modifyitems`(items: list[nodes.Item]) -> Generator[None]
- `pytest_sessionfinish`() -> None
- `_get_increasing_order`(items: Iterable[nodes.Item]) -> list[nodes.Item]
- `sort_key`(node: nodes.Item | nodes.Collector) -> bool

### Implementation
**Cache**
  - _cachedir: Path
  - _config: Config
**LFPluginCollWrapper**

**LFPluginCollSkipfiles**

**LFPlugin**

**NFPlugin**
  - new_items: dict[<ast.Tuple object at 0x12257ae50>]
  - other_items: dict[<ast.Tuple object at 0x12257b390>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/cacheprovider.py`  
**Dependencies**: `__future__.annotations`, `dataclasses`, `errno`, `json`, `os`, `pathlib.Path`, `tempfile`, `typing.final`, `typing.Generator`, `typing.Iterable`, `pathlib.resolve_from_str`, `pathlib.rm_rf`, `reports.CollectReport`, `_pytest.nodes`, `_pytest._io.TerminalWriter`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.hookimpl`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated.check_ispytest`, `_pytest.fixtures.fixture`, `_pytest.fixtures.FixtureRequest`, `_pytest.main.Session`, `_pytest.nodes.Directory`, `_pytest.nodes.File`, `_pytest.reports.TestReport`, `pprint.pformat`, `warnings`, `_pytest.warning_types.PytestCacheWarning`, `_pytest.main.wrap_session`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.warning_types
:::{doc} PytestWarning:13
Base class for all warnings emitted by pytest.
:::
:::{doc} PytestAssertRewriteWarning:20
Warning emitted by the pytest assert rewrite module.
:::
:::{doc} PytestCacheWarning:27
Warning emitted by the cache plugin in various situations.
:::
:::{doc} PytestConfigWarning:34
Warning emitted for configuration issues.
:::
:::{doc} PytestCollectionWarning:41
Warning emitted when pytest is not able to collect a file or symbol in a module.
:::
:::{doc} PytestDeprecationWarning:47
Warning class for features that will be removed in a future version.
:::
:::{doc} PytestRemovedIn9Warning:53
Warning class for features that will be removed in pytest 9.
:::
:::{doc} PytestReturnNotNoneWarning:59
Warning emitted when a test function is returning value other than None.
:::
:::{doc} PytestExperimentalApiWarning:66
Warning category used to denote experiments in pytest.

Use sparingly as the API might change or even be removed completely in a
future version.
:::
:::{doc} PytestUnhandledCoroutineWarning:81
Warning emitted for an unhandled coroutine.

A coroutine was encountered when collecting test functions, but was not
handled by any async-aware plugin.
Coroutine test functions are not natively supported.
:::
:::{doc} PytestUnknownMarkWarning:93
Warning emitted on use of unknown markers.

See :ref:`mark` for details.
:::
:::{doc} PytestUnraisableExceptionWarning:103
An unraisable exception was reported.

Unraisable exceptions are exceptions raised in :meth:`__del__ <object.__del__>`
implementations and similar situations when the exception cannot be raised
as normal.
:::
:::{doc} PytestUnhandledThreadExceptionWarning:115
An unhandled exception occurred in a :class:`~threading.Thread`.

Such exceptions don't propagate normally.
:::
:::{doc} UnformattedWarning:129
A warning meant to be formatted during runtime.

This is used to hold warnings that need to format their message at runtime,
as opposed to a direct message.
:::
:::{doc} warn_explicit_for:144
Issue the warning :param:`message` for the definition of the given :param:`method`

this helps to log warnings for functions defined prior to finding an issue with them
(like hook wrappers being marked in a legacy mechanism)
:::
**Imports**: `__future__.annotations`, `dataclasses`, `inspect`, `types.FunctionType`, `typing.Any`, `typing.final`, `typing.Generic`, `typing.TypeVar`, `warnings`
**Type References**: [[PytestAssertRewriteWarning]], [[PytestCacheWarning]], [[PytestCollectionWarning]], [[PytestConfigWarning]], [[PytestDeprecationWarning]], [[PytestExperimentalApiWarning]], [[PytestRemovedIn9Warning]], [[PytestReturnNotNoneWarning]], [[PytestUnhandledCoroutineWarning]], [[PytestUnhandledThreadExceptionWarning]], [[PytestUnknownMarkWarning]], [[PytestUnraisableExceptionWarning]], [[PytestWarning]], [[UnformattedWarning]]

### Interface
- `warn_explicit_for`(method: FunctionType, message: PytestWarning) -> None
- `simple`(apiname: str) -> PytestExperimentalApiWarning
- `format`() -> _W

### Implementation
**PytestWarning**

**PytestAssertRewriteWarning**

**PytestCacheWarning**

**PytestConfigWarning**

**PytestCollectionWarning**

**PytestDeprecationWarning**

**PytestRemovedIn9Warning**

**PytestReturnNotNoneWarning**

**PytestExperimentalApiWarning**

**PytestUnhandledCoroutineWarning**

**PytestUnknownMarkWarning**

**PytestUnraisableExceptionWarning**

**PytestUnhandledThreadExceptionWarning**

**UnformattedWarning**
  - category: type[_W]
  - template: str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/warning_types.py`  
**Dependencies**: `__future__.annotations`, `dataclasses`, `inspect`, `types.FunctionType`, `typing.Any`, `typing.final`, `typing.Generic`, `typing.TypeVar`, `warnings`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.platformdirs.macos
:::{doc} MacOS:15
Platform directories for the macOS operating system.

Follows the guidance from
`Apple documentation <https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html>`_.
Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`,
`version <platformdirs.api.PlatformDirsABC.version>`,
`ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:::
**Imports**: `__future__.annotations`, `os.path`, `sys`, `typing.TYPE_CHECKING`, `api.PlatformDirsABC`, `pathlib.Path`
**Type References**: [[MacOS]]

### Interface
- `user_data_dir`() -> str
- `site_data_dir`() -> str
- `site_data_path`() -> Path
- `user_config_dir`() -> str
- `site_config_dir`() -> str
- `user_cache_dir`() -> str
- `site_cache_dir`() -> str
- `site_cache_path`() -> Path
- `user_state_dir`() -> str
- `user_log_dir`() -> str
- `user_documents_dir`() -> str
- `user_downloads_dir`() -> str
- `user_pictures_dir`() -> str
- `user_videos_dir`() -> str
- `user_music_dir`() -> str
- `user_desktop_dir`() -> str
- `user_runtime_dir`() -> str
- `site_runtime_dir`() -> str

### Implementation
**MacOS**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/platformdirs/macos.py`  
**Dependencies**: `__future__.annotations`, `os.path`, `sys`, `typing.TYPE_CHECKING`, `api.PlatformDirsABC`, `pathlib.Path`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.platformdirs.unix
:::{doc} Unix:23
On Unix/Linux, we follow the `XDG Basedir Spec <https://specifications.freedesktop.org/basedir-spec/basedir-spec-
latest.html>`_.

The spec allows overriding directories with environment variables. The examples shown are the default values,
alongside the name of the environment variable that overrides them. Makes use of the `appname
<platformdirs.api.PlatformDirsABC.appname>`, `version <platformdirs.api.PlatformDirsABC.version>`, `multipath
<platformdirs.api.PlatformDirsABC.multipath>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists
<platformdirs.api.PlatformDirsABC.ensure_exists>`.
:::
:::{doc} _get_user_dirs_folder:242
Return directory from user-dirs.dirs config file.

See https://freedesktop.org/wiki/Software/xdg-user-dirs/.
:::
**Imports**: `__future__.annotations`, `os`, `sys`, `configparser.ConfigParser`, `pathlib.Path`, `typing.Iterator`, `typing.NoReturn`, `api.PlatformDirsABC`, `os.getuid`
**Type References**: [[Unix]]

### Interface
- `_get_user_media_dir`(env_var: str, fallback_tilde_path: str) -> str
- `_get_user_dirs_folder`(key: str) -> str | None
- `getuid`() -> NoReturn
- `user_data_dir`() -> str
- `_site_data_dirs`() -> list[str]
- `site_data_dir`() -> str
- `user_config_dir`() -> str
- `_site_config_dirs`() -> list[str]
- `site_config_dir`() -> str
- `user_cache_dir`() -> str
- `site_cache_dir`() -> str
- `user_state_dir`() -> str
- `user_log_dir`() -> str
- `user_documents_dir`() -> str
- `user_downloads_dir`() -> str
- `user_pictures_dir`() -> str
- `user_videos_dir`() -> str
- `user_music_dir`() -> str
- `user_desktop_dir`() -> str
- `user_runtime_dir`() -> str
- `site_runtime_dir`() -> str
- `site_data_path`() -> Path
- `site_config_path`() -> Path
- `site_cache_path`() -> Path
- `iter_config_dirs`() -> Iterator[str]
- `iter_data_dirs`() -> Iterator[str]

### Implementation
**Unix**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/platformdirs/unix.py`  
**Dependencies**: `__future__.annotations`, `os`, `sys`, `configparser.ConfigParser`, `pathlib.Path`, `typing.Iterator`, `typing.NoReturn`, `api.PlatformDirsABC`, `os.getuid`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.platformdirs.version

**Imports**: `typing.Tuple`, `typing.Union`
**Type References**: [[VERSION_TUPLE]]

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/platformdirs/version.py`  
**Dependencies**: `typing.Tuple`, `typing.Union`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.platformdirs
:::{doc} user_data_dir:53
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: data directory tied to the user
:::
:::{doc} site_data_dir:77
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: data directory shared by users
:::
:::{doc} user_config_dir:101
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: config directory tied to the user
:::
:::{doc} site_config_dir:125
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: config directory shared by the users
:::
:::{doc} user_cache_dir:149
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: cache directory tied to the user
:::
:::{doc} site_cache_dir:173
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: cache directory tied to the user
:::
:::{doc} user_state_dir:197
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: state directory tied to the user
:::
:::{doc} user_log_dir:221
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: log directory tied to the user
:::
:::{doc} user_documents_dir:245
:returns: documents directory tied to the user
:::
:::{doc} user_downloads_dir:250
:returns: downloads directory tied to the user
:::
:::{doc} user_pictures_dir:255
:returns: pictures directory tied to the user
:::
:::{doc} user_videos_dir:260
:returns: videos directory tied to the user
:::
:::{doc} user_music_dir:265
:returns: music directory tied to the user
:::
:::{doc} user_desktop_dir:270
:returns: desktop directory tied to the user
:::
:::{doc} user_runtime_dir:275
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: runtime directory tied to the user
:::
:::{doc} site_runtime_dir:299
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: runtime directory shared by users
:::
:::{doc} user_data_path:323
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: data path tied to the user
:::
:::{doc} site_data_path:347
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param multipath: See `multipath <platformdirs.api.PlatformDirsABC.multipath>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: data path shared by users
:::
:::{doc} user_config_path:371
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: config path tied to the user
:::
:::{doc} site_config_path:395
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: config path shared by the users
:::
:::{doc} site_cache_path:419
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: cache directory tied to the user
:::
:::{doc} user_cache_path:443
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: cache path tied to the user
:::
:::{doc} user_state_path:467
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: state path tied to the user
:::
:::{doc} user_log_path:491
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: log path tied to the user
:::
:::{doc} user_documents_path:515
:returns: documents a path tied to the user
:::
:::{doc} user_downloads_path:520
:returns: downloads path tied to the user
:::
:::{doc} user_pictures_path:525
:returns: pictures path tied to the user
:::
:::{doc} user_videos_path:530
:returns: videos path tied to the user
:::
:::{doc} user_music_path:535
:returns: music path tied to the user
:::
:::{doc} user_desktop_path:540
:returns: desktop path tied to the user
:::
:::{doc} user_runtime_path:545
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: runtime path tied to the user
:::
:::{doc} site_runtime_path:569
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: runtime path shared by users
:::
**Imports**: `__future__.annotations`, `os`, `sys`, `typing.TYPE_CHECKING`, `api.PlatformDirsABC`, `version.__version__`, `version.__version_tuple__`, `pathlib.Path`, `typing.Literal`, `platformdirs.windows.Windows`, `platformdirs.macos.MacOS`, `platformdirs.unix.Unix`, `platformdirs.android._android_folder`, `platformdirs.android.Android`
### Interface
- `_set_platform_dir_class`() -> type[PlatformDirsABC]
- `user_data_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, roaming: bool, ensure_exists: bool) -> str
- `site_data_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, multipath: bool, ensure_exists: bool) -> str
- `user_config_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, roaming: bool, ensure_exists: bool) -> str
- `site_config_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, multipath: bool, ensure_exists: bool) -> str
- `user_cache_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> str
- `site_cache_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> str
- `user_state_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, roaming: bool, ensure_exists: bool) -> str
- `user_log_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> str
- `user_documents_dir`() -> str
- `user_downloads_dir`() -> str
- `user_pictures_dir`() -> str
- `user_videos_dir`() -> str
- `user_music_dir`() -> str
- `user_desktop_dir`() -> str
- `user_runtime_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> str
- `site_runtime_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> str
- `user_data_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, roaming: bool, ensure_exists: bool) -> Path
- `site_data_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, multipath: bool, ensure_exists: bool) -> Path
- `user_config_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, roaming: bool, ensure_exists: bool) -> Path
- `site_config_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, multipath: bool, ensure_exists: bool) -> Path
- `site_cache_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> Path
- `user_cache_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> Path
- `user_state_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, roaming: bool, ensure_exists: bool) -> Path
- `user_log_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> Path
- `user_documents_path`() -> Path
- `user_downloads_path`() -> Path
- `user_pictures_path`() -> Path
- `user_videos_path`() -> Path
- `user_music_path`() -> Path
- `user_desktop_path`() -> Path
- `user_runtime_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> Path
- `site_runtime_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> Path
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/platformdirs/__init__.py`  
**Dependencies**: `__future__.annotations`, `os`, `sys`, `typing.TYPE_CHECKING`, `api.PlatformDirsABC`, `version.__version__`, `version.__version_tuple__`, `pathlib.Path`, `typing.Literal`, `platformdirs.windows.Windows`, `platformdirs.macos.MacOS`, `platformdirs.unix.Unix`, `platformdirs.android._android_folder`, `platformdirs.android.Android`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.platformdirs.api
:::{doc} PlatformDirsABC:14
Abstract base class for platform directories.
:::
**Imports**: `__future__.annotations`, `os`, `abc.ABC`, `abc.abstractmethod`, `pathlib.Path`, `typing.TYPE_CHECKING`, `typing.Iterator`, `typing.Literal`
**Type References**: [[PlatformDirsABC]]

### Interface
- `__init__`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, roaming: bool, multipath: bool, opinion: bool, ensure_exists: bool) -> None
- `_append_app_name_and_version`() -> str
- `_optionally_create_directory`(path: str) -> None
- `_first_item_as_path_if_multipath`(directory: str) -> Path
- `user_data_dir`() -> str
- `site_data_dir`() -> str
- `user_config_dir`() -> str
- `site_config_dir`() -> str
- `user_cache_dir`() -> str
- `site_cache_dir`() -> str
- `user_state_dir`() -> str
- `user_log_dir`() -> str
- `user_documents_dir`() -> str
- `user_downloads_dir`() -> str
- `user_pictures_dir`() -> str
- `user_videos_dir`() -> str
- `user_music_dir`() -> str
- `user_desktop_dir`() -> str
- `user_runtime_dir`() -> str
- `site_runtime_dir`() -> str
- `user_data_path`() -> Path
- `site_data_path`() -> Path
- `user_config_path`() -> Path
- `site_config_path`() -> Path
- `user_cache_path`() -> Path
- `site_cache_path`() -> Path
- `user_state_path`() -> Path
- `user_log_path`() -> Path
- `user_documents_path`() -> Path
- `user_downloads_path`() -> Path
- `user_pictures_path`() -> Path
- `user_videos_path`() -> Path
- `user_music_path`() -> Path
- `user_desktop_path`() -> Path
- `user_runtime_path`() -> Path
- `site_runtime_path`() -> Path
- `iter_config_dirs`() -> Iterator[str]
- `iter_data_dirs`() -> Iterator[str]
- `iter_cache_dirs`() -> Iterator[str]
- `iter_runtime_dirs`() -> Iterator[str]
- `iter_config_paths`() -> Iterator[Path]
- `iter_data_paths`() -> Iterator[Path]
- `iter_cache_paths`() -> Iterator[Path]
- `iter_runtime_paths`() -> Iterator[Path]

### Implementation
**PlatformDirsABC**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/platformdirs/api.py`  
**Dependencies**: `__future__.annotations`, `os`, `abc.ABC`, `abc.abstractmethod`, `pathlib.Path`, `typing.TYPE_CHECKING`, `typing.Iterator`, `typing.Literal`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.platformdirs.android
:::{doc} Android:14
Follows the guidance `from here <https://android.stackexchange.com/a/216132>`_.

Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `version
<platformdirs.api.PlatformDirsABC.version>`, `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:::
:::{doc} _android_folder:120
:return: base folder for the Android OS or None if it cannot be found
:::
:::{doc} _android_documents_folder:168
:return: documents folder for the Android OS
:::
:::{doc} _android_downloads_folder:184
:return: downloads folder for the Android OS
:::
:::{doc} _android_pictures_folder:200
:return: pictures folder for the Android OS
:::
:::{doc} _android_videos_folder:216
:return: videos folder for the Android OS
:::
:::{doc} _android_music_folder:232
:return: music folder for the Android OS
:::
**Imports**: `__future__.annotations`, `os`, `re`, `sys`, `functools.lru_cache`, `typing.TYPE_CHECKING`, `typing.cast`, `api.PlatformDirsABC`, `jnius.autoclass`, `jnius.autoclass`, `jnius.autoclass`, `jnius.autoclass`, `jnius.autoclass`, `android.mActivity`, `jnius.autoclass`
**Type References**: [[Android]], [[None]]

### Interface
- `_android_folder`() -> str | None
- `_android_documents_folder`() -> str
- `_android_downloads_folder`() -> str
- `_android_pictures_folder`() -> str
- `_android_videos_folder`() -> str
- `_android_music_folder`() -> str
- `user_data_dir`() -> str
- `site_data_dir`() -> str
- `user_config_dir`() -> str
- `site_config_dir`() -> str
- `user_cache_dir`() -> str
- `site_cache_dir`() -> str
- `user_state_dir`() -> str
- `user_log_dir`() -> str
- `user_documents_dir`() -> str
- `user_downloads_dir`() -> str
- `user_pictures_dir`() -> str
- `user_videos_dir`() -> str
- `user_music_dir`() -> str
- `user_desktop_dir`() -> str
- `user_runtime_dir`() -> str
- `site_runtime_dir`() -> str

### Implementation
**Android**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/platformdirs/android.py`  
**Dependencies**: `__future__.annotations`, `os`, `re`, `sys`, `functools.lru_cache`, `typing.TYPE_CHECKING`, `typing.cast`, `api.PlatformDirsABC`, `jnius.autoclass`, `jnius.autoclass`, `jnius.autoclass`, `jnius.autoclass`, `jnius.autoclass`, `android.mActivity`, `jnius.autoclass`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.platformdirs.windows
:::{doc} Windows:16
`MSDN on where to store app data files <https://learn.microsoft.com/en-us/windows/win32/shell/knownfolderid>`_.

Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `appauthor
<platformdirs.api.PlatformDirsABC.appauthor>`, `version <platformdirs.api.PlatformDirsABC.version>`, `roaming
<platformdirs.api.PlatformDirsABC.roaming>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists
<platformdirs.api.PlatformDirsABC.ensure_exists>`.
:::
:::{doc} get_win_folder_from_env_vars:143
Get folder from environment variables.
:::
:::{doc} get_win_folder_if_csidl_name_not_env_var:164
Get a folder for a CSIDL name that does not exist as an environment variable.
:::
:::{doc} get_win_folder_from_registry:183
Get folder from the registry.

This is a fallback technique at best. I'm not sure if using the registry for these guarantees us the correct answer
for all CSIDL_* names.
:::
:::{doc} get_win_folder_via_ctypes:213
Get folder with ctypes.
:::
**Imports**: `__future__.annotations`, `os`, `sys`, `functools.lru_cache`, `typing.TYPE_CHECKING`, `api.PlatformDirsABC`, `collections.abc.Callable`, `winreg`, `ctypes`, `ctypes`, `winreg`
**Type References**: [[Windows]]

### Interface
- `get_win_folder_from_env_vars`(csidl_name: str) -> str
- `get_win_folder_if_csidl_name_not_env_var`(csidl_name: str) -> str | None
- `get_win_folder_from_registry`(csidl_name: str) -> str
- `get_win_folder_via_ctypes`(csidl_name: str) -> str
- `_pick_get_win_folder`() -> Callable[<ast.Tuple object at 0x1227885d0>]
- `user_data_dir`() -> str
- `_append_parts`(path: str) -> str
- `site_data_dir`() -> str
- `user_config_dir`() -> str
- `site_config_dir`() -> str
- `user_cache_dir`() -> str
- `site_cache_dir`() -> str
- `user_state_dir`() -> str
- `user_log_dir`() -> str
- `user_documents_dir`() -> str
- `user_downloads_dir`() -> str
- `user_pictures_dir`() -> str
- `user_videos_dir`() -> str
- `user_music_dir`() -> str
- `user_desktop_dir`() -> str
- `user_runtime_dir`() -> str
- `site_runtime_dir`() -> str

### Implementation
**Windows**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/platformdirs/windows.py`  
**Dependencies**: `__future__.annotations`, `os`, `sys`, `functools.lru_cache`, `typing.TYPE_CHECKING`, `api.PlatformDirsABC`, `collections.abc.Callable`, `winreg`, `ctypes`, `ctypes`, `winreg`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.platformdirs.__main__
:::{doc} main:26
Run the main entry point.
:::
**Imports**: `__future__.annotations`, `platformdirs.PlatformDirs`, `platformdirs.__version__`
### Interface
- `main`() -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/platformdirs/__main__.py`  
**Dependencies**: `__future__.annotations`, `platformdirs.PlatformDirs`, `platformdirs.__version__`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.reporter
:::{doc} Reporter:9
Formats the results of pyflakes checks to users.
:::
:::{doc} _makeDefaultReporter:88
Make a reporter that can be used when no reporter is specified.
:::
**Imports**: `re`, `sys`
**Type References**: [[Reporter]]

### Interface
- `_makeDefaultReporter`() -> Any
- `__init__`() -> Any
- `unexpectedError`() -> Any
- `syntaxError`() -> Any
- `flake`() -> Any

### Implementation
**Reporter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/reporter.py`  
**Dependencies**: `re`, `sys`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.api
:::{doc} check:18
Check the Python source given by C{codeString} for flakes.

@param codeString: The Python source to check.
@type codeString: C{str}

@param filename: The name of the file the source came from, used to report
    errors.
@type filename: C{str}

@param reporter: A L{Reporter} instance, where errors and warnings will be
    reported.

@return: The number of warnings emitted.
@rtype: C{int}
:::
:::{doc} checkPath:54
Check the given path, printing out any warnings detected.

@param reporter: A L{Reporter} instance, where errors and warnings will be
    reported.

@return: the number of warnings printed
:::
:::{doc} isPythonFile:74
Return True if filename points to a Python file.
:::
:::{doc} iterSourceCode:96
Iterate over all Python source files in C{paths}.

@param paths: A list of paths.  Directories will be recursed into and
    any .py files found will be yielded.  Any non-directories will be
    yielded as-is.
:::
:::{doc} checkRecursive:115
Recursively check all source files in C{paths}.

@param paths: A list of paths to Python source files and directories
    containing Python source files.
@param reporter: A L{Reporter} where all of the warnings and errors
    will be reported to.
@return: The number of warnings found.
:::
:::{doc} _exitOnSignal:131
Handles a signal with sys.exit.

Some of these signals (SIGPIPE, for example) don't exist or are invalid on
Windows. So, ignore errors that might arise.
:::
:::{doc} _get_version:158
Retrieve and format package version along with python version & OS used
:::
:::{doc} main:166
Entry point for the script "pyflakes".
:::
**Imports**: `ast`, `os`, `platform`, `re`, `sys`, `pyflakes.checker`, `pyflakes.__version__`, `pyflakes.reporter`, `signal`, `argparse`
### Interface
- `check`() -> Any
- `checkPath`() -> Any
- `isPythonFile`() -> Any
- `iterSourceCode`() -> Any
- `checkRecursive`() -> Any
- `_exitOnSignal`() -> Any
- `_get_version`() -> Any
- `main`() -> Any
- `handler`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/api.py`  
**Dependencies**: `ast`, `os`, `platform`, `re`, `sys`, `pyflakes.checker`, `pyflakes.__version__`, `pyflakes.reporter`, `signal`, `argparse`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.messages
:::{doc} FutureFeatureNotDefined:138
An undefined __future__ feature name was imported.
:::
:::{doc} UnusedVariable:147
Indicates that a variable has been explicitly assigned to but not actually
used.
:::
:::{doc} UnusedAnnotation:159
Indicates that a variable has been explicitly annotated to but not actually
used.
:::
:::{doc} ReturnOutsideFunction:171
Indicates a return statement outside of a function/method.
:::
:::{doc} YieldOutsideFunction:178
Indicates a yield or yield from statement outside of a function/method.
:::
:::{doc} ContinueOutsideLoop:187
Indicates a continue statement outside of a while or for loop.
:::
:::{doc} BreakOutsideLoop:194
Indicates a break statement outside of a while or for loop.
:::
:::{doc} DefaultExceptNotLast:201
Indicates an except: block as not the last exception handler.
:::
:::{doc} TwoStarredExpressions:208
Two or more starred expressions in an assignment (a, *b, *c = d).
:::
:::{doc} TooManyExpressionsInStarredAssignment:215
Too many expressions in an assignment with star-unpacking
:::
:::{doc} IfTuple:222
Conditional test is a non-empty tuple literal, which are always True.
:::
:::{doc} AssertTuple:229
Assertion test is a non-empty tuple literal, which are always True.
:::

**Type References**: [[AssertTuple]], [[BreakOutsideLoop]], [[ContinueOutsideLoop]], [[DefaultExceptNotLast]], [[DoctestSyntaxError]], [[DuplicateArgument]], [[FStringMissingPlaceholders]], [[ForwardAnnotationSyntaxError]], [[FutureFeatureNotDefined]], [[IfTuple]], [[ImportShadowedByLoopVar]], [[ImportStarNotPermitted]], [[ImportStarUsage]], [[ImportStarUsed]], [[InvalidPrintSyntax]], [[IsLiteral]], [[LateFutureImport]], [[Message]], [[MultiValueRepeatedKeyLiteral]], [[MultiValueRepeatedKeyVariable]], [[PercentFormatExpectedMapping]], [[PercentFormatExpectedSequence]], [[PercentFormatExtraNamedArguments]], [[PercentFormatInvalidFormat]], [[PercentFormatMissingArgument]], [[PercentFormatMixedPositionalAndNamed]], [[PercentFormatPositionalCountMismatch]], [[PercentFormatStarRequiresSequence]], [[PercentFormatUnsupportedFormatCharacter]], [[RaiseNotImplemented]], [[RedefinedWhileUnused]], [[ReturnOutsideFunction]], [[StringDotFormatExtraNamedArguments]], [[StringDotFormatExtraPositionalArguments]], [[StringDotFormatInvalidFormat]], [[StringDotFormatMissingArgument]], [[StringDotFormatMixingAutomatic]], [[TooManyExpressionsInStarredAssignment]], [[TwoStarredExpressions]], [[UndefinedExport]], [[UndefinedLocal]], [[UndefinedName]], [[UnusedAnnotation]], [[UnusedImport]], [[UnusedVariable]], [[YieldOutsideFunction]]

### Interface
- `__init__`() -> Any
- `__str__`() -> Any

### Implementation
**Message**

**UnusedImport**

**RedefinedWhileUnused**

**ImportShadowedByLoopVar**

**ImportStarNotPermitted**

**ImportStarUsed**

**ImportStarUsage**

**UndefinedName**

**DoctestSyntaxError**

**UndefinedExport**

**UndefinedLocal**

**DuplicateArgument**

**MultiValueRepeatedKeyLiteral**

**MultiValueRepeatedKeyVariable**

**LateFutureImport**

**FutureFeatureNotDefined**

**UnusedVariable**

**UnusedAnnotation**

**ReturnOutsideFunction**

**YieldOutsideFunction**

**ContinueOutsideLoop**

**BreakOutsideLoop**

**DefaultExceptNotLast**

**TwoStarredExpressions**

**TooManyExpressionsInStarredAssignment**

**IfTuple**

**AssertTuple**

**ForwardAnnotationSyntaxError**

**RaiseNotImplemented**

**InvalidPrintSyntax**

**IsLiteral**

**FStringMissingPlaceholders**

**StringDotFormatExtraPositionalArguments**

**StringDotFormatExtraNamedArguments**

**StringDotFormatMissingArgument**

**StringDotFormatMixingAutomatic**

**StringDotFormatInvalidFormat**

**PercentFormatInvalidFormat**

**PercentFormatMixedPositionalAndNamed**

**PercentFormatUnsupportedFormatCharacter**

**PercentFormatPositionalCountMismatch**

**PercentFormatExtraNamedArguments**

**PercentFormatMissingArgument**

**PercentFormatExpectedMapping**

**PercentFormatExpectedSequence**

**PercentFormatStarRequiresSequence**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/messages.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.__main__

**Imports**: `pyflakes.api.main`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/__main__.py`  
**Dependencies**: `pyflakes.api.main`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.checker
:::{doc} parse_percent_format:85
Parses the string component of a `'...' % ...` format call

Copied from https://github.com/asottile/pyupgrade at v1.20.1
:::
:::{doc} _FieldsOrder:149
Fix order of AST node fields.
:::
:::{doc} counter:168
Simplest required implementation of collections.Counter. Required as 2.6
does not have Counter in collections.
:::
:::{doc} iter_child_nodes:179
Yield all direct child nodes of *node*, that is, all fields that
are nodes and all items of fields that are lists of nodes.

:param node:          AST node to be iterated upon
:param omit:          String or tuple of strings denoting the
                      attributes of the node to be omitted from
                      further parsing
:param _fields_order: Order of AST node fields
:::
:::{doc} Binding:217
Represents the binding of a value to a name.

The checker uses this to keep track of which names have been bound and
which names have not. See L{Assignment} for a special type of binding that
is checked with stricter rules.

@ivar used: pair of (L{Scope}, node) indicating the scope and
            the node that this binding was last used.
:::
:::{doc} Definition:249
A binding that defines a function or a class.
:::
:::{doc} Builtin:260
A definition created for all Python builtins.
:::
:::{doc} UnhandledKeyType:274
A dictionary key of a type that we cannot or do not check for duplicates.
:::
:::{doc} VariableKey:280
A dictionary key which is a variable.

@ivar item: The variable AST object.
:::
:::{doc} Importation:299
A binding created by an import statement.

@ivar fullName: The complete name given to the import statement,
    possibly including multiple dotted components.
@type fullName: C{str}
:::
:::{doc} SubmoduleImportation:339
A binding created by a submodule import statement.

A submodule import is a special case where the root module is implicitly
imported, without an 'as' clause, and the submodule is also imported.
Python does not restrict which attributes of the root module may be used.

This class is only used when the submodule import is without an 'as' clause.

pyflakes handles this case by registering the root module name in the scope,
allowing any attribute of the root module to be accessed.

RedefinedWhileUnused is suppressed in `redefines` unless the submodule
name is also the same, to avoid false positives.
:::
:::{doc} StarImportation:404
A binding created by a 'from x import *' statement.
:::
:::{doc} FutureImportation:426
A binding created by a from `__future__` import statement.

`__future__` imports are implicitly used.
:::
:::{doc} Argument:438
Represents binding a name as an argument.
:::
:::{doc} Assignment:444
Represents binding a name with an explicit assignment.

The checker will raise warnings for any Assignment that isn't used. Also,
the checker does not consider assignments in tuple/list unpacking to be
Assignments, rather it treats them as simple Bindings.
:::
:::{doc} NamedExprAssignment:454
Represents binding a name with an assignment expression.
:::
:::{doc} Annotation:460
Represents binding a name to a type without an associated value.

As long as this name is not assigned a value in another binding, it is considered
undefined for most purposes. One notable exception is using the name as a type
annotation.
:::
:::{doc} ExportBinding:482
A binding created by an C{__all__} assignment.  If the names in the list
can be determined statically, they will be treated as names for export and
additional checking applied to them.

The only recognized C{__all__} assignment via list/tuple concatenation is in the
following format:

    __all__ = ['a'] + ['b'] + ['c']

Names which are imported and not otherwise used but appear in the value of
C{__all__} will not have an unused import warning reported for them.
:::
:::{doc} FunctionScope:543
I represent a name scope for a function.

@ivar globals: Names declared 'global' in this function.
:::
:::{doc} ModuleScope:588
Scope for a module.
:::
:::{doc} DoctestScope:594
Scope for a doctest.
:::
:::{doc} _is_typing_helper:620
Internal helper to determine whether or not something is a member of a
typing module. This is used as part of working out whether we are within a
type annotation context.

Note: you probably don't want to use this function directly. Instead see the
utils below which wrap it (`_is_typing` and `_is_any_typing_member`).
:::
:::{doc} _is_typing:664
Determine whether `node` represents the member of a typing module specified
by `typing_attr`.

This is used as part of working out whether we are within a type annotation
context.
:::
:::{doc} _is_any_typing_member:675
Determine whether `node` represents any member of a typing module.

This is used as part of working out whether we are within a type annotation
context.
:::
:::{doc} Checker:717
I check the cleanliness and sanity of Python code.
:::
**Imports**: `__future__`, `builtins`, `ast`, `collections`, `contextlib`, `doctest`, `functools`, `os`, `re`, `string`, `sys`, `warnings`, `pyflakes.messages`
**Type References**: [[Annotation]], [[AnnotationState]], [[Argument]], [[Assignment]], [[Binding]], [[Builtin]], [[Checker]], [[ClassDefinition]], [[ClassScope]], [[Definition]], [[DetectClassScopedMagic]], [[DoctestScope]], [[ExportBinding]], [[FunctionDefinition]], [[FunctionScope]], [[FutureImportation]], [[GeneratorScope]], [[Importation]], [[ImportationFrom]], [[ModuleScope]], [[NamedExprAssignment]], [[Scope]], [[StarImportation]], [[SubmoduleImportation]], [[TypeScope]], [[UnhandledKeyType]], [[VariableKey]], [[_FieldsOrder]]

### Interface
- `getAlternatives`() -> Any
- `_is_singleton`() -> Any
- `_is_tuple_constant`() -> Any
- `_is_constant`() -> Any
- `_is_const_non_singleton`() -> Any
- `_is_name_or_attr`() -> Any
- `_must_match`() -> Any
- `parse_percent_format`() -> Any
- `counter`() -> Any
- `iter_child_nodes`() -> Any
- `convert_to_value`() -> Any
- `is_notimplemented_name_node`() -> Any
- `getNodeName`() -> Any
- `_is_typing_helper`() -> Any
- `_is_typing`() -> Any
- `_is_any_typing_member`() -> Any
- `is_typing_overload`() -> Any
- `in_annotation`() -> Any
- `in_string_annotation`() -> Any
- `_parse_inner`() -> Any
- `_get_fields`() -> Any
- `__missing__`() -> Any
- `__init__`() -> Any
- `__str__`() -> Any
- `__repr__`() -> Any
- `redefines`() -> Any
- `__eq__`() -> Any
- `__hash__`() -> Any
- `_has_alias`() -> Any
- `source_statement`() -> Any
- `unused_assignments`() -> Any
- `unused_annotations`() -> Any
- `_bare_name_is_attr`() -> Any
- `_module_scope_is_typing`() -> Any
- `in_annotation_func`() -> Any
- `deferFunction`() -> Any
- `_run_deferred`() -> Any
- `_in_doctest`() -> Any
- `futuresAllowed`() -> Any
- `annotationsFutureEnabled`() -> Any
- `scope`() -> Any
- `in_scope`() -> Any
- `checkDeadScopes`() -> Any
- `report`() -> Any
- `getParent`() -> Any
- `getCommonAncestor`() -> Any
- `descendantOf`() -> Any
- `_getAncestor`() -> Any
- `getScopeNode`() -> Any
- `differentForks`() -> Any
- `addBinding`() -> Any
- `_unknown_handler`() -> Any
- `getNodeHandler`() -> Any
- `handleNodeLoad`() -> Any
- `handleNodeStore`() -> Any
- `handleNodeDelete`() -> Any
- `_enter_annotation`() -> Any
- `_in_postponed_annotation`() -> Any
- `handleChildren`() -> Any
- `isLiteralTupleUnpacking`() -> Any
- `isDocstring`() -> Any
- `getDocstring`() -> Any
- `handleNode`() -> Any
- `handleDoctests`() -> Any
- `handleStringAnnotation`() -> Any
- `handle_annotation_always_deferred`() -> Any
- `handleAnnotation`() -> Any
- `ignore`() -> Any
- `SUBSCRIPT`() -> Any
- `_handle_string_dot_format`() -> Any
- `CALL`() -> Any
- `_handle_percent_format`() -> Any
- `BINOP`() -> Any
- `CONSTANT`() -> Any
- `RAISE`() -> Any
- `JOINEDSTR`() -> Any
- `DICT`() -> Any
- `IF`() -> Any
- `ASSERT`() -> Any
- `GLOBAL`() -> Any
- `GENERATOREXP`() -> Any
- `NAME`() -> Any
- `CONTINUE`() -> Any
- `RETURN`() -> Any
- `YIELD`() -> Any
- `FUNCTIONDEF`() -> Any
- `LAMBDA`() -> Any
- `ARGUMENTS`() -> Any
- `ARG`() -> Any
- `CLASSDEF`() -> Any
- `AUGASSIGN`() -> Any
- `TUPLE`() -> Any
- `IMPORT`() -> Any
- `IMPORTFROM`() -> Any
- `TRY`() -> Any
- `EXCEPTHANDLER`() -> Any
- `ANNASSIGN`() -> Any
- `COMPARE`() -> Any
- `_match_target`() -> Any
- `_type_param_scope`() -> Any
- `TYPEVAR`() -> Any
- `TYPEALIAS`() -> Any
- `_add_to_names`() -> Any
- `on_conditional_branch`() -> Any
- `_add_key`() -> Any
- `runFunction`() -> Any

### Implementation
**_FieldsOrder**

**Binding**

**Definition**

**Builtin**

**UnhandledKeyType**

**VariableKey**

**Importation**

**SubmoduleImportation**

**ImportationFrom**

**StarImportation**

**FutureImportation**

**Argument**

**Assignment**

**NamedExprAssignment**

**Annotation**

**FunctionDefinition**

**ClassDefinition**

**ExportBinding**

**Scope**

**ClassScope**

**FunctionScope**

**TypeScope**

**GeneratorScope**

**ModuleScope**

**DoctestScope**

**DetectClassScopedMagic**

**AnnotationState**

**Checker**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/checker.py`  
**Dependencies**: `__future__`, `builtins`, `ast`, `collections`, `contextlib`, `doctest`, `functools`, `os`, `re`, `string`, `sys`, `warnings`, `pyflakes.messages`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.test.harness

**Imports**: `ast`, `textwrap`, `unittest`, `pyflakes.checker`
**Type References**: [[TestCase]]

### Interface
- `flakes`() -> Any

### Implementation
**TestCase**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/test/harness.py`  
**Dependencies**: `ast`, `textwrap`, `unittest`, `pyflakes.checker`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.test.test_doctests
:::{doc} TestOther:435
Run TestOther with each test wrapped in a doctest.
:::
:::{doc} TestImports:439
Run TestImports with each test wrapped in a doctest.
:::
:::{doc} TestUndefinedNames:443
Run TestUndefinedNames with each test wrapped in a doctest.
:::
**Imports**: `textwrap`, `pyflakes.messages`, `pyflakes.checker.PYPY`, `pyflakes.checker.DoctestScope`, `pyflakes.checker.FunctionScope`, `pyflakes.checker.ModuleScope`, `pyflakes.test.test_other.Test`, `pyflakes.test.test_imports.Test`, `pyflakes.test.test_undefined_names.Test`, `pyflakes.test.harness.TestCase`, `pyflakes.test.harness.skip`
**Type References**: [[Test]], [[TestImports]], [[TestOther]], [[TestUndefinedNames]], [[_DoctestMixin]]

### Interface
- `doctestify`() -> Any
- `flakes`() -> Any
- `test_scope_class`() -> Any
- `test_nested_doctest_ignored`() -> Any
- `test_global_module_scope_pollution`() -> Any
- `test_global_undefined`() -> Any
- `test_nested_class`() -> Any
- `test_ignore_nested_function`() -> Any
- `test_inaccessible_scope_class`() -> Any
- `test_importBeforeDoctest`() -> Any
- `test_importBeforeAndInDoctest`() -> Any
- `test_importInDoctestAndAfter`() -> Any
- `test_offsetInDoctests`() -> Any
- `test_offsetInLambdasInDoctests`() -> Any
- `test_offsetAfterDoctests`() -> Any
- `test_syntaxErrorInDoctest`() -> Any
- `test_indentationErrorInDoctest`() -> Any
- `test_offsetWithMultiLineArgs`() -> Any
- `test_doctestCanReferToFunction`() -> Any
- `test_doctestCanReferToClass`() -> Any
- `test_noOffsetSyntaxErrorInDoctest`() -> Any
- `test_singleUnderscoreInDoctest`() -> Any
- `test_globalUnderscoreInDoctest`() -> Any

### Implementation
**_DoctestMixin**

**Test**

**TestOther**

**TestImports**

**TestUndefinedNames**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/test/test_doctests.py`  
**Dependencies**: `textwrap`, `pyflakes.messages`, `pyflakes.checker.PYPY`, `pyflakes.checker.DoctestScope`, `pyflakes.checker.FunctionScope`, `pyflakes.checker.ModuleScope`, `pyflakes.test.test_other.Test`, `pyflakes.test.test_imports.Test`, `pyflakes.test.test_undefined_names.Test`, `pyflakes.test.harness.TestCase`, `pyflakes.test.harness.skip`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.test.test_imports
:::{doc} TestSpecialAll:1006
Tests for suppression of unused import warnings by C{__all__}.
:::
**Imports**: `pyflakes.messages`, `pyflakes.checker.FutureImportation`, `pyflakes.checker.Importation`, `pyflakes.checker.ImportationFrom`, `pyflakes.checker.StarImportation`, `pyflakes.checker.SubmoduleImportation`, `pyflakes.test.harness.TestCase`, `pyflakes.test.harness.skip`
**Type References**: [[Test]], [[TestImportationObject]], [[TestSpecialAll]]

### Interface
- `test_import_basic`() -> Any
- `test_import_as`() -> Any
- `test_import_submodule`() -> Any
- `test_import_submodule_as`() -> Any
- `test_import_submodule_as_source_name`() -> Any
- `test_importfrom_relative`() -> Any
- `test_importfrom_relative_parent`() -> Any
- `test_importfrom_relative_with_module`() -> Any
- `test_importfrom_relative_with_module_as`() -> Any
- `test_importfrom_member`() -> Any
- `test_importfrom_submodule_member`() -> Any
- `test_importfrom_member_as`() -> Any
- `test_importfrom_submodule_member_as`() -> Any
- `test_importfrom_star`() -> Any
- `test_importfrom_star_relative`() -> Any
- `test_importfrom_future`() -> Any
- `test_unusedImport_underscore`() -> Any
- `test_unusedImport`() -> Any
- `test_unusedImport_relative`() -> Any
- `test_aliasedImport`() -> Any
- `test_aliasedImportShadowModule`() -> Any
- `test_usedImport`() -> Any
- `test_usedImport_relative`() -> Any
- `test_redefinedWhileUnused`() -> Any
- `test_redefinedIf`() -> Any
- `test_redefinedIfElse`() -> Any
- `test_redefinedTry`() -> Any
- `test_redefinedTryExcept`() -> Any
- `test_redefinedTryNested`() -> Any
- `test_redefinedTryExceptMulti`() -> Any
- `test_redefinedTryElse`() -> Any
- `test_redefinedTryExceptElse`() -> Any
- `test_redefinedTryExceptFinally`() -> Any
- `test_redefinedTryExceptElseFinally`() -> Any
- `test_redefinedByFunction`() -> Any
- `test_redefinedInNestedFunction`() -> Any
- `test_redefinedInNestedFunctionTwice`() -> Any
- `test_redefinedButUsedLater`() -> Any
- `test_redefinedByClass`() -> Any
- `test_redefinedBySubclass`() -> Any
- `test_redefinedInClass`() -> Any
- `test_importInClass`() -> Any
- `test_usedInFunction`() -> Any
- `test_shadowedByParameter`() -> Any
- `test_newAssignment`() -> Any
- `test_usedInGetattr`() -> Any
- `test_usedInSlice`() -> Any
- `test_usedInIfBody`() -> Any
- `test_usedInIfConditional`() -> Any
- `test_usedInElifConditional`() -> Any
- `test_usedInElse`() -> Any
- `test_usedInCall`() -> Any
- `test_usedInClass`() -> Any
- `test_usedInClassBase`() -> Any
- `test_notUsedInNestedScope`() -> Any
- `test_usedInFor`() -> Any
- `test_usedInForElse`() -> Any
- `test_redefinedByFor`() -> Any
- `test_shadowedByFor`() -> Any
- `test_shadowedByForDeep`() -> Any
- `test_usedInReturn`() -> Any
- `test_usedInOperators`() -> Any
- `test_usedInAssert`() -> Any
- `test_usedInSubscript`() -> Any
- `test_usedInLogic`() -> Any
- `test_usedInList`() -> Any
- `test_usedInTuple`() -> Any
- `test_usedInTry`() -> Any
- `test_usedInExcept`() -> Any
- `test_redefinedByExcept`() -> Any
- `test_usedInRaise`() -> Any
- `test_usedInYield`() -> Any
- `test_usedInDict`() -> Any
- `test_usedInParameterDefault`() -> Any
- `test_usedInAttributeAssign`() -> Any
- `test_usedInKeywordArg`() -> Any
- `test_usedInAssignment`() -> Any
- `test_usedInListComp`() -> Any
- `test_usedInTryFinally`() -> Any
- `test_usedInWhile`() -> Any
- `test_usedInGlobal`() -> Any
- `test_usedAndGlobal`() -> Any
- `test_assignedToGlobal`() -> Any
- `test_usedInExec`() -> Any
- `test_usedInLambda`() -> Any
- `test_shadowedByLambda`() -> Any
- `test_usedInSliceObj`() -> Any
- `test_unusedInNestedScope`() -> Any
- `test_methodsDontUseClassScope`() -> Any
- `test_nestedFunctionsNestScope`() -> Any
- `test_nestedClassAndFunctionScope`() -> Any
- `test_importStar`() -> Any
- `test_importStar_relative`() -> Any
- `test_localImportStar`() -> Any
- `test_packageImport`() -> Any
- `test_unusedPackageImport`() -> Any
- `test_duplicateSubmoduleImport`() -> Any
- `test_differentSubmoduleImport`() -> Any
- `test_used_package_with_submodule_import`() -> Any
- `test_used_package_with_submodule_import_of_alias`() -> Any
- `test_unused_package_with_submodule_import`() -> Any
- `test_assignRHSFirst`() -> Any
- `test_tryingMultipleImports`() -> Any
- `test_nonGlobalDoesNotRedefine`() -> Any
- `test_functionsRunLater`() -> Any
- `test_functionNamesAreBoundNow`() -> Any
- `test_ignoreNonImportRedefinitions`() -> Any
- `test_importingForImportError`() -> Any
- `test_importedInClass`() -> Any
- `test_importUsedInMethodDefinition`() -> Any
- `test_futureImport`() -> Any
- `test_futureImportFirst`() -> Any
- `test_futureImportUsed`() -> Any
- `test_futureImportUndefined`() -> Any
- `test_futureImportStar`() -> Any
- `test_ignoredInFunction`() -> Any
- `test_ignoredInClass`() -> Any
- `test_ignored_when_not_directly_assigned`() -> Any
- `test_warningSuppressed`() -> Any
- `test_augmentedAssignment`() -> Any
- `test_list_concatenation_assignment`() -> Any
- `test_tuple_concatenation_assignment`() -> Any
- `test_all_with_attributes`() -> Any
- `test_all_with_names`() -> Any
- `test_all_with_attributes_added`() -> Any
- `test_all_mixed_attributes_and_strings`() -> Any
- `test_unboundExported`() -> Any
- `test_importStarExported`() -> Any
- `test_importStarNotExported`() -> Any
- `test_usedInGenExp`() -> Any
- `test_redefinedByGenExp`() -> Any
- `test_usedAsDecorator`() -> Any
- `test_usedAsClassDecorator`() -> Any

### Implementation
**TestImportationObject**

**Test**

**TestSpecialAll**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/test/test_imports.py`  
**Dependencies**: `pyflakes.messages`, `pyflakes.checker.FutureImportation`, `pyflakes.checker.Importation`, `pyflakes.checker.ImportationFrom`, `pyflakes.checker.StarImportation`, `pyflakes.checker.SubmoduleImportation`, `pyflakes.test.harness.TestCase`, `pyflakes.test.harness.skip`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.test



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/test/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.test.test_code_segment
:::{doc} TestCodeSegments:7
Tests for segments of a module
:::
**Imports**: `pyflakes.messages`, `pyflakes.checker.FunctionScope`, `pyflakes.checker.ClassScope`, `pyflakes.checker.ModuleScope`, `pyflakes.checker.Argument`, `pyflakes.checker.FunctionDefinition`, `pyflakes.checker.Assignment`, `pyflakes.test.harness.TestCase`
**Type References**: [[TestCodeSegments]]

### Interface
- `test_function_segment`() -> Any
- `test_class_segment`() -> Any
- `test_scope_class`() -> Any
- `test_scope_function`() -> Any
- `test_scope_async_function`() -> Any

### Implementation
**TestCodeSegments**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/test/test_code_segment.py`  
**Dependencies**: `pyflakes.messages`, `pyflakes.checker.FunctionScope`, `pyflakes.checker.ClassScope`, `pyflakes.checker.ModuleScope`, `pyflakes.checker.Argument`, `pyflakes.checker.FunctionDefinition`, `pyflakes.checker.Assignment`, `pyflakes.test.harness.TestCase`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.test.test_match

**Imports**: `sys.version_info`, `pyflakes.test.harness.TestCase`, `pyflakes.test.harness.skipIf`
**Type References**: [[TestMatch]]

### Interface
- `test_match_bindings`() -> Any
- `test_match_pattern_matched_class`() -> Any
- `test_match_placeholder`() -> Any
- `test_match_singleton`() -> Any
- `test_match_or_pattern`() -> Any
- `test_match_star`() -> Any
- `test_match_double_star`() -> Any
- `test_defined_in_different_branches`() -> Any

### Implementation
**TestMatch**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/test/test_match.py`  
**Dependencies**: `sys.version_info`, `pyflakes.test.harness.TestCase`, `pyflakes.test.harness.skipIf`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.test.test_type_annotations

**Imports**: `sys.version_info`, `pyflakes.messages`, `pyflakes.test.harness.TestCase`, `pyflakes.test.harness.skipIf`
**Type References**: [[TestTypeAnnotations]]

### Interface
- `test_typingOverload`() -> Any
- `test_typingExtensionsOverload`() -> Any
- `test_typingOverloadAsync`() -> Any
- `test_overload_with_multiple_decorators`() -> Any
- `test_overload_in_class`() -> Any
- `test_aliased_import`() -> Any
- `test_not_a_typing_overload`() -> Any
- `test_variable_annotations`() -> Any
- `test_variable_annotation_references_self_name_undefined`() -> Any
- `test_TypeAlias_annotations`() -> Any
- `test_annotating_an_import`() -> Any
- `test_unused_annotation`() -> Any
- `test_unused_annotation_in_outer_scope_reassigned_in_local_scope`() -> Any
- `test_unassigned_annotation_is_undefined`() -> Any
- `test_annotated_async_def`() -> Any
- `test_postponed_annotations`() -> Any
- `test_type_annotation_clobbers_all`() -> Any
- `test_return_annotation_is_class_scope_variable`() -> Any
- `test_return_annotation_is_function_body_variable`() -> Any
- `test_positional_only_argument_annotations`() -> Any
- `test_partially_quoted_type_annotation`() -> Any
- `test_partially_quoted_type_assignment`() -> Any
- `test_nested_partially_quoted_type_assignment`() -> Any
- `test_quoted_type_cast`() -> Any
- `test_type_cast_literal_str_to_str`() -> Any
- `test_quoted_type_cast_renamed_import`() -> Any
- `test_quoted_TypeVar_constraints`() -> Any
- `test_quoted_TypeVar_bound`() -> Any
- `test_literal_type_typing`() -> Any
- `test_literal_type_typing_extensions`() -> Any
- `test_annotated_type_typing_missing_forward_type`() -> Any
- `test_annotated_type_typing_missing_forward_type_multiple_args`() -> Any
- `test_annotated_type_typing_with_string_args`() -> Any
- `test_annotated_type_typing_with_string_args_in_union`() -> Any
- `test_literal_type_some_other_module`() -> Any
- `test_literal_union_type_typing`() -> Any
- `test_deferred_twice_annotation`() -> Any
- `test_partial_string_annotations_with_future_annotations`() -> Any
- `test_forward_annotations_for_classes_in_scope`() -> Any
- `test_idomiatic_typing_guards`() -> Any
- `test_typing_guard_for_protocol`() -> Any
- `test_typednames_correct_forward_ref`() -> Any
- `test_namedtypes_classes`() -> Any
- `test_variadic_generics`() -> Any
- `test_type_statements`() -> Any
- `test_type_parameters_functions`() -> Any
- `test_type_parameters_do_not_escape_function_scopes`() -> Any
- `test_type_parameters_classes`() -> Any
- `test_type_parameters_do_not_escape_class_scopes`() -> Any
- `test_type_parameters_TypeVarTuple`() -> Any
- `test_type_parameters_ParamSpec`() -> Any

### Implementation
**TestTypeAnnotations**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/test/test_type_annotations.py`  
**Dependencies**: `sys.version_info`, `pyflakes.messages`, `pyflakes.test.harness.TestCase`, `pyflakes.test.harness.skipIf`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.test.test_undefined_names
:::{doc} NameTests:807
Tests for some extra cases of name handling.
:::
**Imports**: `ast`, `pyflakes.messages`, `pyflakes.checker`, `pyflakes.test.harness.TestCase`, `pyflakes.test.harness.skip`
**Type References**: [[NameTests]], [[Test]]

### Interface
- `test_undefined`() -> Any
- `test_definedInListComp`() -> Any
- `test_undefinedInListComp`() -> Any
- `test_undefinedExceptionName`() -> Any
- `test_namesDeclaredInExceptBlocks`() -> Any
- `test_undefinedExceptionNameObscuringLocalVariable`() -> Any
- `test_undefinedExceptionNameObscuringLocalVariable2`() -> Any
- `test_undefinedExceptionNameObscuringLocalVariableFalsePositive1`() -> Any
- `test_delExceptionInExcept`() -> Any
- `test_undefinedExceptionNameObscuringLocalVariableFalsePositive2`() -> Any
- `test_undefinedExceptionNameObscuringGlobalVariable`() -> Any
- `test_undefinedExceptionNameObscuringGlobalVariable2`() -> Any
- `test_undefinedExceptionNameObscuringGlobalVariableFalsePositive1`() -> Any
- `test_undefinedExceptionNameObscuringGlobalVariableFalsePositive2`() -> Any
- `test_functionsNeedGlobalScope`() -> Any
- `test_builtins`() -> Any
- `test_builtinWindowsError`() -> Any
- `test_moduleAnnotations`() -> Any
- `test_magicGlobalsFile`() -> Any
- `test_magicGlobalsBuiltins`() -> Any
- `test_magicGlobalsName`() -> Any
- `test_magicGlobalsPath`() -> Any
- `test_magicModuleInClassScope`() -> Any
- `test_magicQualnameInClassScope`() -> Any
- `test_globalImportStar`() -> Any
- `test_definedByGlobal`() -> Any
- `test_definedByGlobalMultipleNames`() -> Any
- `test_globalInGlobalScope`() -> Any
- `test_global_reset_name_only`() -> Any
- `test_unused_global`() -> Any
- `test_del`() -> Any
- `test_delGlobal`() -> Any
- `test_delUndefined`() -> Any
- `test_delConditional`() -> Any
- `test_delConditionalNested`() -> Any
- `test_delWhile`() -> Any
- `test_delWhileTestUsage`() -> Any
- `test_delWhileNested`() -> Any
- `test_globalFromNestedScope`() -> Any
- `test_laterRedefinedGlobalFromNestedScope`() -> Any
- `test_laterRedefinedGlobalFromNestedScope2`() -> Any
- `test_intermediateClassScopeIgnored`() -> Any
- `test_doubleNestingReportsClosestName`() -> Any
- `test_laterRedefinedGlobalFromNestedScope3`() -> Any
- `test_undefinedAugmentedAssignment`() -> Any
- `test_nestedClass`() -> Any
- `test_badNestedClass`() -> Any
- `test_definedAsStarArgs`() -> Any
- `test_definedAsStarUnpack`() -> Any
- `test_usedAsStarUnpack`() -> Any
- `test_unusedAsStarUnpack`() -> Any
- `test_keywordOnlyArgs`() -> Any
- `test_keywordOnlyArgsUndefined`() -> Any
- `test_annotationUndefined`() -> Any
- `test_metaClassUndefined`() -> Any
- `test_definedInGenExp`() -> Any
- `test_undefinedInGenExpNested`() -> Any
- `test_undefinedWithErrorHandler`() -> Any
- `test_definedInClass`() -> Any
- `test_definedInClassNested`() -> Any
- `test_undefinedInLoop`() -> Any
- `test_definedFromLambdaInDictionaryComprehension`() -> Any
- `test_definedFromLambdaInGenerator`() -> Any
- `test_undefinedFromLambdaInDictionaryComprehension`() -> Any
- `test_undefinedFromLambdaInComprehension`() -> Any
- `test_dunderClass`() -> Any
- `test_impossibleContext`() -> Any

### Implementation
**Test**

**NameTests**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/test/test_undefined_names.py`  
**Dependencies**: `ast`, `pyflakes.messages`, `pyflakes.checker`, `pyflakes.test.harness.TestCase`, `pyflakes.test.harness.skip`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.test.test_is_literal

**Imports**: `pyflakes.messages.IsLiteral`, `pyflakes.test.harness.TestCase`
**Type References**: [[Test]]

### Interface
- `test_is_str`() -> Any
- `test_is_bytes`() -> Any
- `test_is_unicode`() -> Any
- `test_is_int`() -> Any
- `test_is_true`() -> Any
- `test_is_false`() -> Any
- `test_is_not_str`() -> Any
- `test_is_not_bytes`() -> Any
- `test_is_not_unicode`() -> Any
- `test_is_not_int`() -> Any
- `test_is_not_true`() -> Any
- `test_is_not_false`() -> Any
- `test_left_is_str`() -> Any
- `test_left_is_bytes`() -> Any
- `test_left_is_unicode`() -> Any
- `test_left_is_int`() -> Any
- `test_left_is_true`() -> Any
- `test_left_is_false`() -> Any
- `test_left_is_not_str`() -> Any
- `test_left_is_not_bytes`() -> Any
- `test_left_is_not_unicode`() -> Any
- `test_left_is_not_int`() -> Any
- `test_left_is_not_true`() -> Any
- `test_left_is_not_false`() -> Any
- `test_chained_operators_is_true`() -> Any
- `test_chained_operators_is_str`() -> Any
- `test_chained_operators_is_true_end`() -> Any
- `test_chained_operators_is_str_end`() -> Any
- `test_is_tuple_constant`() -> Any
- `test_is_tuple_constant_containing_constants`() -> Any
- `test_is_tuple_containing_variables_ok`() -> Any

### Implementation
**Test**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/test/test_is_literal.py`  
**Dependencies**: `pyflakes.messages.IsLiteral`, `pyflakes.test.harness.TestCase`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.test.test_api
:::{doc} withStderrTo:26
Call C{f} with C{sys.stderr} redirected to C{stderr}.
:::
:::{doc} Node:37
Mock an AST node.
:::
:::{doc} SysStreamCapturing:46
Context manager capturing sys.stdin, sys.stdout and sys.stderr.

The file handles are replaced with a StringIO object.
:::
:::{doc} LoggingReporter:75
Implementation of Reporter that just appends any error to a list.
:::
:::{doc} TestIterSourceCode:98
Tests for L{iterSourceCode}.
:::
:::{doc} TestReporter:222
Tests for L{Reporter}.
:::
:::{doc} CheckTests:309
Tests for L{check} and L{checkPath} which check a file for flakes.
:::
:::{doc} IntegrationTests:692
Tests of the pyflakes script that actually spawn the script.
:::
:::{doc} TestMain:790
Tests of the pyflakes main function.
:::
**Imports**: `contextlib`, `io`, `os`, `sys`, `shutil`, `subprocess`, `tempfile`, `pyflakes.checker.PYPY`, `pyflakes.messages.UnusedImport`, `pyflakes.reporter.Reporter`, `pyflakes.api.main`, `pyflakes.api.check`, `pyflakes.api.checkPath`, `pyflakes.api.checkRecursive`, `pyflakes.api.iterSourceCode`, `pyflakes.test.harness.TestCase`, `pyflakes.test.harness.skipIf`, `pyflakes.scripts.pyflakes`, `pyflakes`
**Type References**: [[CheckTests]], [[IntegrationTests]], [[LoggingReporter]], [[Node]], [[SysStreamCapturing]], [[TestIterSourceCode]], [[TestMain]], [[TestReporter]]

### Interface
- `withStderrTo`() -> Any
- `__init__`() -> Any
- `__enter__`() -> Any
- `__exit__`() -> Any
- `flake`() -> Any
- `unexpectedError`() -> Any
- `syntaxError`() -> Any
- `setUp`() -> Any
- `tearDown`() -> Any
- `makeEmptyFile`() -> Any
- `test_emptyDirectory`() -> Any
- `test_singleFile`() -> Any
- `test_onlyPythonSource`() -> Any
- `test_recurses`() -> Any
- `test_shebang`() -> Any
- `test_multipleDirectories`() -> Any
- `test_explicitFiles`() -> Any
- `test_syntaxError`() -> Any
- `test_syntaxErrorNoOffset`() -> Any
- `test_syntaxErrorNoText`() -> Any
- `test_multiLineSyntaxError`() -> Any
- `test_unexpectedError`() -> Any
- `test_flake`() -> Any
- `makeTempFile`() -> Any
- `assertHasErrors`() -> Any
- `getErrors`() -> Any
- `test_legacyScript`() -> Any
- `test_missingTrailingNewline`() -> Any
- `test_checkPathNonExisting`() -> Any
- `test_multilineSyntaxError`() -> Any
- `test_eofSyntaxError`() -> Any
- `test_eofSyntaxErrorWithTab`() -> Any
- `test_nonDefaultFollowsDefaultSyntaxError`() -> Any
- `test_nonKeywordAfterKeywordSyntaxError`() -> Any
- `test_invalidEscape`() -> Any
- `test_permissionDenied`() -> Any
- `test_pyflakesWarning`() -> Any
- `test_encodedFileUTF8`() -> Any
- `test_CRLFLineEndings`() -> Any
- `test_misencodedFileUTF8`() -> Any
- `test_misencodedFileUTF16`() -> Any
- `test_checkRecursive`() -> Any
- `test_stdinReportsErrors`() -> Any
- `getPyflakesBinary`() -> Any
- `runPyflakes`() -> Any
- `test_goodFile`() -> Any
- `test_fileWithFlakes`() -> Any
- `test_errors_io`() -> Any
- `test_errors_syntax`() -> Any
- `test_readFromStdin`() -> Any
- `evaluate`() -> Any

### Implementation
**Node**

**SysStreamCapturing**

**LoggingReporter**

**TestIterSourceCode**

**TestReporter**

**CheckTests**

**IntegrationTests**

**TestMain**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/test/test_api.py`  
**Dependencies**: `contextlib`, `io`, `os`, `sys`, `shutil`, `subprocess`, `tempfile`, `pyflakes.checker.PYPY`, `pyflakes.messages.UnusedImport`, `pyflakes.reporter.Reporter`, `pyflakes.api.main`, `pyflakes.api.check`, `pyflakes.api.checkPath`, `pyflakes.api.checkRecursive`, `pyflakes.api.iterSourceCode`, `pyflakes.test.harness.TestCase`, `pyflakes.test.harness.skipIf`, `pyflakes.scripts.pyflakes`, `pyflakes`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.test.test_other
:::{doc} TestUnusedAssignment:1121
Tests for warning about unused assignments.
:::
:::{doc} TestIncompatiblePrintOperator:1995
Tests for warning about invalid use of print function.
:::
**Imports**: `sys.version_info`, `pyflakes.messages`, `pyflakes.test.harness.TestCase`, `pyflakes.test.harness.skip`, `pyflakes.test.harness.skipIf`
**Type References**: [[Test]], [[TestAsyncStatements]], [[TestIncompatiblePrintOperator]], [[TestStringFormatting]], [[TestUnusedAssignment]]

### Interface
- `test_duplicateArgs`() -> Any
- `test_localReferencedBeforeAssignment`() -> Any
- `test_redefinedInGenerator`() -> Any
- `test_redefinedInSetComprehension`() -> Any
- `test_redefinedInDictComprehension`() -> Any
- `test_redefinedFunction`() -> Any
- `test_redefined_function_shadows_variable`() -> Any
- `test_redefinedUnderscoreFunction`() -> Any
- `test_redefinedUnderscoreImportation`() -> Any
- `test_redefinedClassFunction`() -> Any
- `test_redefinedIfElseFunction`() -> Any
- `test_redefinedIfFunction`() -> Any
- `test_redefinedTryExceptFunction`() -> Any
- `test_redefinedTryFunction`() -> Any
- `test_redefinedIfElseInListComp`() -> Any
- `test_functionDecorator`() -> Any
- `test_classFunctionDecorator`() -> Any
- `test_modernProperty`() -> Any
- `test_unaryPlus`() -> Any
- `test_undefinedBaseClass`() -> Any
- `test_classNameUndefinedInClassBody`() -> Any
- `test_classNameDefinedPreviously`() -> Any
- `test_classRedefinition`() -> Any
- `test_functionRedefinedAsClass`() -> Any
- `test_classRedefinedAsFunction`() -> Any
- `test_classWithReturn`() -> Any
- `test_moduleWithReturn`() -> Any
- `test_classWithYield`() -> Any
- `test_moduleWithYield`() -> Any
- `test_classWithYieldFrom`() -> Any
- `test_moduleWithYieldFrom`() -> Any
- `test_continueOutsideLoop`() -> Any
- `test_continueInsideLoop`() -> Any
- `test_breakOutsideLoop`() -> Any
- `test_breakInsideLoop`() -> Any
- `test_defaultExceptLast`() -> Any
- `test_defaultExceptNotLast`() -> Any
- `test_starredAssignmentNoError`() -> Any
- `test_starredAssignmentErrors`() -> Any
- `test_doubleAssignment`() -> Any
- `test_doubleAssignmentConditionally`() -> Any
- `test_doubleAssignmentWithUse`() -> Any
- `test_comparison`() -> Any
- `test_identity`() -> Any
- `test_containment`() -> Any
- `test_loopControl`() -> Any
- `test_ellipsis`() -> Any
- `test_extendedSlice`() -> Any
- `test_varAugmentedAssignment`() -> Any
- `test_attrAugmentedAssignment`() -> Any
- `test_globalDeclaredInDifferentScope`() -> Any
- `test_function_arguments`() -> Any
- `test_function_arguments_python3`() -> Any
- `test_unusedVariable`() -> Any
- `test_unusedUnderscoreVariable`() -> Any
- `test_unusedVariableAsLocals`() -> Any
- `test_unusedVariableNoLocals`() -> Any
- `test_unusedReassignedVariable`() -> Any
- `test_variableUsedInLoop`() -> Any
- `test_assignToGlobal`() -> Any
- `test_assignToNonlocal`() -> Any
- `test_assignToMember`() -> Any
- `test_assignInForLoop`() -> Any
- `test_assignInListComprehension`() -> Any
- `test_generatorExpression`() -> Any
- `test_assignmentInsideLoop`() -> Any
- `test_tupleUnpacking`() -> Any
- `test_listUnpacking`() -> Any
- `test_closedOver`() -> Any
- `test_doubleClosedOver`() -> Any
- `test_tracebackhideSpecialVariable`() -> Any
- `test_ifexp`() -> Any
- `test_if_tuple`() -> Any
- `test_withStatementNoNames`() -> Any
- `test_withStatementSingleName`() -> Any
- `test_withStatementAttributeName`() -> Any
- `test_withStatementSubscript`() -> Any
- `test_withStatementSubscriptUndefined`() -> Any
- `test_withStatementTupleNames`() -> Any
- `test_withStatementListNames`() -> Any
- `test_withStatementComplicatedTarget`() -> Any
- `test_withStatementSingleNameUndefined`() -> Any
- `test_withStatementTupleNamesUndefined`() -> Any
- `test_withStatementSingleNameRedefined`() -> Any
- `test_withStatementTupleNamesRedefined`() -> Any
- `test_withStatementUndefinedInside`() -> Any
- `test_withStatementNameDefinedInBody`() -> Any
- `test_withStatementUndefinedInExpression`() -> Any
- `test_dictComprehension`() -> Any
- `test_setComprehensionAndLiteral`() -> Any
- `test_exceptionUsedInExcept`() -> Any
- `test_exceptionUnusedInExcept`() -> Any
- `test_exception_unused_in_except_star`() -> Any
- `test_exceptionUnusedInExceptInFunction`() -> Any
- `test_exceptWithoutNameInFunction`() -> Any
- `test_exceptWithoutNameInFunctionTuple`() -> Any
- `test_augmentedAssignmentImportedFunctionCall`() -> Any
- `test_assert_without_message`() -> Any
- `test_assert_with_message`() -> Any
- `test_assert_tuple`() -> Any
- `test_assert_tuple_empty`() -> Any
- `test_assert_static`() -> Any
- `test_yieldFromUndefined`() -> Any
- `test_f_string`() -> Any
- `test_assign_expr`() -> Any
- `test_assign_expr_generator_scope`() -> Any
- `test_assign_expr_nested`() -> Any
- `test_f_string_without_placeholders`() -> Any
- `test_invalid_dot_format_calls`() -> Any
- `test_invalid_percent_format_calls`() -> Any
- `test_ok_percent_format_cannot_determine_element_count`() -> Any
- `test_asyncDef`() -> Any
- `test_asyncDefAwait`() -> Any
- `test_asyncDefUndefined`() -> Any
- `test_asyncFor`() -> Any
- `test_asyncForUnderscoreLoopVar`() -> Any
- `test_loopControlInAsyncFor`() -> Any
- `test_loopControlInAsyncForElse`() -> Any
- `test_asyncWith`() -> Any
- `test_asyncWithItem`() -> Any
- `test_matmul`() -> Any
- `test_formatstring`() -> Any
- `test_raise_notimplemented`() -> Any
- `test_valid_print`() -> Any
- `test_invalid_print_when_imported_from_future`() -> Any
- `test_print_augmented_assign`() -> Any
- `test_print_function_assignment`() -> Any
- `test_print_in_lambda`() -> Any
- `test_print_returned_in_function`() -> Any
- `test_print_as_condition_test`() -> Any

### Implementation
**Test**

**TestUnusedAssignment**

**TestStringFormatting**

**TestAsyncStatements**

**TestIncompatiblePrintOperator**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/test/test_other.py`  
**Dependencies**: `sys.version_info`, `pyflakes.messages`, `pyflakes.test.harness.TestCase`, `pyflakes.test.harness.skip`, `pyflakes.test.harness.skipIf`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.test.test_builtin

**Imports**: `pyflakes.messages`, `pyflakes.test.harness.TestCase`
**Type References**: [[TestBuiltins]]

### Interface
- `test_builtin_unbound_local`() -> Any
- `test_global_shadowing_builtin`() -> Any

### Implementation
**TestBuiltins**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/test/test_builtin.py`  
**Dependencies**: `pyflakes.messages`, `pyflakes.test.harness.TestCase`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.test.test_dict

**Imports**: `pyflakes.messages`, `pyflakes.test.harness.TestCase`
**Type References**: [[Test]]

### Interface
- `test_duplicate_keys`() -> Any
- `test_duplicate_keys_bytes_vs_unicode_py3`() -> Any
- `test_duplicate_values_bytes_vs_unicode_py3`() -> Any
- `test_multiple_duplicate_keys`() -> Any
- `test_duplicate_keys_in_function`() -> Any
- `test_duplicate_keys_in_lambda`() -> Any
- `test_duplicate_keys_tuples`() -> Any
- `test_duplicate_keys_tuples_int_and_float`() -> Any
- `test_duplicate_keys_ints`() -> Any
- `test_duplicate_keys_bools`() -> Any
- `test_duplicate_keys_bools_false`() -> Any
- `test_duplicate_keys_none`() -> Any
- `test_duplicate_variable_keys`() -> Any
- `test_duplicate_variable_values`() -> Any
- `test_duplicate_variable_values_same_value`() -> Any
- `test_duplicate_key_float_and_int`() -> Any
- `test_no_duplicate_key_error_same_value`() -> Any
- `test_no_duplicate_key_errors`() -> Any
- `test_no_duplicate_keys_tuples_same_first_element`() -> Any
- `test_no_duplicate_key_errors_func_call`() -> Any
- `test_no_duplicate_key_errors_bool_or_none`() -> Any
- `test_no_duplicate_key_errors_ints`() -> Any
- `test_no_duplicate_key_errors_vars`() -> Any
- `test_no_duplicate_key_errors_tuples`() -> Any
- `test_no_duplicate_key_errors_instance_attributes`() -> Any

### Implementation
**Test**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/test/test_dict.py`  
**Dependencies**: `pyflakes.messages`, `pyflakes.test.harness.TestCase`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.scripts.pyflakes

**Imports**: `pyflakes.api.check`, `pyflakes.api.checkPath`, `pyflakes.api.checkRecursive`, `pyflakes.api.iterSourceCode`, `pyflakes.api.main`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/scripts/pyflakes.py`  
**Dependencies**: `pyflakes.api.check`, `pyflakes.api.checkPath`, `pyflakes.api.checkRecursive`, `pyflakes.api.iterSourceCode`, `pyflakes.api.main`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pyflakes.scripts



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pyflakes/scripts/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.config.compat
:::{doc} PathAwareHookProxy:34
this helper wraps around hook callers
until pluggy supports fixingcalls, this one will do

it currently doesn't return full hook caller proxies for fixed hooks,
this may have to be changed later depending on bugs
:::
**Imports**: `__future__.annotations`, `functools`, `pathlib.Path`, `typing.Any`, `typing.Mapping`, `warnings`, `pluggy`, `compat.LEGACY_PATH`, `compat.legacy_path`, `deprecated.HOOK_LEGACY_PATH_ARG`
**Type References**: [[HookCaller]], [[LEGACY_PATH]], [[Mapping]], [[None]], [[Path]], [[PathAwareHookProxy]], [[pluggy.HookCaller]]

### Interface
- `_check_path`(path: Path, fspath: LEGACY_PATH) -> None
- `__init__`(hook_relay: pluggy.HookRelay) -> None
- `__dir__`() -> list[str]
- `__getattr__`(key: str) -> pluggy.HookCaller
- `fixed_hook`() -> Any

### Implementation
**PathAwareHookProxy**
  - hook: pluggy.HookCaller
  - path_value: Path | None
  - fspath_value: LEGACY_PATH | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/config/compat.py`  
**Dependencies**: `__future__.annotations`, `functools`, `pathlib.Path`, `typing.Any`, `typing.Mapping`, `warnings`, `pluggy`, `compat.LEGACY_PATH`, `compat.legacy_path`, `deprecated.HOOK_LEGACY_PATH_ARG`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.config
:::{doc} ExitCode:92
Encodes the valid exit codes by pytest.

Currently users and plugins may supply other exit codes as well.

.. versionadded:: 5.0
:::
:::{doc} filter_traceback_for_conftest_import_failure:128
Filter tracebacks entries which point to pytest internals or importlib.

Make a special case for importlib because we use it to import test modules and conftest files
in _pytest.pathlib.import_path.
:::
:::{doc} main:139
Perform an in-process test run.

:param args:
    List of command line arguments. If `None` or not given, defaults to reading
    arguments directly from the process command line (:data:`sys.argv`).
:param plugins: List of plugin objects to be auto-registered during initialization.

:returns: An exit code.
:::
:::{doc} console_main:194
The CLI entry point of pytest.

This function is not meant for programmable use; use `main()` instead.
:::
:::{doc} filename_arg:216
Argparse type validator for filename arguments.

:path: Path of filename.
:optname: Name of the option.
:::
:::{doc} directory_arg:227
Argparse type validator for directory arguments.

:path: Path of directory.
:optname: Name of the option.
:::
:::{doc} get_plugin_manager:307
Obtain a new instance of the
:py:class:`pytest.PytestPluginManager`, with default plugins
already loaded.

This function can be used by integration with other tools, like hooking
into pytest to run tests into an IDE.
:::
:::{doc} _get_directory:350
Get the directory of a path - itself if already a directory.
:::
:::{doc} PytestPluginManager:391
A :py:class:`pluggy.PluginManager <pluggy.PluginManager>` with
additional pytest-specific functionality:

* Loading plugins from the command line, ``PYTEST_PLUGINS`` env variable and
  ``pytest_plugins`` global variables found in plugins being loaded.
* ``conftest.py`` loading during start-up.
:::
:::{doc} _get_plugin_specs_as_list:871
Parse a plugins specification into a list of plugin names.
:::
:::{doc} _iter_rewritable_modules:900
Given an iterable of file names in a source distribution, return the "names" that should
be marked for assertion rewrite.

For example the package "pytest_mock/__init__.py" should be added as "pytest_mock" in
the assertion rewrite mechanism.

This function has to deal with dist-info based distributions and egg based distributions
(which are still very much in use for "editable" installs).

Here are the file names as seen in a dist-info based distribution:

    pytest_mock/__init__.py
    pytest_mock/_version.py
    pytest_mock/plugin.py
    pytest_mock.egg-info/PKG-INFO

Here are the file names as seen in an egg based distribution:

    src/pytest_mock/__init__.py
    src/pytest_mock/_version.py
    src/pytest_mock/plugin.py
    src/pytest_mock.egg-info/PKG-INFO
    LICENSE
    setup.py

We have to take in account those two distribution flavors in order to determine which
names should be considered for assertion rewriting.

More information:
    https://github.com/pytest-dev/pytest-mock/issues/167
:::
:::{doc} Config:966
Access to configuration values, pluginmanager and plugin hooks.

:param PytestPluginManager pluginmanager:
    A pytest PluginManager.

:param InvocationParams invocation_params:
    Object containing parameters regarding the :func:`pytest.main`
    invocation.
:::
:::{doc} create_terminal_writer:1827
Create a TerminalWriter instance configured according to the options
in the config object.

Every code which requires a TerminalWriter object and has access to a
config object should use this function.
:::
:::{doc} _strtobool:1851
Convert a string representation of truth to True or False.

True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values
are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if
'val' is anything else.

.. note:: Copied from distutils.util.
:::
:::{doc} parse_warning_filter:1870
Parse a warnings filter string.

This is copied from warnings._setoption with the following changes:

* Does not apply the filter.
* Escaping is optional.
* Raises UsageError so we get nice error messages on failure.
:::
:::{doc} _resolve_warning_category:1941
Copied from warnings._getcategory, but changed so it lets exceptions (specially ImportErrors)
propagate so we can get access to their tracebacks (#9218).
:::
:::{doc} apply_warning_filters:1963
Applies pytest-configured filters to the warnings module
:::
**Imports**: `__future__.annotations`, `argparse`, `collections.abc`, `copy`, `dataclasses`, `enum`, `functools.lru_cache`, `glob`, `importlib.metadata`, `inspect`, `os`, `pathlib`, `re`, `shlex`, `sys`, `textwrap.dedent`, `types`, `types.FunctionType`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.Final`, `typing.final`, `typing.Generator`, `typing.IO`, `typing.Iterable`, `typing.Iterator`, `typing.Sequence`, `typing.TextIO`, `typing.Type`, `typing.TYPE_CHECKING`, `warnings`, `pluggy`, `pluggy.HookimplMarker`, `pluggy.HookimplOpts`, `pluggy.HookspecMarker`, `pluggy.HookspecOpts`, `pluggy.PluginManager`, `compat.PathAwareHookProxy`, `exceptions.PrintHelp`, `exceptions.UsageError`, `findpaths.determine_setup`, `_pytest.__version__`, `_pytest._code`, `_pytest._code.ExceptionInfo`, `_pytest._code.filter_traceback`, `_pytest._code.code.TracebackStyle`, `_pytest._io.TerminalWriter`, `_pytest.config.argparsing.Argument`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated`, `_pytest.hookspec`, `_pytest.outcomes.fail`, `_pytest.outcomes.Skipped`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.bestrelpath`, `_pytest.pathlib.import_path`, `_pytest.pathlib.ImportMode`, `_pytest.pathlib.resolve_package_path`, `_pytest.pathlib.safe_exists`, `_pytest.stash.Stash`, `_pytest.warning_types.PytestConfigWarning`, `_pytest.warning_types.warn_explicit_for`, `_pytest.cacheprovider.Cache`, `_pytest.terminal.TerminalReporter`, `_pytest.assertion`, `argparsing.FILE_OR_DIR`, `argparsing.Parser`, `pytest`, `packaging.requirements.InvalidRequirement`, `packaging.requirements.Requirement`, `packaging.version.Version`, `builtins`, `_pytest.assertion`, `packaging.version.Version`, `_pytest.helpconfig.showversion`, `pytest`
**Type References**: [[ArgsSource]], [[Cache]], [[Config]], [[ConftestImportFailure]], [[ExitCode]], [[Final]], [[IO]], [[InvocationParams]], [[None]], [[Notset]], [[Path]], [[PytestPluginManager]], [[Sequence]], [[TerminalReporter]], [[TracebackStyle]], [[Warning]], [[cmdline]], [[pathlib.Path]]

### Interface
- `filter_traceback_for_conftest_import_failure`(entry: _pytest._code.TracebackEntry) -> bool
- `main`(args: list[str] | os.PathLike[str] | None, plugins: Sequence[str | _PluggyPlugin] | None) -> int | ExitCode
- `console_main`() -> int
- `filename_arg`(path: str, optname: str) -> str
- `directory_arg`(path: str, optname: str) -> str
- `get_config`(args: list[str] | None, plugins: Sequence[str | _PluggyPlugin] | None) -> Config
- `get_plugin_manager`() -> PytestPluginManager
- `_prepareconfig`(args: list[str] | os.PathLike[str] | None, plugins: Sequence[str | _PluggyPlugin] | None) -> Config
- `_get_directory`(path: pathlib.Path) -> pathlib.Path
- `_get_legacy_hook_marks`(method: Any, hook_type: str, opt_names: tuple[<ast.Tuple object at 0x1230c8ad0>]) -> dict[<ast.Tuple object at 0x1230bbed0>]
- `_get_plugin_specs_as_list`(specs: None | types.ModuleType | str | Sequence[str]) -> list[str]
- `_iter_rewritable_modules`(package_files: Iterable[str]) -> Iterator[str]
- `_assertion_supported`() -> bool
- `create_terminal_writer`(config: Config, file: TextIO | None) -> TerminalWriter
- `_strtobool`(val: str) -> bool
- `parse_warning_filter`(arg: str) -> tuple[<ast.Tuple object at 0x123421d10>]
- `_resolve_warning_category`(category: str) -> type[Warning]
- `apply_warning_filters`(config_filters: Iterable[str], cmdline_filters: Iterable[str]) -> None
- `__init__`() -> None
- `__str__`() -> str
- `parse_hookimpl_opts`(plugin: _PluggyPlugin, name: str) -> HookimplOpts | None
- `parse_hookspec_opts`(name: str) -> HookspecOpts | None
- `register`(plugin: _PluggyPlugin, name: str | None) -> str | None
- `getplugin`(name: str) -> Any
- `hasplugin`(name: str) -> bool
- `pytest_configure`(config: Config) -> None
- `_set_initial_conftests`(args: Sequence[str | pathlib.Path], pyargs: bool, noconftest: bool, rootpath: pathlib.Path, confcutdir: pathlib.Path | None, invocation_dir: pathlib.Path, importmode: ImportMode | str) -> None
- `_is_in_confcutdir`(path: pathlib.Path) -> bool
- `_try_load_conftest`(anchor: pathlib.Path, importmode: str | ImportMode, rootpath: pathlib.Path) -> None
- `_loadconftestmodules`(path: pathlib.Path, importmode: str | ImportMode, rootpath: pathlib.Path) -> None
- `_getconftestmodules`(path: pathlib.Path) -> Sequence[types.ModuleType]
- `_rget_with_confmod`(name: str, path: pathlib.Path) -> tuple[<ast.Tuple object at 0x123070090>]
- `_importconftest`(conftestpath: pathlib.Path, importmode: str | ImportMode, rootpath: pathlib.Path) -> types.ModuleType
- `_check_non_top_pytest_plugins`(mod: types.ModuleType, conftestpath: pathlib.Path) -> None
- `consider_preparse`(args: Sequence[str]) -> None
- `consider_pluginarg`(arg: str) -> None
- `consider_conftest`(conftestmodule: types.ModuleType, registration_name: str) -> None
- `consider_env`() -> None
- `consider_module`(mod: types.ModuleType) -> None
- `_import_plugin_specs`(spec: None | types.ModuleType | str | Sequence[str]) -> None
- `import_plugin`(modname: str, consider_entry_points: bool) -> None
- `__repr__`() -> Any
- `rootpath`() -> pathlib.Path
- `inipath`() -> pathlib.Path | None
- `add_cleanup`(func: Callable[<ast.Tuple object at 0x1231226d0>]) -> None
- `_do_configure`() -> None
- `_ensure_unconfigure`() -> None
- `get_terminal_writer`() -> TerminalWriter
- `pytest_cmdline_parse`(pluginmanager: PytestPluginManager, args: list[str]) -> Config
- `notify_exception`(excinfo: ExceptionInfo[BaseException], option: argparse.Namespace | None) -> None
- `cwd_relative_nodeid`(nodeid: str) -> str
- `fromdictargs`() -> Config
- `_processopt`(opt: Argument) -> None
- `pytest_load_initial_conftests`(early_config: Config) -> None
- `_initini`(args: Sequence[str]) -> None
- `_consider_importhook`(args: Sequence[str]) -> None
- `_mark_plugins_for_rewrite`() -> None
- `_validate_args`(args: list[str], via: str) -> list[str]
- `_decide_args`() -> tuple[<ast.Tuple object at 0x1231767d0>]
- `_preparse`(args: list[str], addopts: bool) -> None
- `pytest_collection`() -> Generator[<ast.Tuple object at 0x12318efd0>]
- `_checkversion`() -> None
- `_validate_config_options`() -> None
- `_validate_plugins`() -> None
- `_warn_or_fail_if_strict`(message: str) -> None
- `_get_unknown_ini_keys`() -> list[str]
- `parse`(args: list[str], addopts: bool) -> None
- `issue_config_time_warning`(warning: Warning, stacklevel: int) -> None
- `addinivalue_line`(name: str, line: str) -> None
- `getini`(name: str) -> Any
- `_getini_unknown_type`(name: str, type: str, value: str | list[str]) -> Any
- `_getini`(name: str) -> Any
- `_getconftest_pathlist`(name: str, path: pathlib.Path) -> list[pathlib.Path] | None
- `_get_override_ini_value`(name: str) -> str | None
- `getoption`(name: str, skip: bool) -> Any
- `getvalue`(name: str) -> Any
- `getvalueorskip`(name: str) -> Any
- `get_verbosity`(verbosity_type: str | None) -> int
- `_verbosity_ini_name`(verbosity_type: str) -> str
- `_add_verbosity_ini`(parser: Parser, verbosity_type: str, help: str) -> None
- `_warn_about_missing_assertion`(mode: str) -> None
- `_warn_about_skipped_plugins`() -> None

### Implementation
**ExitCode**

**ConftestImportFailure**

**cmdline**

**PytestPluginManager**
  - plugin: _PluggyPlugin | None
  - err: IO[str]
  - encoding: str
**Notset**

**Config**
  - cache: Cache
  - VERBOSITY_ASSERTIONS: Final
  - VERBOSITY_TEST_CASES: Final
  - _VERBOSITY_INI_DEFAULT: Final
  - args: tuple[<ast.Tuple object at 0x123005010>]
  - plugins: Sequence[str | _PluggyPlugin] | None
  - dir: pathlib.Path
  - terminalreporter: TerminalReporter | None
  - values: list[pathlib.Path]
  - style: TracebackStyle
**InvocationParams**
  - args: tuple[<ast.Tuple object at 0x123005010>]
  - plugins: Sequence[str | _PluggyPlugin] | None
  - dir: pathlib.Path
**ArgsSource**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/config/__init__.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `collections.abc`, `copy`, `dataclasses`, `enum`, `functools.lru_cache`, `glob`, `importlib.metadata`, `inspect`, `os`, `pathlib`, `re`, `shlex`, `sys`, `textwrap.dedent`, `types`, `types.FunctionType`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.Final`, `typing.final`, `typing.Generator`, `typing.IO`, `typing.Iterable`, `typing.Iterator`, `typing.Sequence`, `typing.TextIO`, `typing.Type`, `typing.TYPE_CHECKING`, `warnings`, `pluggy`, `pluggy.HookimplMarker`, `pluggy.HookimplOpts`, `pluggy.HookspecMarker`, `pluggy.HookspecOpts`, `pluggy.PluginManager`, `compat.PathAwareHookProxy`, `exceptions.PrintHelp`, `exceptions.UsageError`, `findpaths.determine_setup`, `_pytest.__version__`, `_pytest._code`, `_pytest._code.ExceptionInfo`, `_pytest._code.filter_traceback`, `_pytest._code.code.TracebackStyle`, `_pytest._io.TerminalWriter`, `_pytest.config.argparsing.Argument`, `_pytest.config.argparsing.Parser`, `_pytest.deprecated`, `_pytest.hookspec`, `_pytest.outcomes.fail`, `_pytest.outcomes.Skipped`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.bestrelpath`, `_pytest.pathlib.import_path`, `_pytest.pathlib.ImportMode`, `_pytest.pathlib.resolve_package_path`, `_pytest.pathlib.safe_exists`, `_pytest.stash.Stash`, `_pytest.warning_types.PytestConfigWarning`, `_pytest.warning_types.warn_explicit_for`, `_pytest.cacheprovider.Cache`, `_pytest.terminal.TerminalReporter`, `_pytest.assertion`, `argparsing.FILE_OR_DIR`, `argparsing.Parser`, `pytest`, `packaging.requirements.InvalidRequirement`, `packaging.requirements.Requirement`, `packaging.version.Version`, `builtins`, `_pytest.assertion`, `packaging.version.Version`, `_pytest.helpconfig.showversion`, `pytest`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.config.findpaths
:::{doc} _parse_ini_config:18
Parse the given generic '.ini' file using legacy IniConfig parser, returning
the parsed object.

Raise UsageError if the file cannot be parsed.
:::
:::{doc} load_config_dict_from_file:30
Load pytest configuration from the given file path, if supported.

Return None if the file does not contain valid pytest configuration.
:::
:::{doc} locate_config:85
Search in the list of arguments for a valid ini-file for pytest,
and return a tuple of (rootdir, inifile, cfg-dict).
:::
:::{doc} determine_setup:169
Determine the rootdir, inifile and ini configuration values from the
command line arguments.

:param inifile:
    The `--inifile` command line argument, if given.
:param args:
    The free command line arguments.
:param rootdir_cmd_arg:
    The `--rootdir` command line argument, if given.
:param invocation_dir:
    The working directory when pytest was invoked.
:::
:::{doc} is_fs_root:223
Return True if the given path is pointing to the root of the
file system ("/" on Unix and "C:\\" on Windows for example).
:::
**Imports**: `__future__.annotations`, `os`, `pathlib.Path`, `sys`, `typing.Iterable`, `typing.Sequence`, `iniconfig`, `exceptions.UsageError`, `_pytest.outcomes.fail`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.commonpath`, `_pytest.pathlib.safe_exists`, `tomllib`, `tomli`
**Type References**: [[None]], [[Path]]

### Interface
- `_parse_ini_config`(path: Path) -> iniconfig.IniConfig
- `load_config_dict_from_file`(filepath: Path) -> dict[<ast.Tuple object at 0x123436590>] | None
- `locate_config`(invocation_dir: Path, args: Iterable[Path]) -> tuple[<ast.Tuple object at 0x123452210>]
- `get_common_ancestor`(invocation_dir: Path, paths: Iterable[Path]) -> Path
- `get_dirs_from_args`(args: Iterable[str]) -> list[Path]
- `determine_setup`() -> tuple[<ast.Tuple object at 0x123476ad0>]
- `is_fs_root`(p: Path) -> bool
- `is_option`(x: str) -> bool
- `get_file_part_from_node_id`(x: str) -> str
- `get_dir_from_path`(path: Path) -> Path
- `make_scalar`(v: object) -> str | list[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/config/findpaths.py`  
**Dependencies**: `__future__.annotations`, `os`, `pathlib.Path`, `sys`, `typing.Iterable`, `typing.Sequence`, `iniconfig`, `exceptions.UsageError`, `_pytest.outcomes.fail`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.commonpath`, `_pytest.pathlib.safe_exists`, `tomllib`, `tomli`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.config.exceptions
:::{doc} UsageError:7
Error in pytest usage or invocation.
:::
:::{doc} PrintHelp:11
Raised when pytest should print its help to skip the rest of the
argument parsing and validation.
:::
**Imports**: `__future__.annotations`, `typing.final`
**Type References**: [[PrintHelp]], [[UsageError]]


### Implementation
**UsageError**

**PrintHelp**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/config/exceptions.py`  
**Dependencies**: `__future__.annotations`, `typing.final`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.config.argparsing
:::{doc} Parser:35
Parser for command line arguments and ini-file values.

:ivar extra_info: Dict of generic param -> value to display in case
    there's an error processing the command line arguments.
:::
:::{doc} get_ini_default_for_type:223
Used by addini to get the default value for a given ini-option type, when
default is not supplied.
:::
:::{doc} ArgumentError:240
Raised if an Argument instance is created with invalid or
inconsistent arguments.
:::
:::{doc} Argument:255
Class that mimics the necessary behaviour of optparse.Option.

It's currently a least effort implementation and ignoring choices
and integer prefixes.

https://docs.python.org/3/library/optparse.html#optparse-standard-option-types
:::
:::{doc} OptionGroup:348
A group of options shown in its own section.
:::
:::{doc} DropShorterLongHelpFormatter:489
Shorten help for long options that differ only in extra hyphens.

- Collapse **long** options that are the same except for extra hyphens.
- Shortcut if there are only two options and one of them is a short one.
- Cache result on the action object as this is called at least 2 times.
:::
**Imports**: `__future__.annotations`, `argparse`, `gettext.gettext`, `os`, `sys`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.final`, `typing.List`, `typing.Literal`, `typing.Mapping`, `typing.NoReturn`, `typing.Sequence`, `_pytest._io`, `_pytest.config.exceptions.UsageError`, `_pytest.deprecated.check_ispytest`, `_pytest._argcomplete.try_argcomplete`, `_pytest._argcomplete.filescompleter`, `textwrap`
**Type References**: [[Argument]], [[ArgumentError]], [[DropShorterLongHelpFormatter]], [[MyOptionParser]], [[None]], [[NotSet]], [[OptionGroup]], [[Parser]]

### Interface
- `get_ini_default_for_type`(type: Literal[<ast.Tuple object at 0x12349f290>] | None) -> Any
- `__repr__`() -> str
- `__init__`() -> None
- `processoption`(option: Argument) -> None
- `getgroup`(name: str, description: str, after: str | None) -> OptionGroup
- `addoption`() -> None
- `parse`(args: Sequence[str | os.PathLike[str]], namespace: argparse.Namespace | None) -> argparse.Namespace
- `_getparser`() -> MyOptionParser
- `parse_setoption`(args: Sequence[str | os.PathLike[str]], option: argparse.Namespace, namespace: argparse.Namespace | None) -> list[str]
- `parse_known_args`(args: Sequence[str | os.PathLike[str]], namespace: argparse.Namespace | None) -> argparse.Namespace
- `parse_known_and_unknown_args`(args: Sequence[str | os.PathLike[str]], namespace: argparse.Namespace | None) -> tuple[<ast.Tuple object at 0x1234c0fd0>]
- `addini`(name: str, help: str, type: Literal[<ast.Tuple object at 0x1234c0690>] | None, default: Any) -> None
- `__str__`() -> str
- `names`() -> list[str]
- `attrs`() -> Mapping[<ast.Tuple object at 0x1234ca450>]
- `_set_opt_strings`(opts: Sequence[str]) -> None
- `_addoption`() -> None
- `_addoption_instance`(option: Argument, shortupper: bool) -> None
- `error`(message: str) -> NoReturn
- `parse_args`(args: Sequence[str] | None, namespace: argparse.Namespace | None) -> argparse.Namespace
- `_format_action_invocation`(action: argparse.Action) -> str
- `_split_lines`() -> Any
- `_parse_optional`(arg_string: str) -> tuple[<ast.Tuple object at 0x12350d890>] | None

### Implementation
**NotSet**

**Parser**
  - prog: str | None
**ArgumentError**

**Argument**
  - dest: str | None
  - args: list[str]
**OptionGroup**

**MyOptionParser**

**DropShorterLongHelpFormatter**
  - res: str | None
  - short_long: dict[<ast.Tuple object at 0x12351e750>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/config/argparsing.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `gettext.gettext`, `os`, `sys`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.final`, `typing.List`, `typing.Literal`, `typing.Mapping`, `typing.NoReturn`, `typing.Sequence`, `_pytest._io`, `_pytest.config.exceptions.UsageError`, `_pytest.deprecated.check_ispytest`, `_pytest._argcomplete.try_argcomplete`, `_pytest._argcomplete.filescompleter`, `textwrap`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.mark
:::{doc} param:48
Specify a parameter in `pytest.mark.parametrize`_ calls or
:ref:`parametrized fixtures <fixture-parametrize-marks>`.

.. code-block:: python

    @pytest.mark.parametrize(
        "test_input,expected",
        [
            ("3+5", 8),
            pytest.param("6*9", 42, marks=pytest.mark.xfail),
        ],
    )
    def test_eval(test_input, expected):
        assert eval(test_input) == expected

:param values: Variable args of the values of the parameter set, in order.
:param marks: A single mark or a list of marks to be applied to this parameter set.
:param id: The id to attribute to this parameter set.
:::
:::{doc} KeywordMatcher:138
A matcher for keywords.

Given a list of names, matches any substring of one of these names. The
string inclusion check is case-insensitive.

Will match on the name of colitem, including the names of its parents.
Only matches names of items which are either a :class:`Class` or a
:class:`Function`.

Additionally, matches on names in the 'extra_keyword_matches' set of
any item, as well as names directly assigned to test functions.
:::
:::{doc} MarkMatcher:220
A matcher for markers which are present.

Tries to match on any marker names, attached to the given colitem.
:::
**Imports**: `__future__.annotations`, `collections`, `dataclasses`, `typing.AbstractSet`, `typing.Collection`, `typing.Iterable`, `typing.Optional`, `typing.TYPE_CHECKING`, `expression.Expression`, `expression.ParseError`, `structures.EMPTY_PARAMETERSET_OPTION`, `structures.get_empty_parameterset_mark`, `structures.Mark`, `structures.MARK_GEN`, `structures.MarkDecorator`, `structures.MarkGenerator`, `structures.ParameterSet`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.hookimpl`, `_pytest.config.UsageError`, `_pytest.config.argparsing.NOT_SET`, `_pytest.config.argparsing.Parser`, `_pytest.stash.StashKey`, `_pytest.nodes.Item`, `_pytest.config`, `pytest`
**Type References**: [[AbstractSet]], [[Item]], [[KeywordMatcher]], [[Mark]], [[MarkMatcher]]

### Interface
- `param`() -> ParameterSet
- `pytest_addoption`(parser: Parser) -> None
- `pytest_cmdline_main`(config: Config) -> int | ExitCode | None
- `deselect_by_keyword`(items: list[Item], config: Config) -> None
- `deselect_by_mark`(items: list[Item], config: Config) -> None
- `_parse_expression`(expr: str, exc_message: str) -> Expression
- `pytest_collection_modifyitems`(items: list[Item], config: Config) -> None
- `pytest_configure`(config: Config) -> None
- `pytest_unconfigure`(config: Config) -> None
- `from_item`(item: Item) -> KeywordMatcher
- `__call__`() -> bool
- `from_markers`(markers: Iterable[Mark]) -> MarkMatcher

### Implementation
**KeywordMatcher**
  - _names: AbstractSet[str]
**MarkMatcher**
  - own_mark_name_mapping: dict[<ast.Tuple object at 0x123561310>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/mark/__init__.py`  
**Dependencies**: `__future__.annotations`, `collections`, `dataclasses`, `typing.AbstractSet`, `typing.Collection`, `typing.Iterable`, `typing.Optional`, `typing.TYPE_CHECKING`, `expression.Expression`, `expression.ParseError`, `structures.EMPTY_PARAMETERSET_OPTION`, `structures.get_empty_parameterset_mark`, `structures.Mark`, `structures.MARK_GEN`, `structures.MarkDecorator`, `structures.MarkGenerator`, `structures.ParameterSet`, `_pytest.config.Config`, `_pytest.config.ExitCode`, `_pytest.config.hookimpl`, `_pytest.config.UsageError`, `_pytest.config.argparsing.NOT_SET`, `_pytest.config.argparsing.Parser`, `_pytest.stash.StashKey`, `_pytest.nodes.Item`, `_pytest.config`, `pytest`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.mark.structures
:::{doc} Mark:194
A pytest mark.
:::
:::{doc} MarkDecorator:268
A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
:::
:::{doc} get_unpacked_marks:361
Obtain the unpacked marks that are stored on an object.

If obj is a class and consider_mro is true, return marks applied to
this class and all of its super-classes in MRO order. If consider_mro
is false, only return marks applied directly to this class.
:::
:::{doc} normalize_mark_list:394
Normalize an iterable of Mark or MarkDecorator objects into a list of marks
by retrieving the `mark` attribute on MarkDecorator instances.

:param mark_list: marks to normalize
:returns: A new list of the extracted Mark objects
:::
:::{doc} store_mark:411
Store a Mark on an object.

This is used to implement the Mark declarations/decorators correctly.
:::
:::{doc} MarkGenerator:485
Factory for :class:`MarkDecorator` objects - exposed as
a ``pytest.mark`` singleton instance.

Example::

     import pytest


     @pytest.mark.slowtest
     def test_function():
         pass

applies a 'slowtest' :class:`Mark` on ``test_function``.
:::
**Imports**: `__future__.annotations`, `collections.abc`, `dataclasses`, `inspect`, `typing.Any`, `typing.Callable`, `typing.Collection`, `typing.final`, `typing.Iterable`, `typing.Iterator`, `typing.Mapping`, `typing.MutableMapping`, `typing.NamedTuple`, `typing.overload`, `typing.Sequence`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `typing.Union`, `warnings`, `_code.getfslineno`, `compat.ascii_escaped`, `compat.NOTSET`, `compat.NotSetType`, `_pytest.config.Config`, `_pytest.deprecated.check_ispytest`, `_pytest.deprecated.MARKED_FIXTURE`, `_pytest.outcomes.fail`, `_pytest.scope._ScopeName`, `_pytest.warning_types.PytestUnknownMarkWarning`, `nodes.Node`, `nodes.Collector`, `fixtures.getfixturemarker`
**Type References**: [[Any]], [[Collection]], [[Mapping]], [[Mark]], [[MarkDecorator]], [[MarkGenerator]], [[NodeKeywords]], [[None]], [[ParameterSet]], [[Sequence]], [[_FilterwarningsMarkDecorator]], [[_ParametrizeMarkDecorator]], [[_SkipMarkDecorator]], [[_SkipifMarkDecorator]], [[_UsefixturesMarkDecorator]], [[_XfailMarkDecorator]]

### Interface
- `istestfunc`() -> bool
- `get_empty_parameterset_mark`(config: Config, argnames: Sequence[str]) -> MarkDecorator
- `get_unpacked_marks`(obj: object | type) -> list[Mark]
- `normalize_mark_list`(mark_list: Iterable[Mark | MarkDecorator]) -> Iterable[Mark]
- `store_mark`(mark: Mark) -> None
- `param`() -> ParameterSet
- `extract_from`(parameterset: ParameterSet | Sequence[object] | object, force_tuple: bool) -> ParameterSet
- `_parse_parametrize_args`(argnames: str | Sequence[str], argvalues: Iterable[ParameterSet | Sequence[object] | object]) -> tuple[<ast.Tuple object at 0x123584cd0>]
- `_parse_parametrize_parameters`(argvalues: Iterable[ParameterSet | Sequence[object] | object], force_tuple: bool) -> list[ParameterSet]
- `_for_parametrize`(argnames: str | Sequence[str], argvalues: Iterable[ParameterSet | Sequence[object] | object], config: Config, nodeid: str) -> tuple[<ast.Tuple object at 0x1235c0790>]
- `__init__`(node: Node) -> None
- `_has_param_ids`() -> bool
- `combined_with`(other: Mark) -> Mark
- `name`() -> str
- `args`() -> tuple[<ast.Tuple object at 0x1235c8190>]
- `kwargs`() -> Mapping[<ast.Tuple object at 0x1235c8b50>]
- `markname`() -> str
- `with_args`() -> MarkDecorator
- `__call__`() -> MarkDecorator
- `__getattr__`(name: str) -> MarkDecorator
- `__getitem__`(key: str) -> Any
- `__setitem__`(key: str, value: Any) -> None
- `__contains__`(key: object) -> bool
- `update`(other: Mapping[<ast.Tuple object at 0x123612a50>] | Iterable[tuple[<ast.Tuple object at 0x123612e50>]]) -> None
- `__delitem__`(key: str) -> None
- `__iter__`() -> Iterator[str]
- `__len__`() -> int
- `__repr__`() -> str

### Implementation
**ParameterSet**
  - values: Sequence[object | NotSetType]
  - marks: Collection[MarkDecorator | Mark]
  - id: str | None
**Mark**
  - name: str
  - args: tuple[<ast.Tuple object at 0x1235c25d0>]
  - kwargs: Mapping[<ast.Tuple object at 0x1235c2990>]
  - _param_ids_from: Mark | None
  - _param_ids_generated: Sequence[str] | None
  - param_ids_from: Mark | None
**MarkDecorator**
  - mark: Mark
**MarkGenerator**
  - skip: _SkipMarkDecorator
  - skipif: _SkipifMarkDecorator
  - xfail: _XfailMarkDecorator
  - parametrize: _ParametrizeMarkDecorator
  - usefixtures: _UsefixturesMarkDecorator
  - filterwarnings: _FilterwarningsMarkDecorator
**NodeKeywords**

**_SkipMarkDecorator**

**_SkipifMarkDecorator**

**_XfailMarkDecorator**

**_ParametrizeMarkDecorator**

**_UsefixturesMarkDecorator**

**_FilterwarningsMarkDecorator**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/mark/structures.py`  
**Dependencies**: `__future__.annotations`, `collections.abc`, `dataclasses`, `inspect`, `typing.Any`, `typing.Callable`, `typing.Collection`, `typing.final`, `typing.Iterable`, `typing.Iterator`, `typing.Mapping`, `typing.MutableMapping`, `typing.NamedTuple`, `typing.overload`, `typing.Sequence`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `typing.Union`, `warnings`, `_code.getfslineno`, `compat.ascii_escaped`, `compat.NOTSET`, `compat.NotSetType`, `_pytest.config.Config`, `_pytest.deprecated.check_ispytest`, `_pytest.deprecated.MARKED_FIXTURE`, `_pytest.outcomes.fail`, `_pytest.scope._ScopeName`, `_pytest.warning_types.PytestUnknownMarkWarning`, `nodes.Node`, `nodes.Collector`, `fixtures.getfixturemarker`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.mark.expression
:::{doc} ParseError:67
The expression contains invalid syntax.

:param column: The column in the line where the error occurred (1-based).
:param message: A description of the error.
:::
:::{doc} MatcherAdapter:282
Adapts a matcher function to a locals mapping as required by eval().
:::
:::{doc} Expression:298
A compiled match expression as used by -k and -m.

The expression can be evaluated against different matchers.
:::
**Imports**: `__future__.annotations`, `ast`, `dataclasses`, `enum`, `keyword`, `re`, `types`, `typing.Iterator`, `typing.Literal`, `typing.Mapping`, `typing.NoReturn`, `typing.overload`, `typing.Protocol`, `typing.Sequence`
**Type References**: [[CodeType]], [[Expression]], [[MatcherAdapter]], [[MatcherCall]], [[MatcherNameAdapter]], [[None]], [[ParseError]], [[Scanner]], [[Token]], [[TokenType]], [[types.CodeType]]

### Interface
- `expression`(s: Scanner) -> ast.Expression
- `expr`(s: Scanner) -> ast.expr
- `and_expr`(s: Scanner) -> ast.expr
- `not_expr`(s: Scanner) -> ast.expr
- `single_kwarg`(s: Scanner) -> ast.keyword
- `all_kwargs`(s: Scanner) -> list[ast.keyword]
- `__init__`(code: types.CodeType) -> None
- `__str__`() -> str
- `lex`(input: str) -> Iterator[Token]
- `accept`(type: TokenType) -> Token | None
- `reject`(expected: Sequence[TokenType]) -> NoReturn
- `__call__`() -> bool
- `__bool__`() -> bool
- `__getitem__`(key: str) -> MatcherNameAdapter
- `__iter__`() -> Iterator[str]
- `__len__`() -> int
- `compile`(input: str) -> Expression
- `evaluate`(matcher: MatcherCall) -> bool

### Implementation
**TokenType**

**Token**
  - type: TokenType
  - value: str
  - pos: int
**ParseError**

**Scanner**

**MatcherCall**

**MatcherNameAdapter**
  - matcher: MatcherCall
  - name: str
**MatcherAdapter**

**Expression**
  - code: types.CodeType
  - ret: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/mark/expression.py`  
**Dependencies**: `__future__.annotations`, `ast`, `dataclasses`, `enum`, `keyword`, `re`, `types`, `typing.Iterator`, `typing.Literal`, `typing.Mapping`, `typing.NoReturn`, `typing.overload`, `typing.Protocol`, `typing.Sequence`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest._code.code
:::{doc} Code:62
Wrapper around Python code objects.
:::
:::{doc} Frame:131
Wrapper around a Python frame holding f_locals and f_globals
in which expressions can be evaluated.
:::
:::{doc} TracebackEntry:193
A single entry in a Traceback.
:::
:::{doc} Traceback:323
Traceback objects encapsulate and offer higher level access to Traceback entries.
:::
:::{doc} ExceptionInfo:437
Wraps sys.exc_info() objects and offers help for navigating the traceback.
:::
:::{doc} FormattedExcinfo:793
Presenting information about failing Functions and Generators.
:::
:::{doc} getfslineno:1337
Return source location (path, lineno) for the given object.

If the source cannot be determined return ("", -1).

The line number is 0-based.
:::
:::{doc} filter_traceback:1383
Return True if a TracebackEntry instance should be included in tracebacks.

We hide traceback entries of:

* dynamically generated code (no code to show up for it);
* internal traceback from pytest or its internal libraries, py and pluggy.
:::
**Imports**: `__future__.annotations`, `ast`, `dataclasses`, `inspect`, `inspect.CO_VARARGS`, `inspect.CO_VARKEYWORDS`, `io.StringIO`, `os`, `pathlib.Path`, `re`, `sys`, `traceback`, `traceback.format_exception_only`, `types.CodeType`, `types.FrameType`, `types.TracebackType`, `typing.Any`, `typing.Callable`, `typing.ClassVar`, `typing.Final`, `typing.final`, `typing.Generic`, `typing.Iterable`, `typing.List`, `typing.Literal`, `typing.Mapping`, `typing.overload`, `typing.Pattern`, `typing.Sequence`, `typing.SupportsIndex`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `pluggy`, `_pytest`, `_pytest._code.source.findsource`, `_pytest._code.source.getrawcode`, `_pytest._code.source.getstatementrange_ast`, `_pytest._code.source.Source`, `_pytest._io.TerminalWriter`, `_pytest._io.saferepr.safeformat`, `_pytest._io.saferepr.saferepr`, `_pytest.compat.get_real_func`, `_pytest.deprecated.check_ispytest`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.bestrelpath`, `exceptiongroup.BaseExceptionGroup`
**Type References**: [[AST]], [[Any]], [[BaseException]], [[Callable]], [[ClassVar]], [[Code]], [[E]], [[ExceptionChainRepr]], [[ExceptionInfo]], [[ExceptionRepr]], [[FormattedExcinfo]], [[Frame]], [[None]], [[Path]], [[ReprEntry]], [[ReprEntryNative]], [[ReprExceptionInfo]], [[ReprFileLocation]], [[ReprFuncArgs]], [[ReprLocals]], [[ReprTraceback]], [[ReprTracebackNative]], [[Sequence]], [[TerminalRepr]], [[Traceback]], [[TracebackEntry]], [[TracebackStyle]], [[TracebackType]], [[ast.AST]]

### Interface
- `getfslineno`(obj: object) -> tuple[<ast.Tuple object at 0x124852fd0>]
- `filter_traceback`(entry: TracebackEntry) -> bool
- `__init__`(tblines: Sequence[str]) -> None
- `from_function`(obj: object) -> Code
- `__eq__`() -> Any
- `firstlineno`() -> int
- `name`() -> str
- `path`() -> Path | str
- `fullsource`() -> Source | None
- `source`() -> Source
- `getargs`(var: bool) -> Any
- `lineno`() -> int
- `f_globals`() -> dict[<ast.Tuple object at 0x1236a8a50>]
- `f_locals`() -> dict[<ast.Tuple object at 0x1236a8190>]
- `code`() -> Code
- `statement`() -> Source
- `eval`() -> Any
- `repr`(object: object) -> str
- `with_repr_style`(repr_style: Literal[<ast.Tuple object at 0x12369dc50>] | None) -> TracebackEntry
- `frame`() -> Frame
- `relline`() -> int
- `__repr__`() -> str
- `locals`() -> dict[<ast.Tuple object at 0x12371dd10>]
- `getfirstlinesource`() -> int
- `getsource`(astcache: dict[<ast.Tuple object at 0x12371e950>] | None) -> Source | None
- `ishidden`(excinfo: ExceptionInfo[BaseException] | None) -> bool
- `__str__`() -> str
- `cut`(path: os.PathLike[str] | str | None, lineno: int | None, firstlineno: int | None, excludepath: os.PathLike[str] | None) -> Traceback
- `__getitem__`(key: SupportsIndex | slice) -> TracebackEntry | Traceback
- `filter`() -> Traceback
- `recursionindex`() -> int | None
- `from_exception`(exception: E, exprinfo: str | None) -> ExceptionInfo[E]
- `from_exc_info`(exc_info: tuple[<ast.Tuple object at 0x123702050>], exprinfo: str | None) -> ExceptionInfo[E]
- `from_current`(exprinfo: str | None) -> ExceptionInfo[BaseException]
- `for_later`() -> ExceptionInfo[E]
- `fill_unfilled`(exc_info: tuple[<ast.Tuple object at 0x12372bad0>]) -> None
- `type`() -> type[E]
- `value`() -> E
- `tb`() -> TracebackType
- `typename`() -> str
- `traceback`(value: Traceback) -> None
- `exconly`(tryshort: bool) -> str
- `errisinstance`(exc: EXCEPTION_OR_MORE) -> bool
- `_getreprcrash`() -> ReprFileLocation | None
- `getrepr`(showlocals: bool, style: TracebackStyle, abspath: bool, tbfilter: bool | Callable[<ast.Tuple object at 0x12374f6d0>], funcargs: bool, truncate_locals: bool, truncate_args: bool, chain: bool) -> ReprExceptionInfo | ExceptionChainRepr
- `_stringify_exception`(exc: BaseException) -> str
- `match`(regexp: str | Pattern[str]) -> Literal[True]
- `_group_contains`(exc_group: BaseExceptionGroup[BaseException], expected_exception: EXCEPTION_OR_MORE, match: str | Pattern[str] | None, target_depth: int | None, current_depth: int) -> bool
- `group_contains`(expected_exception: EXCEPTION_OR_MORE) -> bool
- `_getindent`(source: Source) -> int
- `_getentrysource`(entry: TracebackEntry) -> Source | None
- `repr_args`(entry: TracebackEntry) -> ReprFuncArgs | None
- `get_source`(source: Source | None, line_index: int, excinfo: ExceptionInfo[BaseException] | None, short: bool) -> list[str]
- `get_exconly`(excinfo: ExceptionInfo[BaseException], indent: int, markall: bool) -> list[str]
- `repr_locals`(locals: Mapping[<ast.Tuple object at 0x1237a0910>]) -> ReprLocals | None
- `repr_traceback_entry`(entry: TracebackEntry | None, excinfo: ExceptionInfo[BaseException] | None) -> ReprEntry
- `_makepath`(path: Path | str) -> str
- `repr_traceback`(excinfo: ExceptionInfo[BaseException]) -> ReprTraceback
- `_truncate_recursive_traceback`(traceback: Traceback) -> tuple[<ast.Tuple object at 0x1237d9310>]
- `repr_excinfo`(excinfo: ExceptionInfo[BaseException]) -> ExceptionChainRepr
- `toterminal`(tw: TerminalWriter) -> None
- `addsection`(name: str, content: str, sep: str) -> None
- `_write_entry_lines`(tw: TerminalWriter) -> None
- `__post_init__`() -> None
- `f`(cur: TracebackType) -> Iterable[TracebackEntry]

### Implementation
**Code**

**Frame**

**TracebackEntry**
  - tbh: bool | Callable[<ast.Tuple object at 0x1236dcdd0>]
**Traceback**
  - cache: dict[<ast.Tuple object at 0x1236b13d0>]
  - cur_: TracebackType | None
**ExceptionInfo**
  - _assert_start_repr: ClassVar
  - _excinfo: tuple[<ast.Tuple object at 0x123709990>] | None
  - _striptext: str
  - _traceback: Traceback | None
**FormattedExcinfo**
  - flow_marker: ClassVar
  - fail_marker: ClassVar
  - showlocals: bool
  - style: TracebackStyle
  - abspath: bool
  - tbfilter: bool | Callable[<ast.Tuple object at 0x123775890>]
  - funcargs: bool
  - truncate_locals: bool
  - truncate_args: bool
  - chain: bool
  - astcache: dict[<ast.Tuple object at 0x123776690>]
  - lines: list[str]
  - repr_chain: list[tuple[<ast.Tuple object at 0x1237d9e50>]]
  - e: BaseException | None
  - excinfo_: ExceptionInfo[BaseException] | None
  - seen: set[int]
  - extraline: str | None
  - reprtraceback: ReprTracebackNative | ReprTraceback
**TerminalRepr**

**ExceptionRepr**
  - reprtraceback: ReprTraceback
  - reprcrash: ReprFileLocation | None
  - sections: list[tuple[<ast.Tuple object at 0x1237f3d10>]]
**ExceptionChainRepr**
  - chain: Sequence[tuple[<ast.Tuple object at 0x1237fa850>]]
**ReprExceptionInfo**
  - reprtraceback: ReprTraceback
  - reprcrash: ReprFileLocation | None
**ReprTraceback**
  - reprentries: Sequence[ReprEntry | ReprEntryNative]
  - extraline: str | None
  - style: TracebackStyle
  - entrysep: ClassVar
**ReprTracebackNative**

**ReprEntryNative**
  - lines: Sequence[str]
  - style: ClassVar[TracebackStyle]
**ReprEntry**
  - lines: Sequence[str]
  - reprfuncargs: ReprFuncArgs | None
  - reprlocals: ReprLocals | None
  - reprfileloc: ReprFileLocation | None
  - style: TracebackStyle
  - indents: list[str]
  - source_lines: list[str]
  - failure_lines: list[str]
**ReprFileLocation**
  - path: str
  - lineno: int
  - message: str
**ReprLocals**
  - lines: Sequence[str]
**ReprFuncArgs**
  - args: Sequence[tuple[<ast.Tuple object at 0x1248484d0>]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/_code/code.py`  
**Dependencies**: `__future__.annotations`, `ast`, `dataclasses`, `inspect`, `inspect.CO_VARARGS`, `inspect.CO_VARKEYWORDS`, `io.StringIO`, `os`, `pathlib.Path`, `re`, `sys`, `traceback`, `traceback.format_exception_only`, `types.CodeType`, `types.FrameType`, `types.TracebackType`, `typing.Any`, `typing.Callable`, `typing.ClassVar`, `typing.Final`, `typing.final`, `typing.Generic`, `typing.Iterable`, `typing.List`, `typing.Literal`, `typing.Mapping`, `typing.overload`, `typing.Pattern`, `typing.Sequence`, `typing.SupportsIndex`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `pluggy`, `_pytest`, `_pytest._code.source.findsource`, `_pytest._code.source.getrawcode`, `_pytest._code.source.getstatementrange_ast`, `_pytest._code.source.Source`, `_pytest._io.TerminalWriter`, `_pytest._io.saferepr.safeformat`, `_pytest._io.saferepr.saferepr`, `_pytest.compat.get_real_func`, `_pytest.deprecated.check_ispytest`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.bestrelpath`, `exceptiongroup.BaseExceptionGroup`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest._code

**Imports**: `__future__.annotations`, `code.Code`, `code.ExceptionInfo`, `code.filter_traceback`, `code.Frame`, `code.getfslineno`, `code.Traceback`, `code.TracebackEntry`, `source.getrawcode`, `source.Source`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/_code/__init__.py`  
**Dependencies**: `__future__.annotations`, `code.Code`, `code.ExceptionInfo`, `code.filter_traceback`, `code.Frame`, `code.getfslineno`, `code.Traceback`, `code.TracebackEntry`, `source.getrawcode`, `source.Source`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest._code.source
:::{doc} Source:16
An immutable object holding a source code fragment.

When using Source(...), the source lines are deindented.
:::
:::{doc} getrawcode:126
Return code object for given function.
:::
**Imports**: `__future__.annotations`, `ast`, `bisect.bisect_right`, `inspect`, `textwrap`, `tokenize`, `types`, `typing.Iterable`, `typing.Iterator`, `typing.overload`, `warnings`
**Type References**: [[None]], [[Source]]

### Interface
- `findsource`() -> tuple[<ast.Tuple object at 0x1248958d0>]
- `getrawcode`(obj: object, trycall: bool) -> types.CodeType
- `deindent`() -> Source
- `get_statement_startend2`(lineno: int, node: ast.AST) -> tuple[<ast.Tuple object at 0x1248a9590>]
- `getstatementrange_ast`(lineno: int, source: Source, assertion: bool, astnode: ast.AST | None) -> tuple[<ast.Tuple object at 0x1248b3fd0>]
- `__init__`(obj: object) -> None
- `__eq__`(other: object) -> bool
- `__getitem__`(key: int | slice) -> str | Source
- `__iter__`() -> Iterator[str]
- `__len__`() -> int
- `strip`() -> Source
- `indent`(indent: str) -> Source
- `getstatement`(lineno: int) -> Source
- `getstatementrange`(lineno: int) -> tuple[<ast.Tuple object at 0x124891010>]
- `__str__`() -> str

### Implementation
**Source**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/_code/source.py`  
**Dependencies**: `__future__.annotations`, `ast`, `bisect.bisect_right`, `inspect`, `textwrap`, `tokenize`, `types`, `typing.Iterable`, `typing.Iterator`, `typing.overload`, `warnings`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.assertion.truncate
:::{doc} truncate_if_required:19
Truncate this assertion explanation if the given test item is eligible.
:::
:::{doc} _should_truncate_item:28
Whether or not this test item is eligible for truncation.
:::
:::{doc} _truncate_explanation:34
Truncate given list of strings that makes up the assertion explanation.

Truncates to either 8 lines, or 640 characters - whichever the input reaches
first, taking the truncation explanation into account. The remaining lines
will be replaced by a usage message.
:::
**Imports**: `__future__.annotations`, `_pytest.assertion.util`, `_pytest.config.Config`, `_pytest.nodes.Item`
### Interface
- `truncate_if_required`(explanation: list[str], item: Item, max_length: int | None) -> list[str]
- `_should_truncate_item`(item: Item) -> bool
- `_truncate_explanation`(input_lines: list[str], max_lines: int | None, max_chars: int | None) -> list[str]
- `_truncate_by_char_count`(input_lines: list[str], max_chars: int) -> list[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/assertion/truncate.py`  
**Dependencies**: `__future__.annotations`, `_pytest.assertion.util`, `_pytest.config.Config`, `_pytest.nodes.Item`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.assertion.util
:::{doc} format_explanation:46
Format an explanation.

Normally all embedded newlines are escaped, however there are
three exceptions: \n{, \n} and \n~.  The first two are intended
cover nested explanations, see function and attribute explanations
for examples (.visit_Call(), visit_Attribute()).  The last one is
for when one explanation needs to span multiple lines, e.g. when
displaying diffs.
:::
:::{doc} _split_explanation:61
Return a list of individual lines in the explanation.

This will return a list of lines split on '\n{', '\n}' and '\n~'.
Any other newlines will be escaped and appear in the line as the
literal '\n' characters.
:::
:::{doc} _format_lines:78
Format the individual lines.

This will replace the '{', '}' and '~' characters of our mini formatting
language with the proper 'where ...', 'and ...' and ' + ...' text, taking
care of indentation along the way.

Return a list of formatted lines.
:::
:::{doc} has_default_eq:149
Check if an instance of an object contains the default eq

First, we check if the object's __eq__ attribute has __code__,
if so, we check the equally of the method code filename (__code__.co_filename)
to the default one generated by the dataclass and attr module
for dataclasses the default co_filename is <string>, for attrs class, the __eq__ should contain "attrs eq generated"
:::
:::{doc} assertrepr_compare:170
Return specialised explanations for some operators/operands.
:::
:::{doc} _diff_text:277
Return the explanation for the diff between text.

Unless --verbose is used this will skip leading and trailing
characters which are identical to keep the diff minimal.
:::
:::{doc} running_on_ci:606
Check if we're currently running on a CI system.
:::
**Imports**: `__future__.annotations`, `collections.abc`, `os`, `pprint`, `typing.AbstractSet`, `typing.Any`, `typing.Callable`, `typing.Iterable`, `typing.Literal`, `typing.Mapping`, `typing.Protocol`, `typing.Sequence`, `unicodedata.normalize`, `_pytest.outcomes`, `_pytest._code`, `_pytest._io.pprint.PrettyPrinter`, `_pytest._io.saferepr.saferepr`, `_pytest._io.saferepr.saferepr_unlimited`, `_pytest.config.Config`, `difflib.ndiff`, `difflib`, `_pytest.python_api.ApproxBase`, `dataclasses`
**Type References**: [[Callable]], [[Config]], [[None]], [[_HighlightFunc]]

### Interface
- `format_explanation`(explanation: str) -> str
- `_split_explanation`(explanation: str) -> list[str]
- `_format_lines`(lines: Sequence[str]) -> list[str]
- `issequence`(x: Any) -> bool
- `istext`(x: Any) -> bool
- `isdict`(x: Any) -> bool
- `isset`(x: Any) -> bool
- `isnamedtuple`(obj: Any) -> bool
- `isdatacls`(obj: Any) -> bool
- `isattrs`(obj: Any) -> bool
- `isiterable`(obj: Any) -> bool
- `has_default_eq`(obj: object) -> bool
- `assertrepr_compare`(op: str, left: Any, right: Any, use_ascii: bool) -> list[str] | None
- `_compare_eq_any`(left: Any, right: Any, highlighter: _HighlightFunc, verbose: int) -> list[str]
- `_diff_text`(left: str, right: str, verbose: int) -> list[str]
- `_compare_eq_iterable`(left: Iterable[Any], right: Iterable[Any], highlighter: _HighlightFunc, verbose: int) -> list[str]
- `_compare_eq_sequence`(left: Sequence[Any], right: Sequence[Any], highlighter: _HighlightFunc, verbose: int) -> list[str]
- `_compare_eq_set`(left: AbstractSet[Any], right: AbstractSet[Any], highlighter: _HighlightFunc, verbose: int) -> list[str]
- `_compare_gt_set`(left: AbstractSet[Any], right: AbstractSet[Any], highlighter: _HighlightFunc, verbose: int) -> list[str]
- `_compare_lt_set`(left: AbstractSet[Any], right: AbstractSet[Any], highlighter: _HighlightFunc, verbose: int) -> list[str]
- `_compare_gte_set`(left: AbstractSet[Any], right: AbstractSet[Any], highlighter: _HighlightFunc, verbose: int) -> list[str]
- `_compare_lte_set`(left: AbstractSet[Any], right: AbstractSet[Any], highlighter: _HighlightFunc, verbose: int) -> list[str]
- `_set_one_sided_diff`(posn: str, set1: AbstractSet[Any], set2: AbstractSet[Any], highlighter: _HighlightFunc) -> list[str]
- `_compare_eq_dict`(left: Mapping[<ast.Tuple object at 0x124975f90>], right: Mapping[<ast.Tuple object at 0x1249762d0>], highlighter: _HighlightFunc, verbose: int) -> list[str]
- `_compare_eq_cls`(left: Any, right: Any, highlighter: _HighlightFunc, verbose: int) -> list[str]
- `_notin_text`(term: str, text: str, verbose: int) -> list[str]
- `running_on_ci`() -> bool
- `__call__`(source: str, lexer: Literal[<ast.Tuple object at 0x1248f8650>]) -> str

### Implementation
**_HighlightFunc**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/assertion/util.py`  
**Dependencies**: `__future__.annotations`, `collections.abc`, `os`, `pprint`, `typing.AbstractSet`, `typing.Any`, `typing.Callable`, `typing.Iterable`, `typing.Literal`, `typing.Mapping`, `typing.Protocol`, `typing.Sequence`, `unicodedata.normalize`, `_pytest.outcomes`, `_pytest._code`, `_pytest._io.pprint.PrettyPrinter`, `_pytest._io.saferepr.saferepr`, `_pytest._io.saferepr.saferepr_unlimited`, `_pytest.config.Config`, `difflib.ndiff`, `difflib`, `_pytest.python_api.ApproxBase`, `dataclasses`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.assertion
:::{doc} register_assert_rewrite:58
Register one or more module names to be rewritten on import.

This function will make sure that this module or all modules inside
the package will get their assert statements rewritten.
Thus you should make sure to call this before the module is
actually imported, usually in your __init__.py if you are a plugin
using a package.

:param names: The module names to register.
:::
:::{doc} DummyRewriteHook:84
A no-op import hook for when rewriting is disabled.
:::
:::{doc} AssertionState:91
State for the assertion plugin.
:::
:::{doc} install_importhook:100
Try to install the rewrite hook, raise SystemError if it fails.
:::
:::{doc} pytest_runtest_protocol:127
Setup the pytest_assertrepr_compare and pytest_assertion_pass hooks.

The rewrite module will use util._reprcompare if it exists to use custom
reporting via the pytest_assertrepr_compare hook.  This sets up this custom
comparison for the test.
:::
**Imports**: `__future__.annotations`, `sys`, `typing.Any`, `typing.Generator`, `typing.TYPE_CHECKING`, `_pytest.assertion.rewrite`, `_pytest.assertion.truncate`, `_pytest.assertion.util`, `_pytest.assertion.rewrite.assertstate_key`, `_pytest.config.Config`, `_pytest.config.hookimpl`, `_pytest.config.argparsing.Parser`, `_pytest.nodes.Item`, `_pytest.main.Session`
**Type References**: [[AssertionState]], [[DummyRewriteHook]]

### Interface
- `pytest_addoption`(parser: Parser) -> None
- `register_assert_rewrite`() -> None
- `install_importhook`(config: Config) -> rewrite.AssertionRewritingHook
- `pytest_collection`(session: Session) -> None
- `pytest_runtest_protocol`(item: Item) -> Generator[<ast.Tuple object at 0x1249decd0>]
- `pytest_sessionfinish`(session: Session) -> None
- `pytest_assertrepr_compare`(config: Config, op: str, left: Any, right: Any) -> list[str] | None
- `mark_rewrite`() -> None
- `__init__`(config: Config) -> None
- `undo`() -> None
- `callbinrepr`(left: object, right: object) -> str | None
- `call_assertion_pass_hook`(lineno: int, orig: str, expl: str) -> None

### Implementation
**DummyRewriteHook**

**AssertionState**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/assertion/__init__.py`  
**Dependencies**: `__future__.annotations`, `sys`, `typing.Any`, `typing.Generator`, `typing.TYPE_CHECKING`, `_pytest.assertion.rewrite`, `_pytest.assertion.truncate`, `_pytest.assertion.util`, `_pytest.assertion.rewrite.assertstate_key`, `_pytest.config.Config`, `_pytest.config.hookimpl`, `_pytest.config.argparsing.Parser`, `_pytest.nodes.Item`, `_pytest.main.Session`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest.assertion.rewrite
:::{doc} AssertionRewritingHook:63
PEP302/PEP451 import hook which rewrites asserts.
:::
:::{doc} _rewrite_test:350
Read and rewrite *fn* and return the code object.
:::
:::{doc} _read_pyc:361
Possibly read a pytest pyc containing rewritten code.

Return rewritten code if successful or None if not.
:::
:::{doc} rewrite_asserts:410
Rewrite the assert statements in mod.
:::
:::{doc} _saferepr:420
Get a safe repr of an object for assertion error messages.

The assertion formatting (util.format_explanation()) requires
newlines to be escaped since they are a special character for it.
Normally assertion.util.format_explanation() does this but for a
custom repr it is possible to contain one of the special escape
sequences, especially '\n{' and '\n}' are likely to be present in
JSON reprs.
:::
:::{doc} _get_maxsize_for_saferepr:438
Get `maxsize` configuration for saferepr based on the given config object.
:::
:::{doc} _format_assertmsg:451
Format the custom assertion message given.

For strings this simply replaces newlines with '\n~' so that
util.format_explanation() will preserve them instead of escaping
newlines.  For other objects saferepr() is used first.
:::
:::{doc} _check_if_assertion_pass_impl:513
Check if any plugins implement the pytest_assertion_pass hook
in order not to generate explanation unnecessarily (might be expensive).
:::
:::{doc} traverse_node:548
Recursively yield node and all its children in depth-first order.
:::
:::{doc} _get_assertion_exprs:556
Return a mapping from {lineno: "assertion test expression"}.
:::
:::{doc} AssertionRewriter:610
Assertion rewriting implementation.

The main entrypoint is to call .run() with an ast.Module instance,
this will then find all the assert statements and rewrite them to
provide intermediate values and a detailed assertion error.  See
http://pybites.blogspot.be/2011/07/behind-scenes-of-pytests-new-assertion.html
for an overview of how this works.

The entry point here is .run() which will iterate over all the
statements in an ast.Module and for each ast.Assert statement it
finds call .visit() with it.  Then .visit_Assert() takes over and
is responsible for creating new ast statements to replace the
original assert statement: it rewrites the test of an assertion
to provide intermediate values and replace it with an if statement
which raises an assertion error with a detailed explanation in
case the expression is false and calls pytest_assertion_pass hook
if expression is true.

For this .visit_Assert() uses the visitor pattern to visit all the
AST nodes of the ast.Assert.test field, each visit call returning
an AST node and the corresponding explanation string.  During this
state is kept in several instance attributes:

:statements: All the AST statements which will replace the assert
   statement.

:variables: This is populated by .variable() with each variable
   used by the statements so that they can all be set to None at
   the end of the statements.

:variable_counter: Counter to create new unique variables needed
   by statements.  Variables are created using .variable() and
   have the form of "@py_assert0".

:expl_stmts: The AST statements which will be executed to get
   data from the assertion.  This is the code which will construct
   the detailed assertion message that is used in the AssertionError
   or for the pytest_assertion_pass hook.

:explanation_specifiers: A dict filled by .explanation_param()
   with %-formatting placeholders and their corresponding
   expressions to use in the building of an assertion message.
   This is used by .pop_format_context() to build a message.

:stack: A stack of the explanation_specifiers dicts maintained by
   .push_format_context() and .pop_format_context() which allows
   to build another %-formatted string while already building one.

:scope: A tuple containing the current scope used for variables_overwrite.

:variables_overwrite: A dict filled with references to variables
   that change value within an assert. This happens when a variable is
   reassigned with the walrus operator

This state, except the variables_overwrite,  is reset on every new assert
statement visited and used by the other visitors.
:::
:::{doc} try_makedirs:1175
Attempt to create the given directory and sub-directories exist.

Returns True if successful or if it already exists.
:::
:::{doc} get_cache_dir:1200
Return the cache directory to write .pyc files for the given .py file path.
:::
**Imports**: `__future__.annotations`, `ast`, `collections.defaultdict`, `errno`, `functools`, `importlib.abc`, `importlib.machinery`, `importlib.util`, `io`, `itertools`, `marshal`, `os`, `pathlib.Path`, `pathlib.PurePath`, `struct`, `sys`, `tokenize`, `types`, `typing.Callable`, `typing.IO`, `typing.Iterable`, `typing.Iterator`, `typing.Sequence`, `typing.TYPE_CHECKING`, `_pytest._io.saferepr.DEFAULT_REPR_MAX_SIZE`, `_pytest._io.saferepr.saferepr`, `_pytest._version.version`, `_pytest.assertion.util`, `_pytest.config.Config`, `_pytest.main.Session`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.fnmatch_ex`, `_pytest.stash.StashKey`, `_pytest.assertion.util.format_explanation`, `_pytest.assertion.AssertionState`, `_pytest.warning_types.PytestAssertRewriteWarning`, `importlib.resources.abc.TraversableResources`, `importlib.abc.TraversableResources`, `warnings`, `_pytest.warning_types.PytestAssertRewriteWarning`, `importlib.readers.FileReader`, `importlib.resources.readers.FileReader`
**Type References**: [[AST]], [[AssertionRewriter]], [[AssertionRewritingHook]], [[None]], [[Sentinel]], [[ast.AST]]

### Interface
- `_write_pyc_fp`(fp: IO[bytes], source_stat: os.stat_result, co: types.CodeType) -> None
- `_write_pyc`(state: AssertionState, co: types.CodeType, source_stat: os.stat_result, pyc: Path) -> bool
- `_rewrite_test`(fn: Path, config: Config) -> tuple[<ast.Tuple object at 0x124a22110>]
- `_read_pyc`(source: Path, pyc: Path, trace: Callable[<ast.Tuple object at 0x124a21910>]) -> types.CodeType | None
- `rewrite_asserts`(mod: ast.Module, source: bytes, module_path: str | None, config: Config | None) -> None
- `_saferepr`(obj: object) -> str
- `_get_maxsize_for_saferepr`(config: Config | None) -> int | None
- `_format_assertmsg`(obj: object) -> str
- `_should_repr_global_name`(obj: object) -> bool
- `_format_boolop`(explanations: Iterable[str], is_or: bool) -> str
- `_call_reprcompare`(ops: Sequence[str], results: Sequence[bool], expls: Sequence[str], each_obj: Sequence[object]) -> str
- `_call_assertion_pass`(lineno: int, orig: str, expl: str) -> None
- `_check_if_assertion_pass_impl`() -> bool
- `traverse_node`(node: ast.AST) -> Iterator[ast.AST]
- `_get_assertion_exprs`(src: bytes) -> dict[<ast.Tuple object at 0x124ab9390>]
- `try_makedirs`(cache_dir: Path) -> bool
- `get_cache_dir`(file_path: Path) -> Path
- `__init__`(module_path: str | None, config: Config | None, source: bytes) -> None
- `set_session`(session: Session | None) -> None
- `find_spec`(name: str, path: Sequence[str | bytes] | None, target: types.ModuleType | None) -> importlib.machinery.ModuleSpec | None
- `create_module`(spec: importlib.machinery.ModuleSpec) -> types.ModuleType | None
- `exec_module`(module: types.ModuleType) -> None
- `_early_rewrite_bailout`(name: str, state: AssertionState) -> bool
- `_should_rewrite`(name: str, fn: str, state: AssertionState) -> bool
- `_is_marked_for_rewrite`(name: str, state: AssertionState) -> bool
- `mark_rewrite`() -> None
- `_warn_already_imported`(name: str) -> None
- `get_data`(pathname: str | bytes) -> bytes
- `_write_and_reset`() -> None
- `run`(mod: ast.Module) -> None
- `is_rewrite_disabled`(docstring: str) -> bool
- `variable`() -> str
- `assign`(expr: ast.expr) -> ast.Name
- `display`(expr: ast.expr) -> ast.expr
- `helper`(name: str) -> ast.expr
- `builtin`(name: str) -> ast.Attribute
- `explanation_param`(expr: ast.expr) -> str
- `push_format_context`() -> None
- `pop_format_context`(expl_expr: ast.expr) -> ast.Name
- `generic_visit`(node: ast.AST) -> tuple[<ast.Tuple object at 0x124b03890>]
- `visit_Assert`(assert_: ast.Assert) -> list[ast.stmt]
- `visit_NamedExpr`(name: ast.NamedExpr) -> tuple[<ast.Tuple object at 0x124b49b50>]
- `visit_Name`(name: ast.Name) -> tuple[<ast.Tuple object at 0x124b54e10>]
- `visit_BoolOp`(boolop: ast.BoolOp) -> tuple[<ast.Tuple object at 0x124b74350>]
- `visit_UnaryOp`(unary: ast.UnaryOp) -> tuple[<ast.Tuple object at 0x124b76210>]
- `visit_BinOp`(binop: ast.BinOp) -> tuple[<ast.Tuple object at 0x124b7cc90>]
- `visit_Call`(call: ast.Call) -> tuple[<ast.Tuple object at 0x124b94a90>]
- `visit_Starred`(starred: ast.Starred) -> tuple[<ast.Tuple object at 0x124b96050>]
- `visit_Attribute`(attr: ast.Attribute) -> tuple[<ast.Tuple object at 0x124b9d110>]
- `visit_Compare`(comp: ast.Compare) -> tuple[<ast.Tuple object at 0x124bc34d0>]
- `get_resource_reader`(name: str) -> TraversableResources

### Implementation
**Sentinel**

**AssertionRewritingHook**

**AssertionRewriter**
  - nodes: list[ast.AST | Sentinel]
  - keys: list[ast.expr | None]
  - load_names: list[ast.expr]
  - expls: list[ast.expr]
  - syms: list[ast.expr]
  - statements_pass: list[ast.stmt]
  - res: ast.expr
  - variables: list[ast.expr]
  - fail_inner: list[ast.stmt]
  - cond: ast.expr
  - inner: list[ast.stmt]
  - new: list[ast.AST]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py`  
**Dependencies**: `__future__.annotations`, `ast`, `collections.defaultdict`, `errno`, `functools`, `importlib.abc`, `importlib.machinery`, `importlib.util`, `io`, `itertools`, `marshal`, `os`, `pathlib.Path`, `pathlib.PurePath`, `struct`, `sys`, `tokenize`, `types`, `typing.Callable`, `typing.IO`, `typing.Iterable`, `typing.Iterator`, `typing.Sequence`, `typing.TYPE_CHECKING`, `_pytest._io.saferepr.DEFAULT_REPR_MAX_SIZE`, `_pytest._io.saferepr.saferepr`, `_pytest._version.version`, `_pytest.assertion.util`, `_pytest.config.Config`, `_pytest.main.Session`, `_pytest.pathlib.absolutepath`, `_pytest.pathlib.fnmatch_ex`, `_pytest.stash.StashKey`, `_pytest.assertion.util.format_explanation`, `_pytest.assertion.AssertionState`, `_pytest.warning_types.PytestAssertRewriteWarning`, `importlib.resources.abc.TraversableResources`, `importlib.abc.TraversableResources`, `warnings`, `_pytest.warning_types.PytestAssertRewriteWarning`, `importlib.readers.FileReader`, `importlib.resources.readers.FileReader`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest._io.wcwidth
:::{doc} wcwidth:8
Determine how many columns are needed to display a character in a terminal.

Returns -1 if the character is not printable.
Returns 0, 1 or 2 for other characters.
:::
:::{doc} wcswidth:46
Determine how many columns are needed to display a string in a terminal.

Returns -1 if the string contains non-printable characters.
:::
**Imports**: `__future__.annotations`, `functools.lru_cache`, `unicodedata`
### Interface
- `wcwidth`(c: str) -> int
- `wcswidth`(s: str) -> int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/_io/wcwidth.py`  
**Dependencies**: `__future__.annotations`, `functools.lru_cache`, `unicodedata`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest._io.saferepr
:::{doc} SafeRepr:36
repr.Repr that limits the resulting size of repr() and includes
information on exceptions raised during the call.
:::
:::{doc} safeformat:83
Return a pretty printed string for the given object.

Failing __repr__ functions of user instances will be represented
with a short exception info.
:::
:::{doc} saferepr:99
Return a size-limited safe repr-string for the given object.

Failing __repr__ functions of user instances will be represented
with a short exception info and 'saferepr' generally takes
care to never raise exceptions itself.

This function is a wrapper around the Repr/reprlib functionality of the
stdlib.
:::
:::{doc} saferepr_unlimited:114
Return an unlimited-size safe repr-string for the given object.

As with saferepr, failing __repr__ functions of user instances
will be represented with a short exception info.

This function is a wrapper around simple repr.

Note: a cleaner solution would be to alter ``saferepr``this way
when maxsize=None, but that might affect some other code.
:::
**Imports**: `__future__.annotations`, `pprint`, `reprlib`
**Type References**: [[SafeRepr]]

### Interface
- `_try_repr_or_str`(obj: object) -> str
- `_format_repr_exception`(exc: BaseException, obj: object) -> str
- `_ellipsize`(s: str, maxsize: int) -> str
- `safeformat`(obj: object) -> str
- `saferepr`(obj: object, maxsize: int | None, use_ascii: bool) -> str
- `saferepr_unlimited`(obj: object, use_ascii: bool) -> str
- `__init__`(maxsize: int | None, use_ascii: bool) -> None
- `repr`(x: object) -> str
- `repr_instance`(x: object, level: int) -> str

### Implementation
**SafeRepr**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/_io/saferepr.py`  
**Dependencies**: `__future__.annotations`, `pprint`, `reprlib`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest._io.terminalwriter

**Imports**: `__future__.annotations`, `os`, `shutil`, `sys`, `typing.final`, `typing.Literal`, `typing.Sequence`, `typing.TextIO`, `typing.TYPE_CHECKING`, `compat.assert_never`, `wcwidth.wcswidth`, `pygments.formatter.Formatter`, `pygments.lexer.Lexer`, `_pytest.config.exceptions.UsageError`, `pygments.highlight`, `pygments.util`, `pygments.formatters.terminal.TerminalFormatter`, `colorama`, `pygments.lexers.python.PythonLexer`, `pygments.lexers.diff.DiffLexer`
**Type References**: [[TerminalWriter]]

### Interface
- `get_terminal_width`() -> int
- `should_do_markup`(file: TextIO) -> bool
- `__init__`(file: TextIO | None) -> None
- `fullwidth`(value: int) -> None
- `width_of_current_line`() -> int
- `markup`(text: str) -> str
- `sep`(sepchar: str, title: str | None, fullwidth: int | None) -> None
- `write`(msg: str) -> None
- `line`(s: str) -> None
- `flush`() -> None
- `_write_source`(lines: Sequence[str], indents: Sequence[str]) -> None
- `_get_pygments_lexer`(lexer: Literal[<ast.Tuple object at 0x124c2fc50>]) -> Lexer | None
- `_get_pygments_formatter`() -> Formatter | None
- `_highlight`(source: str, lexer: Literal[<ast.Tuple object at 0x124c401d0>]) -> str

### Implementation
**TerminalWriter**
  - highlighted: str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/_io/terminalwriter.py`  
**Dependencies**: `__future__.annotations`, `os`, `shutil`, `sys`, `typing.final`, `typing.Literal`, `typing.Sequence`, `typing.TextIO`, `typing.TYPE_CHECKING`, `compat.assert_never`, `wcwidth.wcswidth`, `pygments.formatter.Formatter`, `pygments.lexer.Lexer`, `_pytest.config.exceptions.UsageError`, `pygments.highlight`, `pygments.util`, `pygments.formatters.terminal.TerminalFormatter`, `colorama`, `pygments.lexers.python.PythonLexer`, `pygments.lexers.diff.DiffLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest._io

**Imports**: `__future__.annotations`, `terminalwriter.get_terminal_width`, `terminalwriter.TerminalWriter`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/_io/__init__.py`  
**Dependencies**: `__future__.annotations`, `terminalwriter.get_terminal_width`, `terminalwriter.TerminalWriter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest._io.pprint
:::{doc} _safe_key:29
Helper function for key functions when sorting unorderable objects.

The wrapped-object will fallback to a Py2.x style comparison for
unorderable types (sorting first comparing the type name and then by
the obj ids).  Does not work recursively, so dict.items() must have
_safe_key applied to both the key and the value.
:::
:::{doc} _safe_tuple:54
Helper function for comparing 2-tuples
:::
**Imports**: `__future__.annotations`, `collections`, `dataclasses`, `io.StringIO`, `re`, `types`, `typing.Any`, `typing.Callable`, `typing.IO`, `typing.Iterator`
**Type References**: [[Callable]], [[None]], [[PrettyPrinter]], [[_safe_key]]

### Interface
- `_safe_tuple`() -> Any
- `_recursion`(object: Any) -> str
- `_wrap_bytes_repr`(object: Any, width: int, allowance: int) -> Iterator[str]
- `__init__`(indent: int, width: int, depth: int | None) -> None
- `__lt__`() -> Any
- `pformat`(object: Any) -> str
- `_format`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_dataclass`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_dict`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_ordered_dict`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_list`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_tuple`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_set`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_str`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_bytes`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_bytearray`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_mappingproxy`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_simplenamespace`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_format_dict_items`(items: list[tuple[<ast.Tuple object at 0x124cc12d0>]], stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_format_namespace_items`(items: list[tuple[<ast.Tuple object at 0x124ccc890>]], stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_format_items`(items: list[Any], stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_repr`(object: Any, context: set[int], level: int) -> str
- `_pprint_default_dict`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_counter`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_chain_map`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_deque`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_user_dict`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_user_list`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_pprint_user_string`(object: Any, stream: IO[str], indent: int, allowance: int, context: set[int], level: int) -> None
- `_safe_repr`(object: Any, context: set[int], maxlevels: int | None, level: int) -> str

### Implementation
**_safe_key**

**PrettyPrinter**
  - _dispatch: dict[<ast.Tuple object at 0x124c546d0>]
  - components: list[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/_io/pprint.py`  
**Dependencies**: `__future__.annotations`, `collections`, `dataclasses`, `io.StringIO`, `re`, `types`, `typing.Any`, `typing.Callable`, `typing.IO`, `typing.Iterator`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest._py.error
:::{doc} ErrorMaker:52
lazily provides Exception classes for each possible POSIX errno
(as defined per the 'errno' module).  All such instances
subclass EnvironmentError.
:::
**Imports**: `__future__.annotations`, `errno`, `os`, `sys`, `typing.Callable`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `typing_extensions.ParamSpec`
**Type References**: [[Error]], [[ErrorMaker]]

### Interface
- `__getattr__`(name: str) -> type[Error]
- `__repr__`() -> str
- `__str__`() -> str
- `_geterrnoclass`(eno: int) -> type[Error]
- `checked_call`(func: Callable[<ast.Tuple object at 0x124d37590>]) -> R

### Implementation
**Error**

**ErrorMaker**
  - _errno2class: dict[<ast.Tuple object at 0x124d3f6d0>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/_py/error.py`  
**Dependencies**: `__future__.annotations`, `errno`, `os`, `sys`, `typing.Callable`, `typing.TYPE_CHECKING`, `typing.TypeVar`, `typing_extensions.ParamSpec`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest._py



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/_py/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages._pytest._py.path
:::{doc} LocalPath:265
Object oriented interface to os.path and other local filesystem
related information.
:::
:::{doc} copymode:1437
Copy permission from src to dst.
:::
:::{doc} copystat:1444
Copy permission,  last modification time,
last access time, and flags from src to dst.
:::
**Imports**: `__future__.annotations`, `atexit`, `contextlib.contextmanager`, `fnmatch`, `importlib.util`, `io`, `os`, `os.path.abspath`, `os.path.dirname`, `os.path.exists`, `os.path.isabs`, `os.path.isdir`, `os.path.isfile`, `os.path.islink`, `os.path.normpath`, `posixpath`, `stat.S_ISDIR`, `stat.S_ISLNK`, `stat.S_ISREG`, `sys`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.Literal`, `typing.overload`, `typing.TYPE_CHECKING`, `uuid`, `warnings`, `error`, `pwd`, `grp`, `shutil`, `shutil`, `_code.source.getrawcode`, `pwd`, `grp`, `pickle`, `subprocess.PIPE`, `subprocess.Popen`, `tempfile`, `tempfile`, `pickle`, `shutil`, `hashlib`, `types`
**Type References**: [[Checkers]], [[FNMatcher]], [[ImportMismatchError]], [[LocalPath]], [[NeverRaised]], [[Stat]], [[Visitor]]

### Interface
- `map_as_list`() -> Any
- `getuserid`() -> Any
- `getgroupid`() -> Any
- `copymode`() -> Any
- `copystat`() -> Any
- `copychunked`() -> Any
- `isimportable`() -> Any
- `__init__`() -> Any
- `dotfile`() -> Any
- `ext`() -> Any
- `basename`() -> Any
- `basestarts`() -> Any
- `relto`() -> Any
- `fnmatch`() -> Any
- `endswith`() -> Any
- `_evaluate`() -> Any
- `_stat`() -> Stat
- `dir`() -> Any
- `file`() -> Any
- `exists`() -> Any
- `link`() -> Any
- `gen`() -> Any
- `__call__`() -> Any
- `__getattr__`(name: str) -> Any
- `owner`() -> Any
- `group`() -> Any
- `isdir`() -> Any
- `isfile`() -> Any
- `islink`() -> Any
- `__div__`() -> Any
- `dirname`() -> Any
- `purebasename`() -> Any
- `read_binary`() -> Any
- `read_text`() -> Any
- `read`() -> Any
- `readlines`() -> Any
- `load`() -> Any
- `move`() -> Any
- `ensure_dir`() -> Any
- `bestrelpath`() -> Any
- `parts`() -> Any
- `common`() -> Any
- `__add__`() -> Any
- `visit`() -> Any
- `_sortlist`() -> Any
- `__fspath__`() -> Any
- `__hash__`() -> Any
- `__eq__`() -> Any
- `__ne__`() -> Any
- `__lt__`() -> Any
- `__gt__`() -> Any
- `samefile`() -> Any
- `remove`() -> Any
- `computehash`() -> Any
- `new`() -> Any
- `_getbyspec`(spec: str) -> list[str]
- `dirpath`() -> Any
- `join`() -> LocalPath
- `open`() -> Any
- `_fastjoin`() -> Any
- `check`() -> Any
- `listdir`() -> Any
- `size`() -> int
- `mtime`() -> float
- `copy`() -> Any
- `rename`() -> Any
- `dump`() -> Any
- `mkdir`() -> Any
- `write_binary`() -> Any
- `write_text`() -> Any
- `write`() -> Any
- `_ensuredirs`() -> Any
- `ensure`() -> Any
- `stat`(raising: bool) -> Stat | None
- `lstat`() -> Stat
- `setmtime`() -> Any
- `chdir`() -> Any
- `as_cwd`() -> Any
- `realpath`() -> Any
- `atime`() -> Any
- `__repr__`() -> Any
- `__str__`() -> Any
- `chmod`() -> Any
- `pypkgpath`() -> Any
- `_ensuresyspath`() -> Any
- `pyimport`() -> Any
- `sysexec`() -> str
- `sysfind`() -> Any
- `_gethomedir`() -> Any
- `get_temproot`() -> Any
- `mkdtemp`() -> Any
- `make_numbered_dir`() -> Any
- `chown`() -> Any
- `readlink`() -> str
- `mklinkto`() -> Any
- `mksymlinkto`() -> Any
- `parse_num`() -> Any
- `create_lockfile`() -> Any
- `atexit_remove_lockfile`() -> Any
- `get_mtime`() -> Any
- `is_garbage`() -> Any
- `rec`() -> Any
- `try_remove_lockfile`() -> Any

### Implementation
**Checkers**
  - _statcache: Stat
**NeverRaised**

**Visitor**

**FNMatcher**

**Stat**

**LocalPath**
  - stdout: str | bytes
  - newargs: list[str]
**ImportMismatchError**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/_pytest/_py/path.py`  
**Dependencies**: `__future__.annotations`, `atexit`, `contextlib.contextmanager`, `fnmatch`, `importlib.util`, `io`, `os`, `os.path.abspath`, `os.path.dirname`, `os.path.exists`, `os.path.isabs`, `os.path.isdir`, `os.path.isfile`, `os.path.islink`, `os.path.normpath`, `posixpath`, `stat.S_ISDIR`, `stat.S_ISLNK`, `stat.S_ISREG`, `sys`, `typing.Any`, `typing.Callable`, `typing.cast`, `typing.Literal`, `typing.overload`, `typing.TYPE_CHECKING`, `uuid`, `warnings`, `error`, `pwd`, `grp`, `shutil`, `shutil`, `_code.source.getrawcode`, `pwd`, `grp`, `pickle`, `subprocess.PIPE`, `subprocess.Popen`, `tempfile`, `tempfile`, `pickle`, `shutil`, `hashlib`, `types`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.black.resources



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/black/resources/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.util.ssltransport
:::{doc} SSLTransport:22
The SSLTransport wraps an existing socket and establishes an SSL connection.

Contrary to Python's implementation of SSLSocket, it allows you to chain
multiple TLS connections together. It's particularly useful if you need to
implement TLS within TLS.

The class supports most of the socket API operations.
:::
**Imports**: `__future__.annotations`, `io`, `socket`, `ssl`, `typing`, `exceptions.ProxySchemeUnsupported`, `typing_extensions.Self`, `ssl_._TYPE_PEER_CERT_RET`, `ssl_._TYPE_PEER_CERT_RET_DICT`
**Type References**: [[BinaryIO]], [[SSLTransport]], [[typing.BinaryIO]]

### Interface
- `_validate_ssl_context_for_tls_in_tls`(ssl_context: ssl.SSLContext) -> None
- `__init__`(socket: socket.socket, ssl_context: ssl.SSLContext, server_hostname: str | None, suppress_ragged_eofs: bool) -> None
- `__enter__`() -> Self
- `__exit__`() -> None
- `fileno`() -> int
- `read`(len: int, buffer: typing.Any | None) -> int | bytes
- `recv`(buflen: int, flags: int) -> int | bytes
- `recv_into`(buffer: _WriteBuffer, nbytes: int | None, flags: int) -> None | int | bytes
- `sendall`(data: bytes, flags: int) -> None
- `send`(data: bytes, flags: int) -> int
- `makefile`(mode: str, buffering: int | None) -> typing.BinaryIO | typing.TextIO | socket.SocketIO
- `unwrap`() -> None
- `close`() -> None
- `getpeercert`(binary_form: bool) -> _TYPE_PEER_CERT_RET
- `version`() -> str | None
- `cipher`() -> tuple[<ast.Tuple object at 0x124f8d390>] | None
- `selected_alpn_protocol`() -> str | None
- `shared_ciphers`() -> list[tuple[<ast.Tuple object at 0x124f8e750>]] | None
- `compression`() -> str | None
- `settimeout`(value: float | None) -> None
- `gettimeout`() -> float | None
- `_decref_socketios`() -> None
- `_wrap_ssl_read`(len: int, buffer: bytearray | None) -> int | bytes
- `_ssl_io_loop`(func: typing.Callable[<ast.Tuple object at 0x124f9cc10>], arg1: None | bytes | int, arg2: bytearray | None) -> _ReturnValue

### Implementation
**SSLTransport**
  - buffer: typing.BinaryIO
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/util/ssltransport.py`  
**Dependencies**: `__future__.annotations`, `io`, `socket`, `ssl`, `typing`, `exceptions.ProxySchemeUnsupported`, `typing_extensions.Self`, `ssl_._TYPE_PEER_CERT_RET`, `ssl_._TYPE_PEER_CERT_RET_DICT`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.util.util

**Imports**: `__future__.annotations`, `typing`, `types.TracebackType`
### Interface
- `to_bytes`(x: str | bytes, encoding: str | None, errors: str | None) -> bytes
- `to_str`(x: str | bytes, encoding: str | None, errors: str | None) -> str
- `reraise`(tp: type[BaseException] | None, value: BaseException, tb: TracebackType | None) -> typing.NoReturn
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/util/util.py`  
**Dependencies**: `__future__.annotations`, `typing`, `types.TracebackType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.util.proxy
:::{doc} connection_requires_http_tunnel:11
Returns True if the connection requires an HTTP CONNECT through the proxy.

:param URL proxy_url:
    URL of the proxy.
:param ProxyConfig proxy_config:
    Proxy configuration from poolmanager.py
:param str destination_scheme:
    The scheme of the destination. (i.e https, http, etc)
:::
**Imports**: `__future__.annotations`, `typing`, `url.Url`, `connection.ProxyConfig`
### Interface
- `connection_requires_http_tunnel`(proxy_url: Url | None, proxy_config: ProxyConfig | None, destination_scheme: str | None) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/util/proxy.py`  
**Dependencies**: `__future__.annotations`, `typing`, `url.Url`, `connection.ProxyConfig`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.util.wait
:::{doc} wait_for_read:113
Waits for reading to be available on a given socket.
Returns True if the socket is readable, or False if the timeout expired.
:::
:::{doc} wait_for_write:120
Waits for writing to be available on a given socket.
Returns True if the socket is readable, or False if the timeout expired.
:::
**Imports**: `__future__.annotations`, `select`, `socket`, `functools.partial`
### Interface
- `select_wait_for_socket`(sock: socket.socket, read: bool, write: bool, timeout: float | None) -> bool
- `poll_wait_for_socket`(sock: socket.socket, read: bool, write: bool, timeout: float | None) -> bool
- `_have_working_poll`() -> bool
- `wait_for_socket`(sock: socket.socket, read: bool, write: bool, timeout: float | None) -> bool
- `wait_for_read`(sock: socket.socket, timeout: float | None) -> bool
- `wait_for_write`(sock: socket.socket, timeout: float | None) -> bool
- `do_poll`(t: float | None) -> list[tuple[<ast.Tuple object at 0x124fc1cd0>]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/util/wait.py`  
**Dependencies**: `__future__.annotations`, `select`, `socket`, `functools.partial`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.util.request
:::{doc} make_headers:55
Shortcuts for generating request headers.

:param keep_alive:
    If ``True``, adds 'connection: keep-alive' header.

:param accept_encoding:
    Can be a boolean, list, or string.
    ``True`` translates to 'gzip,deflate'.  If the dependencies for
    Brotli (either the ``brotli`` or ``brotlicffi`` package) and/or Zstandard
    (the ``zstandard`` package) algorithms are installed, then their encodings are
    included in the string ('br' and 'zstd', respectively).
    List will get joined by comma.
    String will be used as provided.

:param user_agent:
    String representing the user-agent you want, such as
    "python-urllib3/0.6"

:param basic_auth:
    Colon-separated username:password string for 'authorization: basic ...'
    auth header.

:param proxy_basic_auth:
    Colon-separated username:password string for 'proxy-authorization: basic ...'
    auth header.

:param disable_cache:
    If ``True``, adds 'cache-control: no-cache' header.

Example:

.. code-block:: python

    import urllib3

    print(urllib3.util.make_headers(keep_alive=True, user_agent="Batman/1.0"))
    # {'connection': 'keep-alive', 'user-agent': 'Batman/1.0'}
    print(urllib3.util.make_headers(accept_encoding=True))
    # {'accept-encoding': 'gzip,deflate'}
:::
:::{doc} set_file_position:136
If a position is provided, move file to that point.
Otherwise, we'll attempt to record a position for future use.
:::
:::{doc} rewind_body:156
Attempt to rewind body to a certain position.
Primarily used for request redirects and retries.

:param body:
    File-like object that supports seek.

:param int pos:
    Position to seek to in file.
:::
:::{doc} body_to_chunks:191
Takes the HTTP request method, body, and blocksize and
transforms them into an iterable of chunks to pass to
socket.sendall() and an optional 'Content-Length' header.

A 'Content-Length' of 'None' indicates the length of the body
can't be determined so should use 'Transfer-Encoding: chunked'
for framing instead.
:::
**Imports**: `__future__.annotations`, `io`, `typing`, `base64.b64encode`, `enum.Enum`, `exceptions.UnrewindableBodyError`, `util.to_bytes`, `typing.Final`, `zstandard`, `brotlicffi`, `brotli`
**Type References**: [[ChunksAndContentLength]], [[Final]], [[Iterable]], [[None]], [[_TYPE_FAILEDTELL]], [[typing.Iterable]]

### Interface
- `make_headers`(keep_alive: bool | None, accept_encoding: bool | list[str] | str | None, user_agent: str | None, basic_auth: str | None, proxy_basic_auth: str | None, disable_cache: bool | None) -> dict[<ast.Tuple object at 0x124fdb290>]
- `set_file_position`(body: typing.Any, pos: _TYPE_BODY_POSITION | None) -> _TYPE_BODY_POSITION | None
- `rewind_body`(body: typing.IO[typing.AnyStr], body_pos: _TYPE_BODY_POSITION) -> None
- `body_to_chunks`(body: typing.Any | None, method: str, blocksize: int) -> ChunksAndContentLength
- `chunk_readable`() -> typing.Iterable[bytes]

### Implementation
**_TYPE_FAILEDTELL**

**ChunksAndContentLength**
  - chunks: typing.Iterable[bytes] | None
  - content_length: int | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/util/request.py`  
**Dependencies**: `__future__.annotations`, `io`, `typing`, `base64.b64encode`, `enum.Enum`, `exceptions.UnrewindableBodyError`, `util.to_bytes`, `typing.Final`, `zstandard`, `brotlicffi`, `brotli`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.util.timeout
:::{doc} Timeout:25
Timeout configuration.

Timeouts can be defined as a default for a pool:

.. code-block:: python

    import urllib3

    timeout = urllib3.util.Timeout(connect=2.0, read=7.0)

    http = urllib3.PoolManager(timeout=timeout)

    resp = http.request("GET", "https://example.com/")

    print(resp.status)

Or per-request (which overrides the default for the pool):

.. code-block:: python

   response = http.request("GET", "https://example.com/", timeout=Timeout(10))

Timeouts can be disabled by setting all the parameters to ``None``:

.. code-block:: python

   no_timeout = Timeout(connect=None, read=None)
   response = http.request("GET", "https://example.com/", timeout=no_timeout)


:param total:
    This combines the connect and read timeouts into one; the read timeout
    will be set to the time leftover from the connect attempt. In the
    event that both a connect timeout and a total are specified, or a read
    timeout and a total are specified, the shorter timeout will be applied.

    Defaults to None.

:type total: int, float, or None

:param connect:
    The maximum amount of time (in seconds) to wait for a connection
    attempt to a server to succeed. Omitting the parameter will default the
    connect timeout to the system default, probably `the global default
    timeout in socket.py
    <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.
    None will set an infinite timeout for connection attempts.

:type connect: int, float, or None

:param read:
    The maximum amount of time (in seconds) to wait between consecutive
    read operations for a response from the server. Omitting the parameter
    will default the read timeout to the system default, probably `the
    global default timeout in socket.py
    <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.
    None will set an infinite timeout.

:type read: int, float, or None

.. note::

    Many factors can affect the total amount of time for urllib3 to return
    an HTTP response.

    For example, Python's DNS resolver does not obey the timeout specified
    on the socket. Other factors that can affect total request time include
    high CPU load, high swap, the program running at a low priority level,
    or other behaviors.

    In addition, the read and total timeouts only measure the time between
    read operations on the socket connecting the client and the server,
    not the total amount of time for the request to return a complete
    response. For most requests, the timeout is raised because the server
    has not sent the first byte in the specified time. This is not always
    the case; if a server streams one byte every fifteen seconds, a timeout
    of 20 seconds will not trigger, even though the request will take
    several minutes to complete.
:::
**Imports**: `__future__.annotations`, `time`, `typing`, `enum.Enum`, `socket.getdefaulttimeout`, `exceptions.TimeoutStateError`, `typing.Final`
**Type References**: [[Final]], [[Timeout]], [[_TYPE_DEFAULT]]

### Interface
- `__init__`(total: _TYPE_TIMEOUT, connect: _TYPE_TIMEOUT, read: _TYPE_TIMEOUT) -> None
- `__repr__`() -> str
- `resolve_default_timeout`(timeout: _TYPE_TIMEOUT) -> float | None
- `_validate_timeout`(value: _TYPE_TIMEOUT, name: str) -> _TYPE_TIMEOUT
- `from_float`(timeout: _TYPE_TIMEOUT) -> Timeout
- `clone`() -> Timeout
- `start_connect`() -> float
- `get_connect_duration`() -> float
- `connect_timeout`() -> _TYPE_TIMEOUT
- `read_timeout`() -> float | None

### Implementation
**_TYPE_DEFAULT**

**Timeout**
  - DEFAULT_TIMEOUT: _TYPE_TIMEOUT
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/util/timeout.py`  
**Dependencies**: `__future__.annotations`, `time`, `typing`, `enum.Enum`, `socket.getdefaulttimeout`, `exceptions.TimeoutStateError`, `typing.Final`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.util

**Imports**: `__future__.annotations`, `connection.is_connection_dropped`, `request.SKIP_HEADER`, `request.SKIPPABLE_HEADERS`, `request.make_headers`, `response.is_fp_closed`, `retry.Retry`, `ssl_.ALPN_PROTOCOLS`, `ssl_.IS_PYOPENSSL`, `ssl_.SSLContext`, `ssl_.assert_fingerprint`, `ssl_.create_urllib3_context`, `ssl_.resolve_cert_reqs`, `ssl_.resolve_ssl_version`, `ssl_.ssl_wrap_socket`, `timeout.Timeout`, `url.Url`, `url.parse_url`, `wait.wait_for_read`, `wait.wait_for_write`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/util/__init__.py`  
**Dependencies**: `__future__.annotations`, `connection.is_connection_dropped`, `request.SKIP_HEADER`, `request.SKIPPABLE_HEADERS`, `request.make_headers`, `response.is_fp_closed`, `retry.Retry`, `ssl_.ALPN_PROTOCOLS`, `ssl_.IS_PYOPENSSL`, `ssl_.SSLContext`, `ssl_.assert_fingerprint`, `ssl_.create_urllib3_context`, `ssl_.resolve_cert_reqs`, `ssl_.resolve_ssl_version`, `ssl_.ssl_wrap_socket`, `timeout.Timeout`, `url.Url`, `url.parse_url`, `wait.wait_for_read`, `wait.wait_for_write`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.util.response
:::{doc} is_fp_closed:9
Checks whether a given file-like object is closed.

:param obj:
    The file-like object to check.
:::
:::{doc} assert_header_parsing:40
Asserts whether all headers have been successfully parsed.
Extracts encountered errors from the result of parsing headers.

Only works on Python 3.

:param http.client.HTTPMessage headers: Headers to verify.

:raises urllib3.exceptions.HeaderParsingError:
    If parsing errors are found.
:::
:::{doc} is_response_to_head:91
Checks whether the request of a response has been a HEAD-request.

:param http.client.HTTPResponse response:
    Response to check if the originating request
    used 'HEAD' as a method.
:::
**Imports**: `__future__.annotations`, `http.client`, `email.errors.MultipartInvariantViolationDefect`, `email.errors.StartBoundaryNotFoundDefect`, `exceptions.HeaderParsingError`
### Interface
- `is_fp_closed`(obj: object) -> bool
- `assert_header_parsing`(headers: httplib.HTTPMessage) -> None
- `is_response_to_head`(response: httplib.HTTPResponse) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/util/response.py`  
**Dependencies**: `__future__.annotations`, `http.client`, `email.errors.MultipartInvariantViolationDefect`, `email.errors.StartBoundaryNotFoundDefect`, `exceptions.HeaderParsingError`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.util.ssl_
:::{doc} _is_bpo_43522_fixed:30
Return True for CPython 3.9.3+ or 3.10+ and PyPy 7.3.8+ where
setting SSLContext.hostname_checks_common_name to False works.

Outside of CPython and PyPy we don't know which implementations work
or not so we conservatively use our hostname matching as we know that works
on all implementations.

https://github.com/urllib3/urllib3/issues/2192#issuecomment-821832963
https://foss.heptapod.net/pypy/pypy/-/issues/3539
:::
:::{doc} assert_fingerprint:146
Checks if given fingerprint matches the supplied certificate.

:param cert:
    Certificate as bytes object.
:param fingerprint:
    Fingerprint as string of hexdigits, can be interspersed by colons.
:::
:::{doc} resolve_cert_reqs:180
Resolves the argument to a numeric constant, which can be passed to
the wrap_socket function/method from the ssl module.
Defaults to :data:`ssl.CERT_REQUIRED`.
If given a string it is assumed to be the name of the constant in the
:mod:`ssl` module or its abbreviation.
(So you can specify `REQUIRED` instead of `CERT_REQUIRED`.
If it's neither `None` nor a string we assume it is already the numeric
constant which can directly be passed to wrap_socket.
:::
:::{doc} resolve_ssl_version:203
like resolve_cert_reqs
:::
:::{doc} create_urllib3_context:219
Creates and configures an :class:`ssl.SSLContext` instance for use with urllib3.

:param ssl_version:
    The desired protocol version to use. This will default to
    PROTOCOL_SSLv23 which will negotiate the highest protocol that both
    the server and your installation of OpenSSL support.

    This parameter is deprecated instead use 'ssl_minimum_version'.
:param ssl_minimum_version:
    The minimum version of TLS to be used. Use the 'ssl.TLSVersion' enum for specifying the value.
:param ssl_maximum_version:
    The maximum version of TLS to be used. Use the 'ssl.TLSVersion' enum for specifying the value.
    Not recommended to set to anything other than 'ssl.TLSVersion.MAXIMUM_SUPPORTED' which is the
    default value.
:param cert_reqs:
    Whether to require the certificate verification. This defaults to
    ``ssl.CERT_REQUIRED``.
:param options:
    Specific OpenSSL options. These default to ``ssl.OP_NO_SSLv2``,
    ``ssl.OP_NO_SSLv3``, ``ssl.OP_NO_COMPRESSION``, and ``ssl.OP_NO_TICKET``.
:param ciphers:
    Which cipher suites to allow the server to select. Defaults to either system configured
    ciphers if OpenSSL 1.1.1+, otherwise uses a secure default set of ciphers.
:returns:
    Constructed SSLContext object with specified options
:rtype: SSLContext
:::
:::{doc} ssl_wrap_socket:390
All arguments except for server_hostname, ssl_context, tls_in_tls, ca_cert_data and
ca_cert_dir have the same meaning as they do when using
:func:`ssl.create_default_context`, :meth:`ssl.SSLContext.load_cert_chain`,
:meth:`ssl.SSLContext.set_ciphers` and :meth:`ssl.SSLContext.wrap_socket`.

:param server_hostname:
    When SNI is supported, the expected hostname of the certificate
:param ssl_context:
    A pre-made :class:`SSLContext` object. If none is provided, one will
    be created using :func:`create_urllib3_context`.
:param ciphers:
    A string of ciphers we wish the client to support.
:param ca_cert_dir:
    A directory containing CA certificates in multiple separate files, as
    supported by OpenSSL's -CApath flag or the capath argument to
    SSLContext.load_verify_locations().
:param key_password:
    Optional password if the keyfile is encrypted.
:param ca_cert_data:
    Optional string containing CA certificates in PEM format suitable for
    passing as the cadata parameter to SSLContext.load_verify_locations()
:param tls_in_tls:
    Use SSLTransport to wrap the existing socket.
:::
:::{doc} is_ipaddress:464
Detects whether the hostname given is an IPv4 or IPv6 address.
Also detects IPv6 addresses with Zone IDs.

:param str hostname: Hostname to examine.
:return: True if the hostname is an IP address, False otherwise.
:::
:::{doc} _is_key_file_encrypted:477
Detects if a key file is encrypted or not.
:::
**Imports**: `__future__.annotations`, `hashlib`, `hmac`, `os`, `socket`, `sys`, `typing`, `warnings`, `binascii.unhexlify`, `exceptions.ProxySchemeUnsupported`, `exceptions.SSLError`, `url._BRACELESS_IPV6_ADDRZ_RE`, `url._IPV4_RE`, `ssl.VerifyMode`, `typing.TypedDict`, `ssltransport.SSLTransport`, `ssl`, `ssl.CERT_REQUIRED`, `ssl.HAS_NEVER_CHECK_COMMON_NAME`, `ssl.OP_NO_COMPRESSION`, `ssl.OP_NO_TICKET`, `ssl.OPENSSL_VERSION`, `ssl.OPENSSL_VERSION_NUMBER`, `ssl.PROTOCOL_TLS`, `ssl.PROTOCOL_TLS_CLIENT`, `ssl.OP_NO_SSLv2`, `ssl.OP_NO_SSLv3`, `ssl.SSLContext`, `ssl.TLSVersion`, `ssltransport.SSLTransport`
**Type References**: [[_TYPE_PEER_CERT_RET_DICT]]

### Interface
- `_is_bpo_43522_fixed`(implementation_name: str, version_info: _TYPE_VERSION_INFO, pypy_version_info: _TYPE_VERSION_INFO | None) -> bool
- `_is_has_never_check_common_name_reliable`(openssl_version: str, openssl_version_number: int, implementation_name: str, version_info: _TYPE_VERSION_INFO, pypy_version_info: _TYPE_VERSION_INFO | None) -> bool
- `assert_fingerprint`(cert: bytes | None, fingerprint: str) -> None
- `resolve_cert_reqs`(candidate: None | int | str) -> VerifyMode
- `resolve_ssl_version`(candidate: None | int | str) -> int
- `create_urllib3_context`(ssl_version: int | None, cert_reqs: int | None, options: int | None, ciphers: str | None, ssl_minimum_version: int | None, ssl_maximum_version: int | None) -> ssl.SSLContext
- `ssl_wrap_socket`(sock: socket.socket, keyfile: str | None, certfile: str | None, cert_reqs: int | None, ca_certs: str | None, server_hostname: str | None, ssl_version: int | None, ciphers: str | None, ssl_context: ssl.SSLContext | None, ca_cert_dir: str | None, key_password: str | None, ca_cert_data: None | str | bytes, tls_in_tls: bool) -> ssl.SSLSocket | SSLTransportType
- `is_ipaddress`(hostname: str | bytes) -> bool
- `_is_key_file_encrypted`(key_file: str) -> bool
- `_ssl_wrap_socket_impl`(sock: socket.socket, ssl_context: ssl.SSLContext, tls_in_tls: bool, server_hostname: str | None) -> ssl.SSLSocket | SSLTransportType

### Implementation
**_TYPE_PEER_CERT_RET_DICT**
  - subjectAltName: tuple[<ast.Tuple object at 0x12504bc50>]
  - subject: tuple[<ast.Tuple object at 0x12504b650>]
  - serialNumber: str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/util/ssl_.py`  
**Dependencies**: `__future__.annotations`, `hashlib`, `hmac`, `os`, `socket`, `sys`, `typing`, `warnings`, `binascii.unhexlify`, `exceptions.ProxySchemeUnsupported`, `exceptions.SSLError`, `url._BRACELESS_IPV6_ADDRZ_RE`, `url._IPV4_RE`, `ssl.VerifyMode`, `typing.TypedDict`, `ssltransport.SSLTransport`, `ssl`, `ssl.CERT_REQUIRED`, `ssl.HAS_NEVER_CHECK_COMMON_NAME`, `ssl.OP_NO_COMPRESSION`, `ssl.OP_NO_TICKET`, `ssl.OPENSSL_VERSION`, `ssl.OPENSSL_VERSION_NUMBER`, `ssl.PROTOCOL_TLS`, `ssl.PROTOCOL_TLS_CLIENT`, `ssl.OP_NO_SSLv2`, `ssl.OP_NO_SSLv3`, `ssl.SSLContext`, `ssl.TLSVersion`, `ssltransport.SSLTransport`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.util.retry
:::{doc} Retry:41
Retry configuration.

Each retry attempt will create a new Retry object with updated values, so
they can be safely reused.

Retries can be defined as a default for a pool:

.. code-block:: python

    retries = Retry(connect=5, read=2, redirect=5)
    http = PoolManager(retries=retries)
    response = http.request("GET", "https://example.com/")

Or per-request (which overrides the default for the pool):

.. code-block:: python

    response = http.request("GET", "https://example.com/", retries=Retry(10))

Retries can be disabled by passing ``False``:

.. code-block:: python

    response = http.request("GET", "https://example.com/", retries=False)

Errors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless
retries are disabled, in which case the causing exception will be raised.

:param int total:
    Total number of retries to allow. Takes precedence over other counts.

    Set to ``None`` to remove this constraint and fall back on other
    counts.

    Set to ``0`` to fail on the first retry.

    Set to ``False`` to disable and imply ``raise_on_redirect=False``.

:param int connect:
    How many connection-related errors to retry on.

    These are errors raised before the request is sent to the remote server,
    which we assume has not triggered the server to process the request.

    Set to ``0`` to fail on the first retry of this type.

:param int read:
    How many times to retry on read errors.

    These errors are raised after the request was sent to the server, so the
    request may have side-effects.

    Set to ``0`` to fail on the first retry of this type.

:param int redirect:
    How many redirects to perform. Limit this to avoid infinite redirect
    loops.

    A redirect is a HTTP response with a status code 301, 302, 303, 307 or
    308.

    Set to ``0`` to fail on the first retry of this type.

    Set to ``False`` to disable and imply ``raise_on_redirect=False``.

:param int status:
    How many times to retry on bad status codes.

    These are retries made on responses, where status code matches
    ``status_forcelist``.

    Set to ``0`` to fail on the first retry of this type.

:param int other:
    How many times to retry on other errors.

    Other errors are errors that are not connect, read, redirect or status errors.
    These errors might be raised after the request was sent to the server, so the
    request might have side-effects.

    Set to ``0`` to fail on the first retry of this type.

    If ``total`` is not set, it's a good idea to set this to 0 to account
    for unexpected edge cases and avoid infinite retry loops.

:param Collection allowed_methods:
    Set of uppercased HTTP method verbs that we should retry on.

    By default, we only retry on methods which are considered to be
    idempotent (multiple requests with the same parameters end with the
    same state). See :attr:`Retry.DEFAULT_ALLOWED_METHODS`.

    Set to a ``None`` value to retry on any verb.

:param Collection status_forcelist:
    A set of integer HTTP status codes that we should force a retry on.
    A retry is initiated if the request method is in ``allowed_methods``
    and the response status code is in ``status_forcelist``.

    By default, this is disabled with ``None``.

:param float backoff_factor:
    A backoff factor to apply between attempts after the second try
    (most errors are resolved immediately by a second try without a
    delay). urllib3 will sleep for::

        {backoff factor} * (2 ** ({number of previous retries}))

    seconds. If `backoff_jitter` is non-zero, this sleep is extended by::

        random.uniform(0, {backoff jitter})

    seconds. For example, if the backoff_factor is 0.1, then :func:`Retry.sleep` will
    sleep for [0.0s, 0.2s, 0.4s, 0.8s, ...] between retries. No backoff will ever
    be longer than `backoff_max`.

    By default, backoff is disabled (factor set to 0).

:param bool raise_on_redirect: Whether, if the number of redirects is
    exhausted, to raise a MaxRetryError, or to return a response with a
    response code in the 3xx range.

:param bool raise_on_status: Similar meaning to ``raise_on_redirect``:
    whether we should raise an exception, or return a response,
    if status falls in ``status_forcelist`` range and retries have
    been exhausted.

:param tuple history: The history of the request encountered during
    each call to :meth:`~Retry.increment`. The list is in the order
    the requests occurred. Each list item is of class :class:`RequestHistory`.

:param bool respect_retry_after_header:
    Whether to respect Retry-After header on status codes defined as
    :attr:`Retry.RETRY_AFTER_STATUS_CODES` or not.

:param Collection remove_headers_on_redirect:
    Sequence of headers to remove from the request when a response
    indicating a redirect is returned before firing off the redirected
    request.
:::
**Imports**: `__future__.annotations`, `email`, `logging`, `random`, `re`, `time`, `typing`, `itertools.takewhile`, `types.TracebackType`, `exceptions.ConnectTimeoutError`, `exceptions.InvalidHeader`, `exceptions.MaxRetryError`, `exceptions.ProtocolError`, `exceptions.ProxyError`, `exceptions.ReadTimeoutError`, `exceptions.ResponseError`, `util.reraise`, `typing_extensions.Self`, `connectionpool.ConnectionPool`, `response.BaseHTTPResponse`
**Type References**: [[ClassVar]], [[Exception]], [[None]], [[RequestHistory]], [[Retry]], [[typing.ClassVar]]

### Interface
- `__init__`(total: bool | int | None, connect: int | None, read: int | None, redirect: bool | int | None, status: int | None, other: int | None, allowed_methods: typing.Collection[str] | None, status_forcelist: typing.Collection[int] | None, backoff_factor: float, backoff_max: float, raise_on_redirect: bool, raise_on_status: bool, history: tuple[<ast.Tuple object at 0x1250c9690>] | None, respect_retry_after_header: bool, remove_headers_on_redirect: typing.Collection[str], backoff_jitter: float) -> None
- `new`() -> Self
- `from_int`(retries: Retry | bool | int | None, redirect: bool | int | None, default: Retry | bool | int | None) -> Retry
- `get_backoff_time`() -> float
- `parse_retry_after`(retry_after: str) -> float
- `get_retry_after`(response: BaseHTTPResponse) -> float | None
- `sleep_for_retry`(response: BaseHTTPResponse) -> bool
- `_sleep_backoff`() -> None
- `sleep`(response: BaseHTTPResponse | None) -> None
- `_is_connection_error`(err: Exception) -> bool
- `_is_read_error`(err: Exception) -> bool
- `_is_method_retryable`(method: str) -> bool
- `is_retry`(method: str, status_code: int, has_retry_after: bool) -> bool
- `is_exhausted`() -> bool
- `increment`(method: str | None, url: str | None, response: BaseHTTPResponse | None, error: Exception | None, _pool: ConnectionPool | None, _stacktrace: TracebackType | None) -> Self
- `__repr__`() -> str

### Implementation
**RequestHistory**
  - method: str | None
  - url: str | None
  - error: Exception | None
  - status: int | None
  - redirect_location: str | None
**Retry**
  - DEFAULT: typing.ClassVar[Retry]
  - seconds: float
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/util/retry.py`  
**Dependencies**: `__future__.annotations`, `email`, `logging`, `random`, `re`, `time`, `typing`, `itertools.takewhile`, `types.TracebackType`, `exceptions.ConnectTimeoutError`, `exceptions.InvalidHeader`, `exceptions.MaxRetryError`, `exceptions.ProtocolError`, `exceptions.ProxyError`, `exceptions.ReadTimeoutError`, `exceptions.ResponseError`, `util.reraise`, `typing_extensions.Self`, `connectionpool.ConnectionPool`, `response.BaseHTTPResponse`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.util.url
:::{doc} Url:80
Data structure for representing an HTTP URL. Used as a return value for
:func:`parse_url`. Both the scheme and host are normalized as they are
both case-insensitive according to RFC 3986.
:::
:::{doc} _encode_invalid_chars:227
Percent-encodes a URI component without reapplying
onto an already percent-encoded component.
:::
:::{doc} _encode_target:349
Percent-encodes a request target so that there are no invalid characters

Pre-condition for this function is that 'target' must start with '/'.
If that is the case then _TARGET_RE will always produce a match.
:::
:::{doc} parse_url:367
Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is
performed to parse incomplete urls. Fields not provided will be None.
This parser is RFC 3986 and RFC 6874 compliant.

The parser logic and helper functions are based heavily on
work done in the ``rfc3986`` module.

:param str url: URL to parse into a :class:`.Url` namedtuple.

Partly backwards-compatible with :mod:`urllib.parse`.

Example:

.. code-block:: python

    import urllib3

    print( urllib3.util.parse_url('http://google.com/mail/'))
    # Url(scheme='http', host='google.com', port=None, path='/mail/', ...)

    print( urllib3.util.parse_url('google.com:80'))
    # Url(scheme=None, host='google.com', port=80, path=None, ...)

    print( urllib3.util.parse_url('/foo?bar'))
    # Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)
:::
**Imports**: `__future__.annotations`, `re`, `typing`, `exceptions.LocationParseError`, `util.to_str`, `idna`
**Type References**: [[None]], [[Url]]

### Interface
- `_encode_invalid_chars`(component: str | None, allowed_chars: typing.Container[str]) -> str | None
- `_remove_path_dot_segments`(path: str) -> str
- `_normalize_host`(host: str | None, scheme: str | None) -> str | None
- `_idna_encode`(name: str) -> bytes
- `_encode_target`(target: str) -> str
- `parse_url`(url: str) -> Url
- `__new__`(scheme: str | None, auth: str | None, host: str | None, port: int | None, path: str | None, query: str | None, fragment: str | None) -> Any
- `hostname`() -> str | None
- `request_uri`() -> str
- `authority`() -> str | None
- `netloc`() -> str | None
- `url`() -> str
- `__str__`() -> str

### Implementation
**Url**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/util/url.py`  
**Dependencies**: `__future__.annotations`, `re`, `typing`, `exceptions.LocationParseError`, `util.to_str`, `idna`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.util.connection
:::{doc} is_connection_dropped:15
Returns True if the connection is dropped and should be closed.
:param conn: :class:`urllib3.connection.HTTPConnection` object.
:::
:::{doc} create_connection:27
Connect to *address* and return the socket object.

Convenience function.  Connect to *address* (a 2-tuple ``(host,
port)``) and return the socket object.  Passing the optional
*timeout* parameter will set the timeout on the socket instance
before attempting to connect.  If no *timeout* is supplied, the
global default timeout setting returned by :func:`socket.getdefaulttimeout`
is used.  If *source_address* is set it must be a tuple of (host, port)
for the socket to bind as a source address before making the connection.
An host of '' or port 0 tells the OS to use the default.
:::
:::{doc} allowed_gai_family:103
This function is designed to work in the context of
getaddrinfo, where family=socket.AF_UNSPEC is the default and
will perform a DNS search for both IPv6 and IPv4 records.
:::
:::{doc} _has_ipv6:114
Returns True if the system can bind an IPv6 address.
:::
**Imports**: `__future__.annotations`, `socket`, `typing`, `exceptions.LocationParseError`, `timeout._DEFAULT_TIMEOUT`, `timeout._TYPE_TIMEOUT`, `_base_connection.BaseHTTPConnection`
### Interface
- `is_connection_dropped`(conn: BaseHTTPConnection) -> bool
- `create_connection`(address: tuple[<ast.Tuple object at 0x1251ba190>], timeout: _TYPE_TIMEOUT, source_address: tuple[<ast.Tuple object at 0x1251b9d10>] | None, socket_options: _TYPE_SOCKET_OPTIONS | None) -> socket.socket
- `_set_socket_options`(sock: socket.socket, options: _TYPE_SOCKET_OPTIONS | None) -> None
- `allowed_gai_family`() -> socket.AddressFamily
- `_has_ipv6`(host: str) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/util/connection.py`  
**Dependencies**: `__future__.annotations`, `socket`, `typing`, `exceptions.LocationParseError`, `timeout._DEFAULT_TIMEOUT`, `timeout._TYPE_TIMEOUT`, `_base_connection.BaseHTTPConnection`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.util.ssl_match_hostname
:::{doc} _dnsname_match:24
Matching according to RFC 6125, section 6.4.3

http://tools.ietf.org/html/rfc6125#section-6.4.3
:::
:::{doc} _ipaddress_match:80
Exact matching of IP addresses.

RFC 9110 section 4.3.5: "A reference identity of IP-ID contains the decoded
bytes of the IP address. An IP version 4 address is 4 octets, and an IP
version 6 address is 16 octets. [...] A reference identity of type IP-ID
matches if the address is identical to an iPAddress value of the
subjectAltName extension of the certificate."
:::
:::{doc} match_hostname:95
Verify that *cert* (in decoded format as returned by
SSLSocket.getpeercert()) matches the *hostname*.  RFC 2818 and RFC 6125
rules are followed, but IP addresses are not accepted for *hostname*.

CertificateError is raised on failure. On success, the function
returns nothing.
:::
**Imports**: `__future__.annotations`, `ipaddress`, `re`, `typing`, `ipaddress.IPv4Address`, `ipaddress.IPv6Address`, `ssl_._TYPE_PEER_CERT_RET_DICT`
**Type References**: [[CertificateError]]

### Interface
- `_dnsname_match`(dn: typing.Any, hostname: str, max_wildcards: int) -> typing.Match[str] | None | bool
- `_ipaddress_match`(ipname: str, host_ip: IPv4Address | IPv6Address) -> bool
- `match_hostname`(cert: _TYPE_PEER_CERT_RET_DICT | None, hostname: str, hostname_checks_common_name: bool) -> None

### Implementation
**CertificateError**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/util/ssl_match_hostname.py`  
**Dependencies**: `__future__.annotations`, `ipaddress`, `re`, `typing`, `ipaddress.IPv4Address`, `ipaddress.IPv6Address`, `ssl_._TYPE_PEER_CERT_RET_DICT`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.contrib



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/contrib/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.contrib.socks
:::{doc} SOCKSConnection:84
A plain-text HTTP connection that connects via a SOCKS proxy.
:::
:::{doc} SOCKSProxyManager:173
A version of the urllib3 ProxyManager that routes connections via the
defined SOCKS proxy.
:::
**Imports**: `__future__.annotations`, `typing`, `socket.timeout`, `connection.HTTPConnection`, `connection.HTTPSConnection`, `connectionpool.HTTPConnectionPool`, `connectionpool.HTTPSConnectionPool`, `exceptions.ConnectTimeoutError`, `exceptions.NewConnectionError`, `poolmanager.PoolManager`, `util.url.parse_url`, `socks`, `ssl`, `warnings`, `exceptions.DependencyWarning`
**Type References**: [[Any]], [[None]], [[SOCKSConnection]], [[SOCKSHTTPConnectionPool]], [[SOCKSHTTPSConnection]], [[SOCKSHTTPSConnectionPool]], [[SOCKSProxyManager]], [[_TYPE_SOCKS_OPTIONS]], [[typing.Any]]

### Interface
- `__init__`(proxy_url: str, username: str | None, password: str | None, num_pools: int, headers: typing.Mapping[<ast.Tuple object at 0x1251efdd0>] | None) -> Any
- `_new_conn`() -> socks.socksocket

### Implementation
**_TYPE_SOCKS_OPTIONS**
  - socks_version: int
  - proxy_host: str | None
  - proxy_port: str | None
  - username: str | None
  - password: str | None
  - rdns: bool
**SOCKSConnection**
  - extra_kw: dict[<ast.Tuple object at 0x1251fb450>]
**SOCKSHTTPSConnection**

**SOCKSHTTPConnectionPool**

**SOCKSHTTPSConnectionPool**

**SOCKSProxyManager**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/contrib/socks.py`  
**Dependencies**: `__future__.annotations`, `typing`, `socket.timeout`, `connection.HTTPConnection`, `connection.HTTPSConnection`, `connectionpool.HTTPConnectionPool`, `connectionpool.HTTPSConnectionPool`, `exceptions.ConnectTimeoutError`, `exceptions.NewConnectionError`, `poolmanager.PoolManager`, `util.url.parse_url`, `socks`, `ssl`, `warnings`, `exceptions.DependencyWarning`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.contrib.pyopenssl
:::{doc} inject_into_urllib3:139
Monkey-patch urllib3 with PyOpenSSL-backed SSL-support.
:::
:::{doc} extract_from_urllib3:150
Undo monkey-patching by :func:`inject_into_urllib3`.
:::
:::{doc} _validate_dependencies_met:159
Verifies that PyOpenSSL's package-level dependencies have been met.
Throws `ImportError` if they are not met.
:::
:::{doc} _dnsname_to_stdlib:185
Converts a dNSName SubjectAlternativeName field to the form used by the
standard library on the given Python version.

Cryptography produces a dNSName as a unicode string that was idna-decoded
from ASCII bytes. We need to idna-encode that string to get it back, and
then on Python 3 we also need to convert to unicode via UTF-8 (the stdlib
uses PyUnicode_FromStringAndSize on it, which decodes via UTF-8).

If the name cannot be idna-encoded then we return None signalling that
the name given should be skipped.
:::
:::{doc} get_subj_alt_name:226
Given an PyOpenSSL certificate, provides all the subject alternative names.
:::
:::{doc} WrappedSocket:274
API-compatibility wrapper for Python OpenSSL's Connection-class.
:::
:::{doc} PyOpenSSLContext:413
I am a wrapper class for the PyOpenSSL ``Context`` object. I am responsible
for translating the interface of the standard library ``SSLContext`` object
to calls into PyOpenSSL.
:::
**Imports**: `__future__.annotations`, `OpenSSL.SSL`, `cryptography.x509`, `logging`, `ssl`, `typing`, `io.BytesIO`, `socket.socket`, `socket.timeout`, `util`, `cryptography.x509.UnsupportedExtension`, `OpenSSL.crypto.X509`, `cryptography.x509.extensions.Extensions`, `OpenSSL.crypto.X509`, `idna`
**Type References**: [[PyOpenSSLContext]], [[UnsupportedExtension]], [[WrappedSocket]]

### Interface
- `inject_into_urllib3`() -> None
- `extract_from_urllib3`() -> None
- `_validate_dependencies_met`() -> None
- `_dnsname_to_stdlib`(name: str) -> str | None
- `get_subj_alt_name`(peer_cert: X509) -> list[tuple[<ast.Tuple object at 0x125245610>]]
- `_verify_callback`(cnx: OpenSSL.SSL.Connection, x509: X509, err_no: int, err_depth: int, return_code: int) -> bool
- `idna_encode`(name: str) -> bytes | None
- `__init__`(protocol: int) -> None
- `fileno`() -> int
- `_decref_socketios`() -> None
- `recv`() -> bytes
- `recv_into`() -> int
- `settimeout`(timeout: float) -> None
- `_send_until_done`(data: bytes) -> int
- `sendall`(data: bytes) -> None
- `shutdown`(how: int) -> None
- `close`() -> None
- `_real_close`() -> None
- `getpeercert`(binary_form: bool) -> dict[<ast.Tuple object at 0x125281c90>] | None
- `version`() -> str
- `selected_alpn_protocol`() -> str | None
- `options`(value: int) -> None
- `verify_mode`(value: ssl.VerifyMode) -> None
- `set_default_verify_paths`() -> None
- `set_ciphers`(ciphers: bytes | str) -> None
- `load_verify_locations`(cafile: str | None, capath: str | None, cadata: bytes | None) -> None
- `load_cert_chain`(certfile: str, keyfile: str | None, password: str | None) -> None
- `set_alpn_protocols`(protocols: list[bytes | str]) -> None
- `wrap_socket`(sock: socket_cls, server_side: bool, do_handshake_on_connect: bool, suppress_ragged_eofs: bool, server_hostname: bytes | str | None) -> WrappedSocket
- `_set_ctx_options`() -> None
- `minimum_version`(minimum_version: int) -> None
- `maximum_version`(maximum_version: int) -> None

### Implementation
**WrappedSocket**

**PyOpenSSLContext**

**UnsupportedExtension**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/contrib/pyopenssl.py`  
**Dependencies**: `__future__.annotations`, `OpenSSL.SSL`, `cryptography.x509`, `logging`, `ssl`, `typing`, `io.BytesIO`, `socket.socket`, `socket.timeout`, `util`, `cryptography.x509.UnsupportedExtension`, `OpenSSL.crypto.X509`, `cryptography.x509.extensions.Extensions`, `OpenSSL.crypto.X509`, `idna`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.http2

**Imports**: `__future__.annotations`, `importlib.metadata.version`, `typing`, `connection`, `util`, `connectionpool.HTTPSConnectionPool`, `util.ssl_`, `connection.HTTP2Connection`, `connection`, `util`, `connectionpool.HTTPSConnectionPool`, `util.ssl_`
**Type References**: [[Any]], [[typing.Any]]

### Interface
- `inject_into_urllib3`() -> None
- `extract_from_urllib3`() -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/http2/__init__.py`  
**Dependencies**: `__future__.annotations`, `importlib.metadata.version`, `typing`, `connection`, `util`, `connectionpool.HTTPSConnectionPool`, `util.ssl_`, `connection.HTTP2Connection`, `connection`, `util`, `connectionpool.HTTPSConnectionPool`, `util.ssl_`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.http2.connection
:::{doc} _is_legal_header_name:29
"An implementation that validates fields according to the definitions in Sections
5.1 and 5.5 of [HTTP] only needs an additional check that field names do not
include uppercase characters." (https://httpwg.org/specs/rfc9113.html#n-field-validity)

`http.client._is_legal_header_name` does not validate the field name according to the
HTTP 1.1 spec, so we do that here, in addition to checking for uppercase characters.

This does not allow for the `:` character in the header name, so should not
be used to validate pseudo-headers.
:::
:::{doc} _is_illegal_header_value:44
"A field value MUST NOT contain the zero value (ASCII NUL, 0x00), line feed
(ASCII LF, 0x0a), or carriage return (ASCII CR, 0x0d) at any position. A field
value MUST NOT start or end with an ASCII whitespace character (ASCII SP or HTAB,
0x20 or 0x09)." (https://httpwg.org/specs/rfc9113.html#n-field-validity)
:::
:::{doc} _LockedObject:54
A wrapper class that hides a specific object behind a lock.
The goal here is to provide a simple way to protect access to an object
that cannot safely be simultaneously accessed from multiple threads. The
intended use of this class is simple: take hold of it with a context
manager, which returns the protected object.
:::
**Imports**: `__future__.annotations`, `logging`, `re`, `threading`, `types`, `typing`, `h2.config`, `h2.connection`, `h2.events`, `_base_connection._TYPE_BODY`, `_collections.HTTPHeaderDict`, `connection.HTTPSConnection`, `connection._get_default_user_agent`, `exceptions.ConnectionError`, `response.BaseHTTPResponse`
**Type References**: [[HTTP2Connection]], [[HTTP2Response]], [[_LockedObject]]

### Interface
- `_is_legal_header_name`(name: bytes) -> bool
- `_is_illegal_header_value`(value: bytes) -> bool
- `__init__`(status: int, headers: HTTPHeaderDict, request_url: str, data: bytes, decode_content: bool) -> None
- `__enter__`() -> T
- `__exit__`(exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: types.TracebackType | None) -> None
- `_new_h2_conn`() -> _LockedObject[h2.connection.H2Connection]
- `connect`() -> None
- `putrequest`(method: str, url: str) -> None
- `putheader`(header: str | bytes) -> None
- `endheaders`(message_body: typing.Any) -> None
- `send`(data: typing.Any) -> None
- `set_tunnel`(host: str, port: int | None, headers: typing.Mapping[<ast.Tuple object at 0x12530cd10>] | None, scheme: str) -> None
- `getresponse`() -> HTTP2Response
- `request`(method: str, url: str, body: _TYPE_BODY | None, headers: typing.Mapping[<ast.Tuple object at 0x125317690>] | None) -> None
- `close`() -> None
- `data`() -> bytes
- `get_redirect_location`() -> None

### Implementation
**_LockedObject**

**HTTP2Connection**

**HTTP2Response**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/http2/connection.py`  
**Dependencies**: `__future__.annotations`, `logging`, `re`, `threading`, `types`, `typing`, `h2.config`, `h2.connection`, `h2.events`, `_base_connection._TYPE_BODY`, `_collections.HTTPHeaderDict`, `connection.HTTPSConnection`, `connection._get_default_user_agent`, `exceptions.ConnectionError`, `response.BaseHTTPResponse`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.http2.probe

**Imports**: `__future__.annotations`, `threading`
**Type References**: [[_HTTP2ProbeCache]]

### Interface
- `__init__`() -> None
- `acquire_and_get`(host: str, port: int) -> bool | None
- `set_and_release`(host: str, port: int, supports_http2: bool | None) -> None
- `_values`() -> dict[<ast.Tuple object at 0x12533cfd0>]
- `_reset`() -> None

### Implementation
**_HTTP2ProbeCache**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/http2/probe.py`  
**Dependencies**: `__future__.annotations`, `threading`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.contrib.emscripten.fetch
:::{doc} _JSPIReadStream:304
A read stream that uses pyodide.ffi.run_sync to read from a JavaScript fetch
response. This requires support for WebAssembly JavaScript Promise Integration
in the containing browser, and for pyodide to be launched via runPythonAsync.

:param js_read_stream:
    The JavaScript stream reader

:param timeout:
    Timeout in seconds

:param request:
    The request we're handling

:param response:
    The response this stream relates to

:param js_abort_controller:
    A JavaScript AbortController object, used for timeouts
:::
:::{doc} send_jspi_request:550
Send a request using WebAssembly JavaScript Promise Integration
to wrap the asynchronous JavaScript fetch api (experimental).

:param request:
    Request to send

:param streaming:
    Whether to stream the response

:return: The response object
:rtype: EmscriptenResponse
:::
:::{doc} _run_sync_with_timeout:623
Await a JavaScript promise synchronously with a timeout which is implemented
via the AbortController

:param promise:
    Javascript promise to await

:param timeout:
    Timeout in seconds

:param js_abort_controller:
    A JavaScript AbortController object, used on timeout

:param request:
    The request being handled

:param response:
    The response being handled (if it exists yet)

:raises _TimeoutError: If the request times out
:raises _RequestError: If the request raises a JavaScript exception

:return: The result of awaiting the promise.
:::
:::{doc} has_jspi:677
Return true if jspi can be used.

This requires both browser support and also WebAssembly
to be in the correct state - i.e. that the javascript
call into python was async not sync.

:return: True if jspi can be used.
:rtype: bool
:::
**Imports**: `__future__.annotations`, `io`, `json`, `email.parser.Parser`, `importlib.resources.files`, `typing.TYPE_CHECKING`, `typing.Any`, `js`, `pyodide.ffi.JsArray`, `pyodide.ffi.JsException`, `pyodide.ffi.JsProxy`, `pyodide.ffi.to_js`, `request.EmscriptenRequest`, `response.EmscriptenResponse`, `typing_extensions.Buffer`, `js.console`, `pyodide.ffi.run_sync`, `pyodide.ffi.can_run_sync`, `pyodide.ffi.run_sync`
**Type References**: [[None]], [[RawIOBase]], [[_JSPIReadStream]], [[_ReadStream]], [[_RequestError]], [[_StreamingError]], [[_StreamingFetcher]], [[_TimeoutError]], [[io.RawIOBase]]

### Interface
- `_obj_from_dict`(dict_val: dict[<ast.Tuple object at 0x125362ad0>]) -> JsProxy
- `is_in_browser_main_thread`() -> bool
- `is_cross_origin_isolated`() -> bool
- `is_in_node`() -> bool
- `is_worker_available`() -> bool
- `send_streaming_request`(request: EmscriptenRequest) -> EmscriptenResponse | None
- `_show_timeout_warning`() -> None
- `_show_streaming_warning`() -> None
- `send_request`(request: EmscriptenRequest) -> EmscriptenResponse
- `send_jspi_request`(request: EmscriptenRequest, streaming: bool) -> EmscriptenResponse
- `_run_sync_with_timeout`(promise: Any, timeout: float, js_abort_controller: Any, request: EmscriptenRequest | None, response: EmscriptenResponse | None) -> Any
- `has_jspi`() -> bool
- `streaming_ready`() -> bool | None
- `__init__`(js_read_stream: Any, timeout: float, request: EmscriptenRequest, response: EmscriptenResponse, js_abort_controller: Any) -> Any
- `__del__`() -> None
- `is_closed`() -> bool
- `closed`() -> bool
- `close`() -> None
- `readable`() -> bool
- `writable`() -> bool
- `seekable`() -> bool
- `readinto`(byte_obj: Buffer) -> int
- `send`(request: EmscriptenRequest) -> EmscriptenResponse
- `_get_next_buffer`() -> bool
- `promise_resolver`(js_resolve_fn: JsProxy, js_reject_fn: JsProxy) -> None
- `onMsg`(e: JsProxy) -> None
- `onErr`(e: JsProxy) -> None

### Implementation
**_RequestError**

**_StreamingError**

**_TimeoutError**

**_ReadStream**

**_StreamingFetcher**

**_JSPIReadStream**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/contrib/emscripten/fetch.py`  
**Dependencies**: `__future__.annotations`, `io`, `json`, `email.parser.Parser`, `importlib.resources.files`, `typing.TYPE_CHECKING`, `typing.Any`, `js`, `pyodide.ffi.JsArray`, `pyodide.ffi.JsException`, `pyodide.ffi.JsProxy`, `pyodide.ffi.to_js`, `request.EmscriptenRequest`, `response.EmscriptenResponse`, `typing_extensions.Buffer`, `js.console`, `pyodide.ffi.run_sync`, `pyodide.ffi.can_run_sync`, `pyodide.ffi.run_sync`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.contrib.emscripten.request

**Imports**: `__future__.annotations`, `dataclasses.dataclass`, `dataclasses.field`, `_base_connection._TYPE_BODY`
**Type References**: [[EmscriptenRequest]], [[None]]

### Interface
- `set_header`(name: str, value: str) -> None
- `set_body`(body: _TYPE_BODY | None) -> None

### Implementation
**EmscriptenRequest**
  - method: str
  - url: str
  - params: dict[<ast.Tuple object at 0x125407890>] | None
  - body: _TYPE_BODY | None
  - headers: dict[<ast.Tuple object at 0x125406fd0>]
  - timeout: float
  - decode_content: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/contrib/emscripten/request.py`  
**Dependencies**: `__future__.annotations`, `dataclasses.dataclass`, `dataclasses.field`, `_base_connection._TYPE_BODY`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.contrib.emscripten

**Imports**: `__future__.annotations`, `urllib3.connection`, `connectionpool.HTTPConnectionPool`, `connectionpool.HTTPSConnectionPool`, `connection.EmscriptenHTTPConnection`, `connection.EmscriptenHTTPSConnection`
### Interface
- `inject_into_urllib3`() -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/contrib/emscripten/__init__.py`  
**Dependencies**: `__future__.annotations`, `urllib3.connection`, `connectionpool.HTTPConnectionPool`, `connectionpool.HTTPSConnectionPool`, `connection.EmscriptenHTTPConnection`, `connection.EmscriptenHTTPSConnection`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.contrib.emscripten.response

**Imports**: `__future__.annotations`, `json`, `logging`, `typing`, `contextlib.contextmanager`, `dataclasses.dataclass`, `http.client.HTTPException`, `io.BytesIO`, `io.IOBase`, `exceptions.InvalidHeader`, `exceptions.TimeoutError`, `response.BaseHTTPResponse`, `util.retry.Retry`, `request.EmscriptenRequest`, `_base_connection.BaseHTTPConnection`, `_base_connection.BaseHTTPSConnection`, `fetch._RequestError`, `fetch._TimeoutError`
**Type References**: [[EmscriptenHttpResponseWrapper]], [[EmscriptenRequest]], [[EmscriptenResponse]], [[IOBase]], [[None]]

### Interface
- `__init__`(internal_response: EmscriptenResponse, url: str | None, connection: BaseHTTPConnection | BaseHTTPSConnection | None) -> Any
- `url`(url: str | None) -> None
- `connection`() -> BaseHTTPConnection | BaseHTTPSConnection | None
- `retries`(retries: Retry | None) -> None
- `stream`(amt: int | None, decode_content: bool | None) -> typing.Generator[bytes]
- `_init_length`(request_method: str | None) -> int | None
- `read`(amt: int | None, decode_content: bool | None, cache_content: bool) -> bytes
- `read_chunked`(amt: int | None, decode_content: bool | None) -> typing.Generator[bytes]
- `release_conn`() -> None
- `drain_conn`() -> None
- `data`() -> bytes
- `json`() -> typing.Any
- `close`() -> None
- `_error_catcher`() -> typing.Generator[None]

### Implementation
**EmscriptenResponse**
  - status_code: int
  - headers: dict[<ast.Tuple object at 0x125422050>]
  - body: IOBase | bytes
  - request: EmscriptenRequest
**EmscriptenHttpResponseWrapper**
  - length: int | None
  - content_length: str | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/contrib/emscripten/response.py`  
**Dependencies**: `__future__.annotations`, `json`, `logging`, `typing`, `contextlib.contextmanager`, `dataclasses.dataclass`, `http.client.HTTPException`, `io.BytesIO`, `io.IOBase`, `exceptions.InvalidHeader`, `exceptions.TimeoutError`, `response.BaseHTTPResponse`, `util.retry.Retry`, `request.EmscriptenRequest`, `_base_connection.BaseHTTPConnection`, `_base_connection.BaseHTTPSConnection`, `fetch._RequestError`, `fetch._TimeoutError`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.urllib3.contrib.emscripten.connection

**Imports**: `__future__.annotations`, `os`, `typing`, `http.client.HTTPException`, `http.client.ResponseNotReady`, `_base_connection._TYPE_BODY`, `connection.HTTPConnection`, `connection.ProxyConfig`, `connection.port_by_scheme`, `exceptions.TimeoutError`, `response.BaseHTTPResponse`, `util.connection._TYPE_SOCKET_OPTIONS`, `util.timeout._DEFAULT_TIMEOUT`, `util.timeout._TYPE_TIMEOUT`, `util.url.Url`, `fetch._RequestError`, `fetch._TimeoutError`, `fetch.send_request`, `fetch.send_streaming_request`, `request.EmscriptenRequest`, `response.EmscriptenHttpResponseWrapper`, `response.EmscriptenResponse`, `_base_connection.BaseHTTPConnection`, `_base_connection.BaseHTTPSConnection`
**Type References**: [[Any]], [[BaseHTTPConnection]], [[BaseHTTPSConnection]], [[ClassVar]], [[EmscriptenHTTPConnection]], [[EmscriptenHTTPSConnection]], [[EmscriptenResponse]], [[Literal]], [[None]], [[ProxyConfig]], [[Url]], [[typing.Any]], [[typing.ClassVar]], [[typing.Literal]]

### Interface
- `__init__`(host: str, port: int) -> None
- `set_tunnel`(host: str, port: int | None, headers: typing.Mapping[<ast.Tuple object at 0x1254642d0>] | None, scheme: str) -> None
- `connect`() -> None
- `request`(method: str, url: str, body: _TYPE_BODY | None, headers: typing.Mapping[<ast.Tuple object at 0x125462e50>] | None) -> None
- `getresponse`() -> BaseHTTPResponse
- `close`() -> None
- `is_closed`() -> bool
- `is_connected`() -> bool
- `has_connected_to_proxy`() -> bool
- `set_cert`(key_file: str | None, cert_file: str | None, cert_reqs: int | str | None, key_password: str | None, ca_certs: str | None, assert_hostname: None | str | typing.Literal[False], assert_fingerprint: str | None, ca_cert_dir: str | None, ca_cert_data: None | str | bytes) -> None

### Implementation
**EmscriptenHTTPConnection**
  - default_port: typing.ClassVar[int]
  - default_socket_options: typing.ClassVar[_TYPE_SOCKET_OPTIONS]
  - timeout: None | float
  - host: str
  - port: int
  - blocksize: int
  - source_address: tuple[<ast.Tuple object at 0x12546d490>] | None
  - socket_options: _TYPE_SOCKET_OPTIONS | None
  - proxy: Url | None
  - proxy_config: ProxyConfig | None
  - is_verified: bool
  - proxy_is_verified: bool | None
  - _response: EmscriptenResponse | None
**EmscriptenHTTPSConnection**
  - cert_reqs: int | str | None
  - ca_certs: str | None
  - ca_cert_dir: str | None
  - ca_cert_data: None | str | bytes
  - cert_file: str | None
  - key_file: str | None
  - key_password: str | None
  - ssl_context: typing.Any | None
  - ssl_version: int | str | None
  - ssl_minimum_version: int | None
  - ssl_maximum_version: int | None
  - assert_hostname: None | str | typing.Literal[False]
  - assert_fingerprint: str | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/urllib3/contrib/emscripten/connection.py`  
**Dependencies**: `__future__.annotations`, `os`, `typing`, `http.client.HTTPException`, `http.client.ResponseNotReady`, `_base_connection._TYPE_BODY`, `connection.HTTPConnection`, `connection.ProxyConfig`, `connection.port_by_scheme`, `exceptions.TimeoutError`, `response.BaseHTTPResponse`, `util.connection._TYPE_SOCKET_OPTIONS`, `util.timeout._DEFAULT_TIMEOUT`, `util.timeout._TYPE_TIMEOUT`, `util.url.Url`, `fetch._RequestError`, `fetch._TimeoutError`, `fetch.send_request`, `fetch.send_streaming_request`, `request.EmscriptenRequest`, `response.EmscriptenHttpResponseWrapper`, `response.EmscriptenResponse`, `_base_connection.BaseHTTPConnection`, `_base_connection.BaseHTTPSConnection`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blib2to3.pgen2.token

**Imports**: `typing.Final`
**Type References**: [[Final]]

### Interface
- `ISTERMINAL`(x: int) -> bool
- `ISNONTERMINAL`(x: int) -> bool
- `ISEOF`(x: int) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blib2to3/pgen2/token.py`  
**Dependencies**: `typing.Final`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blib2to3.pgen2.pgen

**Imports**: `os`, `typing.IO`, `typing.Any`, `typing.Iterator`, `typing.NoReturn`, `typing.Optional`, `typing.Sequence`, `typing.Union`, `blib2to3.pgen2.grammar`, `blib2to3.pgen2.token`, `blib2to3.pgen2.tokenize`, `blib2to3.pgen2.tokenize.GoodTokenInfo`
**Type References**: [[Any]], [[DFAState]], [[IO]], [[Iterator]], [[NFAState]], [[Optional]], [[ParserGenerator]], [[Path]], [[PgenGrammar]]

### Interface
- `generate_grammar`(filename: Path) -> PgenGrammar
- `__init__`(nfaset: dict[<ast.Tuple object at 0x125560390>], final: NFAState) -> None
- `make_grammar`() -> PgenGrammar
- `make_first`(c: PgenGrammar, name: str) -> dict[<ast.Tuple object at 0x1254c7390>]
- `make_label`(c: PgenGrammar, label: str) -> int
- `addfirstsets`() -> None
- `calcfirst`(name: str) -> None
- `parse`() -> tuple[<ast.Tuple object at 0x1255096d0>]
- `make_dfa`(start: NFAState, finish: NFAState) -> list[DFAState]
- `dump_nfa`(name: str, start: NFAState, finish: NFAState) -> None
- `dump_dfa`(name: str, dfa: Sequence[DFAState]) -> None
- `simplify_dfa`(dfa: list[DFAState]) -> None
- `parse_rhs`() -> tuple[<ast.Tuple object at 0x12552f450>]
- `parse_alt`() -> tuple[<ast.Tuple object at 0x125535510>]
- `parse_item`() -> tuple[<ast.Tuple object at 0x125544990>]
- `parse_atom`() -> tuple[<ast.Tuple object at 0x125547a90>]
- `expect`(type: int, value: [Optional[Any]](#optional)) -> str
- `gettoken`() -> None
- `raise_error`(msg: str) -> NoReturn
- `addarc`(next: DFAState, label: str) -> None
- `unifystate`(old: DFAState, new: DFAState) -> None
- `__eq__`(other: Any) -> bool
- `closure`(state: NFAState) -> dict[<ast.Tuple object at 0x12550b4d0>]
- `addclosure`(state: NFAState, base: dict[<ast.Tuple object at 0x12550bad0>]) -> None

### Implementation
**PgenGrammar**

**ParserGenerator**
  - filename: Path
  - stream: IO[str]
  - generator: Iterator[GoodTokenInfo]
  - first: dict[<ast.Tuple object at 0x1254e1e90>]
  - totalset: dict[<ast.Tuple object at 0x1254deb90>]
  - inverse: dict[<ast.Tuple object at 0x1254d7b90>]
  - startsymbol: Optional[str]
  - base: dict[<ast.Tuple object at 0x12550acd0>]
  - arcs: dict[<ast.Tuple object at 0x125511b90>]
**NFAState**
  - arcs: list[tuple[<ast.Tuple object at 0x125555690>]]
**DFAState**
  - nfaset: dict[<ast.Tuple object at 0x1255578d0>]
  - isfinal: bool
  - arcs: dict[<ast.Tuple object at 0x125557e10>]
  - __hash__: Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blib2to3/pgen2/pgen.py`  
**Dependencies**: `os`, `typing.IO`, `typing.Any`, `typing.Iterator`, `typing.NoReturn`, `typing.Optional`, `typing.Sequence`, `typing.Union`, `blib2to3.pgen2.grammar`, `blib2to3.pgen2.token`, `blib2to3.pgen2.tokenize`, `blib2to3.pgen2.tokenize.GoodTokenInfo`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blib2to3.pgen2



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blib2to3/pgen2/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blib2to3.pgen2.literals

**Imports**: `re`, `typing.Match`
### Interface
- `escape`(m: Match[str]) -> str
- `evalString`(s: str) -> str
- `test`() -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blib2to3/pgen2/literals.py`  
**Dependencies**: `re`, `typing.Match`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blib2to3.pgen2.grammar
:::{doc} Grammar:31
Pgen parsing tables conversion class.

Once initialized, this class supplies the grammar tables for the
parsing engine implemented by parse.py.  The parsing engine
accesses the instance variables directly.  The class here does not
provide initialization of the tables; several subclasses exist to
do this (see the conv and pgen modules).

The load() method reads the tables from a pickle file, which is
much faster than the other ways offered by subclasses.  The pickle
file is written by calling dump() (after loading the grammar
tables using a subclass).  The report() method prints a readable
representation of the tables to stdout, for debugging.

The instance variables are as follows:

symbol2number -- a dict mapping symbol names to numbers.  Symbol
                 numbers are always 256 or higher, to distinguish
                 them from token numbers, which are between 0 and
                 255 (inclusive).

number2symbol -- a dict mapping numbers to symbol names;
                 these two are each other's inverse.

states        -- a list of DFAs, where each DFA is a list of
                 states, each state is a list of arcs, and each
                 arc is a (i, j) pair where i is a label and j is
                 a state number.  The DFA number is the index into
                 this list.  (This name is slightly confusing.)
                 Final states are represented by a special arc of
                 the form (0, j) where j is its own state number.

dfas          -- a dict mapping symbol numbers to (DFA, first)
                 pairs, where DFA is an item from the states list
                 above, and first is a set of tokens that can
                 begin this grammar rule (represented by a dict
                 whose values are always 1).

labels        -- a list of (x, y) pairs where x is either a token
                 number or a symbol number, and y is either None
                 or a string; the strings are keywords.  The label
                 number is the index in this list; label numbers
                 are used to mark state transitions (arcs) in the
                 DFAs.

start         -- the number of the grammar's start symbol.

keywords      -- a dict mapping keyword strings to arc labels.

tokens        -- a dict mapping token numbers to arc labels.
:::
**Imports**: `os`, `pickle`, `tempfile`, `typing.Any`, `typing.Optional`, `typing.TypeVar`, `typing.Union`, `token`, `pprint.pprint`
**Type References**: [[Grammar]]

### Interface
- `__init__`() -> None
- `dump`(filename: Path) -> None
- `_update`(attrs: dict[<ast.Tuple object at 0x125583890>]) -> None
- `load`(filename: Path) -> None
- `loads`(pkl: bytes) -> None
- `copy`(self: _P) -> _P
- `report`() -> None

### Implementation
**Grammar**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blib2to3/pgen2/grammar.py`  
**Dependencies**: `os`, `pickle`, `tempfile`, `typing.Any`, `typing.Optional`, `typing.TypeVar`, `typing.Union`, `token`, `pprint.pprint`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blib2to3.pgen2.conv
:::{doc} Converter:38
Grammar subclass that reads classic pgen output files.

The run() method reads the tables as produced by the pgen parser
generator, typically contained in two C files, graminit.h and
graminit.c.  The other methods are for internal use only.

See the base class for more documentation.
:::
**Imports**: `re`, `pgen2.grammar`, `pgen2.token`
**Type References**: [[Converter]]

### Interface
- `run`() -> Any
- `parse_graminit_h`() -> Any
- `parse_graminit_c`() -> Any
- `finish_off`() -> Any

### Implementation
**Converter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blib2to3/pgen2/conv.py`  
**Dependencies**: `re`, `pgen2.grammar`, `pgen2.token`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blib2to3.pgen2.parse
:::{doc} stack_copy:40
Nodeless stack copy.
:::
:::{doc} ParseError:119
Exception to signal the parser is stuck.
:::
:::{doc} Parser:134
Parser engine.

The proper usage sequence is:

p = Parser(grammar, [converter])  # create instance
p.setup([start])                  # prepare for parsing
<for each input token>:
    if p.addtoken(...):           # parse a token; may raise ParseError
        break
root = p.rootnode                 # root of abstract syntax tree

A Parser instance may be reused by calling setup() repeatedly.

A Parser instance contains state pertaining to the current token
sequence, and should not be used concurrently by different threads
to parse separate token sequences.

See driver.py for how to get input tokens by tokenizing a file or
string.

Parsing is complete when addtoken() returns True; the root of the
abstract syntax tree can then be retrieved from the rootnode
instance variable.  When a syntax error occurs, addtoken() raises
the ParseError exception.  There is no error recovery; the parser
cannot be used after a syntax error was reported (but it can be
reinitialized by calling setup()).
:::
**Imports**: `contextlib.contextmanager`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Iterator`, `typing.Optional`, `typing.Union`, `typing.cast`, `blib2to3.pgen2.grammar.Grammar`, `blib2to3.pytree.NL`, `blib2to3.pytree.Context`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`, `blib2to3.pytree.RawNode`, `blib2to3.pytree.convert`, `grammar`, `token`, `tokenize`, `blib2to3.pgen2.driver.TokenProxy`
**Type References**: [[Callable]], [[ParseError]], [[Parser]], [[RawNode]], [[Recorder]]

### Interface
- `lam_sub`(grammar: Grammar, node: RawNode) -> NL
- `stack_copy`(stack: list[tuple[<ast.Tuple object at 0x125627a10>]]) -> list[tuple[<ast.Tuple object at 0x125626c90>]]
- `__init__`(grammar: Grammar, convert: [Optional[Convert]](#optional)) -> None
- `ilabels`() -> set[int]
- `switch_to`(ilabel: int) -> Iterator[None]
- `backtrack`() -> Iterator[None]
- `add_token`(tok_type: int, tok_val: str, raw: bool) -> None
- `determine_route`(value: [Optional[str]](#optional), force: bool) -> [Optional[int]](#optional)
- `setup`(proxy: TokenProxy, start: [Optional[int]](#optional)) -> None
- `addtoken`(type: int, value: str, context: Context) -> bool
- `_addtoken`(ilabel: int, type: int, value: str, context: Context) -> bool
- `classify`(type: int, value: str, context: Context) -> list[int]
- `shift`(type: int, value: str, newstate: int, context: Context) -> None
- `push`(type: int, newdfa: DFAS, newstate: int, context: Context) -> None
- `pop`() -> None

### Implementation
**Recorder**
  - func: Callable[<ast.Tuple object at 0x125620b50>]
**ParseError**

**Parser**
  - newnode: RawNode
  - rawnode: RawNode
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blib2to3/pgen2/parse.py`  
**Dependencies**: `contextlib.contextmanager`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Iterator`, `typing.Optional`, `typing.Union`, `typing.cast`, `blib2to3.pgen2.grammar.Grammar`, `blib2to3.pytree.NL`, `blib2to3.pytree.Context`, `blib2to3.pytree.Leaf`, `blib2to3.pytree.Node`, `blib2to3.pytree.RawNode`, `blib2to3.pytree.convert`, `grammar`, `token`, `tokenize`, `blib2to3.pgen2.driver.TokenProxy`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blib2to3.pgen2.driver
:::{doc} load_grammar:246
Load the grammar (maybe from a pickle).
:::
:::{doc} _newer:271
Inquire whether file a was written since file b.
:::
:::{doc} load_packaged_grammar:280
Normally, loads a pickled grammar by doing
    pkgutil.get_data(package, pickled_grammar)
where *pickled_grammar* is computed from *grammar_source* by adding the
Python version and using a ``.pickle`` extension.

However, if *grammar_source* is an extant file, load_grammar(grammar_source)
is called instead. This facilitates using a packaged grammar file when needed
but preserves load_grammar's automatic regeneration behavior when possible.
:::
:::{doc} main:304
Main program, when run as a script: produce grammar pickle files.

Calls load_grammar for each argument, a path to a grammar text file.
:::
**Imports**: `io`, `logging`, `os`, `pkgutil`, `sys`, `contextlib.contextmanager`, `dataclasses.dataclass`, `dataclasses.field`, `logging.Logger`, `typing.IO`, `typing.Any`, `typing.Iterable`, `typing.Iterator`, `typing.Optional`, `typing.Union`, `typing.cast`, `blib2to3.pgen2.grammar.Grammar`, `blib2to3.pgen2.tokenize.GoodTokenInfo`, `blib2to3.pytree.NL`, `grammar`, `parse`, `pgen`, `token`, `tokenize`
**Type References**: [[Any]], [[Driver]], [[Grammar]], [[Optional]], [[ReleaseRange]], [[TokenProxy]], [[grammar.Grammar]]

### Interface
- `_generate_pickle_name`(gt: Path, cache_dir: [Optional[Path]](#optional)) -> str
- `load_grammar`(gt: str, gp: [Optional[str]](#optional), save: bool, force: bool, logger: [Optional[Logger]](#optional)) -> Grammar
- `_newer`(a: str, b: str) -> bool
- `load_packaged_grammar`(package: str, grammar_source: str, cache_dir: [Optional[Path]](#optional)) -> grammar.Grammar
- `main`() -> bool
- `lock`() -> None
- `__init__`(grammar: Grammar, logger: [Optional[Logger]](#optional)) -> None
- `release`() -> Iterator[TokenProxy]
- `eat`(point: int) -> Any
- `__iter__`() -> TokenProxy
- `__next__`() -> Any
- `can_advance`(to: int) -> bool
- `parse_tokens`(tokens: Iterable[GoodTokenInfo], debug: bool) -> NL
- `parse_stream_raw`(stream: IO[str], debug: bool) -> NL
- `parse_stream`(stream: IO[str], debug: bool) -> NL
- `parse_file`(filename: Path, encoding: [Optional[str]](#optional), debug: bool) -> NL
- `parse_string`(text: str, debug: bool) -> NL
- `_partially_consume_prefix`(prefix: str, column: int) -> tuple[<ast.Tuple object at 0x1256e5890>]

### Implementation
**ReleaseRange**
  - start: int
  - end: Optional[int]
  - tokens: list[Any]
**TokenProxy**

**Driver**
  - indent_columns: list[int]
  - lines: list[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blib2to3/pgen2/driver.py`  
**Dependencies**: `io`, `logging`, `os`, `pkgutil`, `sys`, `contextlib.contextmanager`, `dataclasses.dataclass`, `dataclasses.field`, `logging.Logger`, `typing.IO`, `typing.Any`, `typing.Iterable`, `typing.Iterator`, `typing.Optional`, `typing.Union`, `typing.cast`, `blib2to3.pgen2.grammar.Grammar`, `blib2to3.pgen2.tokenize.GoodTokenInfo`, `blib2to3.pytree.NL`, `grammar`, `parse`, `pgen`, `token`, `tokenize`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.blib2to3.pgen2.tokenize
:::{doc} tokenize:256
The tokenize() function accepts two parameters: one representing the
input stream, and one providing an output mechanism for tokenize().

The first parameter, readline, must be a callable object which provides
the same interface as the readline() method of built-in file objects.
Each call to the function should return one line of input as a string.

The second parameter, tokeneater, must also be a callable object. It is
called once for each token, with five arguments, corresponding to the
tuples generated by generate_tokens().
:::
:::{doc} _get_normal_name:349
Imitates get_normal_name in tokenizer.c.
:::
:::{doc} detect_encoding:362
The detect_encoding() function is used to detect the encoding that should
be used to decode a Python source file. It requires one argument, readline,
in the same way as the tokenize() generator.

It will call readline a maximum of twice, and return the encoding used
(as a string) and a list of any lines (left as bytes) it has read
in.

It detects the encoding from the presence of a utf-8 bom or an encoding
cookie as specified in pep-0263. If both a bom and a cookie are present, but
disagree, a SyntaxError will be raised. If the encoding cookie is an invalid
charset, raise a SyntaxError.  Note that if a utf-8 bom is found,
'utf-8-sig' is returned.

If no encoding is specified, then the default of 'utf-8' will be returned.
:::
:::{doc} untokenize:437
Transform tokens back into Python source code.

Each element returned by the iterable must be a token sequence
with at least two elements, a token number and token value.  If
only two tokens are passed, the resulting output is poor.

Round-trip invariant for full input:
    Untokenized source will match input source exactly

Round-trip invariant for limited input:
    # Output text will tokenize the back to the input
    t1 = [tok[:2] for tok in generate_tokens(f.readline)]
    newcode = untokenize(t1)
    readline = iter(newcode.splitlines(1)).next
    t2 = [tok[:2] for tokin generate_tokens(readline)]
    assert t1 == t2
:::
:::{doc} FStringState:479
Keeps track of state around f-strings.

    The tokenizer should call the appropriate method on this class when
    it transitions to a different part of an f-string. This is needed
    because the tokenization depends on knowing where exactly we are in
    the f-string.

    For example, consider the following f-string:

        f"a{1:b{2}c}d"

    The following is the tokenization of this string and the states
    tracked by this class:

        1,0-1,2:        FSTRING_START   'f"'  # [STATE_NOT_FSTRING, STATE_MIDDLE]
        1,2-1,3:        FSTRING_MIDDLE  'a'
        1,3-1,4:        LBRACE  '{'  # [STATE_NOT_FSTRING, STATE_IN_BRACES]
        1,4-1,5:        NUMBER  '1'
        1,5-1,6:        OP      ':'  # [STATE_NOT_FSTRING, STATE_IN_COLON]
        1,6-1,7:        FSTRING_MIDDLE  'b'
        1,7-1,8:        LBRACE  '{'  # [STATE_NOT_FSTRING, STATE_IN_COLON, STATE_IN_BRACES]
        1,8-1,9:        NUMBER  '2'
        1,9-1,10:       RBRACE  '}'  # [STATE_NOT_FSTRING, STATE_IN_COLON]
        1,10-1,11:      FSTRING_MIDDLE  'c'
        1,11-1,12:      RBRACE  '}'  # [STATE_NOT_FSTRING, STATE_MIDDLE]
        1,12-1,13:      FSTRING_MIDDLE  'd'
        1,13-1,14:      FSTRING_END     '"'  # [STATE_NOT_FSTRING]
        1,14-1,15:      NEWLINE '
'
        2,0-2,0:        ENDMARKER       ''

    Notice that the nested braces in the format specifier are represented
    by adding a STATE_IN_BRACES entry to the state stack. The stack is
    also used if there are nested f-strings.

    
:::
:::{doc} generate_tokens:554
The generate_tokens() generator requires one argument, readline, which
must be a callable object which provides the same interface as the
readline() method of built-in file objects. Each call to the function
should return one line of input as a string.  Alternately, readline
can be a callable function terminating with StopIteration:
    readline = open(myfile).next    # Example of alternate readline

The generator produces 5-tuples with these members: the token type; the
token string; a 2-tuple (srow, scol) of ints specifying the row and
column where the token begins in the source; a 2-tuple (erow, ecol) of
ints specifying the row and column where the token ends in the source;
and the line on which the token was found. The line passed is the
logical line; continuation lines are included.
:::
**Imports**: `builtins`, `sys`, `typing.Callable`, `typing.Final`, `typing.Iterable`, `typing.Iterator`, `typing.Optional`, `typing.Pattern`, `typing.Union`, `blib2to3.pgen2.grammar.Grammar`, `blib2to3.pgen2.token.ASYNC`, `blib2to3.pgen2.token.AWAIT`, `blib2to3.pgen2.token.COMMENT`, `blib2to3.pgen2.token.DEDENT`, `blib2to3.pgen2.token.ENDMARKER`, `blib2to3.pgen2.token.ERRORTOKEN`, `blib2to3.pgen2.token.FSTRING_END`, `blib2to3.pgen2.token.FSTRING_MIDDLE`, `blib2to3.pgen2.token.FSTRING_START`, `blib2to3.pgen2.token.INDENT`, `blib2to3.pgen2.token.LBRACE`, `blib2to3.pgen2.token.NAME`, `blib2to3.pgen2.token.NEWLINE`, `blib2to3.pgen2.token.NL`, `blib2to3.pgen2.token.NUMBER`, `blib2to3.pgen2.token.OP`, `blib2to3.pgen2.token.RBRACE`, `blib2to3.pgen2.token.STRING`, `blib2to3.pgen2.token.tok_name`, `re`, `codecs.BOM_UTF8`, `codecs.lookup`, `token`
**Type References**: [[FStringState]], [[Final]], [[Optional]], [[Pattern]], [[StopTokenizing]], [[TokenError]], [[Untokenizer]]

### Interface
- `group`() -> str
- `any`() -> str
- `maybe`() -> str
- `_combinations`() -> set[str]
- `printtoken`(type: int, token: str, srow_col: Coord, erow_col: Coord, line: str) -> None
- `tokenize`(readline: Callable[<ast.Tuple object at 0x125768510>], tokeneater: TokenEater) -> None
- `tokenize_loop`(readline: Callable[<ast.Tuple object at 0x12575f510>], tokeneater: TokenEater) -> None
- `_get_normal_name`(orig_enc: str) -> str
- `detect_encoding`(readline: Callable[<ast.Tuple object at 0x12573d510>]) -> tuple[<ast.Tuple object at 0x125722050>]
- `untokenize`(iterable: Iterable[TokenInfo]) -> str
- `is_fstring_start`(token: str) -> bool
- `_split_fstring_start_and_middle`(token: str) -> tuple[<ast.Tuple object at 0x125791190>]
- `generate_tokens`(readline: Callable[<ast.Tuple object at 0x1257acc50>], grammar: [Optional[Grammar]](#optional)) -> Iterator[GoodTokenInfo]
- `__init__`() -> None
- `add_whitespace`(start: Coord) -> None
- `compat`(token: tuple[<ast.Tuple object at 0x125754850>], iterable: Iterable[TokenInfo]) -> None
- `read_or_stop`() -> bytes
- `find_cookie`(line: bytes) -> [Optional[str]](#optional)
- `is_in_fstring_expression`() -> bool
- `current`() -> int
- `enter_fstring`() -> None
- `leave_fstring`() -> None
- `consume_lbrace`() -> None
- `consume_rbrace`() -> None
- `consume_colon`() -> None

### Implementation
**TokenError**

**StopTokenizing**

**Untokenizer**
  - tokens: list[str]
  - prev_row: int
  - prev_col: int
**FStringState**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/blib2to3/pgen2/tokenize.py`  
**Dependencies**: `builtins`, `sys`, `typing.Callable`, `typing.Final`, `typing.Iterable`, `typing.Iterator`, `typing.Optional`, `typing.Pattern`, `typing.Union`, `blib2to3.pgen2.grammar.Grammar`, `blib2to3.pgen2.token.ASYNC`, `blib2to3.pgen2.token.AWAIT`, `blib2to3.pgen2.token.COMMENT`, `blib2to3.pgen2.token.DEDENT`, `blib2to3.pgen2.token.ENDMARKER`, `blib2to3.pgen2.token.ERRORTOKEN`, `blib2to3.pgen2.token.FSTRING_END`, `blib2to3.pgen2.token.FSTRING_MIDDLE`, `blib2to3.pgen2.token.FSTRING_START`, `blib2to3.pgen2.token.INDENT`, `blib2to3.pgen2.token.LBRACE`, `blib2to3.pgen2.token.NAME`, `blib2to3.pgen2.token.NEWLINE`, `blib2to3.pgen2.token.NL`, `blib2to3.pgen2.token.NUMBER`, `blib2to3.pgen2.token.OP`, `blib2to3.pgen2.token.RBRACE`, `blib2to3.pgen2.token.STRING`, `blib2to3.pgen2.token.tok_name`, `re`, `codecs.BOM_UTF8`, `codecs.lookup`, `token`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.configuration
:::{doc} _normalize_name:50
Make a name consistent regardless of source (environment or file)
:::
:::{doc} Configuration:87
Handles management of configuration.

Provides an interface to accessing and managing configuration files.

This class converts provides an API that takes "section.key-name" style
keys and stores the value associated with it as "key-name" under the
section "section".

This allows for a clean interface wherein the both the section and the
key-name are preserved in an easy to manage form in the configuration files
and the data stored is also nice.
:::
**Imports**: `configparser`, `locale`, `os`, `sys`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NewType`, `typing.Optional`, `typing.Tuple`, `pip._internal.exceptions.ConfigurationError`, `pip._internal.exceptions.ConfigurationFileCouldNotBeLoaded`, `pip._internal.utils.appdirs`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.logging.getLogger`, `pip._internal.utils.misc.ensure_dir`, `pip._internal.utils.misc.enum`
**Type References**: [[Configuration]]

### Interface
- `_normalize_name`(name: str) -> str
- `_disassemble_key`(name: str) -> [List[str]](#list)
- `get_configuration_files`() -> [Dict[<ast.Tuple object at 0x12588b110>]](#dict)
- `__init__`(isolated: bool, load_only: [Optional[Kind]](#optional)) -> None
- `load`() -> None
- `get_file_to_edit`() -> [Optional[str]](#optional)
- `items`() -> Iterable[Tuple[<ast.Tuple object at 0x12588c890>]]
- `get_value`(key: str) -> Any
- `set_value`(key: str, value: Any) -> None
- `unset_value`(key: str) -> None
- `save`() -> None
- `_ensure_have_load_only`() -> None
- `_dictionary`() -> [Dict[<ast.Tuple object at 0x1258c8810>]](#dict)
- `_load_config_files`() -> None
- `_load_file`(variant: Kind, fname: str) -> RawConfigParser
- `_construct_parser`(fname: str) -> RawConfigParser
- `_load_environment_vars`() -> None
- `_normalized_keys`(section: str, items: Iterable[Tuple[<ast.Tuple object at 0x1258e0ed0>]]) -> [Dict[<ast.Tuple object at 0x1258e2250>]](#dict)
- `get_environ_vars`() -> Iterable[Tuple[<ast.Tuple object at 0x1258e3dd0>]]
- `iter_config_files`() -> Iterable[Tuple[<ast.Tuple object at 0x1258ef090>]]
- `get_values_in_config`(variant: Kind) -> [Dict[<ast.Tuple object at 0x1258efc50>]](#dict)
- `_get_parser_to_modify`() -> Tuple[<ast.Tuple object at 0x1258f8f10>]
- `_mark_as_modified`(fname: str, parser: RawConfigParser) -> None
- `__repr__`() -> str

### Implementation
**Configuration**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/configuration.py`  
**Dependencies**: `configparser`, `locale`, `os`, `sys`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NewType`, `typing.Optional`, `typing.Tuple`, `pip._internal.exceptions.ConfigurationError`, `pip._internal.exceptions.ConfigurationFileCouldNotBeLoaded`, `pip._internal.utils.appdirs`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.logging.getLogger`, `pip._internal.utils.misc.ensure_dir`, `pip._internal.utils.misc.enum`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.pyproject
:::{doc} load_pyproject_toml:35
Load the pyproject.toml file.

Parameters:
    use_pep517 - Has the user requested PEP 517 processing? None
                 means the user hasn't explicitly specified.
    pyproject_toml - Location of the project's pyproject.toml file
    setup_py - Location of the project's setup.py file
    req_name - The name of the requirement we're processing (for
               error reporting)

Returns:
    None if we should use the legacy code path, otherwise a tuple
    (
        requirements from pyproject.toml,
        name of PEP 517 backend,
        requirements we should check are installed after setting
            up the build environment
        directory paths to import the backend from (backend-path),
            relative to the project root.
    )
:::
**Imports**: `importlib.util`, `os`, `sys`, `collections.namedtuple`, `typing.Any`, `typing.List`, `typing.Optional`, `pip._vendor.packaging.requirements.InvalidRequirement`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.InvalidPyProjectBuildRequires`, `pip._internal.exceptions.MissingPyProjectBuildRequires`, `pip._internal.utils.packaging.get_requirement`, `tomllib`, `pip._vendor.tomli`
**Type References**: [[List]]

### Interface
- `_is_list_of_str`(obj: Any) -> bool
- `make_pyproject_path`(unpacked_source_directory: str) -> str
- `load_pyproject_toml`(use_pep517: [Optional[bool]](#optional), pyproject_toml: str, setup_py: str, req_name: str) -> [Optional[BuildSystemDetails]](#optional)
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/pyproject.py`  
**Dependencies**: `importlib.util`, `os`, `sys`, `collections.namedtuple`, `typing.Any`, `typing.List`, `typing.Optional`, `pip._vendor.packaging.requirements.InvalidRequirement`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.InvalidPyProjectBuildRequires`, `pip._internal.exceptions.MissingPyProjectBuildRequires`, `pip._internal.utils.packaging.get_requirement`, `tomllib`, `pip._vendor.tomli`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.cache
:::{doc} _hash_dict:26
Return a stable sha224 of a dictionary.
:::
:::{doc} Cache:32
An abstract class - provides cache directories for data from links

:param cache_dir: The root of the cache.
:::
:::{doc} SimpleWheelCache:102
A cache of wheels for future installs.
:::
:::{doc} EphemWheelCache:172
A SimpleWheelCache that creates it's own temporary cache directory
:::
:::{doc} WheelCache:208
Wraps EphemWheelCache and SimpleWheelCache into a single Cache

This Cache allows for gracefully degradation, using the ephem wheel cache
when a certain link is not found in the simple wheel cache first.
:::
**Imports**: `hashlib`, `json`, `logging`, `os`, `pathlib.Path`, `typing.Any`, `typing.Dict`, `typing.List`, `typing.Optional`, `pip._vendor.packaging.tags.Tag`, `pip._vendor.packaging.tags.interpreter_name`, `pip._vendor.packaging.tags.interpreter_version`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.exceptions.InvalidWheelFilename`, `pip._internal.models.direct_url.DirectUrl`, `pip._internal.models.link.Link`, `pip._internal.models.wheel.Wheel`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.temp_dir.tempdir_kinds`, `pip._internal.utils.urls.path_to_url`
**Type References**: [[Cache]], [[CacheEntry]], [[EphemWheelCache]], [[SimpleWheelCache]], [[WheelCache]]

### Interface
- `_hash_dict`(d: [Dict[<ast.Tuple object at 0x12592a310>]](#dict)) -> str
- `__init__`(cache_dir: str) -> None
- `_get_cache_path_parts`(link: Link) -> [List[str]](#list)
- `_get_candidates`(link: Link, canonical_package_name: str) -> [List[Any]](#list)
- `get_path_for_link`(link: Link) -> str
- `get`(link: Link, package_name: [Optional[str]](#optional), supported_tags: [List[Tag]](#list)) -> Link
- `get_ephem_path_for_link`(link: Link) -> str
- `get_cache_entry`(link: Link, package_name: [Optional[str]](#optional), supported_tags: [List[Tag]](#list)) -> [Optional[CacheEntry]](#optional)
- `record_download_origin`(cache_dir: str, download_info: DirectUrl) -> None

### Implementation
**Cache**

**SimpleWheelCache**

**EphemWheelCache**

**CacheEntry**

**WheelCache**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/cache.py`  
**Dependencies**: `hashlib`, `json`, `logging`, `os`, `pathlib.Path`, `typing.Any`, `typing.Dict`, `typing.List`, `typing.Optional`, `pip._vendor.packaging.tags.Tag`, `pip._vendor.packaging.tags.interpreter_name`, `pip._vendor.packaging.tags.interpreter_version`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.exceptions.InvalidWheelFilename`, `pip._internal.models.direct_url.DirectUrl`, `pip._internal.models.link.Link`, `pip._internal.models.wheel.Wheel`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.temp_dir.tempdir_kinds`, `pip._internal.utils.urls.path_to_url`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal
:::{doc} main:10
This is preserved for old console scripts that may still be referencing
it.

For additional details, see https://github.com/pypa/pip/issues/7498.
:::
**Imports**: `typing.List`, `typing.Optional`, `pip._internal.utils._log`, `pip._internal.utils.entrypoints._wrapper`
### Interface
- `main`(args: [Optional[List[str]]](#optional)) -> int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/__init__.py`  
**Dependencies**: `typing.List`, `typing.Optional`, `pip._internal.utils._log`, `pip._internal.utils.entrypoints._wrapper`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.exceptions
:::{doc} PipError:59
The base pip error.
:::
:::{doc} DiagnosticPipError:63
An error, that presents diagnostic information to the user.

This contains a bunch of logic, to enable pretty presentation of our error
messages. Each error gets a unique reference. Each error can also include
additional context, a hint and/or a note -- which are presented with the
main error message in a consistent style.

This is adapted from the error output styling in `sphinx-theme-builder`.
:::
:::{doc} ConfigurationError:181
General exception in configuration
:::
:::{doc} InstallationError:185
General exception during installation
:::
:::{doc} MissingPyProjectBuildRequires:189
Raised when pyproject.toml has `build-system`, but no `build-system.requires`.
:::
:::{doc} InvalidPyProjectBuildRequires:206
Raised when pyproject.toml an invalid `build-system.requires`.
:::
:::{doc} NoneMetadataError:223
Raised when accessing a Distribution's "METADATA" or "PKG-INFO".

This signifies an inconsistency, when the Distribution claims to have
the metadata file (if not, raise ``FileNotFoundError`` instead), but is
not actually able to produce its content. This may be due to permission
errors.
:::
:::{doc} UserInstallationInvalid:251
A --user install is requested on an environment without user site.
:::
:::{doc} DistributionNotFound:264
Raised when a distribution cannot be found to satisfy a requirement
:::
:::{doc} RequirementsFileParseError:268
Raised when a general error occurs parsing a requirements file line.
:::
:::{doc} BestVersionAlreadyInstalled:272
Raised when the most up-to-date version of a package is already
installed.
:::
:::{doc} BadCommand:277
Raised when virtualenv or a command is not found
:::
:::{doc} CommandError:281
Raised when there is an error in command-line arguments
:::
:::{doc} PreviousBuildDirError:285
Raised when there's a previous conflicting build directory
:::
:::{doc} NetworkConnectionError:289
HTTP connection error
:::
:::{doc} InvalidWheelFilename:317
Invalid wheel filename.
:::
:::{doc} UnsupportedWheel:321
Unsupported wheel.
:::
:::{doc} InvalidWheel:325
Invalid (e.g. corrupt) wheel.
:::
:::{doc} MetadataInconsistent:336
Built metadata contains inconsistent information.

This is raised when the metadata contains values (e.g. name and version)
that do not match the information previously obtained from sdist filename,
user-supplied ``#egg=`` value, or an install requirement name.
:::
:::{doc} MetadataInvalid:359
Metadata is invalid.
:::
:::{doc} InstallationSubprocessError:370
A subprocess call failed.
:::
:::{doc} HashErrors:430
Multiple HashError instances rolled into one for reporting
:::
:::{doc} HashError:453
A failure to verify a package against known-good hashes

:cvar order: An int sorting hash exception classes by difficulty of
    recovery (lower being harder), so the user doesn't bother fretting
    about unpinned packages when he has deeper issues, like VCS
    dependencies, to deal with. Also keeps error reports in a
    deterministic order.
:cvar head: A section heading for display above potentially many
    exceptions of this kind
:ivar req: The InstallRequirement that triggered this error. This is
    pasted on after the exception is instantiated, because it's not
    typically available earlier.
:::
:::{doc} VcsHashUnsupported:499
A hash was provided for a version-control-system-based requirement, but
we don't have a method for hashing those.
:::
:::{doc} DirectoryUrlHashUnsupported:510
A hash was provided for a version-control-system-based requirement, but
we don't have a method for hashing those.
:::
:::{doc} HashMissing:521
A hash was needed for a requirement but is absent.
:::
:::{doc} HashUnpinned:563
A requirement had a hash specified but was not pinned to a specific
version.
:::
:::{doc} HashMismatch:574
Distribution file hash values don't match.

:ivar package_name: The name of the package that triggered the hash
    mismatch. Feel free to write to this after the exception is raise to
    improve its error message.
:::
:::{doc} UnsupportedPythonVersion:632
Unsupported python version according to Requires-Python package
metadata.
:::
:::{doc} ConfigurationFileCouldNotBeLoaded:637
When there are errors while loading a configuration file
:::
:::{doc} ExternallyManagedEnvironment:667
The current environment is externally managed.

This is raised when the current environment is externally managed, as
defined by `PEP 668`_. The ``EXTERNALLY-MANAGED`` configuration is checked
and displayed when the error is bubbled up to the user.

:param error: The error message read from ``EXTERNALLY-MANAGED``.
:::
**Imports**: `configparser`, `contextlib`, `locale`, `logging`, `pathlib`, `re`, `sys`, `itertools.chain`, `itertools.groupby`, `itertools.repeat`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterator`, `typing.List`, `typing.Literal`, `typing.Optional`, `typing.Union`, `pip._vendor.packaging.requirements.InvalidRequirement`, `pip._vendor.packaging.version.InvalidVersion`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.console.ConsoleOptions`, `pip._vendor.rich.console.RenderResult`, `pip._vendor.rich.markup.escape`, `pip._vendor.rich.text.Text`, `hashlib._Hash`, `pip._vendor.requests.models.Request`, `pip._vendor.requests.models.Response`, `pip._internal.metadata.BaseDistribution`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.utils.hashes.FAVORITE_HASH`, `pip._internal.utils._log.VERBOSE`
**Type References**: [[BadCommand]], [[BestVersionAlreadyInstalled]], [[CommandError]], [[ConfigurationError]], [[ConfigurationFileCouldNotBeLoaded]], [[DiagnosticPipError]], [[DirectoryUrlHashUnsupported]], [[DistributionNotFound]], [[ExternallyManagedEnvironment]], [[HashError]], [[HashErrors]], [[HashMismatch]], [[HashMissing]], [[HashUnpinned]], [[InstallationError]], [[InstallationSubprocessError]], [[InvalidInstalledPackage]], [[InvalidPyProjectBuildRequires]], [[InvalidSchemeCombination]], [[InvalidWheel]], [[InvalidWheelFilename]], [[LegacyDistutilsInstall]], [[List]], [[MetadataGenerationFailed]], [[MetadataInconsistent]], [[MetadataInvalid]], [[MissingPyProjectBuildRequires]], [[NetworkConnectionError]], [[NoneMetadataError]], [[Optional]], [[PipError]], [[PreviousBuildDirError]], [[RequirementsFileParseError]], [[UninstallMissingRecord]], [[UnsupportedPythonVersion]], [[UnsupportedWheel]], [[UserInstallationInvalid]], [[VcsHashUnsupported]]

### Interface
- `_is_kebab_case`(s: str) -> bool
- `_prefix_with_indent`(s: [Union[<ast.Tuple object at 0x1259a8110>]](#union), console: Console) -> Text
- `__init__`() -> None
- `__repr__`() -> str
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__str__`() -> str
- `append`(error: HashError) -> None
- `__bool__`() -> bool
- `body`() -> str
- `_requirement_name`() -> str
- `_hash_comparison`() -> str
- `_iter_externally_managed_error_keys`() -> Iterator[str]
- `from_config`(config: [Union[<ast.Tuple object at 0x125a064d0>]](#union)) -> ExternallyManagedEnvironment
- `hash_then_or`(hash_name: str) -> chain[str]

### Implementation
**PipError**

**DiagnosticPipError**
  - reference: str
**ConfigurationError**

**InstallationError**

**MissingPyProjectBuildRequires**

**InvalidPyProjectBuildRequires**

**NoneMetadataError**

**UserInstallationInvalid**

**InvalidSchemeCombination**

**DistributionNotFound**

**RequirementsFileParseError**

**BestVersionAlreadyInstalled**

**BadCommand**

**CommandError**

**PreviousBuildDirError**

**NetworkConnectionError**

**InvalidWheelFilename**

**UnsupportedWheel**

**InvalidWheel**

**MetadataInconsistent**

**MetadataInvalid**

**InstallationSubprocessError**

**MetadataGenerationFailed**

**HashErrors**

**HashError**
  - req: Optional[InstallRequirement]
  - order: int
**VcsHashUnsupported**

**DirectoryUrlHashUnsupported**

**HashMissing**

**HashUnpinned**

**HashMismatch**
  - lines: List[str]
**UnsupportedPythonVersion**

**ConfigurationFileCouldNotBeLoaded**

**ExternallyManagedEnvironment**
  - lang: Optional[str]
**UninstallMissingRecord**

**LegacyDistutilsInstall**

**InvalidInstalledPackage**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/exceptions.py`  
**Dependencies**: `configparser`, `contextlib`, `locale`, `logging`, `pathlib`, `re`, `sys`, `itertools.chain`, `itertools.groupby`, `itertools.repeat`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterator`, `typing.List`, `typing.Literal`, `typing.Optional`, `typing.Union`, `pip._vendor.packaging.requirements.InvalidRequirement`, `pip._vendor.packaging.version.InvalidVersion`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.console.ConsoleOptions`, `pip._vendor.rich.console.RenderResult`, `pip._vendor.rich.markup.escape`, `pip._vendor.rich.text.Text`, `hashlib._Hash`, `pip._vendor.requests.models.Request`, `pip._vendor.requests.models.Response`, `pip._internal.metadata.BaseDistribution`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.utils.hashes.FAVORITE_HASH`, `pip._internal.utils._log.VERBOSE`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.main
:::{doc} main:4
This is preserved for old console scripts that may still be referencing
it.

For additional details, see https://github.com/pypa/pip/issues/7498.
:::
**Imports**: `typing.List`, `typing.Optional`, `pip._internal.utils.entrypoints._wrapper`
### Interface
- `main`(args: [Optional[List[str]]](#optional)) -> int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/main.py`  
**Dependencies**: `typing.List`, `typing.Optional`, `pip._internal.utils.entrypoints._wrapper`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.wheel_builder
:::{doc} _contains_egg_info:37
Determine whether the string looks like an egg_info.

:param s: The string to parse. E.g. foo-2.1
:::
:::{doc} _should_build:45
Return whether an InstallRequirement should be built into a wheel.
:::
:::{doc} _should_cache:90
Return whether a built InstallRequirement can be stored in the persistent
wheel cache, assuming the wheel cache is available, and _should_build()
has determined a wheel needs to be built.
:::
:::{doc} _get_cache_dir:122
Return the persistent or temporary cache directory where the built
wheel need to be stored.
:::
:::{doc} _build_one:167
Build one wheel.

:return: The filename of the built wheel, or None if the build failed.
:::
:::{doc} build:293
Build wheels.

:return: The list of InstallRequirement that succeeded to build and
    the list of InstallRequirement that failed to build.
:::
**Imports**: `logging`, `os.path`, `re`, `shutil`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.utils.canonicalize_version`, `pip._vendor.packaging.version.InvalidVersion`, `pip._vendor.packaging.version.Version`, `pip._internal.cache.WheelCache`, `pip._internal.exceptions.InvalidWheelFilename`, `pip._internal.exceptions.UnsupportedWheel`, `pip._internal.metadata.FilesystemWheel`, `pip._internal.metadata.get_wheel_distribution`, `pip._internal.models.link.Link`, `pip._internal.models.wheel.Wheel`, `pip._internal.operations.build.wheel.build_wheel_pep517`, `pip._internal.operations.build.wheel_editable.build_wheel_editable`, `pip._internal.operations.build.wheel_legacy.build_wheel_legacy`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.ensure_dir`, `pip._internal.utils.misc.hash_file`, `pip._internal.utils.setuptools_build.make_setuptools_clean_args`, `pip._internal.utils.subprocess.call_subprocess`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.urls.path_to_url`, `pip._internal.vcs.vcs`
### Interface
- `_contains_egg_info`(s: str) -> bool
- `_should_build`(req: InstallRequirement, need_wheel: bool) -> bool
- `should_build_for_wheel_command`(req: InstallRequirement) -> bool
- `should_build_for_install_command`(req: InstallRequirement) -> bool
- `_should_cache`(req: InstallRequirement) -> [Optional[bool]](#optional)
- `_get_cache_dir`(req: InstallRequirement, wheel_cache: WheelCache) -> str
- `_verify_one`(req: InstallRequirement, wheel_path: str) -> None
- `_build_one`(req: InstallRequirement, output_dir: str, verify: bool, build_options: [List[str]](#list), global_options: [List[str]](#list), editable: bool) -> [Optional[str]](#optional)
- `_build_one_inside_env`(req: InstallRequirement, output_dir: str, build_options: [List[str]](#list), global_options: [List[str]](#list), editable: bool) -> [Optional[str]](#optional)
- `_clean_one_legacy`(req: InstallRequirement, global_options: [List[str]](#list)) -> bool
- `build`(requirements: Iterable[InstallRequirement], wheel_cache: WheelCache, verify: bool, build_options: [List[str]](#list), global_options: [List[str]](#list)) -> BuildResult
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/wheel_builder.py`  
**Dependencies**: `logging`, `os.path`, `re`, `shutil`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.utils.canonicalize_version`, `pip._vendor.packaging.version.InvalidVersion`, `pip._vendor.packaging.version.Version`, `pip._internal.cache.WheelCache`, `pip._internal.exceptions.InvalidWheelFilename`, `pip._internal.exceptions.UnsupportedWheel`, `pip._internal.metadata.FilesystemWheel`, `pip._internal.metadata.get_wheel_distribution`, `pip._internal.models.link.Link`, `pip._internal.models.wheel.Wheel`, `pip._internal.operations.build.wheel.build_wheel_pep517`, `pip._internal.operations.build.wheel_editable.build_wheel_editable`, `pip._internal.operations.build.wheel_legacy.build_wheel_legacy`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.ensure_dir`, `pip._internal.utils.misc.hash_file`, `pip._internal.utils.setuptools_build.make_setuptools_clean_args`, `pip._internal.utils.subprocess.call_subprocess`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.urls.path_to_url`, `pip._internal.vcs.vcs`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.self_outdated_check
:::{doc} _convert_date:42
Convert an ISO format string to a date.

Handles the format 2020-01-22T14:24:01Z (trailing Z)
which is not supported by older versions of fromisoformat.
:::
:::{doc} was_installed_by_pip:152
Checks whether pkg was installed by pip

This is used not to display the upgrade message when pip is in fact
installed by system package manager, such as dnf on Fedora.
:::
:::{doc} pip_self_version_check:224
Check for an update for pip.

Limit the frequency of checks to once per week. State is stored either in
the active virtualenv or in the user's USER_CACHE_DIR keyed off the prefix
of the pip script path.
:::
**Imports**: `datetime`, `functools`, `hashlib`, `json`, `logging`, `optparse`, `os.path`, `sys`, `dataclasses.dataclass`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Optional`, `pip._vendor.packaging.version.Version`, `pip._vendor.packaging.version.parse`, `pip._vendor.rich.console.Group`, `pip._vendor.rich.markup.escape`, `pip._vendor.rich.text.Text`, `pip._internal.index.collector.LinkCollector`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.metadata.get_default_environment`, `pip._internal.models.selection_prefs.SelectionPreferences`, `pip._internal.network.session.PipSession`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.entrypoints.get_best_invocation_for_this_pip`, `pip._internal.utils.entrypoints.get_best_invocation_for_this_python`, `pip._internal.utils.filesystem.adjacent_tmp_file`, `pip._internal.utils.filesystem.check_path_owner`, `pip._internal.utils.filesystem.replace`, `pip._internal.utils.misc.ensure_dir`
**Type References**: [[SelfCheckState]], [[UpgradePrompt]]

### Interface
- `_get_statefile_name`(key: str) -> str
- `_convert_date`(isodate: str) -> datetime.datetime
- `was_installed_by_pip`(pkg: str) -> bool
- `_get_current_remote_pip_version`(session: PipSession, options: optparse.Values) -> [Optional[str]](#optional)
- `_self_version_check_logic`() -> [Optional[UpgradePrompt]](#optional)
- `pip_self_version_check`(session: PipSession, options: optparse.Values) -> None
- `__init__`(cache_dir: str) -> None
- `key`() -> str
- `get`(current_time: datetime.datetime) -> [Optional[str]](#optional)
- `set`(pypi_version: str, current_time: datetime.datetime) -> None
- `__rich__`() -> Group

### Implementation
**SelfCheckState**

**UpgradePrompt**
  - old: str
  - new: str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/self_outdated_check.py`  
**Dependencies**: `datetime`, `functools`, `hashlib`, `json`, `logging`, `optparse`, `os.path`, `sys`, `dataclasses.dataclass`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Optional`, `pip._vendor.packaging.version.Version`, `pip._vendor.packaging.version.parse`, `pip._vendor.rich.console.Group`, `pip._vendor.rich.markup.escape`, `pip._vendor.rich.text.Text`, `pip._internal.index.collector.LinkCollector`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.metadata.get_default_environment`, `pip._internal.models.selection_prefs.SelectionPreferences`, `pip._internal.network.session.PipSession`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.entrypoints.get_best_invocation_for_this_pip`, `pip._internal.utils.entrypoints.get_best_invocation_for_this_python`, `pip._internal.utils.filesystem.adjacent_tmp_file`, `pip._internal.utils.filesystem.check_path_owner`, `pip._internal.utils.filesystem.replace`, `pip._internal.utils.misc.ensure_dir`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.build_env
:::{doc} get_runnable_pip:45
Get a file to pass to a Python executable, to run the currently-running pip.

This is used to run a pip subprocess, for installing requirements into the build
environment.
:::
:::{doc} _get_system_sitepackages:61
Get system site packages

Usually from site.getsitepackages,
but fallback on `get_purelib()/get_platlib()` if unavailable
(e.g. in a virtualenv created by virtualenv<20)

Returns normalized set of strings.
:::
:::{doc} BuildEnvironment:81
Creates and manages an isolated environment to install build deps
:::
:::{doc} NoOpBuildEnvironment:291
A no-op drop-in replacement for BuildEnvironment
:::
**Imports**: `logging`, `os`, `pathlib`, `site`, `sys`, `textwrap`, `collections.OrderedDict`, `types.TracebackType`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `typing.Type`, `typing.Union`, `pip._vendor.certifi.where`, `pip._vendor.packaging.version.Version`, `pip.__file__`, `pip._internal.cli.spinners.open_spinner`, `pip._internal.locations.get_platlib`, `pip._internal.locations.get_purelib`, `pip._internal.locations.get_scheme`, `pip._internal.metadata.get_default_environment`, `pip._internal.metadata.get_environment`, `pip._internal.utils.logging.VERBOSE`, `pip._internal.utils.packaging.get_requirement`, `pip._internal.utils.subprocess.call_subprocess`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.temp_dir.tempdir_kinds`, `pip._internal.index.package_finder.PackageFinder`
**Type References**: [[BuildEnvironment]], [[List]], [[NoOpBuildEnvironment]], [[_Prefix]]

### Interface
- `_dedup`(a: str, b: str) -> [Union[<ast.Tuple object at 0x125ad8d50>]](#union)
- `get_runnable_pip`() -> str
- `_get_system_sitepackages`() -> Set[str]
- `__init__`() -> None
- `__enter__`() -> None
- `__exit__`(exc_type: [Optional[Type[BaseException]]](#optional), exc_val: [Optional[BaseException]](#optional), exc_tb: [Optional[TracebackType]](#optional)) -> None
- `check_requirements`(reqs: Iterable[str]) -> Tuple[<ast.Tuple object at 0x125aee610>]
- `install_requirements`(finder: PackageFinder, requirements: Iterable[str], prefix_as_string: str) -> None
- `_install_requirements`(pip_runnable: str, finder: PackageFinder, requirements: Iterable[str], prefix: _Prefix) -> None
- `cleanup`() -> None

### Implementation
**_Prefix**

**BuildEnvironment**
  - args: List[str]
**NoOpBuildEnvironment**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/build_env.py`  
**Dependencies**: `logging`, `os`, `pathlib`, `site`, `sys`, `textwrap`, `collections.OrderedDict`, `types.TracebackType`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `typing.Type`, `typing.Union`, `pip._vendor.certifi.where`, `pip._vendor.packaging.version.Version`, `pip.__file__`, `pip._internal.cli.spinners.open_spinner`, `pip._internal.locations.get_platlib`, `pip._internal.locations.get_purelib`, `pip._internal.locations.get_scheme`, `pip._internal.metadata.get_default_environment`, `pip._internal.metadata.get_environment`, `pip._internal.utils.logging.VERBOSE`, `pip._internal.utils.packaging.get_requirement`, `pip._internal.utils.subprocess.call_subprocess`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.temp_dir.tempdir_kinds`, `pip._internal.index.package_finder.PackageFinder`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor

**Imports**: `__future__.absolute_import`, `glob`, `os.path`, `sys`
### Interface
- `vendored`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/__init__.py`  
**Dependencies**: `__future__.absolute_import`, `glob`, `os.path`, `sys`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.typing_extensions
:::{doc} _DefaultMixin:1486
Mixin for TypeVarLike defaults.
:::
**Imports**: `abc`, `collections`, `collections.abc`, `contextlib`, `functools`, `inspect`, `operator`, `sys`, `types`, `typing`, `warnings`, `typing.Any`, `typing.AsyncContextManager`, `typing.AsyncGenerator`, `typing.ContextManager`, `typing.Generator`, `typing.TypeVar`, `typing.ParamSpec`, `typing.TypeVarTuple`, `typing._BaseGenericAlias`, `typing.GenericAlias`, `_socket`, `functools`, `types.MethodType`, `functools`
**Type References**: [[Annotated]], [[Any]], [[Buffer]], [[Doc]], [[Dummy]], [[NewType]], [[NoDefaultType]], [[NoDefaultTypeMeta]], [[ParamSpec]], [[ParamSpecArgs]], [[ParamSpecKwargs]], [[Protocol]], [[SupportsAbs]], [[SupportsBytes]], [[SupportsComplex]], [[SupportsFloat]], [[SupportsIndex]], [[SupportsInt]], [[SupportsRound]], [[TypeAliasType]], [[TypeVar]], [[TypeVarTuple]], [[_AnnotatedAlias]], [[_AnyMeta]], [[_ConcatenateForm]], [[_ConcatenateGenericAlias]], [[_DefaultMixin]], [[_ExtensionsSpecialForm]], [[_Immutable]], [[_LiteralForm]], [[_LiteralGenericAlias]], [[_NamedTupleMeta]], [[_ProtocolMeta]], [[_ReadOnlyForm]], [[_RequiredForm]], [[_Sentinel]], [[_SpecialForm]], [[_SpecialGenericAlias]], [[_TypeGuardForm]], [[_TypeIsForm]], [[_TypeVarLikeMeta]], [[_TypedDictMeta]], [[_UnpackAlias]], [[_UnpackForm]], [[_UnpackSpecialForm]], [[deprecated]]

### Interface
- `IntVar`() -> Any
- `_get_protocol_attrs`() -> Any
- `_caller`() -> Any
- `_ensure_subclassable`() -> Any
- `_set_default`() -> Any
- `_set_module`() -> Any
- `_concatenate_getitem`() -> Any
- `_has_generic_or_protocol_as_origin`() -> bool
- `_is_unpacked_typevartuple`() -> bool
- `__repr__`() -> Any
- `_should_collect_from_parameters`() -> Any
- `final`() -> Any
- `_flatten_literal_params`() -> Any
- `_value_and_type_iter`() -> Any
- `overload`() -> Any
- `get_overloads`() -> Any
- `clear_overloads`() -> Any
- `_is_dunder`() -> Any
- `_allow_reckless_class_checks`() -> Any
- `_no_init`() -> Any
- `_type_check_issubclass_arg_1`() -> Any
- `_proto_hook`() -> Any
- `runtime_checkable`() -> Any
- `inner`() -> Any
- `_get_typeddict_qualifiers`() -> Any
- `TypedDict`() -> Any
- `is_typeddict`() -> Any
- `assert_type`() -> Any
- `_strip_extras`() -> Any
- `get_type_hints`() -> Any
- `get_origin`() -> Any
- `get_args`() -> Any
- `__instancecheck__`() -> Any
- `__init__`() -> Any
- `__getattr__`() -> Any
- `__mro_entries__`() -> Any
- `__reduce__`() -> Any
- `__call__`() -> Any
- `__or__`() -> Any
- `__ror__`() -> Any
- `__subclasscheck__`() -> Any
- `__getitem__`() -> Any
- `LiteralString`() -> Any
- `Self`() -> Any
- `Never`() -> Any
- `_is_unpack`() -> Any
- `reveal_type`() -> T
- `assert_never`() -> Never
- `dataclass_transform`() -> typing.Callable[<ast.Tuple object at 0x125d9a850>]
- `override`() -> _F
- `_check_generic`() -> Any
- `_collect_type_vars`() -> Any
- `_collect_parameters`() -> Any
- `_make_nmtuple`() -> Any
- `_namedtuple_mro_entries`() -> Any
- `NamedTuple`() -> Any
- `get_original_bases`() -> Any
- `_is_unionable`() -> Any
- `is_protocol`() -> bool
- `get_protocol_members`() -> typing.FrozenSet[str]
- `__new__`() -> Any
- `__eq__`() -> Any
- `__hash__`() -> Any
- `__setattr__`() -> None
- `__init_subclass__`() -> Any
- `__int__`() -> int
- `__float__`() -> float
- `__complex__`() -> complex
- `__bytes__`() -> bytes
- `__index__`() -> int
- `__abs__`() -> T_co
- `__round__`(ndigits: int) -> T_co
- `copy_with`() -> Any
- `__class_getitem__`() -> Any
- `TypeAlias`() -> Any
- `__copy__`() -> Any
- `__deepcopy__`() -> Any
- `__parameters__`() -> Any
- `Concatenate`() -> Any
- `TypeGuard`() -> Any
- `TypeIs`() -> Any
- `Required`() -> Any
- `NotRequired`() -> Any
- `ReadOnly`() -> Any
- `Unpack`() -> Any
- `_unpack_args`() -> Any
- `decorator`() -> Any
- `__delattr__`() -> Never
- `_raise_attribute_error`(name: str) -> Never
- `_tvar_prepare_subst`() -> Any
- `args`() -> Any
- `kwargs`() -> Any
- `__typing_unpacked_tuple_args__`() -> Any
- `__iter__`() -> Any
- `_paramspec_prepare_subst`() -> Any
- `_typevartuple_prepare_subst`() -> Any
- `wrapper`() -> Any

### Implementation
**_Sentinel**

**_ExtensionsSpecialForm**

**_DefaultMixin**

**_TypeVarLikeMeta**

**_SpecialForm**

**_AnyMeta**

**Any**

**_LiteralGenericAlias**

**_LiteralForm**

**_SpecialGenericAlias**

**_ProtocolMeta**

**Protocol**

**SupportsInt**

**SupportsFloat**

**SupportsComplex**

**SupportsBytes**

**SupportsIndex**

**SupportsAbs**

**SupportsRound**

**_TypedDictMeta**

**_AnnotatedAlias**

**Annotated**

**NoDefaultTypeMeta**

**NoDefaultType**

**TypeVar**

**_Immutable**

**ParamSpecArgs**

**ParamSpecKwargs**

**_ConcatenateGenericAlias**

**deprecated**

**_NamedTupleMeta**

**Buffer**

**NewType**

**TypeAliasType**

**Doc**

**ParamSpec**

**_ConcatenateForm**

**_TypeGuardForm**

**_TypeIsForm**

**_RequiredForm**

**_ReadOnlyForm**

**_UnpackSpecialForm**

**_UnpackAlias**

**_UnpackForm**

**TypeVarTuple**

**Dummy**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/typing_extensions.py`  
**Dependencies**: `abc`, `collections`, `collections.abc`, `contextlib`, `functools`, `inspect`, `operator`, `sys`, `types`, `typing`, `warnings`, `typing.Any`, `typing.AsyncContextManager`, `typing.AsyncGenerator`, `typing.ContextManager`, `typing.Generator`, `typing.TypeVar`, `typing.ParamSpec`, `typing.TypeVarTuple`, `typing._BaseGenericAlias`, `typing.GenericAlias`, `_socket`, `functools`, `types.MethodType`, `functools`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.packaging.tags
:::{doc} Tag:42
A representation of the tag triple for a wheel.

Instances are considered immutable and thus are hashable. Equality checking
is also supported.
:::
:::{doc} parse_tag:96
Parses the provided tag (e.g. `py3-none-any`) into a frozenset of Tag instances.

Returning a set is required due to the possibility that the tag is a
compressed tag set.
:::
:::{doc} _is_threaded_cpython:125
Determine if the ABI corresponds to a threaded (`--disable-gil`) build.

The threaded builds are indicated by a "t" in the abiflags.
:::
:::{doc} _abi3_applies:141
Determine if the Python version supports abi3.

PEP 384 was first implemented in Python 3.2. The threaded (`--disable-gil`)
builds do not support abi3.
:::
:::{doc} cpython_tags:184
Yields the tags for a CPython interpreter.

The tags consist of:
- cp<python_version>-<abi>-<platform>
- cp<python_version>-abi3-<platform>
- cp<python_version>-none-<platform>
- cp<less than python_version>-abi3-<platform>  # Older Python versions down to 3.2.

If python_version only specifies a major version then user-provided ABIs and
the 'none' ABItag will be used.

If 'abi3' or 'none' are specified in 'abis' then they will be yielded at
their normal position and not at the beginning.
:::
:::{doc} _generic_abi:244
Return the ABI tag based on EXT_SUFFIX.
:::
:::{doc} generic_tags:285
Yields the tags for a generic interpreter.

The tags consist of:
- <interpreter>-<abi>-<platform>

The "none" ABI will be added if it was not explicitly provided.
:::
:::{doc} _py_interpreter_range:316
Yields Python versions in descending order.

After the latest version, the major-only version will be yielded, and then
all previous versions of that major version.
:::
:::{doc} compatible_tags:331
Yields the sequence of tags that are compatible with a specific version of Python.

The tags consist of:
- py*-none-<platform>
- <interpreter>-none-any  # ... if `interpreter` is provided.
- py*-none-any
:::
:::{doc} mac_platforms:398
Yields the platform tags for a macOS system.

The `version` parameter is a two-item tuple specifying the macOS version to
generate platform tags for. The `arch` parameter is the CPU architecture to
generate platform tags for. Both parameters default to the appropriate value
for the current system.
:::
:::{doc} ios_platforms:486
Yields the platform tags for an iOS system.

:param version: A two-item tuple specifying the iOS version to generate
    platform tags for. Defaults to the current iOS version.
:param multiarch: The CPU architecture+ABI to generate platform tags for -
    (the value used by `sys.implementation._multiarch` e.g.,
    `arm64_iphoneos` or `x84_64_iphonesimulator`). Defaults to the current
    multiarch value.
:::
:::{doc} platform_tags:566
Provides the platform tags for this installation.
:::
:::{doc} interpreter_name:580
Returns the name of the running interpreter.

Some implementations have a reserved, two-letter abbreviation which will
be returned when appropriate.
:::
:::{doc} interpreter_version:591
Returns the version of the running interpreter.
:::
:::{doc} sys_tags:607
Returns the sequence of tag triples for the running interpreter.

The order of the sequence corresponds to priority order for the
interpreter, from most to least important.
:::
**Imports**: `__future__.annotations`, `logging`, `platform`, `re`, `struct`, `subprocess`, `sys`, `sysconfig`, `importlib.machinery.EXTENSION_SUFFIXES`, `typing.Iterable`, `typing.Iterator`, `typing.Sequence`, `typing.Tuple`, `typing.cast`, `_manylinux`, `_musllinux`
**Type References**: [[None]], [[Tag]]

### Interface
- `parse_tag`(tag: str) -> frozenset[Tag]
- `_get_config_var`(name: str, warn: bool) -> int | str | None
- `_normalize_string`(string: str) -> str
- `_is_threaded_cpython`(abis: list[str]) -> bool
- `_abi3_applies`(python_version: PythonVersion, threading: bool) -> bool
- `_cpython_abis`(py_version: PythonVersion, warn: bool) -> list[str]
- `cpython_tags`(python_version: PythonVersion | None, abis: Iterable[str] | None, platforms: Iterable[str] | None) -> Iterator[Tag]
- `_generic_abi`() -> list[str]
- `generic_tags`(interpreter: str | None, abis: Iterable[str] | None, platforms: Iterable[str] | None) -> Iterator[Tag]
- `_py_interpreter_range`(py_version: PythonVersion) -> Iterator[str]
- `compatible_tags`(python_version: PythonVersion | None, interpreter: str | None, platforms: Iterable[str] | None) -> Iterator[Tag]
- `_mac_arch`(arch: str, is_32bit: bool) -> str
- `_mac_binary_formats`(version: AppleVersion, cpu_arch: str) -> list[str]
- `mac_platforms`(version: AppleVersion | None, arch: str | None) -> Iterator[str]
- `ios_platforms`(version: AppleVersion | None, multiarch: str | None) -> Iterator[str]
- `_linux_platforms`(is_32bit: bool) -> Iterator[str]
- `_generic_platforms`() -> Iterator[str]
- `platform_tags`() -> Iterator[str]
- `interpreter_name`() -> str
- `interpreter_version`() -> str
- `_version_nodot`(version: PythonVersion) -> str
- `sys_tags`() -> Iterator[Tag]
- `__init__`(interpreter: str, abi: str, platform: str) -> None
- `interpreter`() -> str
- `abi`() -> str
- `platform`() -> str
- `__eq__`(other: object) -> bool
- `__hash__`() -> int
- `__str__`() -> str
- `__repr__`() -> str

### Implementation
**Tag**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/packaging/tags.py`  
**Dependencies**: `__future__.annotations`, `logging`, `platform`, `re`, `struct`, `subprocess`, `sys`, `sysconfig`, `importlib.machinery.EXTENSION_SUFFIXES`, `typing.Iterable`, `typing.Iterator`, `typing.Sequence`, `typing.Tuple`, `typing.cast`, `_manylinux`, `_musllinux`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.packaging._musllinux
:::{doc} _get_musl_version:34
Detect currently-running musl runtime version.

This is done by checking the specified executable's dynamic linking
information, and invoking the loader to parse its output for a version
string. If the loader is musl, the output would be something like::

    musl libc (x86_64)
    Version 1.2.2
    Dynamic Program Loader
:::
:::{doc} platform_tags:56
Generate musllinux tags compatible to the current platform.

:param archs: Sequence of compatible architectures.
    The first one shall be the closest to the actual architecture and be the part of
    platform tag after the ``linux_`` prefix, e.g. ``x86_64``.
    The ``linux_`` prefix is assumed as a prerequisite for the current platform to
    be musllinux-compatible.

:returns: An iterator of compatible musllinux tags.
:::
**Imports**: `__future__.annotations`, `functools`, `re`, `subprocess`, `sys`, `typing.Iterator`, `typing.NamedTuple`, `typing.Sequence`, `_elffile.ELFFile`, `sysconfig`
**Type References**: [[_MuslVersion]]

### Interface
- `_parse_musl_version`(output: str) -> _MuslVersion | None
- `_get_musl_version`(executable: str) -> _MuslVersion | None
- `platform_tags`(archs: Sequence[str]) -> Iterator[str]

### Implementation
**_MuslVersion**
  - major: int
  - minor: int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/packaging/_musllinux.py`  
**Dependencies**: `__future__.annotations`, `functools`, `re`, `subprocess`, `sys`, `typing.Iterator`, `typing.NamedTuple`, `typing.Sequence`, `_elffile.ELFFile`, `sysconfig`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.packaging.metadata
:::{doc} InvalidMetadata:49
A metadata field contains invalid data.
:::
:::{doc} RawMetadata:64
A dictionary of raw core metadata.

Each field in core metadata maps to a key of this dictionary (when data is
provided). The key is lower-case and underscores are used instead of dashes
compared to the equivalent core metadata field. Any core metadata field that
can be specified multiple times or can hold multiple values in a single
field have a key with a plural name. See :class:`Metadata` whose attributes
match the keys of this dictionary.

Core metadata fields that can be specified multiple times are stored as a
list or dict depending on which is appropriate for the field. Any fields
which hold multiple values in a single field are stored as a list.
:::
:::{doc} _parse_keywords:169
Split a string of comma-separate keyboards into a list of keywords.
:::
:::{doc} _parse_project_urls:174
Parse a list of label/URL string pairings separated by a comma.
:::
:::{doc} _get_payload:214
Get the body of the message.
:::
:::{doc} parse_email:276
Parse a distribution's metadata stored as email headers (e.g. from ``METADATA``).

This function returns a two-item tuple of dicts. The first dict is of
recognized fields from the core metadata specification. Fields that can be
parsed and translated into Python's built-in types are converted
appropriately. All other fields are left as-is. Fields that are allowed to
appear multiple times are stored as lists.

The second dict contains all other fields from the metadata. This includes
any unrecognized fields. It also includes any fields which are expected to
be parsed into a built-in type but were not formatted appropriately. Finally,
any fields that are expected to appear only once but are repeated are
included in this dict.
:::
:::{doc} _Validator:462
Validate a metadata field.

All _process_*() methods correspond to a core metadata field. The method is
called with the field's raw value. If the raw value is valid it is returned
in its "enriched" form (e.g. ``version.Version`` for the ``Version`` field).
If the raw value is invalid, :exc:`InvalidMetadata` is raised (with a cause
as appropriate).
:::
:::{doc} Metadata:637
Representation of distribution metadata.

Compared to :class:`RawMetadata`, this class provides objects representing
metadata fields instead of only using built-in types. Any invalid metadata
will cause :exc:`InvalidMetadata` to be raised (with a
:py:attr:`~BaseException.__cause__` attribute as appropriate).
:::
**Imports**: `__future__.annotations`, `email.feedparser`, `email.header`, `email.message`, `email.parser`, `email.policy`, `typing`, `typing.Any`, `typing.Callable`, `typing.Generic`, `typing.Literal`, `typing.TypedDict`, `typing.cast`, `requirements`, `specifiers`, `utils`, `version`
**Type References**: [[Callable]], [[Exception]], [[ExceptionGroup]], [[InvalidMetadata]], [[Metadata]], [[None]], [[NormalizedName]], [[RawMetadata]], [[Requirement]], [[SpecifierSet]], [[T]], [[Version]], [[_Validator]], [[requirements.Requirement]], [[specifiers.SpecifierSet]], [[utils.NormalizedName]], [[version_module.Version]]

### Interface
- `_parse_keywords`(data: str) -> list[str]
- `_parse_project_urls`(data: list[str]) -> dict[<ast.Tuple object at 0x125f7cad0>]
- `_get_payload`(msg: email.message.Message, source: bytes | str) -> str
- `parse_email`(data: bytes | str) -> tuple[<ast.Tuple object at 0x125fc5510>]
- `__init__`(message: str, exceptions: list[Exception]) -> None
- `__set_name__`(_owner: Metadata, name: str) -> None
- `__get__`(instance: Metadata, _owner: type[Metadata]) -> T
- `_invalid_metadata`(msg: str, cause: Exception | None) -> InvalidMetadata
- `_process_metadata_version`(value: str) -> _MetadataVersion
- `_process_name`(value: str) -> str
- `_process_version`(value: str) -> version_module.Version
- `_process_summary`(value: str) -> str
- `_process_description_content_type`(value: str) -> str
- `_process_dynamic`(value: list[str]) -> list[str]
- `_process_provides_extra`(value: list[str]) -> list[utils.NormalizedName]
- `_process_requires_python`(value: str) -> specifiers.SpecifierSet
- `_process_requires_dist`(value: list[str]) -> list[requirements.Requirement]
- `from_raw`(data: RawMetadata) -> Metadata
- `from_email`(data: bytes | str) -> Metadata
- `__repr__`() -> str

### Implementation
**InvalidMetadata**
  - field: str
**RawMetadata**
  - metadata_version: str
  - name: str
  - version: str
  - platforms: list[str]
  - summary: str
  - description: str
  - keywords: list[str]
  - home_page: str
  - author: str
  - author_email: str
  - license: str
  - supported_platforms: list[str]
  - download_url: str
  - classifiers: list[str]
  - requires: list[str]
  - provides: list[str]
  - obsoletes: list[str]
  - maintainer: str
  - maintainer_email: str
  - requires_dist: list[str]
  - provides_dist: list[str]
  - obsoletes_dist: list[str]
  - requires_python: str
  - requires_external: list[str]
  - project_urls: dict[<ast.Tuple object at 0x125f865d0>]
  - description_content_type: str
  - provides_extra: list[str]
  - dynamic: list[str]
**_Validator**
  - name: str
  - raw_name: str
  - added: _MetadataVersion
  - converter: Callable[<ast.Tuple object at 0x125fd1e50>]
**Metadata**
  - _raw: RawMetadata
  - metadata_version: _Validator[_MetadataVersion]
  - name: _Validator[str]
  - version: _Validator[version_module.Version]
  - dynamic: _Validator[list[str] | None]
  - platforms: _Validator[list[str] | None]
  - supported_platforms: _Validator[list[str] | None]
  - summary: _Validator[str | None]
  - description: _Validator[str | None]
  - description_content_type: _Validator[str | None]
  - keywords: _Validator[list[str] | None]
  - home_page: _Validator[str | None]
  - download_url: _Validator[str | None]
  - author: _Validator[str | None]
  - author_email: _Validator[str | None]
  - maintainer: _Validator[str | None]
  - maintainer_email: _Validator[str | None]
  - license: _Validator[str | None]
  - classifiers: _Validator[list[str] | None]
  - requires_dist: _Validator[list[requirements.Requirement] | None]
  - requires_python: _Validator[specifiers.SpecifierSet | None]
  - requires_external: _Validator[list[str] | None]
  - project_urls: _Validator[dict[<ast.Tuple object at 0x126037010>] | None]
  - provides_extra: _Validator[list[utils.NormalizedName] | None]
  - provides_dist: _Validator[list[str] | None]
  - obsoletes_dist: _Validator[list[str] | None]
  - requires: _Validator[list[str] | None]
  - provides: _Validator[list[str] | None]
  - obsoletes: _Validator[list[str] | None]
  - exceptions: list[Exception]
**ExceptionGroup**
  - message: str
  - exceptions: list[Exception]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/packaging/metadata.py`  
**Dependencies**: `__future__.annotations`, `email.feedparser`, `email.header`, `email.message`, `email.parser`, `email.policy`, `typing`, `typing.Any`, `typing.Callable`, `typing.Generic`, `typing.Literal`, `typing.TypedDict`, `typing.cast`, `requirements`, `specifiers`, `utils`, `version`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.packaging.version
:::{doc} parse:47
Parse the given version string.

>>> parse('1.0.dev1')
<Version('1.0.dev1')>

:param version: The version string to parse.
:raises InvalidVersion: When the version string is not a valid version.
:::
:::{doc} InvalidVersion:59
Raised when a version string is not a valid version.

>>> Version("invalid")
Traceback (most recent call last):
    ...
packaging.version.InvalidVersion: Invalid version: 'invalid'
:::
:::{doc} Version:161
This class abstracts handling of a project's versions.

A :class:`Version` instance is comparison aware and can be compared and
sorted using the standard Python interfaces.

>>> v1 = Version("1.0a5")
>>> v2 = Version("1.0")
>>> v1
<Version('1.0a5')>
>>> v2
<Version('1.0')>
>>> v1 < v2
True
>>> v1 == v2
False
>>> v1 > v2
False
>>> v1 >= v2
False
>>> v1 <= v2
True
:::
:::{doc} _parse_local_version:492
Takes a string like abc.1.twelve and turns it into ("abc", 1, "twelve").
:::
**Imports**: `__future__.annotations`, `itertools`, `re`, `typing.Any`, `typing.Callable`, `typing.NamedTuple`, `typing.SupportsInt`, `typing.Tuple`, `typing.Union`, `_structures.Infinity`, `_structures.InfinityType`, `_structures.NegativeInfinity`, `_structures.NegativeInfinityType`
**Type References**: [[Any]], [[CmpKey]], [[CmpLocalType]], [[CmpPrePostDevType]], [[InvalidVersion]], [[LocalType]], [[None]], [[Version]], [[_BaseVersion]], [[_Version]]

### Interface
- `parse`(version: str) -> Version
- `_parse_letter_version`(letter: str | None, number: str | bytes | SupportsInt | None) -> tuple[<ast.Tuple object at 0x1260a41d0>] | None
- `_parse_local_version`(local: str | None) -> LocalType | None
- `_cmpkey`(epoch: int, release: tuple[<ast.Tuple object at 0x1260a6550>], pre: tuple[<ast.Tuple object at 0x1260a68d0>] | None, post: tuple[<ast.Tuple object at 0x1260a6d10>] | None, dev: tuple[<ast.Tuple object at 0x1260a7150>] | None, local: LocalType | None) -> CmpKey
- `__hash__`() -> int
- `__lt__`(other: _BaseVersion) -> bool
- `__le__`(other: _BaseVersion) -> bool
- `__eq__`(other: object) -> bool
- `__ge__`(other: _BaseVersion) -> bool
- `__gt__`(other: _BaseVersion) -> bool
- `__ne__`(other: object) -> bool
- `__init__`(version: str) -> None
- `__repr__`() -> str
- `__str__`() -> str
- `epoch`() -> int
- `release`() -> tuple[<ast.Tuple object at 0x12607e690>]
- `pre`() -> tuple[<ast.Tuple object at 0x12607f090>] | None
- `post`() -> int | None
- `dev`() -> int | None
- `local`() -> str | None
- `public`() -> str
- `base_version`() -> str
- `is_prerelease`() -> bool
- `is_postrelease`() -> bool
- `is_devrelease`() -> bool
- `major`() -> int
- `minor`() -> int
- `micro`() -> int

### Implementation
**_Version**
  - epoch: int
  - release: tuple[<ast.Tuple object at 0x12604ffd0>]
  - dev: tuple[<ast.Tuple object at 0x12604fbd0>] | None
  - pre: tuple[<ast.Tuple object at 0x12604f710>] | None
  - post: tuple[<ast.Tuple object at 0x12604f250>] | None
  - local: LocalType | None
**InvalidVersion**

**_BaseVersion**
  - _key: tuple[<ast.Tuple object at 0x12604ddd0>]
**Version**
  - _key: CmpKey
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/packaging/version.py`  
**Dependencies**: `__future__.annotations`, `itertools`, `re`, `typing.Any`, `typing.Callable`, `typing.NamedTuple`, `typing.SupportsInt`, `typing.Tuple`, `typing.Union`, `_structures.Infinity`, `_structures.InfinityType`, `_structures.NegativeInfinity`, `_structures.NegativeInfinityType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.packaging



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/packaging/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.packaging._parser
:::{doc} _parse_requirement:65
requirement = WS? IDENTIFIER WS? extras WS? requirement_details
:::
:::{doc} _parse_requirement_details:86
requirement_details = AT URL (WS requirement_marker?)?
                    | specifier WS? (requirement_marker)?
:::
:::{doc} _parse_requirement_marker:137
requirement_marker = SEMICOLON marker WS?
:::
:::{doc} _parse_extras:157
extras = (LEFT_BRACKET wsp* extras_list? wsp* RIGHT_BRACKET)?
:::
:::{doc} _parse_extras_list:176
extras_list = identifier (wsp* ',' wsp* identifier)*
:::
:::{doc} _parse_specifier:203
specifier = LEFT_PARENTHESIS WS? version_many WS? RIGHT_PARENTHESIS
          | WS? version_many WS?
:::
:::{doc} _parse_version_many:220
version_many = (SPECIFIER (WS? COMMA WS? SPECIFIER)*)?
:::
:::{doc} _parse_marker:262
marker = marker_atom (BOOLOP marker_atom)+
:::
:::{doc} _parse_marker_atom:274
marker_atom = WS? LEFT_PARENTHESIS WS? marker WS? RIGHT_PARENTHESIS WS?
            | WS? marker_item WS?
:::
:::{doc} _parse_marker_item:296
marker_item = WS? marker_var WS? marker_op WS? marker_var WS?
:::
:::{doc} _parse_marker_var:310
marker_var = VARIABLE | QUOTED_STRING
:::
:::{doc} _parse_marker_op:336
marker_op = IN | NOT IN | OP
:::
**Imports**: `__future__.annotations`, `ast`, `typing.NamedTuple`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `_tokenizer.DEFAULT_RULES`, `_tokenizer.Tokenizer`
**Type References**: [[MarkerAtom]], [[MarkerList]], [[Node]], [[None]], [[Op]], [[ParsedRequirement]], [[Value]], [[Variable]]

### Interface
- `parse_requirement`(source: str) -> ParsedRequirement
- `_parse_requirement`(tokenizer: Tokenizer) -> ParsedRequirement
- `_parse_requirement_details`(tokenizer: Tokenizer) -> tuple[<ast.Tuple object at 0x1260e2610>]
- `_parse_requirement_marker`(tokenizer: Tokenizer) -> MarkerList
- `_parse_extras`(tokenizer: Tokenizer) -> list[str]
- `_parse_extras_list`(tokenizer: Tokenizer) -> list[str]
- `_parse_specifier`(tokenizer: Tokenizer) -> str
- `_parse_version_many`(tokenizer: Tokenizer) -> str
- `parse_marker`(source: str) -> MarkerList
- `_parse_full_marker`(tokenizer: Tokenizer) -> MarkerList
- `_parse_marker`(tokenizer: Tokenizer) -> MarkerList
- `_parse_marker_atom`(tokenizer: Tokenizer) -> MarkerAtom
- `_parse_marker_item`(tokenizer: Tokenizer) -> MarkerItem
- `_parse_marker_var`(tokenizer: Tokenizer) -> MarkerVar
- `process_env_var`(env_var: str) -> Variable
- `process_python_str`(python_str: str) -> Value
- `_parse_marker_op`(tokenizer: Tokenizer) -> Op
- `__init__`(value: str) -> None
- `__str__`() -> str
- `__repr__`() -> str
- `serialize`() -> str

### Implementation
**Node**

**Variable**

**Value**

**Op**

**ParsedRequirement**
  - name: str
  - url: str
  - extras: list[str]
  - specifier: str
  - marker: MarkerList | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/packaging/_parser.py`  
**Dependencies**: `__future__.annotations`, `ast`, `typing.NamedTuple`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `_tokenizer.DEFAULT_RULES`, `_tokenizer.Tokenizer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.packaging.utils
:::{doc} InvalidName:17
An invalid distribution name; users should refer to the packaging user guide.
:::
:::{doc} InvalidWheelFilename:23
An invalid wheel filename was found, users should refer to PEP 427.
:::
:::{doc} InvalidSdistFilename:29
An invalid sdist filename was found, users should refer to the packaging user guide.
:::
:::{doc} canonicalize_version:57
This is very similar to Version.__str__, but has one subtle difference
with the way it handles the release segment.
:::
**Imports**: `__future__.annotations`, `re`, `typing.NewType`, `typing.Tuple`, `typing.Union`, `typing.cast`, `tags.Tag`, `tags.parse_tag`, `version.InvalidVersion`, `version.Version`
**Type References**: [[InvalidName]], [[InvalidSdistFilename]], [[InvalidWheelFilename]]

### Interface
- `canonicalize_name`(name: str) -> NormalizedName
- `is_normalized_name`(name: str) -> bool
- `canonicalize_version`(version: Version | str) -> str
- `parse_wheel_filename`(filename: str) -> tuple[<ast.Tuple object at 0x126143c90>]
- `parse_sdist_filename`(filename: str) -> tuple[<ast.Tuple object at 0x12614b750>]

### Implementation
**InvalidName**

**InvalidWheelFilename**

**InvalidSdistFilename**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/packaging/utils.py`  
**Dependencies**: `__future__.annotations`, `re`, `typing.NewType`, `typing.Tuple`, `typing.Union`, `typing.cast`, `tags.Tag`, `tags.parse_tag`, `version.InvalidVersion`, `version.Version`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.packaging.requirements
:::{doc} InvalidRequirement:15
An invalid requirement was found, users should refer to PEP 508.
:::
:::{doc} Requirement:21
Parse a requirement.

Parse a given requirement string into its parts, such as name, specifier,
URL, and extras. Raises InvalidRequirement on a badly-formed requirement
string.
:::
**Imports**: `__future__.annotations`, `typing.Any`, `typing.Iterator`, `_parser.parse_requirement`, `_tokenizer.ParserSyntaxError`, `markers.Marker`, `markers._normalize_extra_values`, `specifiers.SpecifierSet`, `utils.canonicalize_name`
**Type References**: [[InvalidRequirement]], [[Requirement]]

### Interface
- `__init__`(requirement_string: str) -> None
- `_iter_parts`(name: str) -> Iterator[str]
- `__str__`() -> str
- `__repr__`() -> str
- `__hash__`() -> int
- `__eq__`(other: Any) -> bool

### Implementation
**InvalidRequirement**

**Requirement**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/packaging/requirements.py`  
**Dependencies**: `__future__.annotations`, `typing.Any`, `typing.Iterator`, `_parser.parse_requirement`, `_tokenizer.ParserSyntaxError`, `markers.Marker`, `markers._normalize_extra_values`, `specifiers.SpecifierSet`, `utils.canonicalize_name`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.packaging._structures


**Type References**: [[InfinityType]], [[NegativeInfinityType]]

### Interface
- `__repr__`() -> str
- `__hash__`() -> int
- `__lt__`(other: object) -> bool
- `__le__`(other: object) -> bool
- `__eq__`(other: object) -> bool
- `__gt__`(other: object) -> bool
- `__ge__`(other: object) -> bool
- `__neg__`(self: object) -> InfinityType

### Implementation
**InfinityType**

**NegativeInfinityType**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/packaging/_structures.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.packaging.markers
:::{doc} InvalidMarker:30
An invalid marker was found, users should refer to PEP 508.
:::
:::{doc} UndefinedComparison:36
An invalid operation was attempted on a value that doesn't support it.
:::
:::{doc} UndefinedEnvironmentName:42
A name was attempted to be used that does not exist inside of the
environment.
:::
:::{doc} _normalize_extra_values:121
Normalize extra values.
:::
**Imports**: `__future__.annotations`, `operator`, `os`, `platform`, `sys`, `typing.Any`, `typing.Callable`, `typing.TypedDict`, `typing.cast`, `_parser.MarkerAtom`, `_parser.MarkerList`, `_parser.Op`, `_parser.Value`, `_parser.Variable`, `_parser.parse_marker`, `_tokenizer.ParserSyntaxError`, `specifiers.InvalidSpecifier`, `specifiers.Specifier`, `utils.canonicalize_name`
**Type References**: [[Environment]], [[InvalidMarker]], [[Marker]], [[None]], [[Operator]], [[UndefinedComparison]], [[UndefinedEnvironmentName]]

### Interface
- `_normalize_extra_values`(results: Any) -> Any
- `_format_marker`(marker: list[str] | MarkerAtom | str, first: bool | None) -> str
- `_eval_op`(lhs: str, op: Op, rhs: str) -> bool
- `_normalize`() -> tuple[<ast.Tuple object at 0x12619fc50>]
- `_evaluate_markers`(markers: MarkerList, environment: dict[<ast.Tuple object at 0x1261a8290>]) -> bool
- `format_full_version`(info: sys._version_info) -> str
- `default_environment`() -> Environment
- `__init__`(marker: str) -> None
- `__str__`() -> str
- `__repr__`() -> str
- `__hash__`() -> int
- `__eq__`(other: Any) -> bool
- `evaluate`(environment: dict[<ast.Tuple object at 0x1261c8c50>] | None) -> bool

### Implementation
**InvalidMarker**

**UndefinedComparison**

**UndefinedEnvironmentName**

**Environment**
  - implementation_name: str
  - implementation_version: str
  - os_name: str
  - platform_machine: str
  - platform_release: str
  - platform_system: str
  - platform_version: str
  - python_full_version: str
  - platform_python_implementation: str
  - python_version: str
  - sys_platform: str
**Marker**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/packaging/markers.py`  
**Dependencies**: `__future__.annotations`, `operator`, `os`, `platform`, `sys`, `typing.Any`, `typing.Callable`, `typing.TypedDict`, `typing.cast`, `_parser.MarkerAtom`, `_parser.MarkerList`, `_parser.Op`, `_parser.Value`, `_parser.Variable`, `_parser.parse_marker`, `_tokenizer.ParserSyntaxError`, `specifiers.InvalidSpecifier`, `specifiers.Specifier`, `utils.canonicalize_name`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.packaging._manylinux
:::{doc} _glibc_version_string_confstr:85
Primary implementation of glibc_version_string using os.confstr.
:::
:::{doc} _glibc_version_string_ctypes:104
Fallback implementation of glibc_version_string using ctypes.
:::
:::{doc} _glibc_version_string:148
Returns glibc version string, or None if not using glibc.
:::
:::{doc} _parse_glibc_version:153
Parse glibc version.

We use a regexp instead of str.split because we want to discard any
random junk that might come after the minor version -- this might happen
in patched/forked versions of glibc (e.g. Linaro's version of glibc
uses version strings like "2.20-2014.11"). See gh-3588.
:::
:::{doc} platform_tags:217
Generate manylinux tags compatible to the current platform.

:param archs: Sequence of compatible architectures.
    The first one shall be the closest to the actual architecture and be the part of
    platform tag after the ``linux_`` prefix, e.g. ``x86_64``.
    The ``linux_`` prefix is assumed as a prerequisite for the current platform to
    be manylinux-compatible.

:returns: An iterator of compatible manylinux tags.
:::
**Imports**: `__future__.annotations`, `collections`, `contextlib`, `functools`, `os`, `re`, `sys`, `warnings`, `typing.Generator`, `typing.Iterator`, `typing.NamedTuple`, `typing.Sequence`, `_elffile.EIClass`, `_elffile.EIData`, `_elffile.ELFFile`, `_elffile.EMachine`, `ctypes`, `_manylinux`
**Type References**: [[None]], [[_GLibCVersion]]

### Interface
- `_parse_elf`(path: str) -> Generator[<ast.Tuple object at 0x1261d1590>]
- `_is_linux_armhf`(executable: str) -> bool
- `_is_linux_i686`(executable: str) -> bool
- `_have_compatible_abi`(executable: str, archs: Sequence[str]) -> bool
- `_glibc_version_string_confstr`() -> str | None
- `_glibc_version_string_ctypes`() -> str | None
- `_glibc_version_string`() -> str | None
- `_parse_glibc_version`(version_str: str) -> tuple[<ast.Tuple object at 0x1261f2e50>]
- `_get_glibc_version`() -> tuple[<ast.Tuple object at 0x1261f40d0>]
- `_is_compatible`(arch: str, version: _GLibCVersion) -> bool
- `platform_tags`(archs: Sequence[str]) -> Iterator[str]

### Implementation
**_GLibCVersion**
  - major: int
  - minor: int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/packaging/_manylinux.py`  
**Dependencies**: `__future__.annotations`, `collections`, `contextlib`, `functools`, `os`, `re`, `sys`, `warnings`, `typing.Generator`, `typing.Iterator`, `typing.NamedTuple`, `typing.Sequence`, `_elffile.EIClass`, `_elffile.EIData`, `_elffile.ELFFile`, `_elffile.EMachine`, `ctypes`, `_manylinux`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.packaging._tokenizer
:::{doc} ParserSyntaxError:18
The provided source text could not be parsed correctly.
:::
:::{doc} Tokenizer:90
Context-sensitive token parsing.

Provides methods to examine the input stream to check whether the next token
matches.
:::
**Imports**: `__future__.annotations`, `contextlib`, `re`, `dataclasses.dataclass`, `typing.Iterator`, `typing.NoReturn`, `specifiers.Specifier`
**Type References**: [[ParserSyntaxError]], [[Pattern]], [[Token]], [[Tokenizer]], [[re.Pattern]]

### Interface
- `__init__`(source: str) -> None
- `__str__`() -> str
- `consume`(name: str) -> None
- `check`(name: str) -> bool
- `expect`(name: str) -> Token
- `read`() -> Token
- `raise_syntax_error`(message: str) -> NoReturn
- `enclosing_tokens`(open_token: str, close_token: str) -> Iterator[None]

### Implementation
**Token**
  - name: str
  - text: str
  - position: int
**ParserSyntaxError**

**Tokenizer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/packaging/_tokenizer.py`  
**Dependencies**: `__future__.annotations`, `contextlib`, `re`, `dataclasses.dataclass`, `typing.Iterator`, `typing.NoReturn`, `specifiers.Specifier`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.packaging.specifiers
:::{doc} InvalidSpecifier:32
Raised when attempting to create a :class:`Specifier` with a specifier
string that is invalid.

>>> Specifier("lolwat")
Traceback (most recent call last):
    ...
packaging.specifiers.InvalidSpecifier: Invalid specifier: 'lolwat'
:::
:::{doc} Specifier:99
This class abstracts handling of version specifiers.

.. tip::

    It is generally not required to instantiate this manually. You should instead
    prefer to work with :class:`SpecifierSet` instead, which can parse
    comma-separated version specifiers (which is what package metadata contains).
:::
:::{doc} _version_split:630
Split version into components.

The split components are intended for version comparison. The logic does
not attempt to retain the original version string, so joining the
components back with :func:`_version_join` may not produce the original
version string.
:::
:::{doc} _version_join:652
Join split version components into a version string.

This function assumes the input came from :func:`_version_split`, where the
first component must be the epoch (either empty or numeric), and all other
components numeric.
:::
:::{doc} SpecifierSet:690
This class abstracts handling of a set of version specifiers.

It can be passed a single specifier (``>=3.0``), a comma-separated list of
specifiers (``>=3.0,!=3.1``), or no specifier at all.
:::
**Imports**: `__future__.annotations`, `abc`, `itertools`, `re`, `typing.Callable`, `typing.Iterable`, `typing.Iterator`, `typing.TypeVar`, `typing.Union`, `utils.canonicalize_version`, `version.Version`
**Type References**: [[BaseSpecifier]], [[CallableOperator]], [[InvalidSpecifier]], [[Specifier]], [[SpecifierSet]], [[UnparsedVersionVar]]

### Interface
- `_coerce_version`(version: UnparsedVersion) -> Version
- `_version_split`(version: str) -> list[str]
- `_version_join`(components: list[str]) -> str
- `_is_not_suffix`(segment: str) -> bool
- `_pad_version`(left: list[str], right: list[str]) -> tuple[<ast.Tuple object at 0x1262bb150>]
- `__str__`() -> str
- `__hash__`() -> int
- `__eq__`(other: object) -> bool
- `prereleases`(value: bool) -> None
- `contains`(item: UnparsedVersion, prereleases: bool | None, installed: bool | None) -> bool
- `filter`(iterable: Iterable[UnparsedVersionVar], prereleases: bool | None) -> Iterator[UnparsedVersionVar]
- `__init__`(specifiers: str, prereleases: bool | None) -> None
- `operator`() -> str
- `version`() -> str
- `__repr__`() -> str
- `_canonical_spec`() -> tuple[<ast.Tuple object at 0x12627f910>]
- `_get_operator`(op: str) -> CallableOperator
- `_compare_compatible`(prospective: Version, spec: str) -> bool
- `_compare_equal`(prospective: Version, spec: str) -> bool
- `_compare_not_equal`(prospective: Version, spec: str) -> bool
- `_compare_less_than_equal`(prospective: Version, spec: str) -> bool
- `_compare_greater_than_equal`(prospective: Version, spec: str) -> bool
- `_compare_less_than`(prospective: Version, spec_str: str) -> bool
- `_compare_greater_than`(prospective: Version, spec_str: str) -> bool
- `_compare_arbitrary`(prospective: Version, spec: str) -> bool
- `__contains__`(item: UnparsedVersion) -> bool
- `__and__`(other: SpecifierSet | str) -> SpecifierSet
- `__len__`() -> int
- `__iter__`() -> Iterator[Specifier]

### Implementation
**InvalidSpecifier**

**BaseSpecifier**

**Specifier**
  - operator_callable: CallableOperator
**SpecifierSet**
  - filtered: list[UnparsedVersionVar]
  - found_prereleases: list[UnparsedVersionVar]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/packaging/specifiers.py`  
**Dependencies**: `__future__.annotations`, `abc`, `itertools`, `re`, `typing.Callable`, `typing.Iterable`, `typing.Iterator`, `typing.TypeVar`, `typing.Union`, `utils.canonicalize_version`, `version.Version`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.packaging._elffile
:::{doc} ELFFile:41
Representation of an ELF executable.
:::
**Imports**: `__future__.annotations`, `enum`, `os`, `struct`, `typing.IO`
**Type References**: [[EIClass]], [[EIData]], [[ELFFile]], [[ELFInvalid]], [[EMachine]]

### Interface
- `__init__`(f: IO[bytes]) -> None
- `_read`(fmt: str) -> tuple[<ast.Tuple object at 0x126303090>]
- `interpreter`() -> str | None

### Implementation
**ELFInvalid**

**EIClass**

**EIData**

**EMachine**

**ELFFile**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/packaging/_elffile.py`  
**Dependencies**: `__future__.annotations`, `enum`, `os`, `struct`, `typing.IO`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.truststore._openssl
:::{doc} _capath_contains_certs:49
Check whether capath exists and contains certs in the expected format.
:::
**Imports**: `contextlib`, `os`, `re`, `ssl`, `typing`
### Interface
- `_configure_context`(ctx: ssl.SSLContext) -> typing.Iterator[None]
- `_capath_contains_certs`(capath: str) -> bool
- `_verify_peercerts_impl`(ssl_context: ssl.SSLContext, cert_chain: list[bytes], server_hostname: str | None) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/truststore/_openssl.py`  
**Dependencies**: `contextlib`, `os`, `re`, `ssl`, `typing`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.truststore._api
:::{doc} inject_into_ssl:32
Injects the :class:`truststore.SSLContext` into the ``ssl``
module by replacing :class:`ssl.SSLContext`.
:::
:::{doc} extract_from_ssl:47
Restores the :class:`ssl.SSLContext` class to its original state
:::
:::{doc} SSLContext:58
SSLContext API that uses system certificates on all platforms
:::
:::{doc} _verify_peercerts:299
Verifies the peer certificates from an SSLSocket or SSLObject
against the certificates in the OS trust store.
:::
**Imports**: `os`, `platform`, `socket`, `ssl`, `sys`, `typing`, `_ssl`, `_ssl_constants._original_SSLContext`, `_ssl_constants._original_super_SSLContext`, `_ssl_constants._truststore_SSLContext_dunder_class`, `_ssl_constants._truststore_SSLContext_super_class`, `_windows._configure_context`, `_windows._verify_peercerts_impl`, `pip._vendor.typing_extensions.Buffer`, `_macos._configure_context`, `_macos._verify_peercerts_impl`, `_openssl._configure_context`, `_openssl._verify_peercerts_impl`, `pip._vendor.urllib3.util.ssl_`, `pip._vendor.urllib3.util.ssl_`
**Type References**: [[SSLContext]], [[SSLObject]], [[TruststoreSSLObject]], [[TypeAlias]], [[ssl.SSLObject]], [[typing.TypeAlias]]

### Interface
- `inject_into_ssl`() -> None
- `extract_from_ssl`() -> None
- `_verify_peercerts`(sock_or_sslobj: ssl.SSLSocket | ssl.SSLObject, server_hostname: str | None) -> None
- `__class__`() -> type
- `__init__`(protocol: int) -> None
- `wrap_socket`(sock: socket.socket, server_side: bool, do_handshake_on_connect: bool, suppress_ragged_eofs: bool, server_hostname: str | None, session: ssl.SSLSession | None) -> ssl.SSLSocket
- `wrap_bio`(incoming: ssl.MemoryBIO, outgoing: ssl.MemoryBIO, server_side: bool, server_hostname: str | None, session: ssl.SSLSession | None) -> ssl.SSLObject
- `load_verify_locations`(cafile: str | bytes | os.PathLike[str] | os.PathLike[bytes] | None, capath: str | bytes | os.PathLike[str] | os.PathLike[bytes] | None, cadata: typing.Union[<ast.Tuple object at 0x126316710>]) -> None
- `load_cert_chain`(certfile: _StrOrBytesPath, keyfile: _StrOrBytesPath | None, password: _PasswordType | None) -> None
- `load_default_certs`(purpose: ssl.Purpose) -> None
- `set_alpn_protocols`(alpn_protocols: typing.Iterable[str]) -> None
- `set_npn_protocols`(npn_protocols: typing.Iterable[str]) -> None
- `set_ciphers`(__cipherlist: str) -> None
- `get_ciphers`() -> typing.Any
- `session_stats`() -> dict[<ast.Tuple object at 0x126350e90>]
- `cert_store_stats`() -> dict[<ast.Tuple object at 0x1263516d0>]
- `set_default_verify_paths`() -> None
- `get_ca_certs`(binary_form: bool) -> list[typing.Any] | list[bytes]
- `check_hostname`(value: bool) -> None
- `hostname_checks_common_name`(value: bool) -> None
- `keylog_filename`(value: str) -> None
- `maximum_version`(value: ssl.TLSVersion) -> None
- `minimum_version`(value: ssl.TLSVersion) -> None
- `options`(value: ssl.Options) -> None
- `post_handshake_auth`(value: bool) -> None
- `protocol`() -> ssl._SSLMethod
- `security_level`() -> int
- `verify_flags`(value: ssl.VerifyFlags) -> None
- `verify_mode`(value: ssl.VerifyMode) -> None
- `_get_unverified_chain_bytes`(sslobj: ssl.SSLObject) -> list[bytes]
- `do_handshake`() -> None

### Implementation
**SSLContext**

**TruststoreSSLObject**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/truststore/_api.py`  
**Dependencies**: `os`, `platform`, `socket`, `ssl`, `sys`, `typing`, `_ssl`, `_ssl_constants._original_SSLContext`, `_ssl_constants._original_super_SSLContext`, `_ssl_constants._truststore_SSLContext_dunder_class`, `_ssl_constants._truststore_SSLContext_super_class`, `_windows._configure_context`, `_windows._verify_peercerts_impl`, `pip._vendor.typing_extensions.Buffer`, `_macos._configure_context`, `_macos._verify_peercerts_impl`, `_openssl._configure_context`, `_openssl._verify_peercerts_impl`, `pip._vendor.urllib3.util.ssl_`, `pip._vendor.urllib3.util.ssl_`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.truststore._macos
:::{doc} _load_cdll:31
Loads a CDLL by name, falling back to known path on 10.16+
:::
:::{doc} _handle_osstatus:223
Raises an error if the OSStatus value is non-zero.
:::
:::{doc} CFConst:283
CoreFoundation constants
:::
:::{doc} _bytes_to_cf_string:300
Given a Python binary data, create a CFString.
The string must be CFReleased by the caller.
:::
:::{doc} _cf_string_ref_to_str:314
Creates a Unicode string from a CFString object. Used entirely for error
reporting.
Yes, it annoys me quite a lot that this function is this complex.
:::
:::{doc} _der_certs_to_cf_cert_array:337
Builds a CFArray of SecCertificateRefs from a list of DER-encoded certificates.
Responsibility of the caller to call CoreFoundation.CFRelease on the CFArray.
:::
:::{doc} _verify_peercerts_impl_macos_10_13:469
Verify using 'SecTrustEvaluate' API for macOS 10.13 and earlier.
macOS 10.14 added the 'SecTrustEvaluateWithError' API.
:::
:::{doc} _verify_peercerts_impl_macos_10_14:513
Verify using 'SecTrustEvaluateWithError' API for macOS 10.14+.
:::
**Imports**: `contextlib`, `ctypes`, `platform`, `ssl`, `typing`, `ctypes.CDLL`, `ctypes.POINTER`, `ctypes.c_bool`, `ctypes.c_char_p`, `ctypes.c_int32`, `ctypes.c_long`, `ctypes.c_uint32`, `ctypes.c_ulong`, `ctypes.c_void_p`, `ctypes.util.find_library`, `_ssl_constants._set_ssl_context_verify_mode`
**Type References**: [[CFConst]], [[None]]

### Interface
- `_load_cdll`(name: str, macos10_16_path: str) -> CDLL
- `_handle_osstatus`(result: OSStatus, _: typing.Any, args: typing.Any) -> typing.Any
- `_bytes_to_cf_data_ref`(value: bytes) -> CFDataRef
- `_bytes_to_cf_string`(value: bytes) -> CFString
- `_cf_string_ref_to_str`(cf_string_ref: CFStringRef) -> str | None
- `_der_certs_to_cf_cert_array`(certs: list[bytes]) -> CFMutableArrayRef
- `_configure_context`(ctx: ssl.SSLContext) -> typing.Iterator[None]
- `_verify_peercerts_impl`(ssl_context: ssl.SSLContext, cert_chain: list[bytes], server_hostname: str | None) -> None
- `_verify_peercerts_impl_macos_10_13`(ssl_context: ssl.SSLContext, sec_trust_ref: typing.Any) -> None
- `_verify_peercerts_impl_macos_10_14`(ssl_context: ssl.SSLContext, sec_trust_ref: typing.Any) -> None

### Implementation
**CFConst**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/truststore/_macos.py`  
**Dependencies**: `contextlib`, `ctypes`, `platform`, `ssl`, `typing`, `ctypes.CDLL`, `ctypes.POINTER`, `ctypes.c_bool`, `ctypes.c_char_p`, `ctypes.c_int32`, `ctypes.c_long`, `ctypes.c_uint32`, `ctypes.c_ulong`, `ctypes.c_void_p`, `ctypes.util.find_library`, `_ssl_constants._set_ssl_context_verify_mode`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.truststore

**Imports**: `sys`, `_api.SSLContext`, `_api.extract_from_ssl`, `_api.inject_into_ssl`, `ssl`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/truststore/__init__.py`  
**Dependencies**: `sys`, `_api.SSLContext`, `_api.extract_from_ssl`, `_api.inject_into_ssl`, `ssl`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.truststore._ssl_constants

**Imports**: `ssl`, `sys`, `typing`
**Type References**: [[Optional]], [[typing.Optional]]

### Interface
- `_set_ssl_context_verify_mode`(ssl_context: ssl.SSLContext, verify_mode: ssl.VerifyMode) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/truststore/_ssl_constants.py`  
**Dependencies**: `ssl`, `sys`, `typing`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.truststore._windows
:::{doc} _verify_peercerts_impl:323
Verify the cert_chain from the server using Windows APIs.
:::
**Imports**: `contextlib`, `ssl`, `typing`, `ctypes.WinDLL`, `ctypes.WinError`, `ctypes.POINTER`, `ctypes.Structure`, `ctypes.c_char_p`, `ctypes.c_ulong`, `ctypes.c_void_p`, `ctypes.c_wchar_p`, `ctypes.cast`, `ctypes.create_unicode_buffer`, `ctypes.pointer`, `ctypes.sizeof`, `ctypes.wintypes.BOOL`, `ctypes.wintypes.DWORD`, `ctypes.wintypes.HANDLE`, `ctypes.wintypes.LONG`, `ctypes.wintypes.LPCSTR`, `ctypes.wintypes.LPCVOID`, `ctypes.wintypes.LPCWSTR`, `ctypes.wintypes.LPFILETIME`, `ctypes.wintypes.LPSTR`, `ctypes.wintypes.LPWSTR`, `typing.TYPE_CHECKING`, `typing.Any`, `_ssl_constants._set_ssl_context_verify_mode`
**Type References**: [[CERT_CHAIN_CONTEXT]], [[CERT_CHAIN_ELEMENT]], [[CERT_CHAIN_ENGINE_CONFIG]], [[CERT_CHAIN_PARA]], [[CERT_CHAIN_POLICY_PARA]], [[CERT_CHAIN_POLICY_STATUS]], [[CERT_CONTEXT]], [[CERT_ENHKEY_USAGE]], [[CERT_SIMPLE_CHAIN]], [[CERT_TRUST_STATUS]], [[CERT_USAGE_MATCH]], [[None]], [[SSL_EXTRA_CERT_CHAIN_POLICY_PARA]]

### Interface
- `_handle_win_error`(result: bool, _: Any, args: Any) -> Any
- `_verify_peercerts_impl`(ssl_context: ssl.SSLContext, cert_chain: list[bytes], server_hostname: str | None) -> None
- `_get_and_verify_cert_chain`(ssl_context: ssl.SSLContext, hChainEngine: HCERTCHAINENGINE | None, hIntermediateCertStore: HCERTSTORE, pPeerCertContext: c_void_p, pChainPara: PCERT_CHAIN_PARA, server_hostname: str | None, chain_flags: int) -> None
- `_verify_using_custom_ca_certs`(ssl_context: ssl.SSLContext, custom_ca_certs: list[bytes], hIntermediateCertStore: HCERTSTORE, pPeerCertContext: c_void_p, pChainPara: PCERT_CHAIN_PARA, server_hostname: str | None, chain_flags: int) -> None
- `_configure_context`(ctx: ssl.SSLContext) -> typing.Iterator[None]

### Implementation
**CERT_CONTEXT**

**CERT_ENHKEY_USAGE**

**CERT_USAGE_MATCH**

**CERT_CHAIN_PARA**

**CERT_TRUST_STATUS**

**CERT_CHAIN_ELEMENT**

**CERT_SIMPLE_CHAIN**

**CERT_CHAIN_CONTEXT**

**SSL_EXTRA_CERT_CHAIN_POLICY_PARA**

**CERT_CHAIN_POLICY_PARA**

**CERT_CHAIN_POLICY_STATUS**

**CERT_CHAIN_ENGINE_CONFIG**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/truststore/_windows.py`  
**Dependencies**: `contextlib`, `ssl`, `typing`, `ctypes.WinDLL`, `ctypes.WinError`, `ctypes.POINTER`, `ctypes.Structure`, `ctypes.c_char_p`, `ctypes.c_ulong`, `ctypes.c_void_p`, `ctypes.c_wchar_p`, `ctypes.cast`, `ctypes.create_unicode_buffer`, `ctypes.pointer`, `ctypes.sizeof`, `ctypes.wintypes.BOOL`, `ctypes.wintypes.DWORD`, `ctypes.wintypes.HANDLE`, `ctypes.wintypes.LONG`, `ctypes.wintypes.LPCSTR`, `ctypes.wintypes.LPCVOID`, `ctypes.wintypes.LPCWSTR`, `ctypes.wintypes.LPFILETIME`, `ctypes.wintypes.LPSTR`, `ctypes.wintypes.LPWSTR`, `typing.TYPE_CHECKING`, `typing.Any`, `_ssl_constants._set_ssl_context_verify_mode`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.msgpack
:::{doc} pack:20
Pack object `o` and write it to `stream`

See :class:`Packer` for options.
:::
:::{doc} packb:30
Pack object `o` and return packed bytes

See :class:`Packer` for options.
:::
:::{doc} unpack:39
Unpack an object from `stream`.

Raises `ExtraData` when `stream` contains extra bytes.
See :class:`Unpacker` for options.
:::
**Imports**: `exceptions.*`, `ext.ExtType`, `ext.Timestamp`, `os`, `fallback.Packer`, `fallback.unpackb`, `fallback.Unpacker`, `_cmsgpack.Packer`, `_cmsgpack.unpackb`, `_cmsgpack.Unpacker`, `fallback.Packer`, `fallback.unpackb`, `fallback.Unpacker`
### Interface
- `pack`() -> Any
- `packb`() -> Any
- `unpack`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/msgpack/__init__.py`  
**Dependencies**: `exceptions.*`, `ext.ExtType`, `ext.Timestamp`, `os`, `fallback.Packer`, `fallback.unpackb`, `fallback.Unpacker`, `_cmsgpack.Packer`, `_cmsgpack.unpackb`, `_cmsgpack.Unpacker`, `fallback.Packer`, `fallback.unpackb`, `fallback.Unpacker`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.msgpack.exceptions
:::{doc} UnpackException:1
Base class for some exceptions raised while unpacking.

NOTE: unpack may raise exception other than subclass of
UnpackException.  If you want to catch all error, catch
Exception instead.
:::
:::{doc} FormatError:18
Invalid msgpack format
:::
:::{doc} StackError:22
Too nested
:::
:::{doc} ExtraData:30
ExtraData is raised when there is trailing data.

This exception is raised while only one-shot (not streaming)
unpack.
:::

**Type References**: [[BufferFull]], [[ExtraData]], [[FormatError]], [[OutOfData]], [[StackError]], [[UnpackException]]

### Interface
- `__init__`() -> Any
- `__str__`() -> Any

### Implementation
**UnpackException**

**BufferFull**

**OutOfData**

**FormatError**

**StackError**

**ExtraData**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/msgpack/exceptions.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.msgpack.fallback
:::{doc} unpackb:77
Unpack an object from `packed`.

Raises ``ExtraData`` when *packed* contains extra bytes.
Raises ``ValueError`` when *packed* is incomplete.
Raises ``FormatError`` when *packed* is not valid msgpack.
Raises ``StackError`` when *packed* contains too nested.
Other exceptions can be raised during unpacking.

See :class:`Unpacker` for options.
:::
:::{doc} Unpacker:135
Streaming unpacker.

Arguments:

:param file_like:
    File-like object having `.read(n)` method.
    If specified, unpacker reads serialized data from it and `.feed()` is not usable.

:param int read_size:
    Used as `file_like.read(read_size)`. (default: `min(16*1024, max_buffer_size)`)

:param bool use_list:
    If true, unpack msgpack array to Python list.
    Otherwise, unpack to Python tuple. (default: True)

:param bool raw:
    If true, unpack msgpack raw to Python bytes.
    Otherwise, unpack to Python str by decoding with UTF-8 encoding (default).

:param int timestamp:
    Control how timestamp type is unpacked:

        0 - Timestamp
        1 - float  (Seconds from the EPOCH)
        2 - int  (Nanoseconds from the EPOCH)
        3 - datetime.datetime  (UTC).

:param bool strict_map_key:
    If true (default), only str or bytes are accepted for map (dict) keys.

:param object_hook:
    When specified, it should be callable.
    Unpacker calls it with a dict argument after unpacking msgpack map.
    (See also simplejson)

:param object_pairs_hook:
    When specified, it should be callable.
    Unpacker calls it with a list of key-value pairs after unpacking msgpack map.
    (See also simplejson)

:param str unicode_errors:
    The error handler for decoding unicode. (default: 'strict')
    This option should be used only when you have msgpack data which
    contains invalid UTF-8 string.

:param int max_buffer_size:
    Limits size of data waiting unpacked.  0 means 2**32-1.
    The default value is 100*1024*1024 (100MiB).
    Raises `BufferFull` exception when it is insufficient.
    You should set this parameter when unpacking data from untrusted source.

:param int max_str_len:
    Deprecated, use *max_buffer_size* instead.
    Limits max length of str. (default: max_buffer_size)

:param int max_bin_len:
    Deprecated, use *max_buffer_size* instead.
    Limits max length of bin. (default: max_buffer_size)

:param int max_array_len:
    Limits max length of array.
    (default: max_buffer_size)

:param int max_map_len:
    Limits max length of map.
    (default: max_buffer_size//2)

:param int max_ext_len:
    Deprecated, use *max_buffer_size* instead.
    Limits max size of ext type.  (default: max_buffer_size)

Example of streaming deserialize from file-like object::

    unpacker = Unpacker(file_like)
    for o in unpacker:
        process(o)

Example of streaming deserialize from socket::

    unpacker = Unpacker()
    while True:
        buf = sock.recv(1024**2)
        if not buf:
            break
        unpacker.feed(buf)
        for o in unpacker:
            process(o)

Raises ``ExtraData`` when *packed* contains extra bytes.
Raises ``OutOfData`` when *packed* is incomplete.
Raises ``FormatError`` when *packed* is not valid msgpack.
Raises ``StackError`` when *packed* contains too nested.
Other exceptions can be raised during unpacking.
:::
:::{doc} Packer:607
MessagePack Packer

Usage::

    packer = Packer()
    astream.write(packer.pack(a))
    astream.write(packer.pack(b))

Packer's constructor has some keyword arguments:

:param default:
    When specified, it should be callable.
    Convert user type to builtin type that Packer supports.
    See also simplejson's document.

:param bool use_single_float:
    Use single precision float type for float. (default: False)

:param bool autoreset:
    Reset buffer after each pack and return its content as `bytes`. (default: True).
    If set this to false, use `bytes()` to get content and `.reset()` to clear buffer.

:param bool use_bin_type:
    Use bin type introduced in msgpack spec 2.0 for bytes.
    It also enables str8 type for unicode. (default: True)

:param bool strict_types:
    If set to true, types will be checked to be exact. Derived classes
    from serializable types will not be serialized and will be
    treated as unsupported type and forwarded to default.
    Additionally tuples will not be serialized as lists.
    This is useful when trying to implement accurate serialization
    for python types.

:param bool datetime:
    If set to true, datetime with tzinfo is packed into Timestamp type.
    Note that the tzinfo is stripped in the timestamp.
    You can get UTC datetime with `timestamp=3` option of the Unpacker.

:param str unicode_errors:
    The error handler for encoding unicode. (default: 'strict')
    DO NOT USE THIS!!  This option is kept for very specific usage.

Example of streaming deserialize from file-like object::

    unpacker = Unpacker(file_like)
    for o in unpacker:
        process(o)

Example of streaming deserialize from socket::

    unpacker = Unpacker()
    while True:
        buf = sock.recv(1024**2)
        if not buf:
            break
        unpacker.feed(buf)
        for o in unpacker:
            process(o)

Raises ``ExtraData`` when *packed* contains extra bytes.
Raises ``OutOfData`` when *packed* is incomplete.
Raises ``FormatError`` when *packed* is not valid msgpack.
Raises ``StackError`` when *packed* contains too nested.
Other exceptions can be raised during unpacking.
:::
**Imports**: `datetime.datetime`, `sys`, `struct`, `exceptions.BufferFull`, `exceptions.OutOfData`, `exceptions.ExtraData`, `exceptions.FormatError`, `exceptions.StackError`, `ext.ExtType`, `ext.Timestamp`, `__pypy__.newlist_hint`, `io.BytesIO`, `__pypy__.builders.BytesBuilder`, `__pypy__.builders.StringBuilder`
**Type References**: [[Packer]], [[StringIO]], [[Unpacker]]

### Interface
- `_check_type_strict`() -> Any
- `_get_data_from_buffer`() -> Any
- `unpackb`() -> Any
- `__init__`() -> Any
- `feed`() -> Any
- `_consume`() -> Any
- `_got_extradata`() -> Any
- `_get_extradata`() -> Any
- `read_bytes`() -> Any
- `_read`() -> Any
- `_reserve`() -> Any
- `_read_header`() -> Any
- `_unpack`() -> Any
- `__iter__`() -> Any
- `__next__`() -> Any
- `skip`() -> Any
- `unpack`() -> Any
- `read_array_header`() -> Any
- `read_map_header`() -> Any
- `tell`() -> Any
- `_pack`() -> Any
- `pack`() -> Any
- `pack_map_pairs`() -> Any
- `pack_array_header`() -> Any
- `pack_map_header`() -> Any
- `pack_ext_type`() -> Any
- `_pack_array_header`() -> Any
- `_pack_map_header`() -> Any
- `_pack_map_pairs`() -> Any
- `_pack_raw_header`() -> Any
- `_pack_bin_header`() -> Any
- `bytes`() -> Any
- `reset`() -> Any
- `getbuffer`() -> Any
- `write`() -> Any
- `getvalue`() -> Any

### Implementation
**Unpacker**

**Packer**

**StringIO**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/msgpack/fallback.py`  
**Dependencies**: `datetime.datetime`, `sys`, `struct`, `exceptions.BufferFull`, `exceptions.OutOfData`, `exceptions.ExtraData`, `exceptions.FormatError`, `exceptions.StackError`, `ext.ExtType`, `ext.Timestamp`, `__pypy__.newlist_hint`, `io.BytesIO`, `__pypy__.builders.BytesBuilder`, `__pypy__.builders.StringBuilder`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.msgpack.ext
:::{doc} ExtType:6
ExtType represents ext type in msgpack.
:::
:::{doc} Timestamp:19
Timestamp represents the Timestamp extension type in msgpack.

When built with Cython, msgpack uses C methods to pack and unpack `Timestamp`.
When using pure-Python msgpack, :func:`to_bytes` and :func:`from_bytes` are used to pack and
unpack `Timestamp`.

This class is immutable: Do not override seconds and nanoseconds.
:::
**Imports**: `collections.namedtuple`, `datetime`, `struct`
**Type References**: [[ExtType]], [[Timestamp]]

### Interface
- `__new__`() -> Any
- `__init__`() -> Any
- `__repr__`() -> Any
- `__eq__`() -> Any
- `__ne__`() -> Any
- `__hash__`() -> Any
- `from_bytes`() -> Any
- `to_bytes`() -> Any
- `from_unix`() -> Any
- `to_unix`() -> Any
- `from_unix_nano`() -> Any
- `to_unix_nano`() -> Any
- `to_datetime`() -> Any
- `from_datetime`() -> Any

### Implementation
**ExtType**

**Timestamp**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/msgpack/ext.py`  
**Dependencies**: `collections.namedtuple`, `datetime`, `struct`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.modeline
:::{doc} get_filetype_from_buffer:28
Scan the buffer for modelines and return filetype if one is found.
:::
**Imports**: `re`
### Interface
- `get_filetype_from_line`() -> Any
- `get_filetype_from_buffer`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/modeline.py`  
**Dependencies**: `re`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.console
:::{doc} ansiformat:48
Format ``text`` with a color and/or some attributes::

    color       normal color
    *color*     bold color
    _color_     underlined color
    +color+     blinking color
:::

### Interface
- `reset_color`() -> Any
- `colorize`() -> Any
- `ansiformat`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/console.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.scanner
:::{doc} EndOfText:20
Raise if end of text is reached and the user
tried to call a match function.
:::
:::{doc} Scanner:27
Simple scanner

All method patterns are regular expression strings (not
compiled expressions!)
:::
**Imports**: `re`
**Type References**: [[EndOfText]], [[Scanner]]

### Interface
- `__init__`() -> Any
- `eos`() -> Any
- `check`() -> Any
- `test`() -> Any
- `scan`() -> Any
- `get_char`() -> Any
- `__repr__`() -> Any

### Implementation
**EndOfText**

**Scanner**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/scanner.py`  
**Dependencies**: `re`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatter
:::{doc} Formatter:25
Converts a token stream to text.

Formatters should have attributes to help selecting them. These
are similar to the corresponding :class:`~pygments.lexer.Lexer`
attributes.

.. autoattribute:: name
   :no-value:

.. autoattribute:: aliases
   :no-value:

.. autoattribute:: filenames
   :no-value:

You can pass options as keyword arguments to the constructor.
All formatters accept these basic options:

``style``
    The style to use, can be a string or a Style subclass
    (default: "default"). Not used by e.g. the
    TerminalFormatter.
``full``
    Tells the formatter to output a "full" document, i.e.
    a complete self-contained document. This doesn't have
    any effect for some formatters (default: false).
``title``
    If ``full`` is true, the title that should be used to
    caption the document (default: '').
``encoding``
    If given, must be an encoding name. This will be used to
    convert the Unicode token strings to byte strings in the
    output. If it is "" or None, Unicode strings will be written
    to the output file, which most file-like objects do not
    support (default: None).
``outencoding``
    Overrides ``encoding`` if given.
:::
**Imports**: `codecs`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.styles.get_style_by_name`
**Type References**: [[Formatter]]

### Interface
- `_lookup_style`() -> Any
- `__init__`() -> Any
- `get_style_defs`() -> Any
- `format`() -> Any
- `__class_getitem__`() -> Any

### Implementation
**Formatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatter.py`  
**Dependencies**: `codecs`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.styles.get_style_by_name`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.token
:::{doc} is_token_subtype:85
Return True if ``ttype`` is a subtype of ``other``.

exists for backwards compatibility. use ``ttype in other`` now.
:::
:::{doc} string_to_tokentype:94
Convert a string into a token type::

    >>> string_to_token('String.Double')
    Token.Literal.String.Double
    >>> string_to_token('Token.Literal.Number')
    Token.Literal.Number
    >>> string_to_token('')
    Token

Tokens that are already tokens are returned unchanged:

    >>> string_to_token(String)
    Token.Literal.String
:::

**Type References**: [[_TokenType]]

### Interface
- `is_token_subtype`() -> Any
- `string_to_tokentype`() -> Any
- `split`() -> Any
- `__init__`() -> Any
- `__contains__`() -> Any
- `__getattr__`() -> Any
- `__repr__`() -> Any
- `__copy__`() -> Any
- `__deepcopy__`() -> Any

### Implementation
**_TokenType**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/token.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.style

**Imports**: `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.token.STANDARD_TYPES`
**Type References**: [[Style]], [[StyleMeta]]

### Interface
- `__new__`() -> Any
- `style_for_token`() -> Any
- `list_styles`() -> Any
- `styles_token`() -> Any
- `__iter__`() -> Any
- `__len__`() -> Any
- `colorformat`() -> Any

### Implementation
**StyleMeta**

**Style**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/style.py`  
**Dependencies**: `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.token.STANDARD_TYPES`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.util
:::{doc} ClassNotFound:30
Raised if one of the lookup functions didn't find a matching class.
:::
:::{doc} OptionError:34
This exception will be raised by all option processing functions if
the type or value of the argument is not correct.
:::
:::{doc} get_choice_opt:40
If the key `optname` from the dictionary is not in the sequence
`allowed`, raise an error, otherwise return it.
:::
:::{doc} get_bool_opt:53
Intuitively, this is `options.get(optname, default)`, but restricted to
Boolean value. The Booleans can be represented as string, in order to accept
Boolean value from the command line arguments. If the key `optname` is
present in the dictionary `options` and is not associated with a Boolean,
raise an `OptionError`. If it is absent, `default` is returned instead.

The valid string values for ``True`` are ``1``, ``yes``, ``true`` and
``on``, the ones for ``False`` are ``0``, ``no``, ``false`` and ``off``
(matched case-insensitively).
:::
:::{doc} get_int_opt:82
As :func:`get_bool_opt`, but interpret the value as an integer.
:::
:::{doc} get_list_opt:94
If the key `optname` from the dictionary `options` is a string,
split it at whitespace and return it. If it is already a list
or a tuple, it is returned as a list.
:::
:::{doc} make_analysator:122
Return a static text analyser function that returns float values.
:::
:::{doc} shebang_matches:139
Check if the given regular expression matches the last part of the
shebang if one exists.

    >>> from pygments.util import shebang_matches
    >>> shebang_matches('#!/usr/bin/env python', r'python(2\.\d)?')
    True
    >>> shebang_matches('#!/usr/bin/python2.4', r'python(2\.\d)?')
    True
    >>> shebang_matches('#!/usr/bin/python-ruby', r'python(2\.\d)?')
    False
    >>> shebang_matches('#!/usr/bin/python/ruby', r'python(2\.\d)?')
    False
    >>> shebang_matches('#!/usr/bin/startsomethingwith python',
    ...                 r'python(2\.\d)?')
    True

It also checks for common windows executable file extensions::

    >>> shebang_matches('#!C:\\Python2.4\\Python.exe', r'python(2\.\d)?')
    True

Parameters (``'-f'`` or ``'--foo'`` are ignored so ``'perl'`` does
the same as ``'perl -e'``)

Note that this method automatically searches the whole string (eg:
the regular expression is wrapped in ``'^$'``)
:::
:::{doc} doctype_matches:184
Check if the doctype matches a regular expression (if present).

Note that this method only checks the first part of a DOCTYPE.
eg: 'html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"'
:::
:::{doc} html_doctype_matches:197
Check if the file looks like it has a html doctype.
:::
:::{doc} looks_like_xml:205
Check if a doctype exists or if we have some tags.
:::
:::{doc} surrogatepair:221
Given a unicode character code with length greater than 16 bits,
return the two 16 bit surrogate pair.
:::
:::{doc} format_lines:230
Formats a sequence of strings for output.
:::
:::{doc} duplicates_removed:249
Returns a list with duplicates removed from the iterable `it`.

Order is preserved.
:::
:::{doc} Future:265
Generic class to defer some work.

Handled specially in RegexLexerMeta, to support regex string construction at
first use.
:::
:::{doc} guess_decode:275
Decode *text* with guessed encoding.

First try UTF-8; this should fail for non-UTF-8 encodings.
Then try the preferred locale encoding.
Fall back to latin-1, which always works.
:::
:::{doc} guess_decode_from_terminal:296
Decode *text* coming from terminal *term*.

First try the terminal encoding, if given.
Then try UTF-8.  Then try the preferred locale encoding.
Fall back to latin-1, which always works.
:::
:::{doc} terminal_encoding:313
Return our best guess of encoding for the given *term*.
:::
**Imports**: `re`, `io.TextIOWrapper`, `locale`, `locale`
**Type References**: [[ClassNotFound]], [[Future]], [[OptionError]], [[UnclosingTextIOWrapper]]

### Interface
- `get_choice_opt`() -> Any
- `get_bool_opt`() -> Any
- `get_int_opt`() -> Any
- `get_list_opt`() -> Any
- `docstring_headline`() -> Any
- `make_analysator`() -> Any
- `shebang_matches`() -> Any
- `doctype_matches`() -> Any
- `html_doctype_matches`() -> Any
- `looks_like_xml`() -> Any
- `surrogatepair`() -> Any
- `format_lines`() -> Any
- `duplicates_removed`() -> Any
- `guess_decode`() -> Any
- `guess_decode_from_terminal`() -> Any
- `terminal_encoding`() -> Any
- `text_analyse`() -> Any
- `get`() -> Any
- `close`() -> Any

### Implementation
**ClassNotFound**

**OptionError**

**Future**

**UnclosingTextIOWrapper**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/util.py`  
**Dependencies**: `re`, `io.TextIOWrapper`, `locale`, `locale`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.sphinxext
:::{doc} PygmentsDoc:60
A directive to collect all lexers/formatters/filters and generate
autoclass directives for them.
:::
**Imports**: `sys`, `docutils.nodes`, `docutils.statemachine.ViewList`, `docutils.parsers.rst.Directive`, `sphinx.util.nodes.nested_parse_with_titles`, `pip._vendor.pygments.lexers._mapping.LEXERS`, `pip._vendor.pygments.lexers.find_lexer_class`, `pip._vendor.pygments.lexers._mapping.LEXERS`, `pip._vendor.pygments`, `inspect`, `pathlib`, `pip._vendor.pygments.formatters.FORMATTERS`, `pip._vendor.pygments.filters.FILTERS`
**Type References**: [[PygmentsDoc]]

### Interface
- `setup`() -> Any
- `run`() -> Any
- `document_lexers_overview`() -> Any
- `document_lexers`() -> Any
- `document_formatters`() -> Any
- `document_filters`() -> Any
- `format_link`() -> Any
- `write_row`() -> Any
- `write_seperator`() -> Any

### Implementation
**PygmentsDoc**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/sphinxext.py`  
**Dependencies**: `sys`, `docutils.nodes`, `docutils.statemachine.ViewList`, `docutils.parsers.rst.Directive`, `sphinx.util.nodes.nested_parse_with_titles`, `pip._vendor.pygments.lexers._mapping.LEXERS`, `pip._vendor.pygments.lexers.find_lexer_class`, `pip._vendor.pygments.lexers._mapping.LEXERS`, `pip._vendor.pygments`, `inspect`, `pathlib`, `pip._vendor.pygments.formatters.FORMATTERS`, `pip._vendor.pygments.filters.FILTERS`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.cmdline
:::{doc} main:528
Main command line entry point.
:::
**Imports**: `os`, `sys`, `shutil`, `argparse`, `textwrap.dedent`, `pip._vendor.pygments.__version__`, `pip._vendor.pygments.highlight`, `pip._vendor.pygments.util.ClassNotFound`, `pip._vendor.pygments.util.OptionError`, `pip._vendor.pygments.util.docstring_headline`, `pip._vendor.pygments.util.guess_decode`, `pip._vendor.pygments.util.guess_decode_from_terminal`, `pip._vendor.pygments.util.terminal_encoding`, `pip._vendor.pygments.util.UnclosingTextIOWrapper`, `pip._vendor.pygments.lexers.get_all_lexers`, `pip._vendor.pygments.lexers.get_lexer_by_name`, `pip._vendor.pygments.lexers.guess_lexer`, `pip._vendor.pygments.lexers.load_lexer_from_file`, `pip._vendor.pygments.lexers.get_lexer_for_filename`, `pip._vendor.pygments.lexers.find_lexer_class_for_filename`, `pip._vendor.pygments.lexers.special.TextLexer`, `pip._vendor.pygments.formatters.latex.LatexEmbeddedLexer`, `pip._vendor.pygments.formatters.latex.LatexFormatter`, `pip._vendor.pygments.formatters.get_all_formatters`, `pip._vendor.pygments.formatters.get_formatter_by_name`, `pip._vendor.pygments.formatters.load_formatter_from_file`, `pip._vendor.pygments.formatters.get_formatter_for_filename`, `pip._vendor.pygments.formatters.find_formatter_class`, `pip._vendor.pygments.formatters.terminal.TerminalFormatter`, `pip._vendor.pygments.formatters.terminal256.Terminal256Formatter`, `pip._vendor.pygments.formatters.terminal256.TerminalTrueColorFormatter`, `pip._vendor.pygments.filters.get_all_filters`, `pip._vendor.pygments.filters.find_filter_class`, `pip._vendor.pygments.styles.get_all_styles`, `pip._vendor.pygments.styles.get_style_by_name`, `json`, `colorama.initialise`, `traceback`
**Type References**: [[HelpFormatter]]

### Interface
- `_parse_options`() -> Any
- `_parse_filters`() -> Any
- `_print_help`() -> Any
- `_print_list`() -> Any
- `_print_list_as_json`() -> Any
- `main_inner`() -> Any
- `main`() -> Any
- `is_only_option`() -> Any
- `__init__`() -> Any

### Implementation
**HelpFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/cmdline.py`  
**Dependencies**: `os`, `sys`, `shutil`, `argparse`, `textwrap.dedent`, `pip._vendor.pygments.__version__`, `pip._vendor.pygments.highlight`, `pip._vendor.pygments.util.ClassNotFound`, `pip._vendor.pygments.util.OptionError`, `pip._vendor.pygments.util.docstring_headline`, `pip._vendor.pygments.util.guess_decode`, `pip._vendor.pygments.util.guess_decode_from_terminal`, `pip._vendor.pygments.util.terminal_encoding`, `pip._vendor.pygments.util.UnclosingTextIOWrapper`, `pip._vendor.pygments.lexers.get_all_lexers`, `pip._vendor.pygments.lexers.get_lexer_by_name`, `pip._vendor.pygments.lexers.guess_lexer`, `pip._vendor.pygments.lexers.load_lexer_from_file`, `pip._vendor.pygments.lexers.get_lexer_for_filename`, `pip._vendor.pygments.lexers.find_lexer_class_for_filename`, `pip._vendor.pygments.lexers.special.TextLexer`, `pip._vendor.pygments.formatters.latex.LatexEmbeddedLexer`, `pip._vendor.pygments.formatters.latex.LatexFormatter`, `pip._vendor.pygments.formatters.get_all_formatters`, `pip._vendor.pygments.formatters.get_formatter_by_name`, `pip._vendor.pygments.formatters.load_formatter_from_file`, `pip._vendor.pygments.formatters.get_formatter_for_filename`, `pip._vendor.pygments.formatters.find_formatter_class`, `pip._vendor.pygments.formatters.terminal.TerminalFormatter`, `pip._vendor.pygments.formatters.terminal256.Terminal256Formatter`, `pip._vendor.pygments.formatters.terminal256.TerminalTrueColorFormatter`, `pip._vendor.pygments.filters.get_all_filters`, `pip._vendor.pygments.filters.find_filter_class`, `pip._vendor.pygments.styles.get_all_styles`, `pip._vendor.pygments.styles.get_style_by_name`, `json`, `colorama.initialise`, `traceback`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments
:::{doc} lex:35
Lex `code` with the `lexer` (must be a `Lexer` instance)
and return an iterable of tokens. Currently, this only calls
`lexer.get_tokens()`.
:::
:::{doc} format:52
Format ``tokens`` (an iterable of tokens) with the formatter ``formatter``
(a `Formatter` instance).

If ``outfile`` is given and a valid file object (an object with a
``write`` method), the result will be written to it, otherwise it
is returned as a string.
:::
:::{doc} highlight:77
This is the most high-level highlighting function. It combines `lex` and
`format` in one function.
:::
**Imports**: `io.StringIO`, `io.BytesIO`, `pip._vendor.pygments.lexer.RegexLexer`, `pip._vendor.pygments.formatter.Formatter`
### Interface
- `lex`() -> Any
- `format`() -> Any
- `highlight`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/__init__.py`  
**Dependencies**: `io.StringIO`, `io.BytesIO`, `pip._vendor.pygments.lexer.RegexLexer`, `pip._vendor.pygments.formatter.Formatter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.unistring

**Imports**: `unicodedata`
### Interface
- `combine`() -> Any
- `allexcept`() -> Any
- `_handle_runs`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/unistring.py`  
**Dependencies**: `unicodedata`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.lexer
:::{doc} LexerMeta:37
This metaclass automagically converts ``analyse_text`` methods into
static methods which always return float values.
:::
:::{doc} Lexer:49
Lexer for a specific language.

See also :doc:`lexerdevelopment`, a high-level guide to writing
lexers.

Lexer classes have attributes used for choosing the most appropriate
lexer based on various criteria.

.. autoattribute:: name
   :no-value:
.. autoattribute:: aliases
   :no-value:
.. autoattribute:: filenames
   :no-value:
.. autoattribute:: alias_filenames
.. autoattribute:: mimetypes
   :no-value:
.. autoattribute:: priority

Lexers included in Pygments should have two additional attributes:

.. autoattribute:: url
   :no-value:
.. autoattribute:: version_added
   :no-value:

Lexers included in Pygments may have additional attributes:

.. autoattribute:: _example
   :no-value:

You can pass options to the constructor. The basic options recognized
by all lexers and processed by the base `Lexer` class are:

``stripnl``
    Strip leading and trailing newlines from the input (default: True).
``stripall``
    Strip all leading and trailing whitespace from the input
    (default: False).
``ensurenl``
    Make sure that the input ends with a newline (default: True).  This
    is required for some lexers that consume input linewise.

    .. versionadded:: 1.3

``tabsize``
    If given and greater than 0, expand tabs in the input (default: 0).
``encoding``
    If given, must be an encoding name. This encoding will be used to
    convert the input string to Unicode, if it is not already a Unicode
    string (default: ``'guess'``, which uses a simple UTF-8 / Locale /
    Latin1 detection.  Can also be ``'chardet'`` to use the chardet
    library, if it is installed.
``inencoding``
    Overrides the ``encoding`` if given.
:::
:::{doc} DelegatingLexer:291
This lexer takes two lexer as arguments. A root lexer and
a language lexer. First everything is scanned using the language
lexer, afterwards all ``Other`` tokens are lexed using the root
lexer.

The lexers from the ``template`` lexer package use this base lexer.
:::
:::{doc} include:330
Indicates that a state should include rules from another state.
:::
:::{doc} _inherit:337
Indicates the a state should inherit from its superclass.
:::
:::{doc} combined:347
Indicates a state combined from multiple states.
:::
:::{doc} _PseudoMatch:360
A pseudo match object constructed from a string.
:::
:::{doc} bygroups:387
Callback that yields multiple actions for each group in the match.
:::
:::{doc} _This:413
Special singleton used for indicating the caller class.
Used by ``using``.
:::
:::{doc} using:422
Callback that processes the match with a different lexer.

The keyword arguments are forwarded to the lexer, except `state` which
is handled separately.

`state` specifies the state that the new lexer will start in, and can
be an enumerable such as ('root', 'inline', 'string') or a simple
string which is assumed to be on top of the root state.

Note: For that to work, `_other` must not be an `ExtendedRegexLexer`.
:::
:::{doc} default:472
Indicates a state or state action (e.g. #pop) to apply.
For example default('#pop') is equivalent to ('', Token, '#pop')
Note that state tuples may be used as well.

.. versionadded:: 2.0
:::
:::{doc} words:484
Indicates a list of literal words that is transformed into an optimized
regex that matches any of the words.

.. versionadded:: 2.0
:::
:::{doc} RegexLexerMeta:500
Metaclass for RegexLexer, creates the self._tokens attribute from
self.tokens on the first instantiation.
:::
:::{doc} RegexLexer:667
Base for simple stateful regular expression-based lexers.
Simplifies the lexing process so that you need only
provide a list of states and regular expressions.
:::
:::{doc} LexerContext:764
A helper object that holds lexer position data.
:::
:::{doc} ExtendedRegexLexer:779
A RegexLexer that uses a context object to store its state.
:::
:::{doc} do_insertions:851
Helper for lexers which must combine the results of several
sublexers.

``insertions`` is a list of ``(index, itokens)`` pairs.
Each ``itokens`` iterable should be inserted at position
``index`` into the token stream given by the ``tokens``
argument.

The result is a combined token stream.

TODO: clean up the code here.
:::
:::{doc} ProfilingRegexLexerMeta:915
Metaclass for ProfilingRegexLexer, collects regex timing info.
:::
:::{doc} ProfilingRegexLexer:937
Drop-in replacement for RegexLexer that does profiling of its regexes.
:::
**Imports**: `re`, `sys`, `time`, `pip._vendor.pygments.filter.apply_filters`, `pip._vendor.pygments.filter.Filter`, `pip._vendor.pygments.filters.get_filter_by_name`, `pip._vendor.pygments.token.Error`, `pip._vendor.pygments.token.Text`, `pip._vendor.pygments.token.Other`, `pip._vendor.pygments.token.Whitespace`, `pip._vendor.pygments.token._TokenType`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_int_opt`, `pip._vendor.pygments.util.get_list_opt`, `pip._vendor.pygments.util.make_analysator`, `pip._vendor.pygments.util.Future`, `pip._vendor.pygments.util.guess_decode`, `pip._vendor.pygments.regexopt.regex_opt`
**Type References**: [[DelegatingLexer]], [[ExtendedRegexLexer]], [[Lexer]], [[LexerContext]], [[LexerMeta]], [[ProfilingRegexLexer]], [[ProfilingRegexLexerMeta]], [[RegexLexer]], [[RegexLexerMeta]], [[_PseudoMatch]], [[_This]], [[_inherit]], [[combined]], [[default]], [[include]], [[words]]

### Interface
- `bygroups`() -> Any
- `using`() -> Any
- `do_insertions`() -> Any
- `__new__`() -> Any
- `__init__`() -> Any
- `__repr__`() -> Any
- `add_filter`() -> Any
- `analyse_text`() -> Any
- `_preprocess_lexer_input`() -> Any
- `get_tokens`() -> Any
- `get_tokens_unprocessed`() -> Any
- `start`() -> Any
- `end`() -> Any
- `group`() -> Any
- `groups`() -> Any
- `groupdict`() -> Any
- `callback`() -> Any
- `get`() -> Any
- `_process_regex`() -> Any
- `_process_token`() -> Any
- `_process_new_state`() -> Any
- `_process_state`() -> Any
- `process_tokendef`() -> Any
- `get_tokendefs`() -> Any
- `__call__`() -> Any
- `streamer`() -> Any
- `match_func`() -> Any

### Implementation
**LexerMeta**

**Lexer**

**DelegatingLexer**

**include**

**_inherit**

**combined**

**_PseudoMatch**

**_This**

**default**

**words**

**RegexLexerMeta**

**RegexLexer**

**LexerContext**

**ExtendedRegexLexer**

**ProfilingRegexLexerMeta**

**ProfilingRegexLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/lexer.py`  
**Dependencies**: `re`, `sys`, `time`, `pip._vendor.pygments.filter.apply_filters`, `pip._vendor.pygments.filter.Filter`, `pip._vendor.pygments.filters.get_filter_by_name`, `pip._vendor.pygments.token.Error`, `pip._vendor.pygments.token.Text`, `pip._vendor.pygments.token.Other`, `pip._vendor.pygments.token.Whitespace`, `pip._vendor.pygments.token._TokenType`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_int_opt`, `pip._vendor.pygments.util.get_list_opt`, `pip._vendor.pygments.util.make_analysator`, `pip._vendor.pygments.util.Future`, `pip._vendor.pygments.util.guess_decode`, `pip._vendor.pygments.regexopt.regex_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.regexopt
:::{doc} regex_opt_inner:26
Return a regex that matches any string in the sorted list of strings.
:::
:::{doc} regex_opt:82
Return a compiled regex that matches any string in the given list.

The strings to match must be literal strings, not regexes.  They will be
regex-escaped.

*prefix* and *suffix* are pre- and appended to the final regex.
:::
**Imports**: `re`, `re.escape`, `os.path.commonprefix`, `itertools.groupby`, `operator.itemgetter`
### Interface
- `make_charset`() -> Any
- `regex_opt_inner`() -> Any
- `regex_opt`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/regexopt.py`  
**Dependencies**: `re`, `re.escape`, `os.path.commonprefix`, `itertools.groupby`, `operator.itemgetter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.plugin

**Imports**: `importlib.metadata.entry_points`
### Interface
- `iter_entry_points`() -> Any
- `find_plugin_lexers`() -> Any
- `find_plugin_formatters`() -> Any
- `find_plugin_styles`() -> Any
- `find_plugin_filters`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/plugin.py`  
**Dependencies**: `importlib.metadata.entry_points`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.filter
:::{doc} apply_filters:12
Use this method to apply an iterable of filters to
a stream. If lexer is given it's forwarded to the
filter, otherwise the filter receives `None`.
:::
:::{doc} simplefilter:25
Decorator that converts a function into a filter::

    @simplefilter
    def lowercase(self, lexer, stream, options):
        for ttype, value in stream:
            yield ttype, value.lower()
:::
:::{doc} Filter:41
Default filter. Subclass this class or use the `simplefilter`
decorator to create own filters.
:::
:::{doc} FunctionFilter:54
Abstract class used by `simplefilter` to create simple
function filters on the fly. The `simplefilter` decorator
automatically creates subclasses of this class for
functions passed to it.
:::

**Type References**: [[Filter]], [[FunctionFilter]]

### Interface
- `apply_filters`() -> Any
- `simplefilter`() -> Any
- `_apply`() -> Any
- `__init__`() -> Any
- `filter`() -> Any

### Implementation
**Filter**

**FunctionFilter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/filter.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.__main__

**Imports**: `sys`, `pip._vendor.pygments.cmdline.main`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/__main__.py`  
**Dependencies**: `sys`, `pip._vendor.pygments.cmdline.main`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distlib.locators
:::{doc} get_all_distribution_names:39
Return all distribution names known by an index.
:param url: The URL of the index.
:return: A list of all known distribution names.
:::
:::{doc} RedirectHandler:54
A class to work around a bug in some Python 3.2.x releases.
:::
:::{doc} Locator:86
A base class for locators - things that locate distributions.
:::
:::{doc} PyPIRPCLocator:403
This locator uses XML-RPC to locate distributions. It therefore
cannot be used with simple mirrors (that only mirror file content).
:::
:::{doc} PyPIJSONLocator:453
This locator uses PyPI's JSON interface. It's very limited in functionality
and probably not worth using.
:::
:::{doc} Page:525
This class represents a scraped HTML page.
:::
:::{doc} SimpleScrapingLocator:583
A locator which scrapes HTML pages to locate downloads for a distribution.
This runs multiple threads to do the I/O; performance is at least as good
as pip's PackageFinder, which works in an analogous fashion.
:::
:::{doc} DirectoryLocator:830
This class locates distributions in a directory tree.
:::
:::{doc} JSONLocator:892
This locator uses special extended metadata (not available on PyPI) and is
the basis of performant dependency resolution in distlib. Other locators
require archive downloads before dependencies can be determined! As you
might imagine, that can be slow.
:::
:::{doc} DistPathLocator:932
This locator finds installed distributions in a path. It can be useful for
adding to an :class:`AggregatingLocator`.
:::
:::{doc} AggregatingLocator:965
This class allows you to chain and/or merge a list of locators.
:::
:::{doc} DependencyFinder:1065
Locate dependencies for distributions.
:::
**Imports**: `gzip`, `io.BytesIO`, `json`, `logging`, `os`, `posixpath`, `re`, `zlib`, `DistlibException`, `compat.urljoin`, `compat.urlparse`, `compat.urlunparse`, `compat.url2pathname`, `compat.pathname2url`, `compat.queue`, `compat.quote`, `compat.unescape`, `compat.build_opener`, `compat.HTTPRedirectHandler`, `compat.text_type`, `compat.Request`, `compat.HTTPError`, `compat.URLError`, `database.Distribution`, `database.DistributionPath`, `database.make_dist`, `metadata.Metadata`, `metadata.MetadataInvalidError`, `util.cached_property`, `util.ensure_slash`, `util.split_filename`, `util.get_project_data`, `util.parse_requirement`, `util.parse_name_and_version`, `util.ServerProxy`, `util.normalize_name`, `version.get_scheme`, `version.UnsupportedVersionError`, `wheel.Wheel`, `wheel.is_compatible`, `threading`, `dummy_threading`
**Type References**: [[AggregatingLocator]], [[DependencyFinder]], [[DirectoryLocator]], [[DistPathLocator]], [[JSONLocator]], [[Locator]], [[Page]], [[PyPIJSONLocator]], [[PyPIRPCLocator]], [[RedirectHandler]], [[SimpleScrapingLocator]]

### Interface
- `get_all_distribution_names`() -> Any
- `http_error_302`() -> Any
- `__init__`() -> Any
- `get_errors`() -> Any
- `clear_errors`() -> Any
- `clear_cache`() -> Any
- `_get_scheme`() -> Any
- `_set_scheme`() -> Any
- `_get_project`() -> Any
- `get_distribution_names`() -> Any
- `get_project`() -> Any
- `score_url`() -> Any
- `prefer_url`() -> Any
- `split_filename`() -> Any
- `convert_url_to_download_info`() -> Any
- `_get_digest`() -> Any
- `_update_version_data`() -> Any
- `locate`() -> Any
- `links`() -> Any
- `_prepare_threads`() -> Any
- `_wait_threads`() -> Any
- `_is_platform_dependent`() -> Any
- `_process_download`() -> Any
- `_should_queue`() -> Any
- `_fetch`() -> Any
- `get_page`() -> Any
- `should_include`() -> Any
- `add_distribution`() -> Any
- `remove_distribution`() -> Any
- `get_matcher`() -> Any
- `find_providers`() -> Any
- `try_to_replace`() -> Any
- `find`() -> Any
- `same_project`() -> Any
- `clean`() -> Any

### Implementation
**RedirectHandler**

**Locator**

**PyPIRPCLocator**

**PyPIJSONLocator**

**Page**

**SimpleScrapingLocator**

**DirectoryLocator**

**JSONLocator**

**DistPathLocator**

**AggregatingLocator**

**DependencyFinder**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distlib/locators.py`  
**Dependencies**: `gzip`, `io.BytesIO`, `json`, `logging`, `os`, `posixpath`, `re`, `zlib`, `DistlibException`, `compat.urljoin`, `compat.urlparse`, `compat.urlunparse`, `compat.url2pathname`, `compat.pathname2url`, `compat.queue`, `compat.quote`, `compat.unescape`, `compat.build_opener`, `compat.HTTPRedirectHandler`, `compat.text_type`, `compat.Request`, `compat.HTTPError`, `compat.URLError`, `database.Distribution`, `database.DistributionPath`, `database.make_dist`, `metadata.Metadata`, `metadata.MetadataInvalidError`, `util.cached_property`, `util.ensure_slash`, `util.split_filename`, `util.get_project_data`, `util.parse_requirement`, `util.parse_name_and_version`, `util.ServerProxy`, `util.normalize_name`, `version.get_scheme`, `version.UnsupportedVersionError`, `wheel.Wheel`, `wheel.is_compatible`, `threading`, `dummy_threading`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distlib.metadata
:::{doc} MetadataMissingError:27
A required metadata is missing
:::
:::{doc} MetadataConflictError:31
Attempt to read or write metadata fields that are conflictual.
:::
:::{doc} MetadataUnrecognizedVersionError:35
Unknown metadata version number.
:::
:::{doc} MetadataInvalidError:39
A metadata value is invalid
:::
:::{doc} _best_version:121
Detect the best version depending on the fields used.
:::
:::{doc} _get_name_and_version:215
Return the distribution name with version.

If for_filename is true, return a filename-escaped form.
:::
:::{doc} LegacyMetadata:228
The legacy metadata of a release.

Supports versions 1.0, 1.1, 1.2, 2.0 and 1.3/2.1 (auto-detected). You can
instantiate the class with one of these arguments (or none):
- *path*, the path to a metadata file
- *fileobj* give a file-like object with metadata as content
- *mapping* is a dict-like object
- *scheme* is a version scheme name
:::
:::{doc} Metadata:584
The metadata of a release. This implementation uses 2.1
metadata where possible. If not possible, it wraps a LegacyMetadata
instance which handles the key-value metadata format.
:::
**Imports**: `__future__.unicode_literals`, `codecs`, `email.message_from_file`, `json`, `logging`, `re`, `DistlibException`, `__version__`, `compat.StringIO`, `compat.string_types`, `compat.text_type`, `markers.interpret`, `util.extract_by_key`, `util.get_extras`, `version.get_scheme`, `version.PEP440_VERSION_RE`
**Type References**: [[LegacyMetadata]], [[Metadata]], [[MetadataConflictError]], [[MetadataInvalidError]], [[MetadataMissingError]], [[MetadataUnrecognizedVersionError]]

### Interface
- `_version2fieldlist`() -> Any
- `_best_version`() -> Any
- `_get_name_and_version`() -> Any
- `_has_marker`() -> Any
- `__init__`() -> Any
- `set_metadata_version`() -> Any
- `_write_field`() -> Any
- `__getitem__`() -> Any
- `__setitem__`() -> Any
- `__delitem__`() -> Any
- `__contains__`() -> Any
- `_convert_name`() -> Any
- `_default_value`() -> Any
- `_remove_line_prefix`() -> Any
- `__getattr__`() -> Any
- `get_fullname`() -> Any
- `is_field`() -> Any
- `is_multi_field`() -> Any
- `read`() -> Any
- `read_file`() -> Any
- `write`() -> Any
- `write_file`() -> Any
- `update`() -> Any
- `set`() -> Any
- `get`() -> Any
- `check`() -> Any
- `todict`() -> Any
- `add_requirements`() -> Any
- `keys`() -> Any
- `__iter__`() -> Any
- `values`() -> Any
- `items`() -> Any
- `__repr__`() -> Any
- `__getattribute__`() -> Any
- `_validate_value`() -> Any
- `__setattr__`() -> Any
- `name_and_version`() -> Any
- `provides`() -> Any
- `get_requirements`() -> Any
- `dictionary`() -> Any
- `dependencies`() -> Any
- `_validate_mapping`() -> Any
- `validate`() -> Any
- `_from_legacy`() -> Any
- `_to_legacy`() -> Any
- `_set`() -> Any
- `are_valid_constraints`() -> Any
- `process_entries`() -> Any

### Implementation
**MetadataMissingError**

**MetadataConflictError**

**MetadataUnrecognizedVersionError**

**MetadataInvalidError**

**LegacyMetadata**

**Metadata**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distlib/metadata.py`  
**Dependencies**: `__future__.unicode_literals`, `codecs`, `email.message_from_file`, `json`, `logging`, `re`, `DistlibException`, `__version__`, `compat.StringIO`, `compat.string_types`, `compat.text_type`, `markers.interpret`, `util.extract_by_key`, `util.get_extras`, `version.get_scheme`, `version.PEP440_VERSION_RE`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distlib.version
:::{doc} UnsupportedVersionError:25
This is an unsupported version.
:::
:::{doc} NormalizedVersion:256
A rational version.

Good:
    1.2         # equivalent to "1.2.0"
    1.2.0
    1.2a1
    1.2.3a2
    1.2.3b1
    1.2.3c1
    1.2.3.4
    TODO: fill this out

Bad:
    1           # minimum two numbers
    1.2a        # release level must have a release serial
    1.2.3b
:::
:::{doc} _suggest_semantic_version:415
Try to suggest a semantic form for a version for which
_suggest_normalized_version couldn't come up with anything.
:::
:::{doc} _suggest_normalized_version:461
Suggest a normalized version close to the given version string.

If you have a version string that isn't rational (i.e. NormalizedVersion
doesn't like it) then you might be able to get an equivalent (or close)
rational version from this function.

This does a number of simple normalizations to the given string, based
on observation of versions currently in use on PyPI. Given a dump of
those version during PyCon 2009, 4287 of them:
- 2312 (53.93%) match NormalizedVersion without change
  with the automatic suggestion
- 3474 (81.04%) match when using this suggestion method

@param s {str} An irrational version string.
@returns A rational version string, or None, if couldn't determine one.
:::
**Imports**: `logging`, `re`, `compat.string_types`, `util.parse_requirement`
**Type References**: [[LegacyMatcher]], [[LegacyVersion]], [[Matcher]], [[NormalizedMatcher]], [[NormalizedVersion]], [[SemanticMatcher]], [[SemanticVersion]], [[UnsupportedVersionError]], [[Version]], [[VersionScheme]]

### Interface
- `_pep_440_key`() -> Any
- `_match_prefix`() -> Any
- `_suggest_semantic_version`() -> Any
- `_suggest_normalized_version`() -> Any
- `_legacy_key`() -> Any
- `is_semver`() -> Any
- `_semantic_key`() -> Any
- `get_scheme`() -> Any
- `__init__`() -> Any
- `parse`() -> Any
- `_check_compatible`() -> Any
- `__eq__`() -> Any
- `__ne__`() -> Any
- `__lt__`() -> Any
- `__gt__`() -> Any
- `__le__`() -> Any
- `__ge__`() -> Any
- `__hash__`() -> Any
- `__repr__`() -> Any
- `__str__`() -> Any
- `is_prerelease`() -> Any
- `parse_requirement`() -> Any
- `match`() -> Any
- `exact_version`() -> Any
- `_adjust_local`() -> Any
- `_match_lt`() -> Any
- `_match_gt`() -> Any
- `_match_le`() -> Any
- `_match_ge`() -> Any
- `_match_eq`() -> Any
- `_match_arbitrary`() -> Any
- `_match_ne`() -> Any
- `_match_compatible`() -> Any
- `get_parts`() -> Any
- `make_tuple`() -> Any
- `is_valid_version`() -> Any
- `is_valid_matcher`() -> Any
- `is_valid_constraint_list`() -> Any
- `suggest`() -> Any

### Implementation
**UnsupportedVersionError**

**Version**

**Matcher**

**NormalizedVersion**

**NormalizedMatcher**

**LegacyVersion**

**LegacyMatcher**

**SemanticVersion**

**SemanticMatcher**

**VersionScheme**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distlib/version.py`  
**Dependencies**: `logging`, `re`, `compat.string_types`, `util.parse_requirement`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distlib.compat

**Imports**: `__future__.absolute_import`, `os`, `re`, `shutil`, `sys`, `zipfile.ZipFile`, `sysconfig`, `ssl`, `StringIO.StringIO`, `types.FileType`, `__builtin__`, `ConfigParser`, `urlparse.urlparse`, `urlparse.urlunparse`, `urlparse.urljoin`, `urlparse.urlsplit`, `urlparse.urlunsplit`, `urllib.urlretrieve`, `urllib.quote`, `urllib.unquote`, `urllib.url2pathname`, `urllib.pathname2url`, `urllib.ContentTooShortError`, `urllib.splittype`, `urllib2`, `urllib2.Request`, `urllib2.urlopen`, `urllib2.URLError`, `urllib2.HTTPError`, `urllib2.HTTPBasicAuthHandler`, `urllib2.HTTPPasswordMgr`, `urllib2.HTTPHandler`, `urllib2.HTTPRedirectHandler`, `urllib2.build_opener`, `httplib`, `xmlrpclib`, `Queue`, `HTMLParser.HTMLParser`, `htmlentitydefs`, `itertools.ifilter`, `itertools.ifilterfalse`, `io.StringIO`, `io.TextIOWrapper`, `builtins`, `configparser`, `urllib.parse.urlparse`, `urllib.parse.urlunparse`, `urllib.parse.urljoin`, `urllib.parse.quote`, `urllib.parse.unquote`, `urllib.parse.urlsplit`, `urllib.parse.urlunsplit`, `urllib.parse.splittype`, `urllib.request.urlopen`, `urllib.request.urlretrieve`, `urllib.request.Request`, `urllib.request.url2pathname`, `urllib.request.pathname2url`, `urllib.request.HTTPBasicAuthHandler`, `urllib.request.HTTPPasswordMgr`, `urllib.request.HTTPHandler`, `urllib.request.HTTPRedirectHandler`, `urllib.request.build_opener`, `urllib.error.HTTPError`, `urllib.error.URLError`, `urllib.error.ContentTooShortError`, `http.client`, `urllib.request`, `xmlrpc.client`, `queue`, `html.parser.HTMLParser`, `html.entities`, `itertools.filterfalse`, `ssl.match_hostname`, `ssl.CertificateError`, `types.SimpleNamespace`, `shutil.which`, `zipfile.ZipExtFile`, `platform.python_implementation`, `tokenize.detect_encoding`, `html.escape`, `html.unescape`, `collections.ChainMap`, `importlib.util.cache_from_source`, `collections.OrderedDict`, `logging.config.BaseConfigurator`, `logging.config.valid_ident`, `urllib2.HTTPSHandler`, `urllib.request.HTTPSHandler`, `collections.abc.Callable`, `codecs.BOM_UTF8`, `codecs.lookup`, `cgi.escape`, `collections.MutableMapping`, `reprlib.recursive_repr`, `thread.get_ident`, `_abcoll.KeysView`, `_abcoll.ValuesView`, `_abcoll.ItemsView`, `dummy_thread.get_ident`
**Type References**: [[BaseConfigurator]], [[CertificateError]], [[ChainMap]], [[Container]], [[ConvertingDict]], [[ConvertingList]], [[ConvertingTuple]], [[OrderedDict]], [[ZipExtFile]], [[ZipFile]]

### Interface
- `quote`() -> Any
- `_dnsname_match`() -> Any
- `match_hostname`() -> Any
- `which`() -> Any
- `__init__`() -> Any
- `__enter__`() -> Any
- `__exit__`() -> Any
- `open`() -> Any
- `python_implementation`() -> Any
- `callable`() -> Any
- `fsencode`() -> Any
- `fsdecode`() -> Any
- `_get_normal_name`() -> Any
- `detect_encoding`() -> Any
- `cache_from_source`() -> Any
- `valid_ident`() -> Any
- `pop`() -> Any
- `_access_check`() -> Any
- `read_or_stop`() -> Any
- `find_cookie`() -> Any
- `__missing__`() -> Any
- `__getitem__`() -> Any
- `get`() -> Any
- `__len__`() -> Any
- `__iter__`() -> Any
- `__contains__`() -> Any
- `__bool__`() -> Any
- `__repr__`() -> Any
- `fromkeys`() -> Any
- `copy`() -> Any
- `new_child`() -> Any
- `parents`() -> Any
- `__setitem__`() -> Any
- `__delitem__`() -> Any
- `popitem`() -> Any
- `clear`() -> Any
- `__reversed__`() -> Any
- `keys`() -> Any
- `values`() -> Any
- `items`() -> Any
- `iterkeys`() -> Any
- `itervalues`() -> Any
- `iteritems`() -> Any
- `update`() -> Any
- `setdefault`() -> Any
- `__reduce__`() -> Any
- `__eq__`() -> Any
- `__ne__`() -> Any
- `viewkeys`() -> Any
- `viewvalues`() -> Any
- `viewitems`() -> Any
- `resolve`() -> Any
- `ext_convert`() -> Any
- `cfg_convert`() -> Any
- `convert`() -> Any
- `configure_custom`() -> Any
- `as_tuple`() -> Any
- `_recursive_repr`() -> Any
- `decorating_function`() -> Any
- `wrapper`() -> Any

### Implementation
**ZipExtFile**

**ZipFile**

**CertificateError**

**Container**

**ChainMap**

**OrderedDict**

**ConvertingDict**

**ConvertingList**

**ConvertingTuple**

**BaseConfigurator**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distlib/compat.py`  
**Dependencies**: `__future__.absolute_import`, `os`, `re`, `shutil`, `sys`, `zipfile.ZipFile`, `sysconfig`, `ssl`, `StringIO.StringIO`, `types.FileType`, `__builtin__`, `ConfigParser`, `urlparse.urlparse`, `urlparse.urlunparse`, `urlparse.urljoin`, `urlparse.urlsplit`, `urlparse.urlunsplit`, `urllib.urlretrieve`, `urllib.quote`, `urllib.unquote`, `urllib.url2pathname`, `urllib.pathname2url`, `urllib.ContentTooShortError`, `urllib.splittype`, `urllib2`, `urllib2.Request`, `urllib2.urlopen`, `urllib2.URLError`, `urllib2.HTTPError`, `urllib2.HTTPBasicAuthHandler`, `urllib2.HTTPPasswordMgr`, `urllib2.HTTPHandler`, `urllib2.HTTPRedirectHandler`, `urllib2.build_opener`, `httplib`, `xmlrpclib`, `Queue`, `HTMLParser.HTMLParser`, `htmlentitydefs`, `itertools.ifilter`, `itertools.ifilterfalse`, `io.StringIO`, `io.TextIOWrapper`, `builtins`, `configparser`, `urllib.parse.urlparse`, `urllib.parse.urlunparse`, `urllib.parse.urljoin`, `urllib.parse.quote`, `urllib.parse.unquote`, `urllib.parse.urlsplit`, `urllib.parse.urlunsplit`, `urllib.parse.splittype`, `urllib.request.urlopen`, `urllib.request.urlretrieve`, `urllib.request.Request`, `urllib.request.url2pathname`, `urllib.request.pathname2url`, `urllib.request.HTTPBasicAuthHandler`, `urllib.request.HTTPPasswordMgr`, `urllib.request.HTTPHandler`, `urllib.request.HTTPRedirectHandler`, `urllib.request.build_opener`, `urllib.error.HTTPError`, `urllib.error.URLError`, `urllib.error.ContentTooShortError`, `http.client`, `urllib.request`, `xmlrpc.client`, `queue`, `html.parser.HTMLParser`, `html.entities`, `itertools.filterfalse`, `ssl.match_hostname`, `ssl.CertificateError`, `types.SimpleNamespace`, `shutil.which`, `zipfile.ZipExtFile`, `platform.python_implementation`, `tokenize.detect_encoding`, `html.escape`, `html.unescape`, `collections.ChainMap`, `importlib.util.cache_from_source`, `collections.OrderedDict`, `logging.config.BaseConfigurator`, `logging.config.valid_ident`, `urllib2.HTTPSHandler`, `urllib.request.HTTPSHandler`, `collections.abc.Callable`, `codecs.BOM_UTF8`, `codecs.lookup`, `cgi.escape`, `collections.MutableMapping`, `reprlib.recursive_repr`, `thread.get_ident`, `_abcoll.KeysView`, `_abcoll.ValuesView`, `_abcoll.ItemsView`, `dummy_thread.get_ident`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distlib.index
:::{doc} PackageIndex:29
This class represents a package index compatible with PyPI, the Python
Package Index.
:::
**Imports**: `hashlib`, `logging`, `os`, `shutil`, `subprocess`, `tempfile`, `DistlibException`, `compat.HTTPBasicAuthHandler`, `compat.Request`, `compat.HTTPPasswordMgr`, `compat.urlparse`, `compat.build_opener`, `compat.string_types`, `util.zip_dir`, `util.ServerProxy`, `threading.Thread`, `dummy_threading.Thread`, `util._get_pypirc_command`, `util._load_pypirc`, `util._store_pypirc`
**Type References**: [[PackageIndex]]

### Interface
- `__init__`() -> Any
- `_get_pypirc_command`() -> Any
- `read_configuration`() -> Any
- `save_configuration`() -> Any
- `check_credentials`() -> Any
- `register`() -> Any
- `_reader`() -> Any
- `get_sign_command`() -> Any
- `run_command`() -> Any
- `sign_file`() -> Any
- `upload_file`() -> Any
- `upload_documentation`() -> Any
- `get_verify_command`() -> Any
- `verify_signature`() -> Any
- `download_file`() -> Any
- `send_request`() -> Any
- `encode_request`() -> Any
- `search`() -> Any

### Implementation
**PackageIndex**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distlib/index.py`  
**Dependencies**: `hashlib`, `logging`, `os`, `shutil`, `subprocess`, `tempfile`, `DistlibException`, `compat.HTTPBasicAuthHandler`, `compat.Request`, `compat.HTTPPasswordMgr`, `compat.urlparse`, `compat.build_opener`, `compat.string_types`, `util.zip_dir`, `util.ServerProxy`, `threading.Thread`, `dummy_threading.Thread`, `util._get_pypirc_command`, `util._load_pypirc`, `util._store_pypirc`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distlib.manifest
:::{doc} Manifest:38
A list of files built by exploring the filesystem and filtered by applying various
patterns to what we find there.
:::
**Imports**: `fnmatch`, `logging`, `os`, `re`, `sys`, `DistlibException`, `compat.fsdecode`, `util.convert_path`, `stat.S_ISREG`, `stat.S_ISDIR`, `stat.S_ISLNK`
**Type References**: [[Manifest]]

### Interface
- `__init__`() -> Any
- `findall`() -> Any
- `add`() -> Any
- `add_many`() -> Any
- `sorted`() -> Any
- `clear`() -> Any
- `process_directive`() -> Any
- `_parse_directive`() -> Any
- `_include_pattern`() -> Any
- `_exclude_pattern`() -> Any
- `_translate_pattern`() -> Any
- `_glob_to_re`() -> Any
- `add_dir`() -> Any

### Implementation
**Manifest**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distlib/manifest.py`  
**Dependencies**: `fnmatch`, `logging`, `os`, `re`, `sys`, `DistlibException`, `compat.fsdecode`, `util.convert_path`, `stat.S_ISREG`, `stat.S_ISDIR`, `stat.S_ISLNK`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distlib.util
:::{doc} parse_marker:54
Parse a marker string and return a dictionary containing a marker expression.

The dictionary will contain keys "op", "lhs" and "rhs" for non-terminals in
the expression grammar, or strings. A string contained in quotes is to be
interpreted as a literal string, and a string not contained in quotes is a
variable (such as os_name).
:::
:::{doc} parse_requirement:144
Parse a requirement passed in as a string. Return a Container
whose attributes contain the various parts of the requirement.
:::
:::{doc} get_resources_dests:268
Find destinations for resources files
:::
:::{doc} convert_path:459
Return 'pathname' as a name that will work on the native filesystem.

The path is split on '/' and put back together again using the current
directory separator.  Needed because filenames in the setup script are
always supplied in Unix style, and have to be converted to the local
convention before we can actually use them in the filesystem.  Raises
ValueError on non-Unix-ish systems if 'pathname' either starts or
ends with a slash.
:::
:::{doc} get_cache_base:751
Return the default base location for distlib caches. If the directory does
not exist, it is created. Use the suffix provided for the base directory,
and default to '.distlib' if it isn't provided.

On Windows, if LOCALAPPDATA is defined in the environment, then it is
assumed to be a directory, and will be the parent directory of the result.
On POSIX, and on Windows if LOCALAPPDATA is not defined, the user's home
directory - using os.expanduser('~') - will be the parent directory of
the result.

The result is just the directory '.distlib' in the parent directory as
determined above, or with the name specified with ``suffix``.
:::
:::{doc} path_to_cache_dir:792
Convert an absolute path to a directory name for use in a cache.

The algorithm used is:

#. On Windows, any ``':'`` in the drive is replaced with ``'---'``.
#. Any occurrence of ``os.sep`` is replaced with ``'--'``.
#. ``'.cache'`` is appended.
:::
:::{doc} split_filename:852
Extract name, version, python version from a filename (no extension)

Return name, version, pyver or None
:::
:::{doc} parse_name_and_version:882
A utility method used to get name and version from a string.

From e.g. a Provides-Dist value.

:param p: A value in a form 'foo (1.0)'
:return: The name and version as a tuple.
:::
:::{doc} Cache:963
A class implementing a cache for resources that need to live in the file system
e.g. shared libraries. This class was moved from resources to here because it
could be used by other modules, e.g. the wheel module.
:::
:::{doc} EventMixin:1007
A very simple publish/subscribe system.
:::
:::{doc} zip_dir:1292
zip a directory tree into a BytesIO object
:::
:::{doc} iglob:1412
Extended globbing function that supports ** and {opt1,opt2,opt3}.
:::
:::{doc} SubprocessMixin:1731
Mixin for running subprocesses and capturing their output
:::
:::{doc} normalize_name:1777
Normalize a python package name a la PEP 503
:::
:::{doc} _load_pypirc:1871
Read the PyPI access configuration as supported by distutils.
:::
:::{doc} get_host_platform:1888
Return a string that identifies the current platform.  This is used mainly to
distinguish platform-specific build directories and platform-specific built
distributions.  Typically includes the OS name and version and the
architecture (as supplied by 'os.uname()'), although the exact information
included depends on the OS; eg. on Linux, the kernel version isn't
particularly important.

Examples of returned values:
   linux-i586
   linux-alpha (?)
   solaris-2.6-sun4u

Windows will return one of:
   win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T, etc)
   win32 (all others - specifically, sys.platform is returned)

For other non-POSIX platforms, currently just returns 'sys.platform'.
:::
**Imports**: `codecs`, `collections.deque`, `contextlib`, `csv`, `glob.iglob`, `io`, `json`, `logging`, `os`, `py_compile`, `re`, `socket`, `subprocess`, `sys`, `tarfile`, `tempfile`, `textwrap`, `time`, `DistlibException`, `compat.string_types`, `compat.text_type`, `compat.shutil`, `compat.raw_input`, `compat.StringIO`, `compat.cache_from_source`, `compat.urlopen`, `compat.urljoin`, `compat.httplib`, `compat.xmlrpclib`, `compat.HTTPHandler`, `compat.BaseConfigurator`, `compat.valid_ident`, `compat.Container`, `compat.configparser`, `compat.URLError`, `compat.ZipFile`, `compat.fsdecode`, `compat.unquote`, `compat.urlparse`, `ssl`, `threading`, `compat.HTTPSHandler`, `compat.match_hostname`, `compat.CertificateError`, `dummy_threading`, `_aix_support.aix_platform`, `_osx_support`, `distutils.sysconfig`, `sysconfig`
**Type References**: [[CSVBase]], [[CSVReader]], [[CSVWriter]], [[Cache]], [[Configurator]], [[EventMixin]], [[ExportEntry]], [[FileOperator]], [[HTTPSConnection]], [[HTTPSHandler]], [[HTTPSOnlyHandler]], [[Progress]], [[PyPIRCFile]], [[SafeTransport]], [[Sequencer]], [[ServerProxy]], [[SubprocessMixin]], [[Transport]], [[cached_property]]

### Interface
- `parse_marker`() -> Any
- `parse_requirement`() -> Any
- `get_resources_dests`() -> Any
- `in_venv`() -> Any
- `get_executable`() -> Any
- `proceed`() -> Any
- `extract_by_key`() -> Any
- `read_exports`() -> Any
- `write_exports`() -> Any
- `tempdir`() -> Any
- `chdir`() -> Any
- `socket_timeout`() -> Any
- `convert_path`() -> Any
- `resolve`() -> Any
- `get_export_entry`() -> Any
- `get_cache_base`() -> Any
- `path_to_cache_dir`() -> Any
- `ensure_slash`() -> Any
- `parse_credentials`() -> Any
- `get_process_umask`() -> Any
- `is_string_sequence`() -> Any
- `split_filename`() -> Any
- `parse_name_and_version`() -> Any
- `get_extras`() -> Any
- `_get_external_data`() -> Any
- `get_project_data`() -> Any
- `get_package_data`() -> Any
- `unarchive`() -> Any
- `zip_dir`() -> Any
- `iglob`() -> Any
- `_iglob`() -> Any
- `_csv_open`() -> Any
- `normalize_name`() -> Any
- `_load_pypirc`() -> Any
- `_store_pypirc`() -> Any
- `get_host_platform`() -> Any
- `get_platform`() -> Any
- `marker_var`() -> Any
- `marker_expr`() -> Any
- `marker_and`() -> Any
- `marker`() -> Any
- `get_rel_path`() -> Any
- `read_stream`() -> Any
- `__init__`() -> Any
- `__get__`() -> Any
- `_init_record`() -> Any
- `record_as_written`() -> Any
- `newer`() -> Any
- `copy_file`() -> Any
- `copy_stream`() -> Any
- `write_binary_file`() -> Any
- `write_text_file`() -> Any
- `set_mode`() -> Any
- `ensure_dir`() -> Any
- `byte_compile`() -> Any
- `ensure_removed`() -> Any
- `is_writable`() -> Any
- `commit`() -> Any
- `rollback`() -> Any
- `value`() -> Any
- `__repr__`() -> Any
- `__eq__`() -> Any
- `prefix_to_dir`() -> Any
- `clear`() -> Any
- `add`() -> Any
- `remove`() -> Any
- `get_subscribers`() -> Any
- `publish`() -> Any
- `add_node`() -> Any
- `remove_node`() -> Any
- `is_step`() -> Any
- `get_steps`() -> Any
- `strong_connections`() -> Any
- `dot`() -> Any
- `check_path`() -> Any
- `update`() -> Any
- `increment`() -> Any
- `start`() -> Any
- `stop`() -> Any
- `maximum`() -> Any
- `percentage`() -> Any
- `format_duration`() -> Any
- `ETA`() -> Any
- `speed`() -> Any
- `make_connection`() -> Any
- `__enter__`() -> Any
- `__exit__`() -> Any
- `__iter__`() -> Any
- `next`() -> Any
- `writerow`() -> Any
- `configure_custom`() -> Any
- `__getitem__`() -> Any
- `inc_convert`() -> Any
- `reader`() -> Any
- `run_command`() -> Any
- `read`() -> Any
- `strongconnect`() -> Any
- `extraction_filter`() -> Any
- `connect`() -> Any
- `_conn_maker`() -> Any
- `https_open`() -> Any
- `http_open`() -> Any
- `convert`() -> Any
- `get_versions`() -> Any

### Implementation
**cached_property**

**FileOperator**

**ExportEntry**

**Cache**

**EventMixin**

**Sequencer**

**Progress**

**Transport**

**ServerProxy**

**CSVBase**

**CSVReader**

**CSVWriter**

**Configurator**

**SubprocessMixin**

**PyPIRCFile**

**HTTPSConnection**

**HTTPSHandler**

**HTTPSOnlyHandler**

**SafeTransport**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distlib/util.py`  
**Dependencies**: `codecs`, `collections.deque`, `contextlib`, `csv`, `glob.iglob`, `io`, `json`, `logging`, `os`, `py_compile`, `re`, `socket`, `subprocess`, `sys`, `tarfile`, `tempfile`, `textwrap`, `time`, `DistlibException`, `compat.string_types`, `compat.text_type`, `compat.shutil`, `compat.raw_input`, `compat.StringIO`, `compat.cache_from_source`, `compat.urlopen`, `compat.urljoin`, `compat.httplib`, `compat.xmlrpclib`, `compat.HTTPHandler`, `compat.BaseConfigurator`, `compat.valid_ident`, `compat.Container`, `compat.configparser`, `compat.URLError`, `compat.ZipFile`, `compat.fsdecode`, `compat.unquote`, `compat.urlparse`, `ssl`, `threading`, `compat.HTTPSHandler`, `compat.match_hostname`, `compat.CertificateError`, `dummy_threading`, `_aix_support.aix_platform`, `_osx_support`, `distutils.sysconfig`, `sysconfig`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distlib.database
:::{doc} _Cache:41
A simple cache mapping names and .dist-info paths to distributions
:::
:::{doc} DistributionPath:72
Represents a set of distributions installed on a path (typically sys.path).
:::
:::{doc} Distribution:315
A base class for distributions, whether installed or from indexes.
Either way, it must have some metadata, so that's all that's needed
for construction.
:::
:::{doc} BaseInstalledDistribution:468
This is the base class for installed distributions (whether PEP 376 or
legacy).
:::
:::{doc} InstalledDistribution:523
Created with the *path* of the ``.dist-info`` directory provided to the
constructor. It reads the metadata contained in ``pydist.json`` when it is
instantiated., or uses a passed in Metadata instance (useful for when
dry-run mode is being used).
:::
:::{doc} EggInfoDistribution:846
Created with the *path* of the ``.egg-info`` directory or file provided
to the constructor. It reads the metadata contained in the file itself, or
if the given path happens to be a directory, the metadata is read from the
file ``PKG-INFO`` under that directory.
:::
:::{doc} DependencyGraph:1071
Represents a dependency graph between distributions.

The dependency relationships are stored in an ``adjacency_list`` that maps
distributions to a list of ``(other, label)`` tuples where  ``other``
is a distribution and the edge is labeled with ``label`` (i.e. the version
specifier, if such was provided). Also, for more efficient traversal, for
every distribution ``x``, a list of predecessors is kept in
``reverse_list[x]``. An edge from distribution ``a`` to
distribution ``b`` means that ``a`` depends on ``b``. If any missing
dependencies are found, they are stored in ``missing``, which is a
dictionary that maps distributions to a list of requirements that were not
provided by any other distributions.
:::
:::{doc} make_graph:1213
Makes a dependency graph from the given distributions.

:parameter dists: a list of distributions
:type dists: list of :class:`distutils2.database.InstalledDistribution` and
             :class:`distutils2.database.EggInfoDistribution` instances
:rtype: a :class:`DependencyGraph` instance
:::
:::{doc} get_dependent_dists:1265
Recursively generate a list of distributions from *dists* that are
dependent on *dist*.

:param dists: a list of distributions
:param dist: a distribution, member of *dists* for which we are interested
:::
:::{doc} get_required_dists:1291
Recursively generate a list of distributions from *dists* that are
required by *dist*.

:param dists: a list of distributions
:param dist: a distribution, member of *dists* for which we are interested
             in finding the dependencies.
:::
:::{doc} make_dist:1320
A convenience method for making a dist given just a name and version.
:::
**Imports**: `__future__.unicode_literals`, `base64`, `codecs`, `contextlib`, `hashlib`, `logging`, `os`, `posixpath`, `sys`, `zipimport`, `DistlibException`, `resources`, `compat.StringIO`, `version.get_scheme`, `version.UnsupportedVersionError`, `metadata.Metadata`, `metadata.METADATA_FILENAME`, `metadata.WHEEL_METADATA_FILENAME`, `metadata.LEGACY_METADATA_FILENAME`, `util.parse_requirement`, `util.cached_property`, `util.parse_name_and_version`, `util.read_exports`, `util.write_exports`, `util.CSVReader`, `util.CSVWriter`, `warnings`
**Type References**: [[BaseInstalledDistribution]], [[DependencyGraph]], [[Distribution]], [[DistributionPath]], [[EggInfoDistribution]], [[InstalledDistribution]], [[_Cache]]

### Interface
- `make_graph`() -> Any
- `get_dependent_dists`() -> Any
- `get_required_dists`() -> Any
- `make_dist`() -> Any
- `__init__`() -> Any
- `clear`() -> Any
- `add`() -> Any
- `_get_cache_enabled`() -> Any
- `_set_cache_enabled`() -> Any
- `clear_cache`() -> Any
- `_yield_distributions`() -> Any
- `_generate_cache`() -> Any
- `distinfo_dirname`() -> Any
- `get_distributions`() -> Any
- `get_distribution`() -> Any
- `provides_distribution`() -> Any
- `get_file_path`() -> Any
- `get_exported_entries`() -> Any
- `source_url`() -> Any
- `name_and_version`() -> Any
- `provides`() -> Any
- `_get_requirements`() -> Any
- `run_requires`() -> Any
- `meta_requires`() -> Any
- `build_requires`() -> Any
- `test_requires`() -> Any
- `dev_requires`() -> Any
- `matches_requirement`() -> Any
- `__repr__`() -> Any
- `__eq__`() -> Any
- `__hash__`() -> Any
- `get_hash`() -> Any
- `__str__`() -> Any
- `_get_records`() -> Any
- `exports`() -> Any
- `read_exports`() -> Any
- `write_exports`() -> Any
- `get_resource_path`() -> Any
- `list_installed_files`() -> Any
- `write_installed_files`() -> Any
- `check_installed_files`() -> Any
- `shared_locations`() -> Any
- `write_shared_locations`() -> Any
- `get_distinfo_resource`() -> Any
- `get_distinfo_file`() -> Any
- `list_distinfo_files`() -> Any
- `_get_metadata`() -> Any
- `add_distribution`() -> Any
- `add_edge`() -> Any
- `add_missing`() -> Any
- `_repr_dist`() -> Any
- `repr_node`() -> Any
- `to_dot`() -> Any
- `topological_sort`() -> Any
- `set_name_and_version`() -> Any
- `parse_requires_data`() -> Any
- `parse_requires_path`() -> Any
- `_md5`() -> Any
- `_size`() -> Any

### Implementation
**_Cache**

**DistributionPath**

**Distribution**

**BaseInstalledDistribution**

**InstalledDistribution**

**EggInfoDistribution**

**DependencyGraph**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distlib/database.py`  
**Dependencies**: `__future__.unicode_literals`, `base64`, `codecs`, `contextlib`, `hashlib`, `logging`, `os`, `posixpath`, `sys`, `zipimport`, `DistlibException`, `resources`, `compat.StringIO`, `version.get_scheme`, `version.UnsupportedVersionError`, `metadata.Metadata`, `metadata.METADATA_FILENAME`, `metadata.WHEEL_METADATA_FILENAME`, `metadata.LEGACY_METADATA_FILENAME`, `util.parse_requirement`, `util.cached_property`, `util.parse_name_and_version`, `util.read_exports`, `util.write_exports`, `util.CSVReader`, `util.CSVWriter`, `warnings`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distlib

**Imports**: `logging`, `logging.NullHandler`
**Type References**: [[DistlibException]], [[NullHandler]]

### Interface
- `handle`() -> Any
- `emit`() -> Any
- `createLock`() -> Any

### Implementation
**DistlibException**

**NullHandler**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distlib/__init__.py`  
**Dependencies**: `logging`, `logging.NullHandler`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distlib.markers
:::{doc} Evaluator:44
This class is used to evaluate marker expressions.
:::
:::{doc} interpret:144
Interpret a marker and return a result depending on environment.

:param marker: The marker to interpret.
:type marker: str
:param execution_context: The context used for name lookup.
:type execution_context: mapping
:::
**Imports**: `os`, `re`, `sys`, `platform`, `compat.string_types`, `util.in_venv`, `util.parse_marker`, `version.LegacyVersion`
**Type References**: [[Evaluator]]

### Interface
- `_is_version_marker`() -> Any
- `_is_literal`() -> Any
- `_get_versions`() -> Any
- `default_context`() -> Any
- `interpret`() -> Any
- `evaluate`() -> Any
- `format_full_version`() -> Any

### Implementation
**Evaluator**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distlib/markers.py`  
**Dependencies**: `os`, `re`, `sys`, `platform`, `compat.string_types`, `util.in_venv`, `util.parse_marker`, `version.LegacyVersion`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distlib.resources
:::{doc} Resource:77
A class representing an in-package resource, such as a data file. This is
not normally instantiated by user code, but rather by a
:class:`ResourceFinder` which manages the resource.
:::
:::{doc} ResourceFinder:118
Resource finder for file system resources.
:::
:::{doc} ZipResourceFinder:208
Resource finder for resources in .zip files.
:::
:::{doc} finder:313
Return a resource finder for a package.
:param package: The name of the package.
:return: A :class:`ResourceFinder` instance for the package.
:::
:::{doc} finder_for_path:341
Return a resource finder for a path, which should represent a container.

:param path: The path.
:return: A :class:`ResourceFinder` instance for the path.
:::
**Imports**: `__future__.unicode_literals`, `bisect`, `io`, `logging`, `os`, `pkgutil`, `sys`, `types`, `zipimport`, `DistlibException`, `util.cached_property`, `util.get_cache_base`, `util.Cache`, `_frozen_importlib_external`, `_frozen_importlib`
**Type References**: [[Resource]], [[ResourceBase]], [[ResourceCache]], [[ResourceContainer]], [[ResourceFinder]], [[ZipResourceFinder]]

### Interface
- `register_finder`() -> Any
- `finder`() -> Any
- `finder_for_path`() -> Any
- `__init__`() -> Any
- `is_stale`() -> Any
- `get`() -> Any
- `as_stream`() -> Any
- `file_path`() -> Any
- `bytes`() -> Any
- `size`() -> Any
- `resources`() -> Any
- `_adjust_path`() -> Any
- `_make_path`() -> Any
- `_find`() -> Any
- `get_cache_info`() -> Any
- `find`() -> Any
- `get_stream`() -> Any
- `get_bytes`() -> Any
- `get_size`() -> Any
- `get_resources`() -> Any
- `is_container`() -> Any
- `iterator`() -> Any
- `_is_directory`() -> Any
- `allowed`() -> Any

### Implementation
**ResourceCache**

**ResourceBase**

**Resource**

**ResourceContainer**

**ResourceFinder**

**ZipResourceFinder**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distlib/resources.py`  
**Dependencies**: `__future__.unicode_literals`, `bisect`, `io`, `logging`, `os`, `pkgutil`, `sys`, `types`, `zipimport`, `DistlibException`, `util.cached_property`, `util.get_cache_base`, `util.Cache`, `_frozen_importlib_external`, `_frozen_importlib`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distlib.scripts
:::{doc} ScriptMaker:91
A class to copy or create scripts from source scripts or callable
specifications.
:::
**Imports**: `io.BytesIO`, `logging`, `os`, `re`, `struct`, `sys`, `time`, `zipfile.ZipInfo`, `compat.sysconfig`, `compat.detect_encoding`, `compat.ZipFile`, `resources.finder`, `util.FileOperator`, `util.get_export_entry`, `util.convert_path`, `util.get_executable`, `util.get_platform`, `util.in_venv`, `java`
**Type References**: [[ScriptMaker]]

### Interface
- `enquote_executable`() -> Any
- `__init__`() -> Any
- `_get_alternate_executable`() -> Any
- `_build_shebang`() -> Any
- `_get_shebang`() -> Any
- `_get_script_text`() -> Any
- `get_manifest`() -> Any
- `_write_script`() -> Any
- `get_script_filenames`() -> Any
- `_make_script`() -> Any
- `_copy_script`() -> Any
- `dry_run`() -> Any
- `make`() -> Any
- `make_multiple`() -> Any
- `_is_shell`() -> Any
- `_fix_jython_executable`() -> Any
- `_get_launcher`() -> Any

### Implementation
**ScriptMaker**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distlib/scripts.py`  
**Dependencies**: `io.BytesIO`, `logging`, `os`, `re`, `struct`, `sys`, `time`, `zipfile.ZipInfo`, `compat.sysconfig`, `compat.detect_encoding`, `compat.ZipFile`, `resources.finder`, `util.FileOperator`, `util.get_export_entry`, `util.convert_path`, `util.get_executable`, `util.get_platform`, `util.in_venv`, `java`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distlib.wheel
:::{doc} Wheel:173
Class to build and install from Wheel files (PEP 427).
:::
:::{doc} compatible_tags:986
Return (pyver, abi, arch) tuples compatible with this Python.
:::
**Imports**: `__future__.unicode_literals`, `base64`, `codecs`, `datetime`, `email.message_from_file`, `hashlib`, `json`, `logging`, `os`, `posixpath`, `re`, `shutil`, `sys`, `tempfile`, `zipfile`, `__version__`, `DistlibException`, `compat.sysconfig`, `compat.ZipFile`, `compat.fsdecode`, `compat.text_type`, `compat.filter`, `database.InstalledDistribution`, `metadata.Metadata`, `metadata.WHEEL_METADATA_FILENAME`, `metadata.LEGACY_METADATA_FILENAME`, `util.FileOperator`, `util.convert_path`, `util.CSVReader`, `util.CSVWriter`, `util.Cache`, `util.cached_property`, `util.get_cache_base`, `util.read_exports`, `util.tempdir`, `util.get_platform`, `version.NormalizedVersion`, `version.UnsupportedVersionError`, `imp`, `importlib.machinery`, `importlib.util`, `platform`
**Type References**: [[Mounter]], [[Wheel]], [[_Version]]

### Interface
- `_get_suffixes`() -> Any
- `_load_dynamic`() -> Any
- `_get_glibc_version`() -> Any
- `compatible_tags`() -> Any
- `is_compatible`() -> Any
- `_derive_abi`() -> Any
- `__init__`() -> Any
- `add`() -> Any
- `remove`() -> Any
- `find_module`() -> Any
- `load_module`() -> Any
- `filename`() -> Any
- `exists`() -> Any
- `tags`() -> Any
- `metadata`() -> Any
- `get_wheel_metadata`() -> Any
- `info`() -> Any
- `process_shebang`() -> Any
- `get_hash`() -> Any
- `write_record`() -> Any
- `write_records`() -> Any
- `build_zip`() -> Any
- `build`() -> Any
- `skip_entry`() -> Any
- `install`() -> Any
- `_get_dylib_cache`() -> Any
- `_get_extensions`() -> Any
- `is_mountable`() -> Any
- `mount`() -> Any
- `unmount`() -> Any
- `verify`() -> Any
- `update`() -> Any
- `sorter`() -> Any
- `get_version`() -> Any
- `update_version`() -> Any
- `__str__`() -> Any

### Implementation
**Mounter**

**Wheel**

**_Version**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distlib/wheel.py`  
**Dependencies**: `__future__.unicode_literals`, `base64`, `codecs`, `datetime`, `email.message_from_file`, `hashlib`, `json`, `logging`, `os`, `posixpath`, `re`, `shutil`, `sys`, `tempfile`, `zipfile`, `__version__`, `DistlibException`, `compat.sysconfig`, `compat.ZipFile`, `compat.fsdecode`, `compat.text_type`, `compat.filter`, `database.InstalledDistribution`, `metadata.Metadata`, `metadata.WHEEL_METADATA_FILENAME`, `metadata.LEGACY_METADATA_FILENAME`, `util.FileOperator`, `util.convert_path`, `util.CSVReader`, `util.CSVWriter`, `util.Cache`, `util.cached_property`, `util.get_cache_base`, `util.read_exports`, `util.tempdir`, `util.get_platform`, `version.NormalizedVersion`, `version.UnsupportedVersionError`, `imp`, `importlib.machinery`, `importlib.util`, `platform`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distro

**Imports**: `distro.NORMALIZED_DISTRO_ID`, `distro.NORMALIZED_LSB_ID`, `distro.NORMALIZED_OS_ID`, `distro.LinuxDistribution`, `distro.__version__`, `distro.build_number`, `distro.codename`, `distro.distro_release_attr`, `distro.distro_release_info`, `distro.id`, `distro.info`, `distro.like`, `distro.linux_distribution`, `distro.lsb_release_attr`, `distro.lsb_release_info`, `distro.major_version`, `distro.minor_version`, `distro.name`, `distro.os_release_attr`, `distro.os_release_info`, `distro.uname_attr`, `distro.uname_info`, `distro.version`, `distro.version_parts`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distro/__init__.py`  
**Dependencies**: `distro.NORMALIZED_DISTRO_ID`, `distro.NORMALIZED_LSB_ID`, `distro.NORMALIZED_OS_ID`, `distro.LinuxDistribution`, `distro.__version__`, `distro.build_number`, `distro.codename`, `distro.distro_release_attr`, `distro.distro_release_info`, `distro.id`, `distro.info`, `distro.like`, `distro.linux_distribution`, `distro.lsb_release_attr`, `distro.lsb_release_info`, `distro.major_version`, `distro.minor_version`, `distro.name`, `distro.os_release_attr`, `distro.os_release_info`, `distro.uname_attr`, `distro.uname_info`, `distro.version`, `distro.version_parts`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distro.distro
:::{doc} linux_distribution:160
.. deprecated:: 1.6.0

    :func:`distro.linux_distribution()` is deprecated. It should only be
    used as a compatibility shim with Python's
    :py:func:`platform.linux_distribution()`. Please use :func:`distro.id`,
    :func:`distro.version` and :func:`distro.name` instead.

Return information about the current OS distribution as a tuple
``(id_name, version, codename)`` with items as follows:

* ``id_name``:  If *full_distribution_name* is false, the result of
  :func:`distro.id`. Otherwise, the result of :func:`distro.name`.

* ``version``:  The result of :func:`distro.version`.

* ``codename``:  The extra item (usually in parentheses) after the
  os-release version number, or the result of :func:`distro.codename`.

The interface of this function is compatible with the original
:py:func:`platform.linux_distribution` function, supporting a subset of
its parameters.

The data it returns may not exactly be the same, because it uses more data
sources than the original function, and that may lead to different data if
the OS distribution is not consistent across multiple data sources it
provides (there are indeed such distributions ...).

Another reason for differences is the fact that the :func:`distro.id`
method normalizes the distro ID string to a reliable machine-readable value
for a number of popular OS distributions.
:::
:::{doc} id:203
Return the distro ID of the current distribution, as a
machine-readable string.

For a number of OS distributions, the returned distro ID value is
*reliable*, in the sense that it is documented and that it does not change
across releases of the distribution.

This package maintains the following reliable distro ID values:

==============  =========================================
Distro ID       Distribution
==============  =========================================
"ubuntu"        Ubuntu
"debian"        Debian
"rhel"          RedHat Enterprise Linux
"centos"        CentOS
"fedora"        Fedora
"sles"          SUSE Linux Enterprise Server
"opensuse"      openSUSE
"amzn"          Amazon Linux
"arch"          Arch Linux
"buildroot"     Buildroot
"cloudlinux"    CloudLinux OS
"exherbo"       Exherbo Linux
"gentoo"        GenToo Linux
"ibm_powerkvm"  IBM PowerKVM
"kvmibm"        KVM for IBM z Systems
"linuxmint"     Linux Mint
"mageia"        Mageia
"mandriva"      Mandriva Linux
"parallels"     Parallels
"pidora"        Pidora
"raspbian"      Raspbian
"oracle"        Oracle Linux (and Oracle Enterprise Linux)
"scientific"    Scientific Linux
"slackware"     Slackware
"xenserver"     XenServer
"openbsd"       OpenBSD
"netbsd"        NetBSD
"freebsd"       FreeBSD
"midnightbsd"   MidnightBSD
"rocky"         Rocky Linux
"aix"           AIX
"guix"          Guix System
"altlinux"      ALT Linux
==============  =========================================

If you have a need to get distros for reliable IDs added into this set,
or if you find that the :func:`distro.id` function returns a different
distro ID for one of the listed distros, please create an issue in the
`distro issue tracker`_.

**Lookup hierarchy and transformations:**

First, the ID is obtained from the following sources, in the specified
order. The first available and non-empty value is used:

* the value of the "ID" attribute of the os-release file,

* the value of the "Distributor ID" attribute returned by the lsb_release
  command,

* the first part of the file name of the distro release file,

The so determined ID value then passes the following transformations,
before it is returned by this method:

* it is translated to lower case,

* blanks (which should not be there anyway) are translated to underscores,

* a normalization of the ID is performed, based upon
  `normalization tables`_. The purpose of this normalization is to ensure
  that the ID is as reliable as possible, even across incompatible changes
  in the OS distributions. A common reason for an incompatible change is
  the addition of an os-release file, or the addition of the lsb_release
  command, with ID values that differ from what was previously determined
  from the distro release file name.
:::
:::{doc} name:287
Return the name of the current OS distribution, as a human-readable
string.

If *pretty* is false, the name is returned without version or codename.
(e.g. "CentOS Linux")

If *pretty* is true, the version and codename are appended.
(e.g. "CentOS Linux 7.1.1503 (Core)")

**Lookup hierarchy:**

The name is obtained from the following sources, in the specified order.
The first available and non-empty value is used:

* If *pretty* is false:

  - the value of the "NAME" attribute of the os-release file,

  - the value of the "Distributor ID" attribute returned by the lsb_release
    command,

  - the value of the "<name>" field of the distro release file.

* If *pretty* is true:

  - the value of the "PRETTY_NAME" attribute of the os-release file,

  - the value of the "Description" attribute returned by the lsb_release
    command,

  - the value of the "<name>" field of the distro release file, appended
    with the value of the pretty version ("<version_id>" and "<codename>"
    fields) of the distro release file, if available.
:::
:::{doc} version:326
Return the version of the current OS distribution, as a human-readable
string.

If *pretty* is false, the version is returned without codename (e.g.
"7.0").

If *pretty* is true, the codename in parenthesis is appended, if the
codename is non-empty (e.g. "7.0 (Maipo)").

Some distributions provide version numbers with different precisions in
the different sources of distribution information. Examining the different
sources in a fixed priority order does not always yield the most precise
version (e.g. for Debian 8.2, or CentOS 7.1).

Some other distributions may not provide this kind of information. In these
cases, an empty string would be returned. This behavior can be observed
with rolling releases distributions (e.g. Arch Linux).

The *best* parameter can be used to control the approach for the returned
version:

If *best* is false, the first non-empty version number in priority order of
the examined sources is returned.

If *best* is true, the most precise version number out of all examined
sources is returned.

**Lookup hierarchy:**

In all cases, the version number is obtained from the following sources.
If *best* is false, this order represents the priority order:

* the value of the "VERSION_ID" attribute of the os-release file,
* the value of the "Release" attribute returned by the lsb_release
  command,
* the version number parsed from the "<version_id>" field of the first line
  of the distro release file,
* the version number parsed from the "PRETTY_NAME" attribute of the
  os-release file, if it follows the format of the distro release files.
* the version number parsed from the "Description" attribute returned by
  the lsb_release command, if it follows the format of the distro release
  files.
:::
:::{doc} version_parts:374
Return the version of the current OS distribution as a tuple
``(major, minor, build_number)`` with items as follows:

* ``major``:  The result of :func:`distro.major_version`.

* ``minor``:  The result of :func:`distro.minor_version`.

* ``build_number``:  The result of :func:`distro.build_number`.

For a description of the *best* parameter, see the :func:`distro.version`
method.
:::
:::{doc} major_version:391
Return the major version of the current OS distribution, as a string,
if provided.
Otherwise, the empty string is returned. The major version is the first
part of the dot-separated version string.

For a description of the *best* parameter, see the :func:`distro.version`
method.
:::
:::{doc} minor_version:404
Return the minor version of the current OS distribution, as a string,
if provided.
Otherwise, the empty string is returned. The minor version is the second
part of the dot-separated version string.

For a description of the *best* parameter, see the :func:`distro.version`
method.
:::
:::{doc} build_number:417
Return the build number of the current OS distribution, as a string,
if provided.
Otherwise, the empty string is returned. The build number is the third part
of the dot-separated version string.

For a description of the *best* parameter, see the :func:`distro.version`
method.
:::
:::{doc} like:430
Return a space-separated list of distro IDs of distributions that are
closely related to the current OS distribution in regards to packaging
and programming interfaces, for example distributions the current
distribution is a derivative from.

**Lookup hierarchy:**

This information item is only provided by the os-release file.
For details, see the description of the "ID_LIKE" attribute in the
`os-release man page
<http://www.freedesktop.org/software/systemd/man/os-release.html>`_.
:::
:::{doc} codename:447
Return the codename for the release of the current OS distribution,
as a string.

If the distribution does not have a codename, an empty string is returned.

Note that the returned codename is not always really a codename. For
example, openSUSE returns "x86_64". This function does not handle such
cases in any special way and just returns the string it finds, if any.

**Lookup hierarchy:**

* the codename within the "VERSION" attribute of the os-release file, if
  provided,

* the value of the "Codename" attribute returned by the lsb_release
  command,

* the value of the "<codename>" field of the distro release file.
:::
:::{doc} info:471
Return certain machine-readable information items about the current OS
distribution in a dictionary, as shown in the following example:

.. sourcecode:: python

    {
        'id': 'rhel',
        'version': '7.0',
        'version_parts': {
            'major': '7',
            'minor': '0',
            'build_number': ''
        },
        'like': 'fedora',
        'codename': 'Maipo'
    }

The dictionary structure and keys are always the same, regardless of which
information items are available in the underlying data sources. The values
for the various keys are as follows:

* ``id``:  The result of :func:`distro.id`.

* ``version``:  The result of :func:`distro.version`.

* ``version_parts -> major``:  The result of :func:`distro.major_version`.

* ``version_parts -> minor``:  The result of :func:`distro.minor_version`.

* ``version_parts -> build_number``:  The result of
  :func:`distro.build_number`.

* ``like``:  The result of :func:`distro.like`.

* ``codename``:  The result of :func:`distro.codename`.

For a description of the *pretty* and *best* parameters, see the
:func:`distro.version` method.
:::
:::{doc} os_release_info:515
Return a dictionary containing key-value pairs for the information items
from the os-release file data source of the current OS distribution.

See `os-release file`_ for details about these information items.
:::
:::{doc} lsb_release_info:525
Return a dictionary containing key-value pairs for the information items
from the lsb_release command data source of the current OS distribution.

See `lsb_release command output`_ for details about these information
items.
:::
:::{doc} distro_release_info:536
Return a dictionary containing key-value pairs for the information items
from the distro release file data source of the current OS distribution.

See `distro release file`_ for details about these information items.
:::
:::{doc} uname_info:546
Return a dictionary containing key-value pairs for the information items
from the distro release file data source of the current OS distribution.
:::
:::{doc} os_release_attr:554
Return a single named information item from the os-release file data source
of the current OS distribution.

Parameters:

* ``attribute`` (string): Key of the information item.

Returns:

* (string): Value of the information item, if the item exists.
  The empty string, if the item does not exist.

See `os-release file`_ for details about these information items.
:::
:::{doc} lsb_release_attr:573
Return a single named information item from the lsb_release command output
data source of the current OS distribution.

Parameters:

* ``attribute`` (string): Key of the information item.

Returns:

* (string): Value of the information item, if the item exists.
  The empty string, if the item does not exist.

See `lsb_release command output`_ for details about these information
items.
:::
:::{doc} distro_release_attr:593
Return a single named information item from the distro release file
data source of the current OS distribution.

Parameters:

* ``attribute`` (string): Key of the information item.

Returns:

* (string): Value of the information item, if the item exists.
  The empty string, if the item does not exist.

See `distro release file`_ for details about these information items.
:::
:::{doc} uname_attr:612
Return a single named information item from the distro release file
data source of the current OS distribution.

Parameters:

* ``attribute`` (string): Key of the information item.

Returns:

* (string): Value of the information item, if the item exists.
            The empty string, if the item does not exist.
:::
:::{doc} LinuxDistribution:649
Provides information about a OS distribution.

This package creates a private module-global instance of this class with
default initialization arguments, that is used by the
`consolidated accessor functions`_ and `single source accessor functions`_.
By using default initialization arguments, that module-global instance
returns data about the current OS distribution (i.e. the distro this
package runs on).

Normally, it is not necessary to create additional instances of this class.
However, in situations where control is needed over the exact data sources
that are used, instances of this class can be created with a specific
distro release file, or a specific os-release file, or without invoking the
lsb_release command.
:::
**Imports**: `argparse`, `json`, `logging`, `os`, `re`, `shlex`, `subprocess`, `sys`, `warnings`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.Optional`, `typing.Sequence`, `typing.TextIO`, `typing.Tuple`, `typing.Type`, `typing.TypedDict`, `functools.cached_property`
**Type References**: [[InfoDict]], [[LinuxDistribution]], [[VersionDict]], [[cached_property]]

### Interface
- `linux_distribution`(full_distribution_name: bool) -> Tuple[<ast.Tuple object at 0x12784df50>]
- `id`() -> str
- `name`(pretty: bool) -> str
- `version`(pretty: bool, best: bool) -> str
- `version_parts`(best: bool) -> Tuple[<ast.Tuple object at 0x127870c90>]
- `major_version`(best: bool) -> str
- `minor_version`(best: bool) -> str
- `build_number`(best: bool) -> str
- `like`() -> str
- `codename`() -> str
- `info`(pretty: bool, best: bool) -> InfoDict
- `os_release_info`() -> [Dict[<ast.Tuple object at 0x127886fd0>]](#dict)
- `lsb_release_info`() -> [Dict[<ast.Tuple object at 0x127887890>]](#dict)
- `distro_release_info`() -> [Dict[<ast.Tuple object at 0x12788c190>]](#dict)
- `uname_info`() -> [Dict[<ast.Tuple object at 0x12788ca50>]](#dict)
- `os_release_attr`(attribute: str) -> str
- `lsb_release_attr`(attribute: str) -> str
- `distro_release_attr`(attribute: str) -> str
- `uname_attr`(attribute: str) -> str
- `main`() -> None
- `__init__`(f: Callable[<ast.Tuple object at 0x1278041d0>]) -> None
- `__repr__`() -> str
- `oslevel_info`() -> str
- `_os_release_info`() -> [Dict[<ast.Tuple object at 0x127898f50>]](#dict)
- `_parse_os_release_content`(lines: TextIO) -> [Dict[<ast.Tuple object at 0x1278a1690>]](#dict)
- `_lsb_release_info`() -> [Dict[<ast.Tuple object at 0x1278a38d0>]](#dict)
- `_parse_lsb_release_content`(lines: Iterable[str]) -> [Dict[<ast.Tuple object at 0x1278adfd0>]](#dict)
- `_uname_info`() -> [Dict[<ast.Tuple object at 0x1278aff50>]](#dict)
- `_oslevel_info`() -> str
- `_debian_version`() -> str
- `_parse_uname_content`(lines: Sequence[str]) -> [Dict[<ast.Tuple object at 0x1278c15d0>]](#dict)
- `_to_str`(bytestring: bytes) -> str
- `_distro_release_info`() -> [Dict[<ast.Tuple object at 0x1278cbb90>]](#dict)
- `_parse_distro_release_file`(filepath: str) -> [Dict[<ast.Tuple object at 0x1278d51d0>]](#dict)
- `_parse_distro_release_content`(line: str) -> [Dict[<ast.Tuple object at 0x1278dc750>]](#dict)
- `normalize`(distro_id: str, table: [Dict[<ast.Tuple object at 0x12784e9d0>]](#dict)) -> str
- `__get__`(obj: Any, owner: Type[Any]) -> Any

### Implementation
**VersionDict**
  - major: str
  - minor: str
  - build_number: str
**InfoDict**
  - id: str
  - version: str
  - version_parts: VersionDict
  - like: str
  - codename: str
**LinuxDistribution**

**cached_property**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distro/distro.py`  
**Dependencies**: `argparse`, `json`, `logging`, `os`, `re`, `shlex`, `subprocess`, `sys`, `warnings`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.Optional`, `typing.Sequence`, `typing.TextIO`, `typing.Tuple`, `typing.Type`, `typing.TypedDict`, `functools.cached_property`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.distro.__main__

**Imports**: `distro.main`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/distro/__main__.py`  
**Dependencies**: `distro.main`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.cachecontrol.serialize

**Imports**: `__future__.annotations`, `io`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Mapping`, `typing.cast`, `pip._vendor.msgpack`, `pip._vendor.requests.structures.CaseInsensitiveDict`, `pip._vendor.urllib3.HTTPResponse`, `pip._vendor.requests.PreparedRequest`
**Type References**: [[CaseInsensitiveDict]], [[IO]], [[Serializer]]

### Interface
- `dumps`(request: PreparedRequest, response: HTTPResponse, body: bytes | None) -> bytes
- `serialize`(data: dict[<ast.Tuple object at 0x1278f4c50>]) -> bytes
- `loads`(request: PreparedRequest, data: bytes, body_file: IO[bytes] | None) -> HTTPResponse | None
- `prepare_response`(request: PreparedRequest, cached: Mapping[<ast.Tuple object at 0x127902410>], body_file: IO[bytes] | None) -> HTTPResponse | None
- `_loads_v4`(request: PreparedRequest, data: bytes, body_file: IO[bytes] | None) -> HTTPResponse | None

### Implementation
**Serializer**
  - response_headers: CaseInsensitiveDict[str]
  - headers: CaseInsensitiveDict[str]
  - body: IO[bytes]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/cachecontrol/serialize.py`  
**Dependencies**: `__future__.annotations`, `io`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Mapping`, `typing.cast`, `pip._vendor.msgpack`, `pip._vendor.requests.structures.CaseInsensitiveDict`, `pip._vendor.urllib3.HTTPResponse`, `pip._vendor.requests.PreparedRequest`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.cachecontrol.wrapper

**Imports**: `__future__.annotations`, `typing.TYPE_CHECKING`, `typing.Collection`, `pip._vendor.cachecontrol.adapter.CacheControlAdapter`, `pip._vendor.cachecontrol.cache.DictCache`, `pip._vendor.requests`, `pip._vendor.cachecontrol.cache.BaseCache`, `pip._vendor.cachecontrol.controller.CacheController`, `pip._vendor.cachecontrol.heuristics.BaseHeuristic`, `pip._vendor.cachecontrol.serialize.Serializer`
### Interface
- `CacheControl`(sess: requests.Session, cache: BaseCache | None, cache_etags: bool, serializer: Serializer | None, heuristic: BaseHeuristic | None, controller_class: type[CacheController] | None, adapter_class: type[CacheControlAdapter] | None, cacheable_methods: Collection[str] | None) -> requests.Session
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/cachecontrol/wrapper.py`  
**Dependencies**: `__future__.annotations`, `typing.TYPE_CHECKING`, `typing.Collection`, `pip._vendor.cachecontrol.adapter.CacheControlAdapter`, `pip._vendor.cachecontrol.cache.DictCache`, `pip._vendor.requests`, `pip._vendor.cachecontrol.cache.BaseCache`, `pip._vendor.cachecontrol.controller.CacheController`, `pip._vendor.cachecontrol.heuristics.BaseHeuristic`, `pip._vendor.cachecontrol.serialize.Serializer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.cachecontrol.controller
:::{doc} parse_uri:37
Parses a URI using the regex given in Appendix B of RFC 3986.

(scheme, authority, path, query, fragment) = parse_uri(uri)
:::
:::{doc} CacheController:48
An interface to see if request should cached or not.
:::
**Imports**: `__future__.annotations`, `calendar`, `logging`, `re`, `time`, `email.utils.parsedate_tz`, `typing.TYPE_CHECKING`, `typing.Collection`, `typing.Mapping`, `pip._vendor.requests.structures.CaseInsensitiveDict`, `pip._vendor.cachecontrol.cache.DictCache`, `pip._vendor.cachecontrol.cache.SeparateBodyBaseCache`, `pip._vendor.cachecontrol.serialize.Serializer`, `typing.Literal`, `pip._vendor.requests.PreparedRequest`, `pip._vendor.urllib3.HTTPResponse`, `pip._vendor.cachecontrol.cache.BaseCache`
**Type References**: [[CacheController]], [[CaseInsensitiveDict]], [[None]]

### Interface
- `parse_uri`(uri: str) -> tuple[<ast.Tuple object at 0x1279376d0>]
- `__init__`(cache: BaseCache | None, cache_etags: bool, serializer: Serializer | None, status_codes: Collection[int] | None) -> Any
- `_urlnorm`(uri: str) -> str
- `cache_url`(uri: str) -> str
- `parse_cache_control`(headers: Mapping[<ast.Tuple object at 0x12792d1d0>]) -> dict[<ast.Tuple object at 0x127922750>]
- `_load_from_cache`(request: PreparedRequest) -> HTTPResponse | None
- `cached_request`(request: PreparedRequest) -> HTTPResponse | Literal[False]
- `conditional_headers`(request: PreparedRequest) -> dict[<ast.Tuple object at 0x12796f890>]
- `_cache_set`(cache_url: str, request: PreparedRequest, response: HTTPResponse, body: bytes | None, expires_time: int | None) -> None
- `cache_response`(request: PreparedRequest, response: HTTPResponse, body: bytes | None, status_codes: Collection[int] | None) -> None
- `update_cached_response`(request: PreparedRequest, response: HTTPResponse) -> HTTPResponse

### Implementation
**CacheController**
  - retval: dict[<ast.Tuple object at 0x12792a590>]
  - headers: CaseInsensitiveDict[str]
  - response_headers: CaseInsensitiveDict[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/cachecontrol/controller.py`  
**Dependencies**: `__future__.annotations`, `calendar`, `logging`, `re`, `time`, `email.utils.parsedate_tz`, `typing.TYPE_CHECKING`, `typing.Collection`, `typing.Mapping`, `pip._vendor.requests.structures.CaseInsensitiveDict`, `pip._vendor.cachecontrol.cache.DictCache`, `pip._vendor.cachecontrol.cache.SeparateBodyBaseCache`, `pip._vendor.cachecontrol.serialize.Serializer`, `typing.Literal`, `pip._vendor.requests.PreparedRequest`, `pip._vendor.urllib3.HTTPResponse`, `pip._vendor.cachecontrol.cache.BaseCache`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.cachecontrol.filewrapper
:::{doc} CallbackFileWrapper:14
Small wrapper around a fp object which will tee everything read into a
buffer, and when that file is closed it will execute a callback with the
contents of that buffer.

All attributes are proxied to the underlying file object.

This class uses members with a double underscore (__) leading prefix so as
not to accidentally shadow an attribute.

The data is stored in a temporary file until it is all available.  As long
as the temporary files directory is disk-based (sometimes it's a
memory-backed-``tmpfs`` on Linux), data will be unloaded to disk if memory
pressure is high.  For small files the disk usually won't be used at all,
it'll all be in the filesystem memory cache, so there should be no
performance impact.
:::
**Imports**: `__future__.annotations`, `mmap`, `tempfile.NamedTemporaryFile`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `http.client.HTTPResponse`
**Type References**: [[CallbackFileWrapper]]

### Interface
- `__init__`(fp: HTTPResponse, callback: Callable[<ast.Tuple object at 0x1279b3710>] | None) -> None
- `__getattr__`(name: str) -> Any
- `__is_fp_closed`() -> bool
- `_close`() -> None
- `read`(amt: int | None) -> bytes
- `_safe_read`(amt: int) -> bytes

### Implementation
**CallbackFileWrapper**
  - data: bytes
  - closed: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/cachecontrol/filewrapper.py`  
**Dependencies**: `__future__.annotations`, `mmap`, `tempfile.NamedTemporaryFile`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `http.client.HTTPResponse`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.cachecontrol.heuristics
:::{doc} OneDayCache:60
Cache the response by providing an expires 1 day in the
future.
:::
:::{doc} ExpiresAfter:77
Cache **all** requests for a defined time period.
:::
:::{doc} LastModified:94
If there is no Expires header already, fall back on Last-Modified
using the heuristic from
http://tools.ietf.org/html/rfc7234#section-4.2.2
to calculate a reasonable value.

Firefox also does something like this per
https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching_FAQ
http://lxr.mozilla.org/mozilla-release/source/netwerk/protocol/http/nsHttpResponseHead.cpp#397
Unlike mozilla we limit this to 24-hr.
:::
**Imports**: `__future__.annotations`, `calendar`, `time`, `datetime.datetime`, `datetime.timedelta`, `datetime.timezone`, `email.utils.formatdate`, `email.utils.parsedate`, `email.utils.parsedate_tz`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Mapping`, `pip._vendor.urllib3.HTTPResponse`
**Type References**: [[BaseHeuristic]], [[ExpiresAfter]], [[LastModified]], [[Mapping]], [[OneDayCache]]

### Interface
- `expire_after`(delta: timedelta, date: datetime | None) -> datetime
- `datetime_to_header`(dt: datetime) -> str
- `warning`(resp: HTTPResponse) -> str | None
- `update_headers`(resp: HTTPResponse) -> dict[<ast.Tuple object at 0x1279ea6d0>]
- `apply`(response: HTTPResponse) -> HTTPResponse
- `__init__`() -> None

### Implementation
**BaseHeuristic**

**OneDayCache**

**ExpiresAfter**

**LastModified**
  - headers: Mapping[<ast.Tuple object at 0x1279d8bd0>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/cachecontrol/heuristics.py`  
**Dependencies**: `__future__.annotations`, `calendar`, `time`, `datetime.datetime`, `datetime.timedelta`, `datetime.timezone`, `email.utils.formatdate`, `email.utils.parsedate`, `email.utils.parsedate_tz`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Mapping`, `pip._vendor.urllib3.HTTPResponse`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.cachecontrol.adapter

**Imports**: `__future__.annotations`, `functools`, `types`, `zlib`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Collection`, `typing.Mapping`, `pip._vendor.requests.adapters.HTTPAdapter`, `pip._vendor.cachecontrol.cache.DictCache`, `pip._vendor.cachecontrol.controller.PERMANENT_REDIRECT_STATUSES`, `pip._vendor.cachecontrol.controller.CacheController`, `pip._vendor.cachecontrol.filewrapper.CallbackFileWrapper`, `pip._vendor.requests.PreparedRequest`, `pip._vendor.requests.Response`, `pip._vendor.urllib3.HTTPResponse`, `pip._vendor.cachecontrol.cache.BaseCache`, `pip._vendor.cachecontrol.heuristics.BaseHeuristic`, `pip._vendor.cachecontrol.serialize.Serializer`
**Type References**: [[CacheControlAdapter]], [[Response]]

### Interface
- `__init__`(cache: BaseCache | None, cache_etags: bool, controller_class: type[CacheController] | None, serializer: Serializer | None, heuristic: BaseHeuristic | None, cacheable_methods: Collection[str] | None) -> None
- `send`(request: PreparedRequest, stream: bool, timeout: None | float | tuple[<ast.Tuple object at 0x1279fa8d0>] | tuple[<ast.Tuple object at 0x1279fa5d0>], verify: bool | str, cert: None | bytes | str | tuple[<ast.Tuple object at 0x1279f9d90>], proxies: Mapping[<ast.Tuple object at 0x1279f9810>] | None, cacheable_methods: Collection[str] | None) -> Response
- `build_response`(request: PreparedRequest, response: HTTPResponse, from_cache: bool, cacheable_methods: Collection[str] | None) -> Response
- `close`() -> None
- `_update_chunk_length`(self: HTTPResponse) -> None

### Implementation
**CacheControlAdapter**
  - resp: Response
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/cachecontrol/adapter.py`  
**Dependencies**: `__future__.annotations`, `functools`, `types`, `zlib`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Collection`, `typing.Mapping`, `pip._vendor.requests.adapters.HTTPAdapter`, `pip._vendor.cachecontrol.cache.DictCache`, `pip._vendor.cachecontrol.controller.PERMANENT_REDIRECT_STATUSES`, `pip._vendor.cachecontrol.controller.CacheController`, `pip._vendor.cachecontrol.filewrapper.CallbackFileWrapper`, `pip._vendor.requests.PreparedRequest`, `pip._vendor.requests.Response`, `pip._vendor.urllib3.HTTPResponse`, `pip._vendor.cachecontrol.cache.BaseCache`, `pip._vendor.cachecontrol.heuristics.BaseHeuristic`, `pip._vendor.cachecontrol.serialize.Serializer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.cachecontrol.cache
:::{doc} SeparateBodyBaseCache:54
In this variant, the body is not stored mixed in with the metadata, but is
passed in (as a bytes-like object) in a separate call to ``set_body()``.

That is, the expected interaction pattern is::

    cache.set(key, serialized_metadata)
    cache.set_body(key)

Similarly, the body should be loaded separately via ``get_body()``.
:::
**Imports**: `__future__.annotations`, `threading.Lock`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.MutableMapping`, `datetime.datetime`
**Type References**: [[BaseCache]], [[DictCache]], [[SeparateBodyBaseCache]]

### Interface
- `get`(key: str) -> bytes | None
- `set`(key: str, value: bytes, expires: int | datetime | None) -> None
- `delete`(key: str) -> None
- `close`() -> None
- `__init__`(init_dict: MutableMapping[<ast.Tuple object at 0x127a1d110>] | None) -> None
- `set_body`(key: str, body: bytes) -> None
- `get_body`(key: str) -> IO[bytes] | None

### Implementation
**BaseCache**

**DictCache**

**SeparateBodyBaseCache**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/cachecontrol/cache.py`  
**Dependencies**: `__future__.annotations`, `threading.Lock`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.MutableMapping`, `datetime.datetime`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.cachecontrol

**Imports**: `pip._vendor.cachecontrol.adapter.CacheControlAdapter`, `pip._vendor.cachecontrol.controller.CacheController`, `pip._vendor.cachecontrol.wrapper.CacheControl`, `logging`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/cachecontrol/__init__.py`  
**Dependencies**: `pip._vendor.cachecontrol.adapter.CacheControlAdapter`, `pip._vendor.cachecontrol.controller.CacheController`, `pip._vendor.cachecontrol.wrapper.CacheControl`, `logging`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.cachecontrol._cmd

**Imports**: `__future__.annotations`, `logging`, `argparse.ArgumentParser`, `typing.TYPE_CHECKING`, `pip._vendor.requests`, `pip._vendor.cachecontrol.adapter.CacheControlAdapter`, `pip._vendor.cachecontrol.cache.DictCache`, `pip._vendor.cachecontrol.controller.logger`, `argparse.Namespace`, `pip._vendor.cachecontrol.controller.CacheController`
**Type References**: [[CacheController]]

### Interface
- `setup_logging`() -> None
- `get_session`() -> requests.Session
- `get_args`() -> Namespace
- `main`() -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/cachecontrol/_cmd.py`  
**Dependencies**: `__future__.annotations`, `logging`, `argparse.ArgumentParser`, `typing.TYPE_CHECKING`, `pip._vendor.requests`, `pip._vendor.cachecontrol.adapter.CacheControlAdapter`, `pip._vendor.cachecontrol.cache.DictCache`, `pip._vendor.cachecontrol.controller.logger`, `argparse.Namespace`, `pip._vendor.cachecontrol.controller.CacheController`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.idna.intranges
:::{doc} intranges_from_list:11
Represent a list of integers as a sequence of ranges:
((start_0, end_0), (start_1, end_1), ...), such that the original
integers are exactly those x such that start_i <= x < end_i for some i.

Ranges are encoded as single integers (start << 32 | end), not as tuples.
:::
:::{doc} intranges_contain:39
Determine if `int_` falls into one of the ranges in `ranges`.
:::
**Imports**: `bisect`, `typing.List`, `typing.Tuple`
### Interface
- `intranges_from_list`(list_: [List[int]](#list)) -> Tuple[<ast.Tuple object at 0x127a46410>]
- `_encode_range`(start: int, end: int) -> int
- `_decode_range`(r: int) -> Tuple[<ast.Tuple object at 0x127a44e90>]
- `intranges_contain`(int_: int, ranges: Tuple[<ast.Tuple object at 0x127a44890>]) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/idna/intranges.py`  
**Dependencies**: `bisect`, `typing.List`, `typing.Tuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.idna.package_data



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/idna/package_data.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.idna.compat

**Imports**: `core.*`, `codec.*`, `typing.Any`, `typing.Union`
### Interface
- `ToASCII`(label: str) -> bytes
- `ToUnicode`(label: [Union[<ast.Tuple object at 0x127a4f1d0>]](#union)) -> str
- `nameprep`(s: Any) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/idna/compat.py`  
**Dependencies**: `core.*`, `codec.*`, `typing.Any`, `typing.Union`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.idna.idnadata



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/idna/idnadata.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.idna

**Imports**: `package_data.__version__`, `core.IDNABidiError`, `core.IDNAError`, `core.InvalidCodepoint`, `core.InvalidCodepointContext`, `core.alabel`, `core.check_bidi`, `core.check_hyphen_ok`, `core.check_initial_combiner`, `core.check_label`, `core.check_nfc`, `core.decode`, `core.encode`, `core.ulabel`, `core.uts46_remap`, `core.valid_contextj`, `core.valid_contexto`, `core.valid_label_length`, `core.valid_string_length`, `intranges.intranges_contain`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/idna/__init__.py`  
**Dependencies**: `package_data.__version__`, `core.IDNABidiError`, `core.IDNAError`, `core.InvalidCodepoint`, `core.InvalidCodepointContext`, `core.alabel`, `core.check_bidi`, `core.check_hyphen_ok`, `core.check_initial_combiner`, `core.check_label`, `core.check_nfc`, `core.decode`, `core.encode`, `core.ulabel`, `core.uts46_remap`, `core.valid_contextj`, `core.valid_contexto`, `core.valid_label_length`, `core.valid_string_length`, `intranges.intranges_contain`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.idna.core
:::{doc} IDNAError:12
Base exception for all IDNA-encoding related problems 
:::
:::{doc} IDNABidiError:17
Exception when bidirectional requirements are not satisfied 
:::
:::{doc} InvalidCodepoint:22
Exception when a disallowed or unallocated codepoint is used 
:::
:::{doc} InvalidCodepointContext:27
Exception when the codepoint is not valid in the context it is used 
:::
:::{doc} uts46_remap:303
Re-map the characters in the string according to UTS46 processing.
:::
**Imports**: `idnadata`, `bisect`, `unicodedata`, `re`, `typing.Union`, `typing.Optional`, `intranges.intranges_contain`, `uts46data.uts46data`
**Type References**: [[IDNABidiError]], [[IDNAError]], [[InvalidCodepoint]], [[InvalidCodepointContext]]

### Interface
- `_combining_class`(cp: int) -> int
- `_is_script`(cp: str, script: str) -> bool
- `_punycode`(s: str) -> bytes
- `_unot`(s: int) -> str
- `valid_label_length`(label: [Union[<ast.Tuple object at 0x127d72790>]](#union)) -> bool
- `valid_string_length`(label: [Union[<ast.Tuple object at 0x127d71a50>]](#union), trailing_dot: bool) -> bool
- `check_bidi`(label: str, check_ltr: bool) -> bool
- `check_initial_combiner`(label: str) -> bool
- `check_hyphen_ok`(label: str) -> bool
- `check_nfc`(label: str) -> None
- `valid_contextj`(label: str, pos: int) -> bool
- `valid_contexto`(label: str, pos: int, exception: bool) -> bool
- `check_label`(label: [Union[<ast.Tuple object at 0x127da9f90>]](#union)) -> None
- `alabel`(label: str) -> bytes
- `ulabel`(label: [Union[<ast.Tuple object at 0x127db9fd0>]](#union)) -> str
- `uts46_remap`(domain: str, std3_rules: bool, transitional: bool) -> str
- `encode`(s: [Union[<ast.Tuple object at 0x127dcffd0>]](#union), strict: bool, uts46: bool, std3_rules: bool, transitional: bool) -> bytes
- `decode`(s: [Union[<ast.Tuple object at 0x127de1a10>]](#union), strict: bool, uts46: bool, std3_rules: bool) -> str

### Implementation
**IDNAError**

**IDNABidiError**

**InvalidCodepoint**

**InvalidCodepointContext**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/idna/core.py`  
**Dependencies**: `idnadata`, `bisect`, `unicodedata`, `re`, `typing.Union`, `typing.Optional`, `intranges.intranges_contain`, `uts46data.uts46data`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.idna.codec

**Imports**: `core.encode`, `core.decode`, `core.alabel`, `core.ulabel`, `core.IDNAError`, `codecs`, `re`, `typing.Any`, `typing.Tuple`, `typing.Optional`
**Type References**: [[Codec]], [[IncrementalDecoder]], [[IncrementalEncoder]], [[StreamReader]], [[StreamWriter]]

### Interface
- `search_function`(name: str) -> [Optional[codecs.CodecInfo]](#optional)
- `encode`(data: str, errors: str) -> Tuple[<ast.Tuple object at 0x127df9990>]
- `decode`(data: bytes, errors: str) -> Tuple[<ast.Tuple object at 0x127df7f90>]
- `_buffer_encode`(data: str, errors: str, final: bool) -> Tuple[<ast.Tuple object at 0x127deb510>]
- `_buffer_decode`(data: Any, errors: str, final: bool) -> Tuple[<ast.Tuple object at 0x127e109d0>]

### Implementation
**Codec**

**IncrementalEncoder**

**IncrementalDecoder**

**StreamWriter**

**StreamReader**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/idna/codec.py`  
**Dependencies**: `core.encode`, `core.decode`, `core.alabel`, `core.ulabel`, `core.IDNAError`, `codecs`, `re`, `typing.Any`, `typing.Tuple`, `typing.Optional`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.idna.uts46data

**Imports**: `typing.List`, `typing.Tuple`, `typing.Union`
### Interface
- `_seg_0`() -> [List[Union[<ast.Tuple object at 0x127e99990>]]](#list)
- `_seg_1`() -> [List[Union[<ast.Tuple object at 0x1603b42d0>]]](#list)
- `_seg_2`() -> [List[Union[<ast.Tuple object at 0x1603d9610>]]](#list)
- `_seg_3`() -> [List[Union[<ast.Tuple object at 0x1603faed0>]]](#list)
- `_seg_4`() -> [List[Union[<ast.Tuple object at 0x1600d7750>]]](#list)
- `_seg_5`() -> [List[Union[<ast.Tuple object at 0x1600b5c10>]]](#list)
- `_seg_6`() -> [List[Union[<ast.Tuple object at 0x16001ba10>]]](#list)
- `_seg_7`() -> [List[Union[<ast.Tuple object at 0x16028d950>]]](#list)
- `_seg_8`() -> [List[Union[<ast.Tuple object at 0x160268390>]]](#list)
- `_seg_9`() -> [List[Union[<ast.Tuple object at 0x16023a810>]]](#list)
- `_seg_10`() -> [List[Union[<ast.Tuple object at 0x16021a150>]]](#list)
- `_seg_11`() -> [List[Union[<ast.Tuple object at 0x127efa310>]]](#list)
- `_seg_12`() -> [List[Union[<ast.Tuple object at 0x127ed6550>]]](#list)
- `_seg_13`() -> [List[Union[<ast.Tuple object at 0x127eb1c10>]]](#list)
- `_seg_14`() -> [List[Union[<ast.Tuple object at 0x127e85bd0>]]](#list)
- `_seg_15`() -> [List[Union[<ast.Tuple object at 0x127e571d0>]]](#list)
- `_seg_16`() -> [List[Union[<ast.Tuple object at 0x127e28d90>]]](#list)
- `_seg_17`() -> [List[Union[<ast.Tuple object at 0x127fe7790>]]](#list)
- `_seg_18`() -> [List[Union[<ast.Tuple object at 0x127fc6150>]]](#list)
- `_seg_19`() -> [List[Union[<ast.Tuple object at 0x127fa0190>]]](#list)
- `_seg_20`() -> [List[Union[<ast.Tuple object at 0x127f75990>]]](#list)
- `_seg_21`() -> [List[Union[<ast.Tuple object at 0x127f47910>]]](#list)
- `_seg_22`() -> [List[Union[<ast.Tuple object at 0x127f0d0d0>]]](#list)
- `_seg_23`() -> [List[Union[<ast.Tuple object at 0x1601de850>]]](#list)
- `_seg_24`() -> [List[Union[<ast.Tuple object at 0x1601afd50>]]](#list)
- `_seg_25`() -> [List[Union[<ast.Tuple object at 0x16018e490>]]](#list)
- `_seg_26`() -> [List[Union[<ast.Tuple object at 0x16016d0d0>]]](#list)
- `_seg_27`() -> [List[Union[<ast.Tuple object at 0x16013e1d0>]]](#list)
- `_seg_28`() -> [List[Union[<ast.Tuple object at 0x16010f5d0>]]](#list)
- `_seg_29`() -> [List[Union[<ast.Tuple object at 0x160417490>]]](#list)
- `_seg_30`() -> [List[Union[<ast.Tuple object at 0x160446010>]]](#list)
- `_seg_31`() -> [List[Union[<ast.Tuple object at 0x160474e90>]]](#list)
- `_seg_32`() -> [List[Union[<ast.Tuple object at 0x160497d50>]]](#list)
- `_seg_33`() -> [List[Union[<ast.Tuple object at 0x1604c6c50>]]](#list)
- `_seg_34`() -> [List[Union[<ast.Tuple object at 0x1604f19d0>]]](#list)
- `_seg_35`() -> [List[Union[<ast.Tuple object at 0x160517590>]]](#list)
- `_seg_36`() -> [List[Union[<ast.Tuple object at 0x160540b90>]]](#list)
- `_seg_37`() -> [List[Union[<ast.Tuple object at 0x1605660d0>]]](#list)
- `_seg_38`() -> [List[Union[<ast.Tuple object at 0x16058bf90>]]](#list)
- `_seg_39`() -> [List[Union[<ast.Tuple object at 0x1605b6990>]]](#list)
- `_seg_40`() -> [List[Union[<ast.Tuple object at 0x1605e5890>]]](#list)
- `_seg_41`() -> [List[Union[<ast.Tuple object at 0x160614690>]]](#list)
- `_seg_42`() -> [List[Union[<ast.Tuple object at 0x160637250>]]](#list)
- `_seg_43`() -> [List[Union[<ast.Tuple object at 0x1606660d0>]]](#list)
- `_seg_44`() -> [List[Union[<ast.Tuple object at 0x160694ad0>]]](#list)
- `_seg_45`() -> [List[Union[<ast.Tuple object at 0x1606bb990>]]](#list)
- `_seg_46`() -> [List[Union[<ast.Tuple object at 0x1606ea890>]]](#list)
- `_seg_47`() -> [List[Union[<ast.Tuple object at 0x160719790>]]](#list)
- `_seg_48`() -> [List[Union[<ast.Tuple object at 0x160748590>]]](#list)
- `_seg_49`() -> [List[Union[<ast.Tuple object at 0x16076aed0>]]](#list)
- `_seg_50`() -> [List[Union[<ast.Tuple object at 0x160799a50>]]](#list)
- `_seg_51`() -> [List[Union[<ast.Tuple object at 0x1607c8950>]]](#list)
- `_seg_52`() -> [List[Union[<ast.Tuple object at 0x1607ef490>]]](#list)
- `_seg_53`() -> [List[Union[<ast.Tuple object at 0x161018b10>]]](#list)
- `_seg_54`() -> [List[Union[<ast.Tuple object at 0x16103ebd0>]]](#list)
- `_seg_55`() -> [List[Union[<ast.Tuple object at 0x16105ff10>]]](#list)
- `_seg_56`() -> [List[Union[<ast.Tuple object at 0x161091590>]]](#list)
- `_seg_57`() -> [List[Union[<ast.Tuple object at 0x1610b17d0>]]](#list)
- `_seg_58`() -> [List[Union[<ast.Tuple object at 0x1610d5f10>]]](#list)
- `_seg_59`() -> [List[Union[<ast.Tuple object at 0x1610fabd0>]]](#list)
- `_seg_60`() -> [List[Union[<ast.Tuple object at 0x1611241d0>]]](#list)
- `_seg_61`() -> [List[Union[<ast.Tuple object at 0x16114b010>]]](#list)
- `_seg_62`() -> [List[Union[<ast.Tuple object at 0x161175b10>]]](#list)
- `_seg_63`() -> [List[Union[<ast.Tuple object at 0x1611a4590>]]](#list)
- `_seg_64`() -> [List[Union[<ast.Tuple object at 0x1611cb450>]]](#list)
- `_seg_65`() -> [List[Union[<ast.Tuple object at 0x1611fa350>]]](#list)
- `_seg_66`() -> [List[Union[<ast.Tuple object at 0x161229250>]]](#list)
- `_seg_67`() -> [List[Union[<ast.Tuple object at 0x1612580d0>]]](#list)
- `_seg_68`() -> [List[Union[<ast.Tuple object at 0x16127ef90>]]](#list)
- `_seg_69`() -> [List[Union[<ast.Tuple object at 0x1612ade90>]]](#list)
- `_seg_70`() -> [List[Union[<ast.Tuple object at 0x1612d8310>]]](#list)
- `_seg_71`() -> [List[Union[<ast.Tuple object at 0x161302250>]]](#list)
- `_seg_72`() -> [List[Union[<ast.Tuple object at 0x16132c5d0>]]](#list)
- `_seg_73`() -> [List[Union[<ast.Tuple object at 0x161352b10>]]](#list)
- `_seg_74`() -> [List[Union[<ast.Tuple object at 0x16137d010>]]](#list)
- `_seg_75`() -> [List[Union[<ast.Tuple object at 0x1613a29d0>]]](#list)
- `_seg_76`() -> [List[Union[<ast.Tuple object at 0x1613ccb50>]]](#list)
- `_seg_77`() -> [List[Union[<ast.Tuple object at 0x1613f7910>]]](#list)
- `_seg_78`() -> [List[Union[<ast.Tuple object at 0x161422810>]]](#list)
- `_seg_79`() -> [List[Union[<ast.Tuple object at 0x161451610>]]](#list)
- `_seg_80`() -> [List[Union[<ast.Tuple object at 0x161480490>]]](#list)
- `_seg_81`() -> [List[Union[<ast.Tuple object at 0x16149b990>]]](#list)
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/idna/uts46data.py`  
**Dependencies**: `typing.List`, `typing.Tuple`, `typing.Union`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.cookies
:::{doc} MockRequest:23
Wraps a `requests.Request` to mimic a `urllib2.Request`.

The code in `http.cookiejar.CookieJar` expects this interface in order to correctly
manage cookie policies, i.e., determine whether a cookie can be set, given the
domains of the request and the cookie.

The original request object is read-only. The client is responsible for collecting
the new headers via `get_new_headers()` and interpreting them appropriately. You
probably want `get_cookie_header`, defined below.
:::
:::{doc} MockResponse:103
Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.

...what? Basically, expose the parsed HTTP headers from the server response
the way `http.cookiejar` expects to see them.
:::
:::{doc} extract_cookies_to_jar:124
Extract the cookies from the response into a CookieJar.

:param jar: http.cookiejar.CookieJar (not necessarily a RequestsCookieJar)
:param request: our own requests.Request object
:param response: urllib3.HTTPResponse object
:::
:::{doc} get_cookie_header:140
Produce an appropriate Cookie header string to be sent with `request`, or None.

:rtype: str
:::
:::{doc} remove_cookie_by_name:151
Unsets a cookie by name, by default over all domains and paths.

Wraps CookieJar.clear(), is O(n).
:::
:::{doc} CookieConflictError:170
There are two cookies that meet the criteria specified in the cookie jar.
Use .get and .set and include domain and path args in order to be more specific.
:::
:::{doc} RequestsCookieJar:176
Compatibility class; is a http.cookiejar.CookieJar, but exposes a dict
interface.

This is the CookieJar we create by default for requests and sessions that
don't specify one, since some clients may expect response.cookies and
session.cookies to support dict operations.

Requests does not use the dict interface internally; it's just for
compatibility with external client code. All requests code should work
out of the box with externally provided instances of ``CookieJar``, e.g.
``LWPCookieJar`` and ``FileCookieJar``.

Unlike a regular CookieJar, this class is pickleable.

.. warning:: dictionary operations that are normally O(1) may be O(n).
:::
:::{doc} create_cookie:455
Make a cookie from underspecified parameters.

By default, the pair of `name` and `value` will be set for the domain ''
and sent on every request (this is sometimes called a "supercookie").
:::
:::{doc} morsel_to_cookie:492
Convert a Morsel object into a Cookie containing the one k/v pair.
:::
:::{doc} cookiejar_from_dict:521
Returns a CookieJar from a key/value dictionary.

:param cookie_dict: Dict of key/values to insert into CookieJar.
:param cookiejar: (optional) A cookiejar to add the cookies to.
:param overwrite: (optional) If False, will not replace cookies
    already in the jar with new ones.
:rtype: CookieJar
:::
:::{doc} merge_cookies:542
Add cookies to cookiejar and returns a merged CookieJar.

:param cookiejar: CookieJar object to add the cookies to.
:param cookies: Dictionary or CookieJar object to be added.
:rtype: CookieJar
:::
**Imports**: `calendar`, `copy`, `time`, `_internal_utils.to_native_string`, `compat.Morsel`, `compat.MutableMapping`, `compat.cookielib`, `compat.urlparse`, `compat.urlunparse`, `threading`, `dummy_threading`
**Type References**: [[CookieConflictError]], [[MockRequest]], [[MockResponse]], [[RequestsCookieJar]]

### Interface
- `extract_cookies_to_jar`() -> Any
- `get_cookie_header`() -> Any
- `remove_cookie_by_name`() -> Any
- `_copy_cookie_jar`() -> Any
- `create_cookie`() -> Any
- `morsel_to_cookie`() -> Any
- `cookiejar_from_dict`() -> Any
- `merge_cookies`() -> Any
- `__init__`() -> Any
- `get_type`() -> Any
- `get_host`() -> Any
- `get_origin_req_host`() -> Any
- `get_full_url`() -> Any
- `is_unverifiable`() -> Any
- `has_header`() -> Any
- `get_header`() -> Any
- `add_header`() -> Any
- `add_unredirected_header`() -> Any
- `get_new_headers`() -> Any
- `unverifiable`() -> Any
- `origin_req_host`() -> Any
- `host`() -> Any
- `info`() -> Any
- `getheaders`() -> Any
- `get`() -> Any
- `set`() -> Any
- `iterkeys`() -> Any
- `keys`() -> Any
- `itervalues`() -> Any
- `values`() -> Any
- `iteritems`() -> Any
- `items`() -> Any
- `list_domains`() -> Any
- `list_paths`() -> Any
- `multiple_domains`() -> Any
- `get_dict`() -> Any
- `__contains__`() -> Any
- `__getitem__`() -> Any
- `__setitem__`() -> Any
- `__delitem__`() -> Any
- `set_cookie`() -> Any
- `update`() -> Any
- `_find`() -> Any
- `_find_no_duplicates`() -> Any
- `__getstate__`() -> Any
- `__setstate__`() -> Any
- `copy`() -> Any
- `get_policy`() -> Any

### Implementation
**MockRequest**

**MockResponse**

**CookieConflictError**

**RequestsCookieJar**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/cookies.py`  
**Dependencies**: `calendar`, `copy`, `time`, `_internal_utils.to_native_string`, `compat.Morsel`, `compat.MutableMapping`, `compat.cookielib`, `compat.urlparse`, `compat.urlunparse`, `threading`, `dummy_threading`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.auth
:::{doc} _basic_auth_str:25
Returns a Basic Auth string.
:::
:::{doc} AuthBase:69
Base class that all auth implementations derive from
:::
:::{doc} HTTPBasicAuth:76
Attaches HTTP Basic Authentication to the given Request object.
:::
:::{doc} HTTPProxyAuth:99
Attaches HTTP Proxy Authentication to a given Request object.
:::
:::{doc} HTTPDigestAuth:107
Attaches HTTP Digest Authentication to the given Request object.
:::
**Imports**: `hashlib`, `os`, `re`, `threading`, `time`, `warnings`, `base64.b64encode`, `_internal_utils.to_native_string`, `compat.basestring`, `compat.str`, `compat.urlparse`, `cookies.extract_cookies_to_jar`, `utils.parse_dict_header`
**Type References**: [[AuthBase]], [[HTTPBasicAuth]], [[HTTPDigestAuth]], [[HTTPProxyAuth]]

### Interface
- `_basic_auth_str`() -> Any
- `__call__`() -> Any
- `__init__`() -> Any
- `__eq__`() -> Any
- `__ne__`() -> Any
- `init_per_thread_state`() -> Any
- `build_digest_header`() -> Any
- `handle_redirect`() -> Any
- `handle_401`() -> Any
- `md5_utf8`() -> Any
- `sha_utf8`() -> Any
- `sha256_utf8`() -> Any
- `sha512_utf8`() -> Any

### Implementation
**AuthBase**

**HTTPBasicAuth**

**HTTPProxyAuth**

**HTTPDigestAuth**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/auth.py`  
**Dependencies**: `hashlib`, `os`, `re`, `threading`, `time`, `warnings`, `base64.b64encode`, `_internal_utils.to_native_string`, `compat.basestring`, `compat.str`, `compat.urlparse`, `cookies.extract_cookies_to_jar`, `utils.parse_dict_header`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.sessions
:::{doc} merge_setting:61
Determines appropriate setting for a given request, taking into account
the explicit setting on that request, and the setting in the session. If a
setting is a dictionary, they will be merged together using `dict_class`
:::
:::{doc} merge_hooks:91
Properly merges both requests and session hooks.

This is necessary because when request_hooks == {'response': []}, the
merge breaks Session hooks entirely.
:::
:::{doc} Session:356
A Requests session.

Provides cookie persistence, connection-pooling, and configuration.

Basic Usage::

  >>> import requests
  >>> s = requests.Session()
  >>> s.get('https://httpbin.org/get')
  <Response [200]>

Or as a context manager::

  >>> with requests.Session() as s:
  ...     s.get('https://httpbin.org/get')
  <Response [200]>
:::
:::{doc} session:819
Returns a :class:`Session` for context-management.

.. deprecated:: 1.0.0

    This method has been deprecated since version 1.0.0 and is only kept for
    backwards compatibility. New code should use :class:`~requests.sessions.Session`
    to create a session. This may be removed at a future date.

:rtype: Session
:::
**Imports**: `os`, `sys`, `time`, `collections.OrderedDict`, `datetime.timedelta`, `_internal_utils.to_native_string`, `adapters.HTTPAdapter`, `auth._basic_auth_str`, `compat.Mapping`, `compat.cookielib`, `compat.urljoin`, `compat.urlparse`, `cookies.RequestsCookieJar`, `cookies.cookiejar_from_dict`, `cookies.extract_cookies_to_jar`, `cookies.merge_cookies`, `exceptions.ChunkedEncodingError`, `exceptions.ContentDecodingError`, `exceptions.InvalidSchema`, `exceptions.TooManyRedirects`, `hooks.default_hooks`, `hooks.dispatch_hook`, `models.DEFAULT_REDIRECT_LIMIT`, `models.REDIRECT_STATI`, `models.PreparedRequest`, `models.Request`, `status_codes.codes`, `structures.CaseInsensitiveDict`, `utils.DEFAULT_PORTS`, `utils.default_headers`, `utils.get_auth_from_url`, `utils.get_environ_proxies`, `utils.get_netrc_auth`, `utils.requote_uri`, `utils.resolve_proxies`, `utils.rewind_body`, `utils.should_bypass_proxies`, `utils.to_key_val_list`
**Type References**: [[Session]], [[SessionRedirectMixin]]

### Interface
- `merge_setting`() -> Any
- `merge_hooks`() -> Any
- `session`() -> Any
- `get_redirect_target`() -> Any
- `should_strip_auth`() -> Any
- `resolve_redirects`() -> Any
- `rebuild_auth`() -> Any
- `rebuild_proxies`() -> Any
- `rebuild_method`() -> Any
- `__init__`() -> Any
- `__enter__`() -> Any
- `__exit__`() -> Any
- `prepare_request`() -> Any
- `request`() -> Any
- `get`() -> Any
- `options`() -> Any
- `head`() -> Any
- `post`() -> Any
- `put`() -> Any
- `patch`() -> Any
- `delete`() -> Any
- `send`() -> Any
- `merge_environment_settings`() -> Any
- `get_adapter`() -> Any
- `close`() -> Any
- `mount`() -> Any
- `__getstate__`() -> Any
- `__setstate__`() -> Any

### Implementation
**SessionRedirectMixin**

**Session**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/sessions.py`  
**Dependencies**: `os`, `sys`, `time`, `collections.OrderedDict`, `datetime.timedelta`, `_internal_utils.to_native_string`, `adapters.HTTPAdapter`, `auth._basic_auth_str`, `compat.Mapping`, `compat.cookielib`, `compat.urljoin`, `compat.urlparse`, `cookies.RequestsCookieJar`, `cookies.cookiejar_from_dict`, `cookies.extract_cookies_to_jar`, `cookies.merge_cookies`, `exceptions.ChunkedEncodingError`, `exceptions.ContentDecodingError`, `exceptions.InvalidSchema`, `exceptions.TooManyRedirects`, `hooks.default_hooks`, `hooks.dispatch_hook`, `models.DEFAULT_REDIRECT_LIMIT`, `models.REDIRECT_STATI`, `models.PreparedRequest`, `models.Request`, `status_codes.codes`, `structures.CaseInsensitiveDict`, `utils.DEFAULT_PORTS`, `utils.default_headers`, `utils.get_auth_from_url`, `utils.get_environ_proxies`, `utils.get_netrc_auth`, `utils.requote_uri`, `utils.resolve_proxies`, `utils.rewind_body`, `utils.should_bypass_proxies`, `utils.to_key_val_list`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.hooks
:::{doc} dispatch_hook:22
Dispatches a hook dictionary on a given piece of data.
:::

### Interface
- `default_hooks`() -> Any
- `dispatch_hook`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/hooks.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.compat
:::{doc} _resolve_char_detection:17
Find supported character detection libraries.
:::
**Imports**: `sys`, `json`, `json.JSONDecodeError`, `collections.OrderedDict`, `collections.abc.Callable`, `collections.abc.Mapping`, `collections.abc.MutableMapping`, `http.cookiejar`, `http.cookies.Morsel`, `io.StringIO`, `urllib.parse.quote`, `urllib.parse.quote_plus`, `urllib.parse.unquote`, `urllib.parse.unquote_plus`, `urllib.parse.urldefrag`, `urllib.parse.urlencode`, `urllib.parse.urljoin`, `urllib.parse.urlparse`, `urllib.parse.urlsplit`, `urllib.parse.urlunparse`, `urllib.request.getproxies`, `urllib.request.getproxies_environment`, `urllib.request.parse_http_list`, `urllib.request.proxy_bypass`, `urllib.request.proxy_bypass_environment`
### Interface
- `_resolve_char_detection`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/compat.py`  
**Dependencies**: `sys`, `json`, `json.JSONDecodeError`, `collections.OrderedDict`, `collections.abc.Callable`, `collections.abc.Mapping`, `collections.abc.MutableMapping`, `http.cookiejar`, `http.cookies.Morsel`, `io.StringIO`, `urllib.parse.quote`, `urllib.parse.quote_plus`, `urllib.parse.unquote`, `urllib.parse.unquote_plus`, `urllib.parse.urldefrag`, `urllib.parse.urlencode`, `urllib.parse.urljoin`, `urllib.parse.urlparse`, `urllib.parse.urlsplit`, `urllib.parse.urlunparse`, `urllib.request.getproxies`, `urllib.request.getproxies_environment`, `urllib.request.parse_http_list`, `urllib.request.proxy_bypass`, `urllib.request.proxy_bypass_environment`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.models
:::{doc} Request:230
A user-created :class:`Request <Request>` object.

Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.

:param method: HTTP method to use.
:param url: URL to send.
:param headers: dictionary of headers to send.
:param files: dictionary of {filename: fileobject} files to multipart upload.
:param data: the body to attach to the request. If a dictionary or
    list of tuples ``[(key, value)]`` is provided, form-encoding will
    take place.
:param json: json for the body to attach to the request (if files or data is not specified).
:param params: URL parameters to append to the URL. If a dictionary or
    list of tuples ``[(key, value)]`` is provided, form-encoding will
    take place.
:param auth: Auth handler or (user, pass) tuple.
:param cookies: dictionary or CookieJar of cookies to attach to this request.
:param hooks: dictionary of callback hooks, for internal usage.

Usage::

  >>> import requests
  >>> req = requests.Request('GET', 'https://httpbin.org/get')
  >>> req.prepare()
  <PreparedRequest [GET]>
:::
:::{doc} PreparedRequest:313
The fully mutable :class:`PreparedRequest <PreparedRequest>` object,
containing the exact bytes that will be sent to the server.

Instances are generated from a :class:`Request <Request>` object, and
should not be instantiated manually; doing so may produce undesirable
effects.

Usage::

  >>> import requests
  >>> req = requests.Request('GET', 'https://httpbin.org/get')
  >>> r = req.prepare()
  >>> r
  <PreparedRequest [GET]>

  >>> s = requests.Session()
  >>> s.send(r)
  <Response [200]>
:::
:::{doc} Response:640
The :class:`Response <Response>` object, which contains a
server's response to an HTTP request.
:::
**Imports**: `datetime`, `encodings.idna`, `io.UnsupportedOperation`, `pip._vendor.urllib3.exceptions.DecodeError`, `pip._vendor.urllib3.exceptions.LocationParseError`, `pip._vendor.urllib3.exceptions.ProtocolError`, `pip._vendor.urllib3.exceptions.ReadTimeoutError`, `pip._vendor.urllib3.exceptions.SSLError`, `pip._vendor.urllib3.fields.RequestField`, `pip._vendor.urllib3.filepost.encode_multipart_formdata`, `pip._vendor.urllib3.util.parse_url`, `_internal_utils.to_native_string`, `_internal_utils.unicode_is_ascii`, `auth.HTTPBasicAuth`, `compat.Callable`, `compat.JSONDecodeError`, `compat.Mapping`, `compat.basestring`, `compat.builtin_str`, `compat.chardet`, `compat.cookielib`, `compat.json`, `compat.urlencode`, `compat.urlsplit`, `compat.urlunparse`, `cookies._copy_cookie_jar`, `cookies.cookiejar_from_dict`, `cookies.get_cookie_header`, `exceptions.ChunkedEncodingError`, `exceptions.ConnectionError`, `exceptions.ContentDecodingError`, `exceptions.HTTPError`, `exceptions.InvalidJSONError`, `exceptions.InvalidURL`, `exceptions.JSONDecodeError`, `exceptions.MissingSchema`, `exceptions.SSLError`, `exceptions.StreamConsumedError`, `hooks.default_hooks`, `status_codes.codes`, `structures.CaseInsensitiveDict`, `utils.check_header_validity`, `utils.get_auth_from_url`, `utils.guess_filename`, `utils.guess_json_utf`, `utils.iter_slices`, `utils.parse_header_links`, `utils.requote_uri`, `utils.stream_decode_response_unicode`, `utils.super_len`, `utils.to_key_val_list`, `pip._vendor.idna`
**Type References**: [[PreparedRequest]], [[Request]], [[RequestEncodingMixin]], [[RequestHooksMixin]], [[Response]]

### Interface
- `path_url`() -> Any
- `_encode_params`() -> Any
- `_encode_files`() -> Any
- `register_hook`() -> Any
- `deregister_hook`() -> Any
- `__init__`() -> Any
- `__repr__`() -> Any
- `prepare`() -> Any
- `copy`() -> Any
- `prepare_method`() -> Any
- `_get_idna_encoded_host`() -> Any
- `prepare_url`() -> Any
- `prepare_headers`() -> Any
- `prepare_body`() -> Any
- `prepare_content_length`() -> Any
- `prepare_auth`() -> Any
- `prepare_cookies`() -> Any
- `prepare_hooks`() -> Any
- `__enter__`() -> Any
- `__exit__`() -> Any
- `__getstate__`() -> Any
- `__setstate__`() -> Any
- `__bool__`() -> Any
- `__nonzero__`() -> Any
- `__iter__`() -> Any
- `ok`() -> Any
- `is_redirect`() -> Any
- `is_permanent_redirect`() -> Any
- `next`() -> Any
- `apparent_encoding`() -> Any
- `iter_content`() -> Any
- `iter_lines`() -> Any
- `content`() -> Any
- `text`() -> Any
- `json`() -> Any
- `links`() -> Any
- `raise_for_status`() -> Any
- `close`() -> Any
- `generate`() -> Any

### Implementation
**RequestEncodingMixin**

**RequestHooksMixin**

**Request**

**PreparedRequest**

**Response**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/models.py`  
**Dependencies**: `datetime`, `encodings.idna`, `io.UnsupportedOperation`, `pip._vendor.urllib3.exceptions.DecodeError`, `pip._vendor.urllib3.exceptions.LocationParseError`, `pip._vendor.urllib3.exceptions.ProtocolError`, `pip._vendor.urllib3.exceptions.ReadTimeoutError`, `pip._vendor.urllib3.exceptions.SSLError`, `pip._vendor.urllib3.fields.RequestField`, `pip._vendor.urllib3.filepost.encode_multipart_formdata`, `pip._vendor.urllib3.util.parse_url`, `_internal_utils.to_native_string`, `_internal_utils.unicode_is_ascii`, `auth.HTTPBasicAuth`, `compat.Callable`, `compat.JSONDecodeError`, `compat.Mapping`, `compat.basestring`, `compat.builtin_str`, `compat.chardet`, `compat.cookielib`, `compat.json`, `compat.urlencode`, `compat.urlsplit`, `compat.urlunparse`, `cookies._copy_cookie_jar`, `cookies.cookiejar_from_dict`, `cookies.get_cookie_header`, `exceptions.ChunkedEncodingError`, `exceptions.ConnectionError`, `exceptions.ContentDecodingError`, `exceptions.HTTPError`, `exceptions.InvalidJSONError`, `exceptions.InvalidURL`, `exceptions.JSONDecodeError`, `exceptions.MissingSchema`, `exceptions.SSLError`, `exceptions.StreamConsumedError`, `hooks.default_hooks`, `status_codes.codes`, `structures.CaseInsensitiveDict`, `utils.check_header_validity`, `utils.get_auth_from_url`, `utils.guess_filename`, `utils.guess_json_utf`, `utils.iter_slices`, `utils.parse_header_links`, `utils.requote_uri`, `utils.stream_decode_response_unicode`, `utils.super_len`, `utils.to_key_val_list`, `pip._vendor.idna`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.certs

**Imports**: `os`, `pip._vendor.certifi.where`
### Interface
- `where`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/certs.py`  
**Dependencies**: `os`, `pip._vendor.certifi.where`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests

**Imports**: `warnings`, `pip._vendor.urllib3`, `exceptions.RequestsDependencyWarning`, `pip._vendor.urllib3.exceptions.DependencyWarning`, `logging`, `logging.NullHandler`, `packages`, `utils`, `__version__.__author__`, `__version__.__author_email__`, `__version__.__build__`, `__version__.__cake__`, `__version__.__copyright__`, `__version__.__description__`, `__version__.__license__`, `__version__.__title__`, `__version__.__url__`, `__version__.__version__`, `api.delete`, `api.get`, `api.head`, `api.options`, `api.patch`, `api.post`, `api.put`, `api.request`, `exceptions.ConnectionError`, `exceptions.ConnectTimeout`, `exceptions.FileModeWarning`, `exceptions.HTTPError`, `exceptions.JSONDecodeError`, `exceptions.ReadTimeout`, `exceptions.RequestException`, `exceptions.Timeout`, `exceptions.TooManyRedirects`, `exceptions.URLRequired`, `models.PreparedRequest`, `models.Request`, `models.Response`, `sessions.Session`, `sessions.session`, `status_codes.codes`, `pip._internal.utils.compat.WINDOWS`, `ssl`, `pip._vendor.urllib3.contrib.pyopenssl`, `cryptography.__version__`
### Interface
- `check_compatibility`() -> Any
- `_check_cryptography`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/__init__.py`  
**Dependencies**: `warnings`, `pip._vendor.urllib3`, `exceptions.RequestsDependencyWarning`, `pip._vendor.urllib3.exceptions.DependencyWarning`, `logging`, `logging.NullHandler`, `packages`, `utils`, `__version__.__author__`, `__version__.__author_email__`, `__version__.__build__`, `__version__.__cake__`, `__version__.__copyright__`, `__version__.__description__`, `__version__.__license__`, `__version__.__title__`, `__version__.__url__`, `__version__.__version__`, `api.delete`, `api.get`, `api.head`, `api.options`, `api.patch`, `api.post`, `api.put`, `api.request`, `exceptions.ConnectionError`, `exceptions.ConnectTimeout`, `exceptions.FileModeWarning`, `exceptions.HTTPError`, `exceptions.JSONDecodeError`, `exceptions.ReadTimeout`, `exceptions.RequestException`, `exceptions.Timeout`, `exceptions.TooManyRedirects`, `exceptions.URLRequired`, `models.PreparedRequest`, `models.Request`, `models.Response`, `sessions.Session`, `sessions.session`, `status_codes.codes`, `pip._internal.utils.compat.WINDOWS`, `ssl`, `pip._vendor.urllib3.contrib.pyopenssl`, `cryptography.__version__`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.status_codes

**Imports**: `structures.LookupDict`
### Interface
- `_init`() -> Any
- `doc`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/status_codes.py`  
**Dependencies**: `structures.LookupDict`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.packages

**Imports**: `sys`, `compat.chardet`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/packages.py`  
**Dependencies**: `sys`, `compat.chardet`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.__version__



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/__version__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.api
:::{doc} request:14
Constructs and sends a :class:`Request <Request>`.

:param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.
:param url: URL for the new :class:`Request` object.
:param params: (optional) Dictionary, list of tuples or bytes to send
    in the query string for the :class:`Request`.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
:param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.
:param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.
:param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.
    ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``
    or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content_type'`` is a string
    defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers
    to add for the file.
:param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.
:param timeout: (optional) How many seconds to wait for the server to send data
    before giving up, as a float, or a :ref:`(connect timeout, read
    timeout) <timeouts>` tuple.
:type timeout: float or tuple
:param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.
:type allow_redirects: bool
:param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
:param verify: (optional) Either a boolean, in which case it controls whether we verify
        the server's TLS certificate, or a string, in which case it must be a path
        to a CA bundle to use. Defaults to ``True``.
:param stream: (optional) if ``False``, the response content will be immediately downloaded.
:param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.
:return: :class:`Response <Response>` object
:rtype: requests.Response

Usage::

  >>> import requests
  >>> req = requests.request('GET', 'https://httpbin.org/get')
  >>> req
  <Response [200]>
:::
:::{doc} get:62
Sends a GET request.

:param url: URL for the new :class:`Request` object.
:param params: (optional) Dictionary, list of tuples or bytes to send
    in the query string for the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
:::
:::{doc} options:76
Sends an OPTIONS request.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
:::
:::{doc} head:88
Sends a HEAD request.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes. If
    `allow_redirects` is not provided, it will be set to `False` (as
    opposed to the default :meth:`request` behavior).
:return: :class:`Response <Response>` object
:rtype: requests.Response
:::
:::{doc} post:103
Sends a POST request.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
:::
:::{doc} put:118
Sends a PUT request.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
:::
:::{doc} patch:133
Sends a PATCH request.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
:::
:::{doc} delete:148
Sends a DELETE request.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
:::
**Imports**: `sessions`
### Interface
- `request`() -> Any
- `get`() -> Any
- `options`() -> Any
- `head`() -> Any
- `post`() -> Any
- `put`() -> Any
- `patch`() -> Any
- `delete`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/api.py`  
**Dependencies**: `sessions`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests._internal_utils
:::{doc} to_native_string:25
Given a string object, regardless of type, returns a representation of
that string in the native string type, encoding and decoding where
necessary. This assumes ASCII unless told otherwise.
:::
:::{doc} unicode_is_ascii:38
Determine if unicode string only contains ASCII characters.

:param str u_string: unicode string to check. Must be unicode
    and not Python 2 `str`.
:rtype: bool
:::
**Imports**: `re`, `compat.builtin_str`
### Interface
- `to_native_string`() -> Any
- `unicode_is_ascii`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/_internal_utils.py`  
**Dependencies**: `re`, `compat.builtin_str`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.utils
:::{doc} dict_to_sequence:126
Returns an internal sequence dictionary update.
:::
:::{doc} get_netrc_auth:204
Returns the Requests tuple auth for a given url from netrc.
:::
:::{doc} guess_filename:261
Tries to guess the filename of the given object.
:::
:::{doc} extract_zipped_paths:268
Replace nonexistent paths that look like they refer to a member of a zip
archive with the location of an extracted copy of the target, or else
just return the provided path unchanged.
:::
:::{doc} atomic_open:306
Write a file to the disk in an atomic fashion
:::
:::{doc} from_key_val_list:318
Take an object and test to see if it can be represented as a
dictionary. Unless it can not be represented as such, return an
OrderedDict, e.g.,

::

    >>> from_key_val_list([('key', 'val')])
    OrderedDict([('key', 'val')])
    >>> from_key_val_list('string')
    Traceback (most recent call last):
    ...
    ValueError: cannot encode objects that are not 2-tuples
    >>> from_key_val_list({'key': 'val'})
    OrderedDict([('key', 'val')])

:rtype: OrderedDict
:::
:::{doc} to_key_val_list:345
Take an object and test to see if it can be represented as a
dictionary. If it can be, return a list of tuples, e.g.,

::

    >>> to_key_val_list([('key', 'val')])
    [('key', 'val')]
    >>> to_key_val_list({'key': 'val'})
    [('key', 'val')]
    >>> to_key_val_list('string')
    Traceback (most recent call last):
    ...
    ValueError: cannot encode objects that are not 2-tuples

:rtype: list
:::
:::{doc} parse_list_header:375
Parse lists as described by RFC 2068 Section 2.

In particular, parse comma-separated lists where the elements of
the list may include quoted-strings.  A quoted-string could
contain a comma.  A non-quoted string could have quotes in the
middle.  Quotes are removed automatically after parsing.

It basically works like :func:`parse_set_header` just that items
may appear multiple times and case sensitivity is preserved.

The return value is a standard :class:`list`:

>>> parse_list_header('token, "quoted value"')
['token', 'quoted value']

To create a header from the :class:`list` again, use the
:func:`dump_header` function.

:param value: a string with a list header.
:return: :class:`list`
:rtype: list
:::
:::{doc} parse_dict_header:407
Parse lists of key, value pairs as described by RFC 2068 Section 2 and
convert them into a python dict:

>>> d = parse_dict_header('foo="is a fish", bar="as well"')
>>> type(d) is dict
True
>>> sorted(d.items())
[('bar', 'as well'), ('foo', 'is a fish')]

If there is no value for a key it will be `None`:

>>> parse_dict_header('key_without_value')
{'key_without_value': None}

To create a header from the :class:`dict` again, use the
:func:`dump_header` function.

:param value: a string with a dict header.
:return: :class:`dict`
:rtype: dict
:::
:::{doc} unquote_header_value:442
Unquotes a header value.  (Reversal of :func:`quote_header_value`).
This does not use the real unquoting but what browsers are actually
using for quoting.

:param value: the header value to unquote.
:rtype: str
:::
:::{doc} dict_from_cookiejar:467
Returns a key/value dictionary from a CookieJar.

:param cj: CookieJar object to extract cookies from.
:rtype: dict
:::
:::{doc} add_dict_to_cookiejar:478
Returns a CookieJar from a key/value dictionary.

:param cj: CookieJar to insert cookies into.
:param cookie_dict: Dict of key/values to insert into CookieJar.
:rtype: CookieJar
:::
:::{doc} get_encodings_from_content:489
Returns encodings from given content string.

:param content: bytestring to extract encodings from.
:::
:::{doc} _parse_content_type_header:514
Returns content type and parameters from given header

:param header: string
:return: tuple containing content type and dictionary of
     parameters
:::
:::{doc} get_encoding_from_headers:539
Returns encodings from given HTTP Header Dict.

:param headers: dictionary to extract encoding from.
:rtype: str
:::
:::{doc} stream_decode_response_unicode:564
Stream decodes an iterator.
:::
:::{doc} iter_slices:581
Iterate over slices of a string.
:::
:::{doc} get_unicode_from_response:591
Returns the requested content back in unicode.

:param r: Response object to get unicode content from.

Tried:

1. charset from content-type
2. fall back and replace all unicode characters

:rtype: str
:::
:::{doc} unquote_unreserved:636
Un-escape any percent-escape sequences in a URI that are unreserved
characters. This leaves all reserved, illegal and non-ASCII bytes encoded.

:rtype: str
:::
:::{doc} requote_uri:660
Re-quote the given URI.

This function passes the given URI through an unquote/quote cycle to
ensure that it is fully and consistently quoted.

:rtype: str
:::
:::{doc} address_in_network:682
This function allows you to check if an IP belongs to a network subnet

Example: returns True if ip = 192.168.1.1 and net = 192.168.1.0/24
         returns False if ip = 192.168.1.1 and net = 192.168.100.0/24

:rtype: bool
:::
:::{doc} dotted_netmask:697
Converts mask from /xx format to xxx.xxx.xxx.xxx

Example: if mask is 24 function returns 255.255.255.0

:rtype: str
:::
:::{doc} is_ipv4_address:708
:rtype: bool
:::
:::{doc} is_valid_cidr:719
Very simple check of the cidr format in no_proxy variable.

:rtype: bool
:::
:::{doc} set_environ:744
Set the environment variable 'env_name' to 'value'

Save previous value, yield, and then restore the previous value stored in
the environment variable 'env_name'.

If 'value' is None, do nothing
:::
:::{doc} should_bypass_proxies:765
Returns whether we should bypass proxies or not.

:rtype: bool
:::
:::{doc} get_environ_proxies:826
Return a dict of environment proxies.

:rtype: dict
:::
:::{doc} select_proxy:838
Select a proxy for the url, if applicable.

:param url: The url being for the request
:param proxies: A dictionary of schemes or schemes and hosts to proxy URLs
:::
:::{doc} resolve_proxies:864
This method takes proxy information from a request and configuration
input to resolve a mapping of target proxies. This will consider settings
such as NO_PROXY to strip proxy configurations.

:param request: Request or PreparedRequest
:param proxies: A dictionary of schemes or schemes and hosts to proxy URLs
:param trust_env: Boolean declaring whether to trust environment configs

:rtype: dict
:::
:::{doc} default_user_agent:891
Return a string representing the default user agent.

:rtype: str
:::
:::{doc} default_headers:900
:rtype: requests.structures.CaseInsensitiveDict
:::
:::{doc} parse_header_links:914
Return a list of parsed link headers proxies.

i.e. Link: <http:/.../front.jpeg>; rel=front; type="image/jpeg",<http://.../back.jpeg>; rel=back;type="image/jpeg"

:rtype: list
:::
:::{doc} guess_json_utf:957
:rtype: str
:::
:::{doc} prepend_scheme_if_needed:989
Given a URL that may or may not have a scheme, prepend the given scheme.
Does not replace a present scheme with the one provided as an argument.

:rtype: str
:::
:::{doc} get_auth_from_url:1018
Given a url with authentication components, extract them into a tuple of
username,password.

:rtype: (str,str)
:::
:::{doc} check_header_validity:1034
Verifies that header parts don't contain leading whitespace
reserved characters, or return characters.

:param header: tuple, in the format (name, value).
:::
:::{doc} urldefragauth:1064
Given a url remove the fragment and the authentication part.

:rtype: str
:::
:::{doc} rewind_body:1081
Move file pointer back to its recorded starting position
so it can be read again on redirect.
:::
**Imports**: `codecs`, `contextlib`, `io`, `os`, `re`, `socket`, `struct`, `sys`, `tempfile`, `warnings`, `zipfile`, `collections.OrderedDict`, `pip._vendor.urllib3.util.make_headers`, `pip._vendor.urllib3.util.parse_url`, `certs`, `__version__.__version__`, `_internal_utils._HEADER_VALIDATORS_BYTE`, `_internal_utils._HEADER_VALIDATORS_STR`, `_internal_utils.HEADER_VALIDATORS`, `_internal_utils.to_native_string`, `compat.Mapping`, `compat.basestring`, `compat.bytes`, `compat.getproxies`, `compat.getproxies_environment`, `compat.integer_types`, `compat.parse_http_list`, `compat.proxy_bypass`, `compat.proxy_bypass_environment`, `compat.quote`, `compat.str`, `compat.unquote`, `compat.urlparse`, `compat.urlunparse`, `cookies.cookiejar_from_dict`, `exceptions.FileModeWarning`, `exceptions.InvalidHeader`, `exceptions.InvalidURL`, `exceptions.UnrewindableBodyError`, `structures.CaseInsensitiveDict`, `netrc.NetrcParseError`, `netrc.netrc`, `winreg`
### Interface
- `dict_to_sequence`() -> Any
- `super_len`() -> Any
- `get_netrc_auth`() -> Any
- `guess_filename`() -> Any
- `extract_zipped_paths`() -> Any
- `atomic_open`() -> Any
- `from_key_val_list`() -> Any
- `to_key_val_list`() -> Any
- `parse_list_header`() -> Any
- `parse_dict_header`() -> Any
- `unquote_header_value`() -> Any
- `dict_from_cookiejar`() -> Any
- `add_dict_to_cookiejar`() -> Any
- `get_encodings_from_content`() -> Any
- `_parse_content_type_header`() -> Any
- `get_encoding_from_headers`() -> Any
- `stream_decode_response_unicode`() -> Any
- `iter_slices`() -> Any
- `get_unicode_from_response`() -> Any
- `unquote_unreserved`() -> Any
- `requote_uri`() -> Any
- `address_in_network`() -> Any
- `dotted_netmask`() -> Any
- `is_ipv4_address`() -> Any
- `is_valid_cidr`() -> Any
- `set_environ`() -> Any
- `should_bypass_proxies`() -> Any
- `get_environ_proxies`() -> Any
- `select_proxy`() -> Any
- `resolve_proxies`() -> Any
- `default_user_agent`() -> Any
- `default_headers`() -> Any
- `parse_header_links`() -> Any
- `guess_json_utf`() -> Any
- `prepend_scheme_if_needed`() -> Any
- `get_auth_from_url`() -> Any
- `check_header_validity`() -> Any
- `_validate_header_part`() -> Any
- `urldefragauth`() -> Any
- `rewind_body`() -> Any
- `proxy_bypass_registry`() -> Any
- `proxy_bypass`() -> Any
- `get_proxy`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/utils.py`  
**Dependencies**: `codecs`, `contextlib`, `io`, `os`, `re`, `socket`, `struct`, `sys`, `tempfile`, `warnings`, `zipfile`, `collections.OrderedDict`, `pip._vendor.urllib3.util.make_headers`, `pip._vendor.urllib3.util.parse_url`, `certs`, `__version__.__version__`, `_internal_utils._HEADER_VALIDATORS_BYTE`, `_internal_utils._HEADER_VALIDATORS_STR`, `_internal_utils.HEADER_VALIDATORS`, `_internal_utils.to_native_string`, `compat.Mapping`, `compat.basestring`, `compat.bytes`, `compat.getproxies`, `compat.getproxies_environment`, `compat.integer_types`, `compat.parse_http_list`, `compat.proxy_bypass`, `compat.proxy_bypass_environment`, `compat.quote`, `compat.str`, `compat.unquote`, `compat.urlparse`, `compat.urlunparse`, `cookies.cookiejar_from_dict`, `exceptions.FileModeWarning`, `exceptions.InvalidHeader`, `exceptions.InvalidURL`, `exceptions.UnrewindableBodyError`, `structures.CaseInsensitiveDict`, `netrc.NetrcParseError`, `netrc.netrc`, `winreg`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.exceptions
:::{doc} RequestException:12
There was an ambiguous exception that occurred while handling your
request.
:::
:::{doc} InvalidJSONError:27
A JSON error occurred.
:::
:::{doc} JSONDecodeError:31
Couldn't decode the text into json
:::
:::{doc} HTTPError:55
An HTTP error occurred.
:::
:::{doc} ConnectionError:59
A Connection error occurred.
:::
:::{doc} ProxyError:63
A proxy error occurred.
:::
:::{doc} SSLError:67
An SSL error occurred.
:::
:::{doc} Timeout:71
The request timed out.

Catching this error will catch both
:exc:`~requests.exceptions.ConnectTimeout` and
:exc:`~requests.exceptions.ReadTimeout` errors.
:::
:::{doc} ConnectTimeout:80
The request timed out while trying to connect to the remote server.

Requests that produced this error are safe to retry.
:::
:::{doc} ReadTimeout:87
The server did not send any data in the allotted amount of time.
:::
:::{doc} URLRequired:91
A valid URL is required to make a request.
:::
:::{doc} TooManyRedirects:95
Too many redirects.
:::
:::{doc} MissingSchema:99
The URL scheme (e.g. http or https) is missing.
:::
:::{doc} InvalidSchema:103
The URL scheme provided is either invalid or unsupported.
:::
:::{doc} InvalidURL:107
The URL provided was somehow invalid.
:::
:::{doc} InvalidHeader:111
The header value provided was somehow invalid.
:::
:::{doc} InvalidProxyURL:115
The proxy URL provided is invalid.
:::
:::{doc} ChunkedEncodingError:119
The server declared chunked encoding but sent an invalid chunk.
:::
:::{doc} ContentDecodingError:123
Failed to decode response content.
:::
:::{doc} StreamConsumedError:127
The content for this response was already consumed.
:::
:::{doc} RetryError:131
Custom retries logic failed
:::
:::{doc} UnrewindableBodyError:135
Requests encountered an error when trying to rewind a body.
:::
:::{doc} RequestsWarning:142
Base warning for Requests.
:::
:::{doc} FileModeWarning:146
A file was opened in text mode, but Requests determined its binary length.
:::
:::{doc} RequestsDependencyWarning:150
An imported dependency doesn't match the expected version range.
:::
**Imports**: `pip._vendor.urllib3.exceptions.HTTPError`, `compat.JSONDecodeError`
**Type References**: [[ChunkedEncodingError]], [[ConnectTimeout]], [[ConnectionError]], [[ContentDecodingError]], [[FileModeWarning]], [[HTTPError]], [[InvalidHeader]], [[InvalidJSONError]], [[InvalidProxyURL]], [[InvalidSchema]], [[InvalidURL]], [[JSONDecodeError]], [[MissingSchema]], [[ProxyError]], [[ReadTimeout]], [[RequestException]], [[RequestsDependencyWarning]], [[RequestsWarning]], [[RetryError]], [[SSLError]], [[StreamConsumedError]], [[Timeout]], [[TooManyRedirects]], [[URLRequired]], [[UnrewindableBodyError]]

### Interface
- `__init__`() -> Any
- `__reduce__`() -> Any

### Implementation
**RequestException**

**InvalidJSONError**

**JSONDecodeError**

**HTTPError**

**ConnectionError**

**ProxyError**

**SSLError**

**Timeout**

**ConnectTimeout**

**ReadTimeout**

**URLRequired**

**TooManyRedirects**

**MissingSchema**

**InvalidSchema**

**InvalidURL**

**InvalidHeader**

**InvalidProxyURL**

**ChunkedEncodingError**

**ContentDecodingError**

**StreamConsumedError**

**RetryError**

**UnrewindableBodyError**

**RequestsWarning**

**FileModeWarning**

**RequestsDependencyWarning**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/exceptions.py`  
**Dependencies**: `pip._vendor.urllib3.exceptions.HTTPError`, `compat.JSONDecodeError`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.structures
:::{doc} CaseInsensitiveDict:13
A case-insensitive ``dict``-like object.

Implements all methods and operations of
``MutableMapping`` as well as dict's ``copy``. Also
provides ``lower_items``.

All keys are expected to be strings. The structure remembers the
case of the last key to be set, and ``iter(instance)``,
``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``
will contain case-sensitive keys. However, querying and contains
testing is case insensitive::

    cid = CaseInsensitiveDict()
    cid['Accept'] = 'application/json'
    cid['aCCEPT'] == 'application/json'  # True
    list(cid) == ['Accept']  # True

For example, ``headers['content-encoding']`` will return the
value of a ``'Content-Encoding'`` response header, regardless
of how the header name was originally stored.

If the constructor, ``.update``, or equality comparison
operations are given keys that have equal ``.lower()``s, the
behavior is undefined.
:::
:::{doc} LookupDict:83
Dictionary lookup object.
:::
**Imports**: `collections.OrderedDict`, `compat.Mapping`, `compat.MutableMapping`
**Type References**: [[CaseInsensitiveDict]], [[LookupDict]]

### Interface
- `__init__`() -> Any
- `__setitem__`() -> Any
- `__getitem__`() -> Any
- `__delitem__`() -> Any
- `__iter__`() -> Any
- `__len__`() -> Any
- `lower_items`() -> Any
- `__eq__`() -> Any
- `copy`() -> Any
- `__repr__`() -> Any
- `get`() -> Any

### Implementation
**CaseInsensitiveDict**

**LookupDict**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/structures.py`  
**Dependencies**: `collections.OrderedDict`, `compat.Mapping`, `compat.MutableMapping`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.help
:::{doc} _implementation:27
Return a dict with the Python implementation and version.

Provide both the name and the version of the Python implementation
currently running. For example, on CPython 3.10.3 it will return
{'name': 'CPython', 'version': '3.10.3'}.

This function works best on CPython and PyPy: in particular, it probably
doesn't work for Jython or IronPython. Future investigation should be done
to work out the correct shape of the code for those platforms.
:::
:::{doc} info:62
Generate information for a bug report.
:::
:::{doc} main:121
Pretty-print the bug information as JSON.
:::
**Imports**: `json`, `platform`, `ssl`, `sys`, `pip._vendor.idna`, `pip._vendor.urllib3`, `__version__`, `pip._vendor.urllib3.contrib.pyopenssl`, `cryptography`, `OpenSSL`
### Interface
- `_implementation`() -> Any
- `info`() -> Any
- `main`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/help.py`  
**Dependencies**: `json`, `platform`, `ssl`, `sys`, `pip._vendor.idna`, `pip._vendor.urllib3`, `__version__`, `pip._vendor.urllib3.contrib.pyopenssl`, `cryptography`, `OpenSSL`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.requests.adapters
:::{doc} BaseAdapter:137
The Base Transport Adapter
:::
:::{doc} HTTPAdapter:167
The built-in HTTP Adapter for urllib3.

Provides a general-case interface for Requests sessions to contact HTTP and
HTTPS urls by implementing the Transport Adapter interface. This class will
usually be created by the :class:`Session <Session>` class under the
covers.

:param pool_connections: The number of urllib3 connection pools to cache.
:param pool_maxsize: The maximum number of connections to save in the pool.
:param max_retries: The maximum number of retries each connection
    should attempt. Note, this applies only to failed DNS lookups, socket
    connections and connection timeouts, never to requests where data has
    made it to the server. By default, Requests does not retry failed
    connections. If you need granular control over the conditions under
    which we retry a request, import urllib3's ``Retry`` class and pass
    that instead.
:param pool_block: Whether the connection pool should block for connections.

Usage::

  >>> import requests
  >>> s = requests.Session()
  >>> a = requests.adapters.HTTPAdapter(max_retries=3)
  >>> s.mount('http://', a)
:::
**Imports**: `os.path`, `socket`, `typing`, `warnings`, `pip._vendor.urllib3.exceptions.ClosedPoolError`, `pip._vendor.urllib3.exceptions.ConnectTimeoutError`, `pip._vendor.urllib3.exceptions.HTTPError`, `pip._vendor.urllib3.exceptions.InvalidHeader`, `pip._vendor.urllib3.exceptions.LocationValueError`, `pip._vendor.urllib3.exceptions.MaxRetryError`, `pip._vendor.urllib3.exceptions.NewConnectionError`, `pip._vendor.urllib3.exceptions.ProtocolError`, `pip._vendor.urllib3.exceptions.ProxyError`, `pip._vendor.urllib3.exceptions.ReadTimeoutError`, `pip._vendor.urllib3.exceptions.ResponseError`, `pip._vendor.urllib3.exceptions.SSLError`, `pip._vendor.urllib3.poolmanager.PoolManager`, `pip._vendor.urllib3.poolmanager.proxy_from_url`, `pip._vendor.urllib3.util.Timeout`, `pip._vendor.urllib3.util.parse_url`, `pip._vendor.urllib3.util.retry.Retry`, `pip._vendor.urllib3.util.ssl_.create_urllib3_context`, `auth._basic_auth_str`, `compat.basestring`, `compat.urlparse`, `cookies.extract_cookies_to_jar`, `exceptions.ConnectionError`, `exceptions.ConnectTimeout`, `exceptions.InvalidHeader`, `exceptions.InvalidProxyURL`, `exceptions.InvalidSchema`, `exceptions.InvalidURL`, `exceptions.ProxyError`, `exceptions.ReadTimeout`, `exceptions.RetryError`, `exceptions.SSLError`, `models.Response`, `structures.CaseInsensitiveDict`, `utils.DEFAULT_CA_BUNDLE_PATH`, `utils.extract_zipped_paths`, `utils.get_auth_from_url`, `utils.get_encoding_from_headers`, `utils.prepend_scheme_if_needed`, `utils.select_proxy`, `utils.urldefragauth`, `pip._vendor.urllib3.contrib.socks.SOCKSProxyManager`, `models.PreparedRequest`, `ssl`
**Type References**: [[BaseAdapter]], [[HTTPAdapter]]

### Interface
- `_urllib3_request_context`(request: PreparedRequest, verify: bool | str | None, client_cert: typing.Tuple[str, str] | str | None, poolmanager: PoolManager) -> (typing.Dict[str, typing.Any], typing.Dict[str, typing.Any])
- `__init__`() -> Any
- `send`() -> Any
- `close`() -> Any
- `__getstate__`() -> Any
- `__setstate__`() -> Any
- `init_poolmanager`() -> Any
- `proxy_manager_for`() -> Any
- `cert_verify`() -> Any
- `build_response`() -> Any
- `build_connection_pool_key_attributes`() -> Any
- `get_connection_with_tls_context`() -> Any
- `get_connection`() -> Any
- `request_url`() -> Any
- `add_headers`() -> Any
- `proxy_headers`() -> Any
- `SOCKSProxyManager`() -> Any

### Implementation
**BaseAdapter**

**HTTPAdapter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/requests/adapters.py`  
**Dependencies**: `os.path`, `socket`, `typing`, `warnings`, `pip._vendor.urllib3.exceptions.ClosedPoolError`, `pip._vendor.urllib3.exceptions.ConnectTimeoutError`, `pip._vendor.urllib3.exceptions.HTTPError`, `pip._vendor.urllib3.exceptions.InvalidHeader`, `pip._vendor.urllib3.exceptions.LocationValueError`, `pip._vendor.urllib3.exceptions.MaxRetryError`, `pip._vendor.urllib3.exceptions.NewConnectionError`, `pip._vendor.urllib3.exceptions.ProtocolError`, `pip._vendor.urllib3.exceptions.ProxyError`, `pip._vendor.urllib3.exceptions.ReadTimeoutError`, `pip._vendor.urllib3.exceptions.ResponseError`, `pip._vendor.urllib3.exceptions.SSLError`, `pip._vendor.urllib3.poolmanager.PoolManager`, `pip._vendor.urllib3.poolmanager.proxy_from_url`, `pip._vendor.urllib3.util.Timeout`, `pip._vendor.urllib3.util.parse_url`, `pip._vendor.urllib3.util.retry.Retry`, `pip._vendor.urllib3.util.ssl_.create_urllib3_context`, `auth._basic_auth_str`, `compat.basestring`, `compat.urlparse`, `cookies.extract_cookies_to_jar`, `exceptions.ConnectionError`, `exceptions.ConnectTimeout`, `exceptions.InvalidHeader`, `exceptions.InvalidProxyURL`, `exceptions.InvalidSchema`, `exceptions.InvalidURL`, `exceptions.ProxyError`, `exceptions.ReadTimeout`, `exceptions.RetryError`, `exceptions.SSLError`, `models.Response`, `structures.CaseInsensitiveDict`, `utils.DEFAULT_CA_BUNDLE_PATH`, `utils.extract_zipped_paths`, `utils.get_auth_from_url`, `utils.get_encoding_from_headers`, `utils.prepend_scheme_if_needed`, `utils.select_proxy`, `utils.urldefragauth`, `pip._vendor.urllib3.contrib.socks.SOCKSProxyManager`, `models.PreparedRequest`, `ssl`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.tomli._types

**Imports**: `typing.Any`, `typing.Callable`, `typing.Tuple`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/tomli/_types.py`  
**Dependencies**: `typing.Any`, `typing.Callable`, `typing.Tuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.tomli

**Imports**: `_parser.TOMLDecodeError`, `_parser.load`, `_parser.loads`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/tomli/__init__.py`  
**Dependencies**: `_parser.TOMLDecodeError`, `_parser.load`, `_parser.loads`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.tomli._parser
:::{doc} TOMLDecodeError:53
An error raised if a document is not valid TOML.
:::
:::{doc} load:57
Parse TOML from a binary file object.
:::
:::{doc} loads:69
Parse TOML from a string.
:::
:::{doc} Flags:135
Flags that map to parsed keys/namespaces.
:::
:::{doc} suffixed_err:652
Return a `TOMLDecodeError` where error message is suffixed with
coordinates in source.
:::
:::{doc} make_safe_parse_float:673
A decorator to make `parse_float` safe.

`parse_float` must not return dicts or lists, because these types
would be mixed with parsed TOML tables and arrays, thus confusing
the parser. The returned decorated callable raises `ValueError`
instead of returning illegal types.
:::
**Imports**: `__future__.annotations`, `collections.abc.Iterable`, `string`, `types.MappingProxyType`, `typing.Any`, `typing.BinaryIO`, `typing.NamedTuple`, `_re.RE_DATETIME`, `_re.RE_LOCALTIME`, `_re.RE_NUMBER`, `_re.match_to_datetime`, `_re.match_to_localtime`, `_re.match_to_number`, `_types.Key`, `_types.ParseFloat`, `_types.Pos`
**Type References**: [[Any]], [[Flags]], [[Key]], [[NestedDict]], [[None]], [[Output]], [[TOMLDecodeError]]

### Interface
- `load`(__fp: BinaryIO) -> dict[<ast.Tuple object at 0x1618f4cd0>]
- `loads`(__s: str) -> dict[<ast.Tuple object at 0x1618dd550>]
- `skip_chars`(src: str, pos: Pos, chars: Iterable[str]) -> Pos
- `skip_until`(src: str, pos: Pos, expect: str) -> Pos
- `skip_comment`(src: str, pos: Pos) -> Pos
- `skip_comments_and_array_ws`(src: str, pos: Pos) -> Pos
- `create_dict_rule`(src: str, pos: Pos, out: Output) -> tuple[<ast.Tuple object at 0x161921a10>]
- `create_list_rule`(src: str, pos: Pos, out: Output) -> tuple[<ast.Tuple object at 0x161915d90>]
- `key_value_rule`(src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFloat) -> Pos
- `parse_key_value_pair`(src: str, pos: Pos, parse_float: ParseFloat) -> tuple[<ast.Tuple object at 0x16195ecd0>]
- `parse_key`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x16196a210>]
- `parse_key_part`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x161970f50>]
- `parse_one_line_basic_str`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x161971c90>]
- `parse_array`(src: str, pos: Pos, parse_float: ParseFloat) -> tuple[<ast.Tuple object at 0x16197e010>]
- `parse_inline_table`(src: str, pos: Pos, parse_float: ParseFloat) -> tuple[<ast.Tuple object at 0x161991190>]
- `parse_basic_str_escape`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x16199dbd0>]
- `parse_basic_str_escape_multiline`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x16199e790>]
- `parse_hex_char`(src: str, pos: Pos, hex_len: int) -> tuple[<ast.Tuple object at 0x1619a9110>]
- `parse_literal_str`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x1619aa790>]
- `parse_multiline_str`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x1619b6550>]
- `parse_basic_str`(src: str, pos: Pos) -> tuple[<ast.Tuple object at 0x1619bf5d0>]
- `parse_value`(src: str, pos: Pos, parse_float: ParseFloat) -> tuple[<ast.Tuple object at 0x1619dcf50>]
- `suffixed_err`(src: str, pos: Pos, msg: str) -> TOMLDecodeError
- `is_unicode_scalar_value`(codepoint: int) -> bool
- `make_safe_parse_float`(parse_float: ParseFloat) -> ParseFloat
- `__init__`() -> None
- `add_pending`(key: Key, flag: int) -> None
- `finalize_pending`() -> None
- `unset_all`(key: Key) -> None
- `set`(key: Key, flag: int) -> None
- `is_`(key: Key, flag: int) -> bool
- `get_or_create_nest`(key: Key) -> dict
- `append_nest_to_list`(key: Key) -> None
- `coord_repr`(src: str, pos: Pos) -> str
- `safe_parse_float`(float_str: str) -> Any

### Implementation
**TOMLDecodeError**

**Flags**

**NestedDict**
  - cont: Any
**Output**
  - data: NestedDict
  - flags: Flags
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/tomli/_parser.py`  
**Dependencies**: `__future__.annotations`, `collections.abc.Iterable`, `string`, `types.MappingProxyType`, `typing.Any`, `typing.BinaryIO`, `typing.NamedTuple`, `_re.RE_DATETIME`, `_re.RE_LOCALTIME`, `_re.RE_NUMBER`, `_re.match_to_datetime`, `_re.match_to_localtime`, `_re.match_to_number`, `_types.Key`, `_types.ParseFloat`, `_types.Pos`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.tomli._re
:::{doc} match_to_datetime:52
Convert a `RE_DATETIME` match to `datetime.datetime` or `datetime.date`.

Raises ValueError if the match does not correspond to a valid date
or datetime.
:::
**Imports**: `__future__.annotations`, `datetime.date`, `datetime.datetime`, `datetime.time`, `datetime.timedelta`, `datetime.timezone`, `datetime.tzinfo`, `functools.lru_cache`, `re`, `typing.Any`, `_types.ParseFloat`
**Type References**: [[None]]

### Interface
- `match_to_datetime`(match: re.Match) -> datetime | date
- `cached_tz`(hour_str: str, minute_str: str, sign_str: str) -> timezone
- `match_to_localtime`(match: re.Match) -> time
- `match_to_number`(match: re.Match, parse_float: ParseFloat) -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/tomli/_re.py`  
**Dependencies**: `__future__.annotations`, `datetime.date`, `datetime.datetime`, `datetime.time`, `datetime.timedelta`, `datetime.timezone`, `datetime.tzinfo`, `functools.lru_cache`, `re`, `typing.Any`, `_types.ParseFloat`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.certifi

**Imports**: `core.contents`, `core.where`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/certifi/__init__.py`  
**Dependencies**: `core.contents`, `core.where`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.certifi.core

**Imports**: `sys`, `atexit`, `importlib.resources.as_file`, `importlib.resources.files`, `importlib.resources.path`, `importlib.resources.read_text`, `os`, `types`, `typing.Union`
### Interface
- `exit_cacert_ctx`() -> None
- `where`() -> str
- `contents`() -> str
- `read_text`(package: Package, resource: Resource, encoding: str, errors: str) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/certifi/core.py`  
**Dependencies**: `sys`, `atexit`, `importlib.resources.as_file`, `importlib.resources.files`, `importlib.resources.path`, `importlib.resources.read_text`, `os`, `types`, `typing.Union`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.certifi.__main__

**Imports**: `argparse`, `pip._vendor.certifi.contents`, `pip._vendor.certifi.where`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/certifi/__main__.py`  
**Dependencies**: `argparse`, `pip._vendor.certifi.contents`, `pip._vendor.certifi.where`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pyproject_hooks._impl
:::{doc} BackendUnavailable:23
Will be raised if the backend cannot be imported in the hook process.
:::
:::{doc} BackendInvalid:29
Will be raised if the backend is invalid.
:::
:::{doc} HookMissing:37
Will be raised on missing hooks (if a fallback can't be used).
:::
:::{doc} UnsupportedOperation:44
May be raised by build_sdist if the backend indicates that it can't.
:::
:::{doc} default_subprocess_runner:50
The default method of calling the wrapper subprocess.

This uses :func:`subprocess.check_call` under the hood.
:::
:::{doc} quiet_subprocess_runner:62
Call the subprocess while suppressing output.

This uses :func:`subprocess.check_output` under the hood.
:::
:::{doc} norm_and_check:74
Normalise and check a backend path.

Ensure that the requested backend path is specified as a relative path,
and resolves to a location under the given source tree.

Return an absolute version of the requested path.
:::
:::{doc} BuildBackendHookCaller:98
A wrapper to call the build backend hooks for a source directory.
    
:::
**Imports**: `json`, `os`, `sys`, `tempfile`, `contextlib.contextmanager`, `os.path.abspath`, `os.path.join`, `subprocess.STDOUT`, `subprocess.check_call`, `subprocess.check_output`, `_in_process._in_proc_script_path`
**Type References**: [[BackendInvalid]], [[BackendUnavailable]], [[BuildBackendHookCaller]], [[HookMissing]], [[UnsupportedOperation]]

### Interface
- `write_json`() -> Any
- `read_json`() -> Any
- `default_subprocess_runner`() -> Any
- `quiet_subprocess_runner`() -> Any
- `norm_and_check`() -> Any
- `__init__`() -> Any
- `subprocess_runner`() -> Any
- `_supported_features`() -> Any
- `get_requires_for_build_wheel`() -> Any
- `prepare_metadata_for_build_wheel`() -> Any
- `build_wheel`() -> Any
- `get_requires_for_build_editable`() -> Any
- `prepare_metadata_for_build_editable`() -> Any
- `build_editable`() -> Any
- `get_requires_for_build_sdist`() -> Any
- `build_sdist`() -> Any
- `_call_hook`() -> Any

### Implementation
**BackendUnavailable**

**BackendInvalid**

**HookMissing**

**UnsupportedOperation**

**BuildBackendHookCaller**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pyproject_hooks/_impl.py`  
**Dependencies**: `json`, `os`, `sys`, `tempfile`, `contextlib.contextmanager`, `os.path.abspath`, `os.path.join`, `subprocess.STDOUT`, `subprocess.check_call`, `subprocess.check_output`, `_in_process._in_proc_script_path`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pyproject_hooks

**Imports**: `_impl.BackendInvalid`, `_impl.BackendUnavailable`, `_impl.BuildBackendHookCaller`, `_impl.HookMissing`, `_impl.UnsupportedOperation`, `_impl.default_subprocess_runner`, `_impl.quiet_subprocess_runner`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pyproject_hooks/__init__.py`  
**Dependencies**: `_impl.BackendInvalid`, `_impl.BackendUnavailable`, `_impl.BuildBackendHookCaller`, `_impl.HookMissing`, `_impl.UnsupportedOperation`, `_impl.default_subprocess_runner`, `_impl.quiet_subprocess_runner`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pyproject_hooks._compat

**Imports**: `sys`, `tomllib`, `pip._vendor.tomli`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pyproject_hooks/_compat.py`  
**Dependencies**: `sys`, `tomllib`, `pip._vendor.tomli`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.themes

**Imports**: `default_styles.DEFAULT_STYLES`, `theme.Theme`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/themes.py`  
**Dependencies**: `default_styles.DEFAULT_STYLES`, `theme.Theme`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.screen
:::{doc} Screen:18
A renderable that fills the terminal screen and crops excess.

Args:
    renderable (RenderableType): Child renderable.
    style (StyleType, optional): Optional background style. Defaults to None.
:::
**Imports**: `typing.Optional`, `typing.TYPE_CHECKING`, `segment.Segment`, `style.StyleType`, `_loop.loop_last`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `console.RenderableType`, `console.Group`, `pip._vendor.rich.console.Group`
**Type References**: [[RenderableType]], [[Screen]]

### Interface
- `__init__`() -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult

### Implementation
**Screen**
  - renderable: RenderableType
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/screen.py`  
**Dependencies**: `typing.Optional`, `typing.TYPE_CHECKING`, `segment.Segment`, `style.StyleType`, `_loop.loop_last`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `console.RenderableType`, `console.Group`, `pip._vendor.rich.console.Group`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.logging
:::{doc} RichHandler:18
A logging handler that renders output with Rich. The time / level / message and file are displayed in columns.
The level is color coded, and the message is syntax highlighted.

Note:
    Be careful when enabling console markup in log messages if you have configured logging for libraries not
    under your control. If a dependency writes messages containing square brackets, it may not produce the intended output.

Args:
    level (Union[int, str], optional): Log level. Defaults to logging.NOTSET.
    console (:class:`~rich.console.Console`, optional): Optional console instance to write logs.
        Default will use a global console instance writing to stdout.
    show_time (bool, optional): Show a column for the time. Defaults to True.
    omit_repeated_times (bool, optional): Omit repetition of the same time. Defaults to True.
    show_level (bool, optional): Show a column for the level. Defaults to True.
    show_path (bool, optional): Show the path to the original log call. Defaults to True.
    enable_link_path (bool, optional): Enable terminal link of path column to file. Defaults to True.
    highlighter (Highlighter, optional): Highlighter to style log messages, or None to use ReprHighlighter. Defaults to None.
    markup (bool, optional): Enable console markup in log messages. Defaults to False.
    rich_tracebacks (bool, optional): Enable rich tracebacks with syntax highlighting and formatting. Defaults to False.
    tracebacks_width (Optional[int], optional): Number of characters used to render tracebacks, or None for full width. Defaults to None.
    tracebacks_extra_lines (int, optional): Additional lines of code to render tracebacks, or None for full width. Defaults to None.
    tracebacks_theme (str, optional): Override pygments theme used in traceback.
    tracebacks_word_wrap (bool, optional): Enable word wrapping of long tracebacks lines. Defaults to True.
    tracebacks_show_locals (bool, optional): Enable display of locals in tracebacks. Defaults to False.
    tracebacks_suppress (Sequence[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.
    locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to 10.
    locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.
    log_time_format (Union[str, TimeFormatterCallable], optional): If ``log_time`` is enabled, either string for strftime or callable that formats the time. Defaults to "[%x %X] ".
    keywords (List[str], optional): List of words to highlight instead of ``RichHandler.KEYWORDS``.
:::
**Imports**: `logging`, `datetime.datetime`, `logging.Handler`, `logging.LogRecord`, `pathlib.Path`, `types.ModuleType`, `typing.ClassVar`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Type`, `typing.Union`, `pip._vendor.rich._null_file.NullFile`, `get_console`, `_log_render.FormatTimeCallable`, `_log_render.LogRender`, `console.Console`, `console.ConsoleRenderable`, `highlighter.Highlighter`, `highlighter.ReprHighlighter`, `text.Text`, `traceback.Traceback`, `time.sleep`
**Type References**: [[ClassVar]], [[RichHandler]]

### Interface
- `__init__`(level: [Union[<ast.Tuple object at 0x161a8d050>]](#union), console: [Optional[Console]](#optional)) -> None
- `get_level_text`(record: LogRecord) -> Text
- `emit`(record: LogRecord) -> None
- `render_message`(record: LogRecord, message: str) -> ConsoleRenderable
- `render`() -> ConsoleRenderable
- `divide`() -> None

### Implementation
**RichHandler**
  - KEYWORDS: ClassVar[Optional[List[str]]]
  - HIGHLIGHTER_CLASS: ClassVar[Type[Highlighter]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/logging.py`  
**Dependencies**: `logging`, `datetime.datetime`, `logging.Handler`, `logging.LogRecord`, `pathlib.Path`, `types.ModuleType`, `typing.ClassVar`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Type`, `typing.Union`, `pip._vendor.rich._null_file.NullFile`, `get_console`, `_log_render.FormatTimeCallable`, `_log_render.LogRender`, `console.Console`, `console.ConsoleRenderable`, `highlighter.Highlighter`, `highlighter.ReprHighlighter`, `text.Text`, `traceback.Traceback`, `time.sleep`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.measure
:::{doc} Measurement:11
Stores the minimum and maximum widths (in characters) required to render an object.
:::
:::{doc} measure_renderables:125
Get a measurement that would fit a number of renderables.

Args:
    console (~rich.console.Console): Console instance.
    options (~rich.console.ConsoleOptions): Console options.
    renderables (Iterable[RenderableType]): One or more renderable objects.

Returns:
    Measurement: Measurement object containing range of character widths required to
        contain all given renderables.
:::
**Imports**: `operator.itemgetter`, `typing.TYPE_CHECKING`, `typing.Callable`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `errors`, `protocol.is_renderable`, `protocol.rich_cast`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`
**Type References**: [[Measurement]], [[Optional]]

### Interface
- `measure_renderables`(console: Console, options: ConsoleOptions, renderables: Sequence[RenderableType]) -> Measurement
- `span`() -> int
- `normalize`() -> Measurement
- `with_maximum`(width: int) -> Measurement
- `with_minimum`(width: int) -> Measurement
- `clamp`(min_width: [Optional[int]](#optional), max_width: [Optional[int]](#optional)) -> Measurement
- `get`(console: Console, options: ConsoleOptions, renderable: RenderableType) -> Measurement

### Implementation
**Measurement**
  - minimum: int
  - maximum: int
  - get_console_width: Optional[Callable[<ast.Tuple object at 0x161ac2e90>]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/measure.py`  
**Dependencies**: `operator.itemgetter`, `typing.TYPE_CHECKING`, `typing.Callable`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `errors`, `protocol.is_renderable`, `protocol.rich_cast`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.tree
:::{doc} Tree:12
A renderable for a tree structure.

Args:
    label (RenderableType): The renderable or str for the tree label.
    style (StyleType, optional): Style of this tree. Defaults to "tree".
    guide_style (StyleType, optional): Style of the guide lines. Defaults to "tree.line".
    expanded (bool, optional): Also display children. Defaults to True.
    highlight (bool, optional): Highlight renderable (if str). Defaults to False.
:::
**Imports**: `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.Tuple`, `_loop.loop_first`, `_loop.loop_last`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`, `style.StyleStack`, `style.StyleType`, `styled.Styled`, `pip._vendor.rich.console.Group`, `pip._vendor.rich.markdown.Markdown`, `pip._vendor.rich.panel.Panel`, `pip._vendor.rich.syntax.Syntax`, `pip._vendor.rich.table.Table`
**Type References**: [[List]], [[Tree]]

### Interface
- `__init__`(label: RenderableType) -> None
- `add`(label: RenderableType) -> Tree
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `make_guide`(index: int, style: Style) -> Segment

### Implementation
**Tree**
  - stack: List[Iterator[Tree]]
  - levels: List[Segment]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/tree.py`  
**Dependencies**: `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.Tuple`, `_loop.loop_first`, `_loop.loop_last`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`, `style.StyleStack`, `style.StyleType`, `styled.Styled`, `pip._vendor.rich.console.Group`, `pip._vendor.rich.markdown.Markdown`, `pip._vendor.rich.panel.Panel`, `pip._vendor.rich.syntax.Syntax`, `pip._vendor.rich.table.Table`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.console
:::{doc} ConsoleDimensions:116
Size of the terminal.
:::
:::{doc} ConsoleOptions:126
Options for __rich_console__ method.
:::
:::{doc} RichCast:260
An object that may be 'cast' to a console renderable.
:::
:::{doc} ConsoleRenderable:270
An object that supports the console protocol.
:::
:::{doc} CaptureError:289
An error in the Capture context manager.
:::
:::{doc} NewLine:293
A renderable to generate new line(s)
:::
:::{doc} ScreenUpdate:305
Render a list of lines at a given offset.
:::
:::{doc} Capture:323
Context manager to capture the result of printing to the console.
See :meth:`~rich.console.Console.capture` for how to use.

Args:
    console (Console): A console instance to capture output.
:::
:::{doc} ThemeContext:356
A context manager to use a temporary theme. See :meth:`~rich.console.Console.use_theme` for usage.
:::
:::{doc} PagerContext:377
A context manager that 'pages' content. See :meth:`~rich.console.Console.pager` for usage.
:::
:::{doc} ScreenContext:416
A context manager that enables an alternative screen. See :meth:`~rich.console.Console.screen` for usage.
:::
:::{doc} Group:463
Takes a group of renderables and returns a renderable object that renders the group.

Args:
    renderables (Iterable[RenderableType]): An iterable of renderable objects.
    fit (bool, optional): Fit dimension of group to contents, or fill available space. Defaults to True.
:::
:::{doc} group:496
A decorator that turns an iterable of renderables in to a group.

Args:
    fit (bool, optional): Fit dimension of group to contents, or fill available space. Defaults to True.
:::
:::{doc} _is_jupyter:518
Check if we're running in a Jupyter notebook.
:::
:::{doc} ConsoleThreadLocals:549
Thread local values for Console context.
:::
:::{doc} RenderHook:557
Provides hooks in to the render process.
:::
:::{doc} detect_legacy_windows:589
Detect legacy Windows.
:::
:::{doc} Console:594
A high level console interface.

Args:
    color_system (str, optional): The color system supported by your terminal,
        either ``"standard"``, ``"256"`` or ``"truecolor"``. Leave as ``"auto"`` to autodetect.
    force_terminal (Optional[bool], optional): Enable/disable terminal control codes, or None to auto-detect terminal. Defaults to None.
    force_jupyter (Optional[bool], optional): Enable/disable Jupyter rendering, or None to auto-detect Jupyter. Defaults to None.
    force_interactive (Optional[bool], optional): Enable/disable interactive mode, or None to auto detect. Defaults to None.
    soft_wrap (Optional[bool], optional): Set soft wrap default on print method. Defaults to False.
    theme (Theme, optional): An optional style theme object, or ``None`` for default theme.
    stderr (bool, optional): Use stderr rather than stdout if ``file`` is not specified. Defaults to False.
    file (IO, optional): A file object where the console should write to. Defaults to stdout.
    quiet (bool, Optional): Boolean to suppress all output. Defaults to False.
    width (int, optional): The width of the terminal. Leave as default to auto-detect width.
    height (int, optional): The height of the terminal. Leave as default to auto-detect height.
    style (StyleType, optional): Style to apply to all output, or None for no style. Defaults to None.
    no_color (Optional[bool], optional): Enabled no color mode, or None to auto detect. Defaults to None.
    tab_size (int, optional): Number of spaces used to replace a tab character. Defaults to 8.
    record (bool, optional): Boolean to enable recording of terminal output,
        required to call :meth:`export_html`, :meth:`export_svg`, and :meth:`export_text`. Defaults to False.
    markup (bool, optional): Boolean to enable :ref:`console_markup`. Defaults to True.
    emoji (bool, optional): Enable emoji code. Defaults to True.
    emoji_variant (str, optional): Optional emoji variant, either "text" or "emoji". Defaults to None.
    highlight (bool, optional): Enable automatic highlighting. Defaults to True.
    log_time (bool, optional): Boolean to enable logging of time by :meth:`log` methods. Defaults to True.
    log_path (bool, optional): Boolean to enable the logging of the caller by :meth:`log`. Defaults to True.
    log_time_format (Union[str, TimeFormatterCallable], optional): If ``log_time`` is enabled, either string for strftime or callable that formats the time. Defaults to "[%X] ".
    highlighter (HighlighterType, optional): Default highlighter.
    legacy_windows (bool, optional): Enable legacy Windows mode, or ``None`` to auto detect. Defaults to ``None``.
    safe_box (bool, optional): Restrict box options that don't render on legacy Windows.
    get_datetime (Callable[[], datetime], optional): Callable that gets the current time as a datetime.datetime object (used by Console.log),
        or None for datetime.now.
    get_time (Callable[[], time], optional): Callable that gets the current time in seconds, default uses time.monotonic.
:::
:::{doc} _svg_hash:2568
Returns a unique hash for the given SVG main code.

Args:
    svg_main_code (str): The content we're going to inject in the SVG envelope.

Returns:
    str: a hash of the given content
:::
**Imports**: `inspect`, `os`, `platform`, `sys`, `threading`, `zlib`, `abc.ABC`, `abc.abstractmethod`, `dataclasses.dataclass`, `dataclasses.field`, `datetime.datetime`, `functools.wraps`, `getpass.getpass`, `html.escape`, `inspect.isclass`, `itertools.islice`, `math.ceil`, `time.monotonic`, `types.FrameType`, `types.ModuleType`, `types.TracebackType`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Mapping`, `typing.NamedTuple`, `typing.Optional`, `typing.TextIO`, `typing.Tuple`, `typing.Type`, `typing.Union`, `typing.cast`, `pip._vendor.rich._null_file.NULL_FILE`, `errors`, `themes`, `_emoji_replace._emoji_replace`, `_export_format.CONSOLE_HTML_FORMAT`, `_export_format.CONSOLE_SVG_FORMAT`, `_fileno.get_fileno`, `_log_render.FormatTimeCallable`, `_log_render.LogRender`, `align.Align`, `align.AlignMethod`, `color.ColorSystem`, `color.blend_rgb`, `control.Control`, `emoji.EmojiVariant`, `highlighter.NullHighlighter`, `highlighter.ReprHighlighter`, `markup.render`, `measure.Measurement`, `measure.measure_renderables`, `pager.Pager`, `pager.SystemPager`, `pretty.Pretty`, `pretty.is_expandable`, `protocol.rich_cast`, `region.Region`, `scope.render_scope`, `screen.Screen`, `segment.Segment`, `style.Style`, `style.StyleType`, `styled.Styled`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `terminal_theme.SVG_EXPORT_THEME`, `terminal_theme.TerminalTheme`, `text.Text`, `text.TextType`, `theme.Theme`, `theme.ThemeStack`, `typing.Literal`, `typing.Protocol`, `typing.runtime_checkable`, `pip._vendor.typing_extensions.Literal`, `pip._vendor.typing_extensions.Protocol`, `pip._vendor.typing_extensions.runtime_checkable`, `_windows.WindowsConsoleFeatures`, `live.Live`, `status.Status`, `_windows.get_windows_console_features`, `status.Status`, `rule.Rule`, `pip._vendor.rich.json.JSON`, `traceback.Traceback`, `pip._vendor.rich.cells.cell_len`, `jupyter.display`, `pip._vendor.rich._win32_console.LegacyWindowsTerm`, `pip._vendor.rich._windows_renderer.legacy_windows_render`
**Type References**: [[Capture]], [[CaptureError]], [[Console]], [[ConsoleDimensions]], [[ConsoleOptions]], [[ConsoleRenderable]], [[ConsoleThreadLocals]], [[Dict]], [[Group]], [[HighlighterType]], [[Iterable]], [[List]], [[Mapping]], [[NewLine]], [[NoChange]], [[Optional]], [[PagerContext]], [[RenderHook]], [[RenderResult]], [[RichCast]], [[ScreenContext]], [[ScreenUpdate]], [[ThemeContext]], [[ThemeStack]]

### Interface
- `group`(fit: bool) -> Callable[<ast.Tuple object at 0x161b8e150>]
- `_is_jupyter`() -> bool
- `get_windows_console_features`() -> WindowsConsoleFeatures
- `detect_legacy_windows`() -> bool
- `_svg_hash`(svg_main_code: str) -> str
- `ascii_only`() -> bool
- `copy`() -> ConsoleOptions
- `update`() -> None
- `update_width`(width: int) -> ConsoleOptions
- `update_height`(height: int) -> ConsoleOptions
- `reset_height`() -> ConsoleOptions
- `update_dimensions`(width: int, height: int) -> ConsoleOptions
- `__rich__`() -> [Union[<ast.Tuple object at 0x161b3dd10>]](#union)
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__init__`() -> Any
- `__enter__`() -> Console
- `__exit__`(exc_type: Any, exc_value: Any, traceback: Any) -> None
- `get`() -> str
- `renderables`() -> [List[RenderableType]](#list)
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `decorator`(method: Callable[<ast.Tuple object at 0x161b8fcd0>]) -> Callable[<ast.Tuple object at 0x161b8e590>]
- `process_renderables`(renderables: [List[ConsoleRenderable]](#list)) -> [List[ConsoleRenderable]](#list)
- `__repr__`() -> str
- `file`(new_file: IO[str]) -> None
- `_buffer`() -> [List[Segment]](#list)
- `_buffer_index`(value: int) -> None
- `_theme_stack`() -> ThemeStack
- `_detect_color_system`() -> [Optional[ColorSystem]](#optional)
- `_enter_buffer`() -> None
- `_exit_buffer`() -> None
- `set_live`(live: Live) -> None
- `clear_live`() -> None
- `push_render_hook`(hook: RenderHook) -> None
- `pop_render_hook`() -> None
- `begin_capture`() -> None
- `end_capture`() -> str
- `push_theme`(theme: Theme) -> None
- `pop_theme`() -> None
- `use_theme`(theme: Theme) -> ThemeContext
- `color_system`() -> [Optional[str]](#optional)
- `encoding`() -> str
- `is_terminal`() -> bool
- `is_dumb_terminal`() -> bool
- `options`() -> ConsoleOptions
- `size`(new_size: Tuple[<ast.Tuple object at 0x161c617d0>]) -> None
- `width`(width: int) -> None
- `height`(height: int) -> None
- `bell`() -> None
- `capture`() -> Capture
- `pager`(pager: [Optional[Pager]](#optional), styles: bool, links: bool) -> PagerContext
- `line`(count: int) -> None
- `clear`(home: bool) -> None
- `status`(status: RenderableType) -> Status
- `show_cursor`(show: bool) -> bool
- `set_alt_screen`(enable: bool) -> bool
- `is_alt_screen`() -> bool
- `set_window_title`(title: str) -> bool
- `screen`(hide_cursor: bool, style: [Optional[StyleType]](#optional)) -> ScreenContext
- `measure`(renderable: RenderableType) -> Measurement
- `render`(renderable: RenderableType, options: [Optional[ConsoleOptions]](#optional)) -> Iterable[Segment]
- `render_lines`(renderable: RenderableType, options: [Optional[ConsoleOptions]](#optional)) -> [List[List[Segment]]](#list)
- `render_str`(text: str) -> Text
- `get_style`(name: [Union[<ast.Tuple object at 0x161cb79d0>]](#union)) -> Style
- `_collect_renderables`(objects: Iterable[Any], sep: str, end: str) -> [List[ConsoleRenderable]](#list)
- `rule`(title: TextType) -> None
- `control`() -> None
- `out`() -> None
- `print`() -> None
- `print_json`(json: [Optional[str]](#optional)) -> None
- `update_screen`(renderable: RenderableType) -> None
- `update_screen_lines`(lines: [List[List[Segment]]](#list), x: int, y: int) -> None
- `print_exception`() -> None
- `_caller_frame_info`(offset: int, currentframe: Callable[<ast.Tuple object at 0x161d21fd0>]) -> Tuple[<ast.Tuple object at 0x161d30750>]
- `log`() -> None
- `_check_buffer`() -> None
- `_render_buffer`(buffer: Iterable[Segment]) -> str
- `input`(prompt: TextType) -> str
- `export_text`() -> str
- `save_text`(path: str) -> None
- `export_html`() -> str
- `save_html`(path: str) -> None
- `export_svg`() -> str
- `save_svg`(path: str) -> None
- `_replace`() -> Group
- `check_text`() -> None
- `get_svg_style`(style: Style) -> str
- `escape_text`(text: str) -> str
- `make_tag`(name: str, content: [Optional[str]](#optional)) -> str
- `align_append`(renderable: RenderableType) -> None
- `stringify`(value: object) -> str

### Implementation
**NoChange**

**ConsoleDimensions**
  - width: int
  - height: int
**ConsoleOptions**
  - size: ConsoleDimensions
  - legacy_windows: bool
  - min_width: int
  - max_width: int
  - is_terminal: bool
  - encoding: str
  - max_height: int
  - justify: Optional[JustifyMethod]
  - overflow: Optional[OverflowMethod]
  - no_wrap: Optional[bool]
  - highlight: Optional[bool]
  - markup: Optional[bool]
  - height: Optional[int]
  - options: ConsoleOptions
**RichCast**

**ConsoleRenderable**

**CaptureError**

**NewLine**

**ScreenUpdate**

**Capture**

**ThemeContext**

**PagerContext**
  - buffer: List[Segment]
  - segments: Iterable[Segment]
**ScreenContext**

**Group**

**ConsoleThreadLocals**
  - theme_stack: ThemeStack
  - buffer: List[Segment]
  - buffer_index: int
**RenderHook**

**Console**
  - _environ: Mapping[<ast.Tuple object at 0x161b6f810>]
  - isatty: Optional[Callable[<ast.Tuple object at 0x161c042d0>]]
  - width: Optional[int]
  - height: Optional[int]
  - render_iterable: RenderResult
  - renderables: List[ConsoleRenderable]
  - text: List[Text]
  - _highlighter: HighlighterType
  - raw_output: str
  - output: List[str]
  - fragments: List[str]
  - style_cache: Dict[<ast.Tuple object at 0x161d995d0>]
  - text_backgrounds: List[str]
  - text_group: List[str]
  - classes: Dict[<ast.Tuple object at 0x161db55d0>]
  - new_segments: List[Segment]
  - styles: Dict[<ast.Tuple object at 0x161d85310>]
  - stylesheet_rules: List[str]
  - batch: List[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/console.py`  
**Dependencies**: `inspect`, `os`, `platform`, `sys`, `threading`, `zlib`, `abc.ABC`, `abc.abstractmethod`, `dataclasses.dataclass`, `dataclasses.field`, `datetime.datetime`, `functools.wraps`, `getpass.getpass`, `html.escape`, `inspect.isclass`, `itertools.islice`, `math.ceil`, `time.monotonic`, `types.FrameType`, `types.ModuleType`, `types.TracebackType`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Mapping`, `typing.NamedTuple`, `typing.Optional`, `typing.TextIO`, `typing.Tuple`, `typing.Type`, `typing.Union`, `typing.cast`, `pip._vendor.rich._null_file.NULL_FILE`, `errors`, `themes`, `_emoji_replace._emoji_replace`, `_export_format.CONSOLE_HTML_FORMAT`, `_export_format.CONSOLE_SVG_FORMAT`, `_fileno.get_fileno`, `_log_render.FormatTimeCallable`, `_log_render.LogRender`, `align.Align`, `align.AlignMethod`, `color.ColorSystem`, `color.blend_rgb`, `control.Control`, `emoji.EmojiVariant`, `highlighter.NullHighlighter`, `highlighter.ReprHighlighter`, `markup.render`, `measure.Measurement`, `measure.measure_renderables`, `pager.Pager`, `pager.SystemPager`, `pretty.Pretty`, `pretty.is_expandable`, `protocol.rich_cast`, `region.Region`, `scope.render_scope`, `screen.Screen`, `segment.Segment`, `style.Style`, `style.StyleType`, `styled.Styled`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `terminal_theme.SVG_EXPORT_THEME`, `terminal_theme.TerminalTheme`, `text.Text`, `text.TextType`, `theme.Theme`, `theme.ThemeStack`, `typing.Literal`, `typing.Protocol`, `typing.runtime_checkable`, `pip._vendor.typing_extensions.Literal`, `pip._vendor.typing_extensions.Protocol`, `pip._vendor.typing_extensions.runtime_checkable`, `_windows.WindowsConsoleFeatures`, `live.Live`, `status.Status`, `_windows.get_windows_console_features`, `status.Status`, `rule.Rule`, `pip._vendor.rich.json.JSON`, `traceback.Traceback`, `pip._vendor.rich.cells.cell_len`, `jupyter.display`, `pip._vendor.rich._win32_console.LegacyWindowsTerm`, `pip._vendor.rich._windows_renderer.legacy_windows_render`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.live_render
:::{doc} LiveRender:20
Creates a renderable that may be updated.

Args:
    renderable (RenderableType): Any renderable object.
    style (StyleType, optional): An optional style to apply to the renderable. Defaults to "".
:::
**Imports**: `sys`, `typing.Optional`, `typing.Tuple`, `_loop.loop_last`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `control.Control`, `segment.ControlType`, `segment.Segment`, `style.StyleType`, `text.Text`, `typing.Literal`, `pip._vendor.typing_extensions.Literal`
**Type References**: [[LiveRender]]

### Interface
- `__init__`(renderable: RenderableType, style: StyleType, vertical_overflow: VerticalOverflowMethod) -> None
- `set_renderable`(renderable: RenderableType) -> None
- `position_cursor`() -> Control
- `restore_cursor`() -> Control
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult

### Implementation
**LiveRender**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/live_render.py`  
**Dependencies**: `sys`, `typing.Optional`, `typing.Tuple`, `_loop.loop_last`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `control.Control`, `segment.ControlType`, `segment.Segment`, `style.StyleType`, `text.Text`, `typing.Literal`, `pip._vendor.typing_extensions.Literal`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._emoji_codes



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_emoji_codes.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.box
:::{doc} Box:16
Defines characters to render boxes.

┌─┬┐ top
│ ││ head
├─┼┤ head_row
│ ││ mid
├─┼┤ row
├─┼┤ foot_row
│ ││ foot
└─┴┘ bottom

Args:
    box (str): Characters making up box.
    ascii (bool, optional): True if this box uses ascii characters only. Default is False.
:::
**Imports**: `sys`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.List`, `_loop.loop_last`, `typing.Literal`, `pip._vendor.typing_extensions.Literal`, `pip._vendor.rich.console.ConsoleOptions`, `pip._vendor.rich.columns.Columns`, `pip._vendor.rich.panel.Panel`, `box`, `console.Console`, `table.Table`, `text.Text`
**Type References**: [[Box]], [[List]]

### Interface
- `__init__`(box: str) -> None
- `__repr__`() -> str
- `__str__`() -> str
- `substitute`(options: ConsoleOptions, safe: bool) -> Box
- `get_plain_headed_box`() -> Box
- `get_top`(widths: Iterable[int]) -> str
- `get_row`(widths: Iterable[int], level: Literal[<ast.Tuple object at 0x161f9a610>], edge: bool) -> str
- `get_bottom`(widths: Iterable[int]) -> str

### Implementation
**Box**
  - parts: List[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/box.py`  
**Dependencies**: `sys`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.List`, `_loop.loop_last`, `typing.Literal`, `pip._vendor.typing_extensions.Literal`, `pip._vendor.rich.console.ConsoleOptions`, `pip._vendor.rich.columns.Columns`, `pip._vendor.rich.panel.Panel`, `box`, `console.Console`, `table.Table`, `text.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.color
:::{doc} ColorSystem:21
One of the 3 color system supported by terminals.
:::
:::{doc} ColorType:36
Type of color stored in Color class.
:::
:::{doc} ColorParseError:288
The color could not be parsed.
:::
:::{doc} Color:303
Terminal color definition.
:::
:::{doc} parse_rgb_hex:571
Parse six hex characters in to RGB triplet.
:::
:::{doc} blend_rgb:580
Blend one RGB color in to another.
:::
**Imports**: `platform`, `re`, `colorsys.rgb_to_hls`, `enum.IntEnum`, `functools.lru_cache`, `typing.TYPE_CHECKING`, `typing.NamedTuple`, `typing.Optional`, `typing.Tuple`, `_palettes.EIGHT_BIT_PALETTE`, `_palettes.STANDARD_PALETTE`, `_palettes.WINDOWS_PALETTE`, `color_triplet.ColorTriplet`, `repr.Result`, `repr.rich_repr`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `terminal_theme.TerminalTheme`, `text.Text`, `console.Console`, `table.Table`, `text.Text`, `style.Style`, `text.Text`
**Type References**: [[Color]], [[ColorParseError]], [[ColorSystem]], [[ColorType]], [[Optional]]

### Interface
- `parse_rgb_hex`(hex_color: str) -> ColorTriplet
- `blend_rgb`(color1: ColorTriplet, color2: ColorTriplet, cross_fade: float) -> ColorTriplet
- `__repr__`() -> str
- `__str__`() -> str
- `__rich__`() -> Text
- `__rich_repr__`() -> Result
- `system`() -> ColorSystem
- `is_system_defined`() -> bool
- `is_default`() -> bool
- `get_truecolor`(theme: [Optional[TerminalTheme]](#optional), foreground: bool) -> ColorTriplet
- `from_ansi`(number: int) -> Color
- `from_triplet`(triplet: ColorTriplet) -> Color
- `from_rgb`(red: float, green: float, blue: float) -> Color
- `default`() -> Color
- `parse`(color: str) -> Color
- `get_ansi_codes`(foreground: bool) -> Tuple[<ast.Tuple object at 0x16223a510>]
- `downgrade`(system: ColorSystem) -> Color

### Implementation
**ColorSystem**

**ColorType**

**ColorParseError**

**Color**
  - name: str
  - type: ColorType
  - number: Optional[int]
  - triplet: Optional[ColorTriplet]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/color.py`  
**Dependencies**: `platform`, `re`, `colorsys.rgb_to_hls`, `enum.IntEnum`, `functools.lru_cache`, `typing.TYPE_CHECKING`, `typing.NamedTuple`, `typing.Optional`, `typing.Tuple`, `_palettes.EIGHT_BIT_PALETTE`, `_palettes.STANDARD_PALETTE`, `_palettes.WINDOWS_PALETTE`, `color_triplet.ColorTriplet`, `repr.Result`, `repr.rich_repr`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `terminal_theme.TerminalTheme`, `text.Text`, `console.Console`, `table.Table`, `text.Text`, `style.Style`, `text.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._timer
:::{doc} timer:13
print the elapsed time. (only used in debugging)
:::
**Imports**: `time.time`, `contextlib`, `typing.Generator`
### Interface
- `timer`(subject: str) -> Generator[<ast.Tuple object at 0x162278350>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_timer.py`  
**Dependencies**: `time.time`, `contextlib`, `typing.Generator`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._fileno
:::{doc} get_fileno:6
Get fileno() from a file, accounting for poorly implemented file-like objects.

Args:
    file_like (IO): A file-like object.

Returns:
    int | None: The result of fileno if available, or None if operation failed.
:::
**Imports**: `__future__.annotations`, `typing.IO`, `typing.Callable`
**Type References**: [[Callable]], [[None]]

### Interface
- `get_fileno`(file_like: IO[str]) -> int | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_fileno.py`  
**Dependencies**: `__future__.annotations`, `typing.IO`, `typing.Callable`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.align
:::{doc} Align:23
Align a renderable by adding spaces if necessary.

Args:
    renderable (RenderableType): A console renderable.
    align (AlignMethod): One of "left", "center", or "right""
    style (StyleType, optional): An optional style to apply to the background.
    vertical (Optional[VerticalAlignMethod], optional): Optional vertical align, one of "top", "middle", or "bottom". Defaults to None.
    pad (bool, optional): Pad the right with spaces. Defaults to True.
    width (int, optional): Restrict contents to given width, or None to use default width. Defaults to None.
    height (int, optional): Set height of align renderable, or None to fit to contents. Defaults to None.

Raises:
    ValueError: if ``align`` is not one of the expected values.
:::
:::{doc} VerticalCenter:234
Vertically aligns a renderable.

Warn:
    This class is deprecated and may be removed in a future version. Use Align class with
    `vertical="middle"`.

Args:
    renderable (RenderableType): A renderable object.
:::
**Imports**: `sys`, `itertools.chain`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.Optional`, `constrain.Constrain`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.StyleType`, `typing.Literal`, `pip._vendor.typing_extensions.Literal`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.console.Group`, `pip._vendor.rich.highlighter.ReprHighlighter`, `pip._vendor.rich.panel.Panel`
**Type References**: [[Align]], [[Iterable]], [[VerticalCenter]]

### Interface
- `__init__`(renderable: RenderableType, style: [Optional[StyleType]](#optional)) -> None
- `__repr__`() -> str
- `left`(renderable: RenderableType, style: [Optional[StyleType]](#optional)) -> Align
- `center`(renderable: RenderableType, style: [Optional[StyleType]](#optional)) -> Align
- `right`(renderable: RenderableType, style: [Optional[StyleType]](#optional)) -> Align
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `generate_segments`() -> Iterable[Segment]
- `blank_lines`(count: int) -> Iterable[Segment]

### Implementation
**Align**
  - iter_segments: Iterable[Segment]
**VerticalCenter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/align.py`  
**Dependencies**: `sys`, `itertools.chain`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.Optional`, `constrain.Constrain`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.StyleType`, `typing.Literal`, `pip._vendor.typing_extensions.Literal`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.console.Group`, `pip._vendor.rich.highlighter.ReprHighlighter`, `pip._vendor.rich.panel.Panel`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.theme
:::{doc} Theme:8
A container for style information, used by :class:`~rich.console.Console`.

Args:
    styles (Dict[str, Style], optional): A mapping of style names on to styles. Defaults to None for a theme with no styles.
    inherit (bool, optional): Inherit default styles. Defaults to True.
:::
:::{doc} ThemeStackError:76
Base exception for errors related to the theme stack.
:::
:::{doc} ThemeStack:80
A stack of themes.

Args:
    theme (Theme): A theme instance
:::
**Imports**: `configparser`, `typing.Dict`, `typing.List`, `typing.IO`, `typing.Mapping`, `typing.Optional`, `default_styles.DEFAULT_STYLES`, `style.Style`, `style.StyleType`
**Type References**: [[Dict]], [[Theme]], [[ThemeStack]], [[ThemeStackError]]

### Interface
- `__init__`(theme: Theme) -> None
- `config`() -> str
- `from_file`(config_file: IO[str], source: [Optional[str]](#optional), inherit: bool) -> Theme
- `read`(path: str, inherit: bool, encoding: [Optional[str]](#optional)) -> Theme
- `push_theme`(theme: Theme, inherit: bool) -> None
- `pop_theme`() -> None

### Implementation
**Theme**
  - styles: Dict[<ast.Tuple object at 0x1622df510>]
**ThemeStackError**

**ThemeStack**
  - styles: Dict[<ast.Tuple object at 0x1622e9d10>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/theme.py`  
**Dependencies**: `configparser`, `typing.Dict`, `typing.List`, `typing.IO`, `typing.Mapping`, `typing.Optional`, `default_styles.DEFAULT_STYLES`, `style.Style`, `style.StyleType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.style
:::{doc} _Bit:16
A descriptor to get/set a style attribute bit.
:::
:::{doc} Style:31
A terminal style.

A terminal style consists of a color (`color`), a background color (`bgcolor`), and a number of attributes, such
as bold, italic etc. The attributes have 3 states: they can either be on
(``True``), off (``False``), or not set (``None``).

Args:
    color (Union[Color, str], optional): Color of terminal text. Defaults to None.
    bgcolor (Union[Color, str], optional): Color of terminal background. Defaults to None.
    bold (bool, optional): Enable bold text. Defaults to None.
    dim (bool, optional): Enable dim text. Defaults to None.
    italic (bool, optional): Enable italic text. Defaults to None.
    underline (bool, optional): Enable underlined text. Defaults to None.
    blink (bool, optional): Enabled blinking text. Defaults to None.
    blink2 (bool, optional): Enable fast blinking text. Defaults to None.
    reverse (bool, optional): Enabled reverse text. Defaults to None.
    conceal (bool, optional): Enable concealed text. Defaults to None.
    strike (bool, optional): Enable strikethrough text. Defaults to None.
    underline2 (bool, optional): Enable doubly underlined text. Defaults to None.
    frame (bool, optional): Enable framed text. Defaults to None.
    encircle (bool, optional): Enable encircled text. Defaults to None.
    overline (bool, optional): Enable overlined text. Defaults to None.
    link (str, link): Link URL. Defaults to None.
:::
:::{doc} StyleStack:765
A stack of styles.
:::
**Imports**: `sys`, `functools.lru_cache`, `marshal.dumps`, `marshal.loads`, `random.randint`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Type`, `typing.Union`, `typing.cast`, `errors`, `color.Color`, `color.ColorParseError`, `color.ColorSystem`, `color.blend_rgb`, `repr.Result`, `repr.rich_repr`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `terminal_theme.TerminalTheme`
**Type References**: [[Dict]], [[List]], [[Optional]], [[Style]], [[StyleStack]], [[_Bit]]

### Interface
- `__init__`(default_style: Style) -> None
- `__get__`(obj: Style, objtype: Type[Style]) -> [Optional[bool]](#optional)
- `null`() -> Style
- `from_color`(color: [Optional[Color]](#optional), bgcolor: [Optional[Color]](#optional)) -> Style
- `from_meta`(meta: [Optional[Dict[<ast.Tuple object at 0x16237d050>]]](#optional)) -> Style
- `on`(meta: [Optional[Dict[<ast.Tuple object at 0x162356190>]]](#optional)) -> Style
- `link_id`() -> str
- `__str__`() -> str
- `__bool__`() -> bool
- `_make_ansi_codes`(color_system: ColorSystem) -> str
- `normalize`(style: str) -> str
- `pick_first`() -> StyleType
- `__rich_repr__`() -> Result
- `__eq__`(other: Any) -> bool
- `__ne__`(other: Any) -> bool
- `__hash__`() -> int
- `color`() -> [Optional[Color]](#optional)
- `bgcolor`() -> [Optional[Color]](#optional)
- `link`() -> [Optional[str]](#optional)
- `transparent_background`() -> bool
- `background_style`() -> Style
- `meta`() -> [Dict[<ast.Tuple object at 0x1623a4c50>]](#dict)
- `without_color`() -> Style
- `parse`(style_definition: str) -> Style
- `get_html_style`(theme: [Optional[TerminalTheme]](#optional)) -> str
- `combine`(styles: Iterable[Style]) -> Style
- `chain`() -> Style
- `copy`() -> Style
- `clear_meta_and_links`() -> Style
- `update_link`(link: [Optional[str]](#optional)) -> Style
- `render`(text: str) -> str
- `test`(text: [Optional[str]](#optional)) -> None
- `_add`(style: [Optional[Style]](#optional)) -> Style
- `__add__`(style: [Optional[Style]](#optional)) -> Style
- `__repr__`() -> str
- `current`() -> Style
- `push`(style: Style) -> None
- `pop`() -> Style
- `_make_color`(color: [Union[<ast.Tuple object at 0x1623037d0>]](#union)) -> Color

### Implementation
**_Bit**

**Style**
  - _color: Optional[Color]
  - _bgcolor: Optional[Color]
  - _attributes: int
  - _set_attributes: int
  - _hash: Optional[int]
  - _null: bool
  - _meta: Optional[bytes]
  - style: Style
  - color: Optional[str]
  - bgcolor: Optional[str]
  - attributes: List[str]
  - link: Optional[str]
  - css: List[str]
  - new_style: Style
  - sgr: List[str]
**StyleStack**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/style.py`  
**Dependencies**: `sys`, `functools.lru_cache`, `marshal.dumps`, `marshal.loads`, `random.randint`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Type`, `typing.Union`, `typing.cast`, `errors`, `color.Color`, `color.ColorParseError`, `color.ColorSystem`, `color.blend_rgb`, `repr.Result`, `repr.rich_repr`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `terminal_theme.TerminalTheme`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.default_styles

**Imports**: `typing.Dict`, `style.Style`, `argparse`, `io`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.table.Table`, `pip._vendor.rich.text.Text`
**Type References**: [[Dict]]

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/default_styles.py`  
**Dependencies**: `typing.Dict`, `style.Style`, `argparse`, `io`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.table.Table`, `pip._vendor.rich.text.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._wrap
:::{doc} words:12
Yields each word from the text as a tuple
containing (start_index, end_index, word). A "word" in this context may
include the actual word and any whitespace to the right.
:::
:::{doc} divide_line:26
Given a string of text, and a width (measured in cells), return a list
of cell offsets which the string should be split at in order for it to fit
within the given width.

Args:
    text: The text to examine.
    width: The available cell width.
    fold: If True, words longer than `width` will be folded onto a new line.

Returns:
    A list of indices to break the line at.
:::
**Imports**: `__future__.annotations`, `re`, `typing.Iterable`, `_loop.loop_last`, `cells.cell_len`, `cells.chop_cells`, `console.Console`
### Interface
- `words`(text: str) -> Iterable[tuple[<ast.Tuple object at 0x162475650>]]
- `divide_line`(text: str, width: int, fold: bool) -> list[int]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_wrap.py`  
**Dependencies**: `__future__.annotations`, `re`, `typing.Iterable`, `_loop.loop_last`, `cells.cell_len`, `cells.chop_cells`, `console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._log_render

**Imports**: `datetime.datetime`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.TYPE_CHECKING`, `typing.Union`, `typing.Callable`, `text.Text`, `text.TextType`, `console.Console`, `console.ConsoleRenderable`, `console.RenderableType`, `table.Table`, `pip._vendor.rich.console.Console`, `containers.Renderables`, `table.Table`
**Type References**: [[List]], [[LogRender]]

### Interface
- `__init__`(show_time: bool, show_level: bool, show_path: bool, time_format: [Union[<ast.Tuple object at 0x162492850>]](#union), omit_repeated_times: bool, level_width: [Optional[int]](#optional)) -> None
- `__call__`(console: Console, renderables: Iterable[ConsoleRenderable], log_time: [Optional[datetime]](#optional), time_format: [Optional[Union[<ast.Tuple object at 0x162490090>]]](#optional), level: TextType, path: [Optional[str]](#optional), line_no: [Optional[int]](#optional), link_path: [Optional[str]](#optional)) -> Table

### Implementation
**LogRender**
  - row: List[RenderableType]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_log_render.py`  
**Dependencies**: `datetime.datetime`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.TYPE_CHECKING`, `typing.Union`, `typing.Callable`, `text.Text`, `text.TextType`, `console.Console`, `console.ConsoleRenderable`, `console.RenderableType`, `table.Table`, `pip._vendor.rich.console.Console`, `containers.Renderables`, `table.Table`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.emoji
:::{doc} NoEmoji:23
No emoji by that name.
:::
**Imports**: `sys`, `typing.TYPE_CHECKING`, `typing.Optional`, `typing.Union`, `jupyter.JupyterMixin`, `segment.Segment`, `style.Style`, `_emoji_codes.EMOJI`, `_emoji_replace._emoji_replace`, `typing.Literal`, `pip._vendor.typing_extensions.Literal`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `sys`, `pip._vendor.rich.columns.Columns`, `pip._vendor.rich.console.Console`
**Type References**: [[Emoji]], [[NoEmoji]]

### Interface
- `__init__`(name: str, style: [Union[<ast.Tuple object at 0x1624a9510>]](#union), variant: [Optional[EmojiVariant]](#optional)) -> None
- `replace`(text: str) -> str
- `__repr__`() -> str
- `__str__`() -> str
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult

### Implementation
**NoEmoji**

**Emoji**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/emoji.py`  
**Dependencies**: `sys`, `typing.TYPE_CHECKING`, `typing.Optional`, `typing.Union`, `jupyter.JupyterMixin`, `segment.Segment`, `style.Style`, `_emoji_codes.EMOJI`, `_emoji_replace._emoji_replace`, `typing.Literal`, `pip._vendor.typing_extensions.Literal`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `sys`, `pip._vendor.rich.columns.Columns`, `pip._vendor.rich.console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.layout
:::{doc} LayoutRender:32
An individual layout render.
:::
:::{doc} LayoutError:43
Layout related error.
:::
:::{doc} NoSplitter:47
Requested splitter does not exist.
:::
:::{doc} _Placeholder:51
An internal renderable used as a Layout placeholder.
:::
:::{doc} Splitter:80
Base class for a splitter.
:::
:::{doc} RowSplitter:101
Split a layout region in to rows.
:::
:::{doc} ColumnSplitter:121
Split a layout region in to columns.
:::
:::{doc} Layout:142
A renderable to divide a fixed height in to rows or columns.

Args:
    renderable (RenderableType, optional): Renderable content, or None for placeholder. Defaults to None.
    name (str, optional): Optional identifier for Layout. Defaults to None.
    size (int, optional): Optional fixed size of layout. Defaults to None.
    minimum_size (int, optional): Minimum size of layout. Defaults to 1.
    ratio (int, optional): Optional ratio for flexible layout. Defaults to 1.
    visible (bool, optional): Visibility of layout. Defaults to True.
:::
**Imports**: `abc.ABC`, `abc.abstractmethod`, `itertools.islice`, `operator.itemgetter`, `threading.RLock`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `_ratio.ratio_resolve`, `align.Align`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `highlighter.ReprHighlighter`, `panel.Panel`, `pretty.Pretty`, `region.Region`, `repr.Result`, `repr.rich_repr`, `segment.Segment`, `style.StyleType`, `pip._vendor.rich.tree.Tree`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.styled.Styled`, `pip._vendor.rich.table.Table`, `pip._vendor.rich.tree.Tree`
**Type References**: [[ColumnSplitter]], [[Dict]], [[Layout]], [[LayoutError]], [[LayoutRender]], [[List]], [[NoSplitter]], [[Region]], [[RenderableType]], [[RowSplitter]], [[Splitter]], [[_Placeholder]]

### Interface
- `__init__`(renderable: [Optional[RenderableType]](#optional)) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `get_tree_icon`() -> str
- `divide`(children: Sequence[Layout], region: Region) -> Iterable[Tuple[<ast.Tuple object at 0x1624c1d50>]]
- `__rich_repr__`() -> Result
- `renderable`() -> RenderableType
- `children`() -> [List[Layout]](#list)
- `map`() -> RenderMap
- `get`(name: str) -> [Optional[Layout]](#optional)
- `__getitem__`(name: str) -> Layout
- `tree`() -> Tree
- `split`() -> None
- `add_split`() -> None
- `split_row`() -> None
- `split_column`() -> None
- `unsplit`() -> None
- `update`(renderable: RenderableType) -> None
- `refresh_screen`(console: Console, layout_name: str) -> None
- `_make_region_map`(width: int, height: int) -> RegionMap
- `render`(console: Console, options: ConsoleOptions) -> RenderMap
- `summary`(layout: Layout) -> Table
- `recurse`(tree: Tree, layout: Layout) -> None

### Implementation
**LayoutRender**
  - region: Region
  - render: List[List[Segment]]
**LayoutError**

**NoSplitter**

**_Placeholder**

**Splitter**
  - name: str
**RowSplitter**

**ColumnSplitter**

**Layout**
  - stack: List[Tuple[<ast.Tuple object at 0x162515a50>]]
  - layout_regions: List[Tuple[<ast.Tuple object at 0x162516910>]]
  - render_map: Dict[<ast.Tuple object at 0x16251eb10>]
  - text: RenderableType
  - layout_lines: List[List[Segment]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/layout.py`  
**Dependencies**: `abc.ABC`, `abc.abstractmethod`, `itertools.islice`, `operator.itemgetter`, `threading.RLock`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `_ratio.ratio_resolve`, `align.Align`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `highlighter.ReprHighlighter`, `panel.Panel`, `pretty.Pretty`, `region.Region`, `repr.Result`, `repr.rich_repr`, `segment.Segment`, `style.StyleType`, `pip._vendor.rich.tree.Tree`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.styled.Styled`, `pip._vendor.rich.table.Table`, `pip._vendor.rich.tree.Tree`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.containers
:::{doc} Renderables:30
A list subclass which renders its contents to the console.
:::
:::{doc} Lines:66
A list subclass which can render to the console.
:::
**Imports**: `itertools.zip_longest`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.TypeVar`, `typing.Union`, `typing.overload`, `cells.cell_len`, `measure.Measurement`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.OverflowMethod`, `console.RenderResult`, `console.RenderableType`, `text.Text`, `text.Text`
**Type References**: [[Lines]], [[List]], [[Renderables]]

### Interface
- `__init__`(lines: Iterable[Text]) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `append`(line: Text) -> None
- `__iter__`() -> Iterator[Text]
- `__repr__`() -> str
- `__getitem__`(index: [Union[<ast.Tuple object at 0x162544b90>]](#union)) -> [Union[<ast.Tuple object at 0x162544510>]](#union)
- `__setitem__`(index: int, value: Text) -> Lines
- `__len__`() -> int
- `extend`(lines: Iterable[Text]) -> None
- `pop`(index: int) -> Text
- `justify`(console: Console, width: int, justify: JustifyMethod, overflow: OverflowMethod) -> None

### Implementation
**Renderables**

**Lines**
  - tokens: List[Text]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/containers.py`  
**Dependencies**: `itertools.zip_longest`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.TypeVar`, `typing.Union`, `typing.overload`, `cells.cell_len`, `measure.Measurement`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.OverflowMethod`, `console.RenderResult`, `console.RenderableType`, `text.Text`, `text.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._emoji_replace
:::{doc} _emoji_replace:12
Replace emoji code in text.
:::
**Imports**: `typing.Callable`, `typing.Match`, `typing.Optional`, `re`, `_emoji_codes.EMOJI`
### Interface
- `_emoji_replace`(text: str, default_variant: [Optional[str]](#optional), _emoji_sub: _EmojiSubMethod) -> str
- `do_replace`(match: Match[str]) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_emoji_replace.py`  
**Dependencies**: `typing.Callable`, `typing.Match`, `typing.Optional`, `re`, `_emoji_codes.EMOJI`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.traceback
:::{doc} install:48
Install a rich traceback handler.

Once installed, any tracebacks will be printed with syntax highlighting and rich formatting.


Args:
    console (Optional[Console], optional): Console to write exception to. Default uses internal Console instance.
    width (Optional[int], optional): Width (in characters) of traceback. Defaults to 100.
    extra_lines (int, optional): Extra lines of code. Defaults to 3.
    theme (Optional[str], optional): Pygments theme to use in traceback. Defaults to ``None`` which will pick
        a theme appropriate for the platform.
    word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.
    show_locals (bool, optional): Enable display of local variables. Defaults to False.
    locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to 10.
    locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.
    locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.
    locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.
    indent_guides (bool, optional): Enable indent guides in code and locals. Defaults to True.
    suppress (Sequence[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.

Returns:
    Callable: The previous exception handler that was replaced.
:::
:::{doc} Traceback:211
A Console renderable that renders a traceback.

Args:
    trace (Trace, optional): A `Trace` object produced from `extract`. Defaults to None, which uses
        the last exception.
    width (Optional[int], optional): Number of characters used to traceback. Defaults to 100.
    extra_lines (int, optional): Additional lines of code to render. Defaults to 3.
    theme (str, optional): Override pygments theme used in traceback.
    word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.
    show_locals (bool, optional): Enable display of local variables. Defaults to False.
    indent_guides (bool, optional): Enable indent guides in code and locals. Defaults to True.
    locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to 10.
    locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.
    locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.
    locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.
    suppress (Sequence[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.
    max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.
:::
**Imports**: `__future__.absolute_import`, `linecache`, `os`, `platform`, `sys`, `dataclasses.dataclass`, `dataclasses.field`, `traceback.walk_tb`, `types.ModuleType`, `types.TracebackType`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Type`, `typing.Union`, `pip._vendor.pygments.lexers.guess_lexer_for_filename`, `pip._vendor.pygments.token.Comment`, `pip._vendor.pygments.token.Keyword`, `pip._vendor.pygments.token.Name`, `pip._vendor.pygments.token.Number`, `pip._vendor.pygments.token.Operator`, `pip._vendor.pygments.token.String`, `pip._vendor.pygments.token.Text`, `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.util.ClassNotFound`, `pretty`, `_loop.loop_last`, `columns.Columns`, `console.Console`, `console.ConsoleOptions`, `console.ConsoleRenderable`, `console.RenderResult`, `console.group`, `constrain.Constrain`, `highlighter.RegexHighlighter`, `highlighter.ReprHighlighter`, `panel.Panel`, `scope.render_scope`, `style.Style`, `syntax.Syntax`, `text.Text`, `theme.Theme`, `console.Console`, `sys`, `pip._vendor.rich._IMPORT_CWD`
**Type References**: [[ConsoleRenderable]], [[Frame]], [[List]], [[Optional]], [[PathHighlighter]], [[Stack]], [[Trace]], [[Traceback]], [[_SyntaxError]]

### Interface
- `install`() -> Callable[<ast.Tuple object at 0x162594c10>]
- `excepthook`(type_: Type[BaseException], value: BaseException, traceback: [Optional[TracebackType]](#optional)) -> None
- `ipy_excepthook_closure`(ip: Any) -> None
- `__init__`(trace: [Optional[Trace]](#optional)) -> Any
- `from_exception`(exc_type: Type[Any], exc_value: BaseException, traceback: [Optional[TracebackType]](#optional)) -> Traceback
- `extract`(exc_type: Type[BaseException], exc_value: BaseException, traceback: [Optional[TracebackType]](#optional)) -> Trace
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `_render_syntax_error`(syntax_error: _SyntaxError) -> RenderResult
- `_guess_lexer`(filename: str, code: str) -> str
- `_render_stack`(stack: Stack) -> RenderResult
- `bar`(a: Any) -> None
- `foo`(a: Any) -> None
- `error`() -> None
- `ipy_show_traceback`() -> None
- `ipy_display_traceback`() -> None
- `safe_str`(_object: Any) -> str
- `read_code`(filename: str) -> str
- `render_locals`(frame: Frame) -> Iterable[ConsoleRenderable]
- `get_locals`(iter_locals: Iterable[Tuple[<ast.Tuple object at 0x1625e8790>]]) -> Iterable[Tuple[<ast.Tuple object at 0x1625ea350>]]

### Implementation
**Frame**
  - filename: str
  - lineno: int
  - name: str
  - line: str
  - locals: Optional[Dict[<ast.Tuple object at 0x162593a50>]]
**_SyntaxError**
  - offset: int
  - filename: str
  - line: str
  - lineno: int
  - msg: str
**Stack**
  - exc_type: str
  - exc_value: str
  - syntax_error: Optional[_SyntaxError]
  - is_cause: bool
  - frames: List[Frame]
**Trace**
  - stacks: List[Stack]
**PathHighlighter**

**Traceback**
  - stacks: List[Stack]
  - exclude_frames: Optional[range]
  - stack_renderable: ConsoleRenderable
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/traceback.py`  
**Dependencies**: `__future__.absolute_import`, `linecache`, `os`, `platform`, `sys`, `dataclasses.dataclass`, `dataclasses.field`, `traceback.walk_tb`, `types.ModuleType`, `types.TracebackType`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Type`, `typing.Union`, `pip._vendor.pygments.lexers.guess_lexer_for_filename`, `pip._vendor.pygments.token.Comment`, `pip._vendor.pygments.token.Keyword`, `pip._vendor.pygments.token.Name`, `pip._vendor.pygments.token.Number`, `pip._vendor.pygments.token.Operator`, `pip._vendor.pygments.token.String`, `pip._vendor.pygments.token.Text`, `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.util.ClassNotFound`, `pretty`, `_loop.loop_last`, `columns.Columns`, `console.Console`, `console.ConsoleOptions`, `console.ConsoleRenderable`, `console.RenderResult`, `console.group`, `constrain.Constrain`, `highlighter.RegexHighlighter`, `highlighter.ReprHighlighter`, `panel.Panel`, `scope.render_scope`, `style.Style`, `syntax.Syntax`, `text.Text`, `theme.Theme`, `console.Console`, `sys`, `pip._vendor.rich._IMPORT_CWD`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.region
:::{doc} Region:4
Defines a rectangular region of the screen.
:::
**Imports**: `typing.NamedTuple`
**Type References**: [[Region]]


### Implementation
**Region**
  - x: int
  - y: int
  - width: int
  - height: int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/region.py`  
**Dependencies**: `typing.NamedTuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.protocol
:::{doc} is_renderable:10
Check if an object may be rendered by Rich.
:::
:::{doc} rich_cast:19
Cast an object to a renderable by calling __rich__ if present.

Args:
    renderable (object): A potentially renderable object

Returns:
    object: The result of recursively calling __rich__.
:::
**Imports**: `typing.Any`, `typing.cast`, `typing.Set`, `typing.TYPE_CHECKING`, `inspect.isclass`, `pip._vendor.rich.console.RenderableType`, `pip._vendor.rich.console.RenderableType`
**Type References**: [[Set]]

### Interface
- `is_renderable`(check_object: Any) -> bool
- `rich_cast`(renderable: object) -> RenderableType
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/protocol.py`  
**Dependencies**: `typing.Any`, `typing.cast`, `typing.Set`, `typing.TYPE_CHECKING`, `inspect.isclass`, `pip._vendor.rich.console.RenderableType`, `pip._vendor.rich.console.RenderableType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._loop
:::{doc} loop_first:6
Iterate and generate a tuple with a flag for first value.
:::
:::{doc} loop_last:18
Iterate and generate a tuple with a flag for last value.
:::
:::{doc} loop_first_last:31
Iterate and generate a tuple with a flag for first and last value.
:::
**Imports**: `typing.Iterable`, `typing.Tuple`, `typing.TypeVar`
### Interface
- `loop_first`(values: Iterable[T]) -> Iterable[Tuple[<ast.Tuple object at 0x162668410>]]
- `loop_last`(values: Iterable[T]) -> Iterable[Tuple[<ast.Tuple object at 0x16266a0d0>]]
- `loop_first_last`(values: Iterable[T]) -> Iterable[Tuple[<ast.Tuple object at 0x162674250>]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_loop.py`  
**Dependencies**: `typing.Iterable`, `typing.Tuple`, `typing.TypeVar`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.control
:::{doc} Control:54
A renderable that inserts a control code (non printable but may move cursor).

Args:
    *codes (str): Positional arguments are either a :class:`~rich.segment.ControlType` enum or a
        tuple of ControlType and an integer parameter
:::
:::{doc} strip_control_codes:187
Remove control codes from text.

Args:
    text (str): A string possibly contain control codes.

Returns:
    str: String with control codes removed.
:::
:::{doc} escape_control_codes:201
Replace control codes with their "escaped" equivalent in the given text.
(e.g. "" becomes "\b")

Args:
    text (str): A string possibly containing control codes.

Returns:
    str: String with control codes replaced with their escaped version.
:::
**Imports**: `sys`, `time`, `typing.TYPE_CHECKING`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Union`, `segment.ControlCode`, `segment.ControlType`, `segment.Segment`, `typing.Final`, `pip._vendor.typing_extensions.Final`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `pip._vendor.rich.console.Console`
**Type References**: [[Control]], [[Dict]], [[Final]], [[List]]

### Interface
- `strip_control_codes`(text: str, _translate_table: [Dict[<ast.Tuple object at 0x1626a1e90>]](#dict)) -> str
- `escape_control_codes`(text: str, _translate_table: [Dict[<ast.Tuple object at 0x1626a2ad0>]](#dict)) -> str
- `__init__`() -> None
- `bell`() -> Control
- `home`() -> Control
- `move`(x: int, y: int) -> Control
- `move_to_column`(x: int, y: int) -> Control
- `move_to`(x: int, y: int) -> Control
- `clear`() -> Control
- `show_cursor`(show: bool) -> Control
- `alt_screen`(enable: bool) -> Control
- `title`(title: str) -> Control
- `__str__`() -> str
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `get_codes`() -> Iterable[ControlCode]

### Implementation
**Control**
  - control_codes: List[ControlCode]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/control.py`  
**Dependencies**: `sys`, `time`, `typing.TYPE_CHECKING`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Union`, `segment.ControlCode`, `segment.ControlType`, `segment.Segment`, `typing.Final`, `pip._vendor.typing_extensions.Final`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `pip._vendor.rich.console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.filesize
:::{doc} pick_unit_and_suffix:44
Pick a suffix and base for the given size.
:::
:::{doc} decimal:53
Convert a filesize in to a string (powers of 1000, SI prefixes).

In this convention, ``1000 B = 1 kB``.

This is typically the format used to advertise the storage
capacity of USB flash drives and the like (*256 MB* meaning
actually a storage capacity of more than *256 000 000 B*),
or used by **Mac OS X** since v10.6 to report file sizes.

Arguments:
    int (size): A file size.
    int (precision): The number of decimal places to include (default = 1).
    str (separator): The string to separate the value from the units (default = " ").

Returns:
    `str`: A string containing a abbreviated file size and units.

Example:
    >>> filesize.decimal(30000)
    '30.0 kB'
    >>> filesize.decimal(30000, precision=2, separator="")
    '30.00kB'
:::
**Imports**: `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`
### Interface
- `_to_str`(size: int, suffixes: Iterable[str], base: int) -> str
- `pick_unit_and_suffix`(size: int, suffixes: [List[str]](#list), base: int) -> Tuple[<ast.Tuple object at 0x1626b2890>]
- `decimal`(size: int) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/filesize.py`  
**Dependencies**: `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._null_file

**Imports**: `types.TracebackType`, `typing.IO`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.Type`
**Type References**: [[NullFile]]

### Interface
- `close`() -> None
- `isatty`() -> bool
- `read`(__n: int) -> str
- `readable`() -> bool
- `readline`(__limit: int) -> str
- `readlines`(__hint: int) -> [List[str]](#list)
- `seek`(__offset: int, __whence: int) -> int
- `seekable`() -> bool
- `tell`() -> int
- `truncate`(__size: [Optional[int]](#optional)) -> int
- `writable`() -> bool
- `writelines`(__lines: Iterable[str]) -> None
- `__next__`() -> str
- `__iter__`() -> Iterator[str]
- `__enter__`() -> IO[str]
- `__exit__`(__t: [Optional[Type[BaseException]]](#optional), __value: [Optional[BaseException]](#optional), __traceback: [Optional[TracebackType]](#optional)) -> None
- `write`(text: str) -> int
- `flush`() -> None
- `fileno`() -> int

### Implementation
**NullFile**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_null_file.py`  
**Dependencies**: `types.TracebackType`, `typing.IO`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.Type`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._palettes

**Imports**: `palette.Palette`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_palettes.py`  
**Dependencies**: `palette.Palette`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich
:::{doc} get_console:23
Get a global :class:`~rich.console.Console` instance. This function is used when Rich requires a Console,
and hasn't been explicitly given one.

Returns:
    Console: A console instance.
:::
:::{doc} reconfigure:39
Reconfigures the global console by replacing it with another.

Args:
    *args (Any): Positional arguments for the replacement :class:`~rich.console.Console`.
    **kwargs (Any): Keyword arguments for the replacement :class:`~rich.console.Console`.
:::
:::{doc} print:53
Print object(s) supplied via positional arguments.
This function has an identical signature to the built-in print.
For more advanced features, see the :class:`~rich.console.Console` class.

Args:
    sep (str, optional): Separator between printed objects. Defaults to " ".
    end (str, optional): Character to write at end of output. Defaults to "\\n".
    file (IO[str], optional): File to write to, or None for stdout. Defaults to None.
    flush (bool, optional): Has no effect as Rich always flushes output. Defaults to False.
:::
:::{doc} print_json:77
Pretty prints JSON. Output will be valid JSON.

Args:
    json (str): A string containing JSON.
    data (Any): If json is not supplied, then encode this data.
    indent (int, optional): Number of spaces to indent. Defaults to 2.
    highlight (bool, optional): Enable highlighting of output: Defaults to True.
    skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.
    ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.
    check_circular (bool, optional): Check for circular references. Defaults to True.
    allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.
    default (Callable, optional): A callable that converts values that can not be encoded
        in to something that can be JSON encoded. Defaults to None.
    sort_keys (bool, optional): Sort dictionary keys. Defaults to False.
:::
:::{doc} inspect:120
Inspect any Python object.

* inspect(<OBJECT>) to see summarized info.
* inspect(<OBJECT>, methods=True) to see methods.
* inspect(<OBJECT>, help=True) to see full (non-abbreviated) help.
* inspect(<OBJECT>, private=True) to see private attributes (single underscore).
* inspect(<OBJECT>, dunder=True) to see attributes beginning with double underscore.
* inspect(<OBJECT>, all=True) to see all attributes.

Args:
    obj (Any): An object to inspect.
    title (str, optional): Title to display over inspect result, or None use type. Defaults to None.
    help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.
    methods (bool, optional): Enable inspection of callables. Defaults to False.
    docs (bool, optional): Also render doc strings. Defaults to True.
    private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.
    dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.
    sort (bool, optional): Sort attributes alphabetically. Defaults to True.
    all (bool, optional): Show all attributes. Defaults to False.
    value (bool, optional): Pretty print value. Defaults to True.
:::
**Imports**: `os`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Optional`, `typing.Union`, `_extension.load_ipython_extension`, `console.Console`, `pip._vendor.rich.console.Console`, `console.Console`, `pip._vendor.rich._inspect.Inspect`, `console.Console`
**Type References**: [[Optional]]

### Interface
- `get_console`() -> Console
- `reconfigure`() -> None
- `print`() -> None
- `print_json`(json: [Optional[str]](#optional)) -> None
- `inspect`(obj: Any) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/__init__.py`  
**Dependencies**: `os`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Optional`, `typing.Union`, `_extension.load_ipython_extension`, `console.Console`, `pip._vendor.rich.console.Console`, `console.Console`, `pip._vendor.rich._inspect.Inspect`, `console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._pick
:::{doc} pick_bool:4
Pick the first non-none bool or return the last value.

Args:
    *values (bool): Any number of boolean or None values.

Returns:
    bool: First non-none boolean.
:::
**Imports**: `typing.Optional`
### Interface
- `pick_bool`() -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_pick.py`  
**Dependencies**: `typing.Optional`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.file_proxy
:::{doc} FileProxy:11
Wraps a file (e.g. sys.stdout) and redirects writes to a console.
:::
**Imports**: `io`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.List`, `ansi.AnsiDecoder`, `text.Text`, `console.Console`
**Type References**: [[FileProxy]], [[List]]

### Interface
- `__init__`(console: Console, file: IO[str]) -> None
- `rich_proxied_file`() -> IO[str]
- `__getattr__`(name: str) -> Any
- `write`(text: str) -> int
- `flush`() -> None
- `fileno`() -> int

### Implementation
**FileProxy**
  - lines: List[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/file_proxy.py`  
**Dependencies**: `io`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.List`, `ansi.AnsiDecoder`, `text.Text`, `console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.palette
:::{doc} Palette:11
A palette of available colors.
:::
**Imports**: `math.sqrt`, `functools.lru_cache`, `typing.Sequence`, `typing.Tuple`, `typing.TYPE_CHECKING`, `color_triplet.ColorTriplet`, `pip._vendor.rich.table.Table`, `colorsys`, `typing.Iterable`, `pip._vendor.rich.color.Color`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.console.ConsoleOptions`, `pip._vendor.rich.segment.Segment`, `pip._vendor.rich.style.Style`, `pip._vendor.rich.color.Color`, `pip._vendor.rich.style.Style`, `pip._vendor.rich.text.Text`, `pip._vendor.rich.table.Table`
**Type References**: [[ColorBox]], [[Palette]]

### Interface
- `__init__`(colors: Sequence[Tuple[<ast.Tuple object at 0x162777150>]]) -> Any
- `__getitem__`(number: int) -> ColorTriplet
- `__rich__`() -> Table
- `match`(color: Tuple[<ast.Tuple object at 0x162773350>]) -> int
- `get_color_distance`(index: int) -> float
- `__rich_console__`(console: Console, options: ConsoleOptions) -> Iterable[Segment]

### Implementation
**Palette**

**ColorBox**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/palette.py`  
**Dependencies**: `math.sqrt`, `functools.lru_cache`, `typing.Sequence`, `typing.Tuple`, `typing.TYPE_CHECKING`, `color_triplet.ColorTriplet`, `pip._vendor.rich.table.Table`, `colorsys`, `typing.Iterable`, `pip._vendor.rich.color.Color`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.console.ConsoleOptions`, `pip._vendor.rich.segment.Segment`, `pip._vendor.rich.style.Style`, `pip._vendor.rich.color.Color`, `pip._vendor.rich.style.Style`, `pip._vendor.rich.text.Text`, `pip._vendor.rich.table.Table`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.markup
:::{doc} Tag:20
A tag in console markup.
:::
:::{doc} escape:48
Escapes text so that it won't be interpreted as markup.

Args:
    markup (str): Content to be inserted in to markup.

Returns:
    str: Markup with square brackets escaped.
:::
:::{doc} _parse:73
Parse markup in to an iterable of tuples of (position, text, tag).

Args:
    markup (str): A string containing console markup
:::
:::{doc} render:106
Render console markup in to a Text instance.

Args:
    markup (str): A string containing console markup.
    style: (Union[str, Style]): The style to use.
    emoji (bool, optional): Also render emoji code. Defaults to True.
    emoji_variant (str, optional): Optional emoji variant, either "text" or "emoji". Defaults to None.


Raises:
    MarkupError: If there is a syntax error in the markup.

Returns:
    Text: A test instance.
:::
**Imports**: `re`, `ast.literal_eval`, `operator.attrgetter`, `typing.Callable`, `typing.Iterable`, `typing.List`, `typing.Match`, `typing.NamedTuple`, `typing.Optional`, `typing.Tuple`, `typing.Union`, `_emoji_replace._emoji_replace`, `emoji.EmojiVariant`, `errors.MarkupError`, `style.Style`, `text.Span`, `text.Text`, `pip._vendor.rich.print`, `pip._vendor.rich.table.Table`
**Type References**: [[List]], [[Optional]], [[Tag]]

### Interface
- `escape`(markup: str, _escape: _EscapeSubMethod) -> str
- `_parse`(markup: str) -> Iterable[Tuple[<ast.Tuple object at 0x162783250>]]
- `render`(markup: str, style: [Union[<ast.Tuple object at 0x1627b3210>]](#union), emoji: bool, emoji_variant: [Optional[EmojiVariant]](#optional)) -> Text
- `__str__`() -> str
- `markup`() -> str
- `escape_backslashes`(match: Match[str]) -> str
- `pop_style`(style_name: str) -> Tuple[<ast.Tuple object at 0x1627bce90>]

### Implementation
**Tag**
  - name: str
  - parameters: Optional[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/markup.py`  
**Dependencies**: `re`, `ast.literal_eval`, `operator.attrgetter`, `typing.Callable`, `typing.Iterable`, `typing.List`, `typing.Match`, `typing.NamedTuple`, `typing.Optional`, `typing.Tuple`, `typing.Union`, `_emoji_replace._emoji_replace`, `emoji.EmojiVariant`, `errors.MarkupError`, `style.Style`, `text.Span`, `text.Text`, `pip._vendor.rich.print`, `pip._vendor.rich.table.Table`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._ratio
:::{doc} Edge:12
Any object that defines an edge (such as Layout).
:::
:::{doc} ratio_resolve:20
Divide total space to satisfy size, ratio, and minimum_size, constraints.

The returned list of integers should add up to total in most cases, unless it is
impossible to satisfy all the constraints. For instance, if there are two edges
with a minimum size of 20 each and `total` is 30 then the returned list will be
greater than total. In practice, this would mean that a Layout object would
clip the rows that would overflow the screen height.

Args:
    total (int): Total number of characters.
    edges (List[Edge]): Edges within total space.

Returns:
    List[int]: Number of characters for each edge.
:::
:::{doc} ratio_reduce:81
Divide an integer total in to parts based on ratios.

Args:
    total (int): The total to divide.
    ratios (List[int]): A list of integer ratios.
    maximums (List[int]): List of maximums values for each slot.
    values (List[int]): List of values

Returns:
    List[int]: A list of integers guaranteed to sum to total.
:::
:::{doc} ratio_distribute:113
Distribute an integer total in to parts based on ratios.

Args:
    total (int): The total to divide.
    ratios (List[int]): A list of integer ratios.
    minimums (List[int]): List of minimum values for each slot.

Returns:
    List[int]: A list of integers guaranteed to sum to total.
:::
**Imports**: `sys`, `fractions.Fraction`, `math.ceil`, `typing.cast`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Protocol`, `pip._vendor.typing_extensions.Protocol`, `dataclasses.dataclass`
**Type References**: [[E]], [[Edge]], [[List]], [[Optional]]

### Interface
- `ratio_resolve`(total: int, edges: Sequence[Edge]) -> [List[int]](#list)
- `ratio_reduce`(total: int, ratios: [List[int]](#list), maximums: [List[int]](#list), values: [List[int]](#list)) -> [List[int]](#list)
- `ratio_distribute`(total: int, ratios: [List[int]](#list), minimums: [Optional[List[int]]](#optional)) -> [List[int]](#list)

### Implementation
**Edge**
  - size: Optional[int]
  - ratio: int
  - minimum_size: int
**E**
  - size: Optional[int]
  - ratio: int
  - minimum_size: int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_ratio.py`  
**Dependencies**: `sys`, `fractions.Fraction`, `math.ceil`, `typing.cast`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Protocol`, `pip._vendor.typing_extensions.Protocol`, `dataclasses.dataclass`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.repr
:::{doc} ReprError:23
An error occurred when attempting to build a repr.
:::
:::{doc} auto:37
Class decorator to create __repr__ from __rich_repr__
:::
**Imports**: `inspect`, `functools.partial`, `typing.Any`, `typing.Callable`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `typing.overload`, `pip._vendor.rich.console.Console`
**Type References**: [[Foo]], [[List]], [[ReprError]]

### Interface
- `auto`(cls: [Optional[Type[T]]](#optional)) -> [Union[<ast.Tuple object at 0x162823910>]](#union)
- `rich_repr`(cls: [Optional[Type[T]]](#optional)) -> [Union[<ast.Tuple object at 0x16282a710>]](#union)
- `do_replace`(cls: Type[T], angular: [Optional[bool]](#optional)) -> Type[T]
- `auto_repr`(self: T) -> str
- `auto_rich_repr`(self: Type[T]) -> Result
- `__rich_repr__`() -> Result

### Implementation
**ReprError**

**Foo**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/repr.py`  
**Dependencies**: `inspect`, `functools.partial`, `typing.Any`, `typing.Callable`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `typing.overload`, `pip._vendor.rich.console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.constrain
:::{doc} Constrain:10
Constrain the width of a renderable to a given number of characters.

Args:
    renderable (RenderableType): A renderable object.
    width (int, optional): The maximum width (in characters) to render. Defaults to 80.
:::
**Imports**: `typing.Optional`, `typing.TYPE_CHECKING`, `jupyter.JupyterMixin`, `measure.Measurement`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`
**Type References**: [[Constrain]]

### Interface
- `__init__`(renderable: RenderableType, width: [Optional[int]](#optional)) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement

### Implementation
**Constrain**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/constrain.py`  
**Dependencies**: `typing.Optional`, `typing.TYPE_CHECKING`, `jupyter.JupyterMixin`, `measure.Measurement`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.pretty
:::{doc} _is_attr_object:58
Check if an object was created with attrs module.
:::
:::{doc} _get_attr_fields:63
Get fields for an attrs object.
:::
:::{doc} _is_dataclass_repr:68
Check if an instance of a dataclass contains the default repr.

Args:
    obj (object): A dataclass instance.

Returns:
    bool: True if the default repr is used, False if there is a custom repr.
:::
:::{doc} _has_default_namedtuple_repr:88
Check if an instance of namedtuple contains the default repr

Args:
    obj (object): A namedtuple

Returns:
    bool: True if the default repr is used, False if there's a custom repr.
:::
:::{doc} _safe_isinstance:154
isinstance can fail in rare cases, for example types with no __class__
:::
:::{doc} install:164
Install automatic pretty printing in the Python REPL.

Args:
    console (Console, optional): Console instance or ``None`` to use global console. Defaults to None.
    overflow (Optional[OverflowMethod], optional): Overflow method. Defaults to "ignore".
    crop (Optional[bool], optional): Enable cropping of long lines. Defaults to False.
    indent_guides (bool, optional): Enable indentation guides. Defaults to False.
    max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to None.
    max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.
    max_depth (int, optional): Maximum depth of nested data structures, or None for no maximum. Defaults to None.
    expand_all (bool, optional): Expand all containers. Defaults to False.
    max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.
:::
:::{doc} Pretty:244
A rich renderable that pretty prints an object.

Args:
    _object (Any): An object to pretty print.
    highlighter (HighlighterType, optional): Highlighter object to apply to result, or None for ReprHighlighter. Defaults to None.
    indent_size (int, optional): Number of spaces in indent. Defaults to 4.
    justify (JustifyMethod, optional): Justify method, or None for default. Defaults to None.
    overflow (OverflowMethod, optional): Overflow method, or None for default. Defaults to None.
    no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to False.
    indent_guides (bool, optional): Enable indentation guides. Defaults to False.
    max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to None.
    max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.
    max_depth (int, optional): Maximum depth of nested data structures, or None for no maximum. Defaults to None.
    expand_all (bool, optional): Expand all containers. Defaults to False.
    margin (int, optional): Subtrace a margin from width to force containers to expand earlier. Defaults to 0.
    insert_line (bool, optional): Insert a new line if the output has multiple new lines. Defaults to False.
:::
:::{doc} is_expandable:379
Check if an object may be expanded by pretty print.
:::
:::{doc} Node:390
A node in a repr tree. May be atomic or a container.
:::
:::{doc} _Line:475
A line in repr output.
:::
:::{doc} _is_namedtuple:542
Checks if an object is most likely a namedtuple. It is possible
to craft an object that passes this check and isn't a namedtuple, but
there is only a minuscule chance of this happening unintentionally.

Args:
    obj (Any): The object to test

Returns:
    bool: True if the object is a namedtuple. False otherwise.
:::
:::{doc} traverse:561
Traverse object and generate a tree.

Args:
    _object (Any): Object to be traversed.
    max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to None.
    max_string (int, optional): Maximum length of string before truncating, or None to disable truncating.
        Defaults to None.
    max_depth (int, optional): Maximum depth of data structures, or None for no maximum.
        Defaults to None.

Returns:
    Node: The root of a tree structure which can be used to render a pretty repr.
:::
:::{doc} pretty_repr:857
Prettify repr string by expanding on to new lines to fit within a given width.

Args:
    _object (Any): Object to repr.
    max_width (int, optional): Desired maximum width of repr string. Defaults to 80.
    indent_size (int, optional): Number of spaces to indent. Defaults to 4.
    max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to None.
    max_string (int, optional): Maximum length of string before truncating, or None to disable truncating.
        Defaults to None.
    max_depth (int, optional): Maximum depth of nested data structure, or None for no depth.
        Defaults to None.
    expand_all (bool, optional): Expand all containers regardless of available width. Defaults to False.

Returns:
    str: A possibly multi-line representation of the object.
:::
:::{doc} pprint:897
A convenience function for pretty printing.

Args:
    _object (Any): Object to pretty print.
    console (Console, optional): Console instance, or None to use default. Defaults to None.
    max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to None.
    max_string (int, optional): Maximum length of strings before truncating, or None to disable. Defaults to None.
    max_depth (int, optional): Maximum depth for nested data structures, or None for unlimited depth. Defaults to None.
    indent_guides (bool, optional): Enable indentation guides. Defaults to True.
    expand_all (bool, optional): Expand all containers. Defaults to False.
:::
**Imports**: `builtins`, `collections`, `dataclasses`, `inspect`, `os`, `sys`, `array.array`, `collections.Counter`, `collections.UserDict`, `collections.UserList`, `collections.defaultdict`, `collections.deque`, `dataclasses.dataclass`, `dataclasses.fields`, `dataclasses.is_dataclass`, `inspect.isclass`, `itertools.islice`, `types.MappingProxyType`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.DefaultDict`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `typing.Union`, `pip._vendor.rich.repr.RichReprResult`, `get_console`, `_loop.loop_last`, `_pick.pick_bool`, `abc.RichRenderable`, `cells.cell_len`, `highlighter.ReprHighlighter`, `jupyter.JupyterMixin`, `jupyter.JupyterRenderable`, `measure.Measurement`, `text.Text`, `attr`, `console.Console`, `console.ConsoleOptions`, `console.HighlighterType`, `console.JustifyMethod`, `console.OverflowMethod`, `console.RenderResult`, `console.ConsoleRenderable`, `pip._vendor.rich.get_console`, `typing.NamedTuple`, `pip._vendor.rich.print`, `IPython.core.formatters.BaseFormatter`
**Type References**: [[BrokenRepr]], [[Dict]], [[List]], [[Node]], [[Optional]], [[Pretty]], [[RichFormatter]], [[Set]], [[StockKeepingUnit]], [[Thing]], [[Tuple]], [[_Line]]

### Interface
- `_is_attr_object`(obj: Any) -> bool
- `_get_attr_fields`(obj: Any) -> Sequence[_attr_module.Attribute[Any]]
- `_is_dataclass_repr`(obj: object) -> bool
- `_has_default_namedtuple_repr`(obj: object) -> bool
- `_ipy_display_hook`(value: Any, console: [Optional[Console]](#optional), overflow: OverflowMethod, crop: bool, indent_guides: bool, max_length: [Optional[int]](#optional), max_string: [Optional[int]](#optional), max_depth: [Optional[int]](#optional), expand_all: bool) -> [Union[<ast.Tuple object at 0x16284f410>]](#union)
- `_safe_isinstance`(obj: object, class_or_tuple: [Union[<ast.Tuple object at 0x16284ee10>]](#union)) -> bool
- `install`(console: [Optional[Console]](#optional), overflow: OverflowMethod, crop: bool, indent_guides: bool, max_length: [Optional[int]](#optional), max_string: [Optional[int]](#optional), max_depth: [Optional[int]](#optional), expand_all: bool) -> None
- `_get_braces_for_defaultdict`(_object: DefaultDict[<ast.Tuple object at 0x162898d90>]) -> Tuple[<ast.Tuple object at 0x162898150>]
- `_get_braces_for_array`(_object: array[Any]) -> Tuple[<ast.Tuple object at 0x162893190>]
- `is_expandable`(obj: Any) -> bool
- `_is_namedtuple`(obj: Any) -> bool
- `traverse`(_object: Any, max_length: [Optional[int]](#optional), max_string: [Optional[int]](#optional), max_depth: [Optional[int]](#optional)) -> Node
- `pretty_repr`(_object: Any) -> str
- `pprint`(_object: Any) -> None
- `display_hook`(value: Any) -> None
- `__init__`(_object: Any, highlighter: [Optional[HighlighterType]](#optional)) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `iter_tokens`() -> Iterable[str]
- `check_length`(max_length: int) -> bool
- `__str__`() -> str
- `render`(max_width: int, indent_size: int, expand_all: bool) -> str
- `expandable`() -> bool
- `expand`(indent_size: int) -> Iterable[_Line]
- `to_repr`(obj: Any) -> str
- `_traverse`(obj: Any, root: bool, depth: int) -> Node
- `iter_rich_args`(rich_args: Any) -> Iterable[Union[<ast.Tuple object at 0x1628f4950>]]
- `__repr__`() -> str
- `__call__`(value: Any) -> Any
- `iter_attrs`() -> Iterable[Tuple[<ast.Tuple object at 0x162915210>]]

### Implementation
**Pretty**

**Node**
  - key_repr: str
  - value_repr: str
  - open_brace: str
  - close_brace: str
  - empty: str
  - last: bool
  - is_tuple: bool
  - is_namedtuple: bool
  - children: Optional[List[Node]]
  - key_separator: str
  - separator: str
**_Line**
  - parent: Optional[_Line]
  - is_root: bool
  - node: Optional[Node]
  - text: str
  - suffix: str
  - whitespace: str
  - expanded: bool
  - last: bool
**BrokenRepr**

**StockKeepingUnit**
  - name: str
  - description: str
  - price: float
  - category: str
  - reviews: List[str]
**Thing**

**RichFormatter**
  - pprint: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/pretty.py`  
**Dependencies**: `builtins`, `collections`, `dataclasses`, `inspect`, `os`, `sys`, `array.array`, `collections.Counter`, `collections.UserDict`, `collections.UserList`, `collections.defaultdict`, `collections.deque`, `dataclasses.dataclass`, `dataclasses.fields`, `dataclasses.is_dataclass`, `inspect.isclass`, `itertools.islice`, `types.MappingProxyType`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.DefaultDict`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `typing.Union`, `pip._vendor.rich.repr.RichReprResult`, `get_console`, `_loop.loop_last`, `_pick.pick_bool`, `abc.RichRenderable`, `cells.cell_len`, `highlighter.ReprHighlighter`, `jupyter.JupyterMixin`, `jupyter.JupyterRenderable`, `measure.Measurement`, `text.Text`, `attr`, `console.Console`, `console.ConsoleOptions`, `console.HighlighterType`, `console.JustifyMethod`, `console.OverflowMethod`, `console.RenderResult`, `console.ConsoleRenderable`, `pip._vendor.rich.get_console`, `typing.NamedTuple`, `pip._vendor.rich.print`, `IPython.core.formatters.BaseFormatter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.diagnose
:::{doc} report:10
Print a report to the terminal with debugging information
:::
**Imports**: `os`, `platform`, `pip._vendor.rich.inspect`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.console.get_windows_console_features`, `pip._vendor.rich.panel.Panel`, `pip._vendor.rich.pretty.Pretty`
### Interface
- `report`() -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/diagnose.py`  
**Dependencies**: `os`, `platform`, `pip._vendor.rich.inspect`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.console.get_windows_console_features`, `pip._vendor.rich.panel.Panel`, `pip._vendor.rich.pretty.Pretty`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.columns
:::{doc} Columns:16
Display renderables in neat columns.

Args:
    renderables (Iterable[RenderableType]): Any number of Rich renderables (including str).
    width (int, optional): The desired width of the columns, or None to auto detect. Defaults to None.
    padding (PaddingDimensions, optional): Optional padding around cells. Defaults to (0, 1).
    expand (bool, optional): Expand columns to full width. Defaults to False.
    equal (bool, optional): Arrange in to equal sized columns. Defaults to False.
    column_first (bool, optional): Align items from top to bottom (rather than left to right). Defaults to False.
    right_to_left (bool, optional): Start column from right hand side. Defaults to False.
    align (str, optional): Align value ("left", "right", or "center") or None for default. Defaults to None.
    title (TextType, optional): Optional title for Columns.
:::
**Imports**: `collections.defaultdict`, `itertools.chain`, `operator.itemgetter`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`, `align.Align`, `align.AlignMethod`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `constrain.Constrain`, `measure.Measurement`, `padding.Padding`, `padding.PaddingDimensions`, `table.Table`, `text.TextType`, `jupyter.JupyterMixin`, `os`
**Type References**: [[Columns]], [[Dict]], [[List]]

### Interface
- `__init__`(renderables: [Optional[Iterable[RenderableType]]](#optional), padding: PaddingDimensions) -> None
- `add_renderable`(renderable: RenderableType) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `iter_renderables`(column_count: int) -> Iterable[Tuple[<ast.Tuple object at 0x16297fa90>]]

### Implementation
**Columns**
  - widths: Dict[<ast.Tuple object at 0x162980990>]
  - column_lengths: List[int]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/columns.py`  
**Dependencies**: `collections.defaultdict`, `itertools.chain`, `operator.itemgetter`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`, `align.Align`, `align.AlignMethod`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `constrain.Constrain`, `measure.Measurement`, `padding.Padding`, `padding.PaddingDimensions`, `table.Table`, `text.TextType`, `jupyter.JupyterMixin`, `os`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.rule
:::{doc} Rule:12
A console renderable to draw a horizontal rule (line).

Args:
    title (Union[str, Text], optional): Text to render in the rule. Defaults to "".
    characters (str, optional): Character(s) used to draw the line. Defaults to "─".
    style (StyleType, optional): Style of Rule. Defaults to "rule.line".
    end (str, optional): Character at end of Rule. defaults to "\\n"
    align (str, optional): How to align the title, one of "left", "center", or "right". Defaults to "center".
:::
**Imports**: `typing.Union`, `align.AlignMethod`, `cells.cell_len`, `cells.set_cell_size`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `style.Style`, `text.Text`, `sys`, `pip._vendor.rich.console.Console`
**Type References**: [[Rule]]

### Interface
- `__init__`(title: [Union[<ast.Tuple object at 0x1629bef50>]](#union)) -> None
- `__repr__`() -> str
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `_rule_line`(chars_len: int, width: int) -> Text
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement

### Implementation
**Rule**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/rule.py`  
**Dependencies**: `typing.Union`, `align.AlignMethod`, `cells.cell_len`, `cells.set_cell_size`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `style.Style`, `text.Text`, `sys`, `pip._vendor.rich.console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._inspect
:::{doc} _first_paragraph:17
Get the first paragraph from a docstring.
:::
:::{doc} Inspect:23
A renderable to inspect any Python Object.

Args:
    obj (Any): An object to inspect.
    title (str, optional): Title to display over inspect result, or None use type. Defaults to None.
    help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.
    methods (bool, optional): Enable inspection of callables. Defaults to False.
    docs (bool, optional): Also render doc strings. Defaults to True.
    private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.
    dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.
    sort (bool, optional): Sort attributes alphabetically. Defaults to True.
    all (bool, optional): Show all attributes. Defaults to False.
    value (bool, optional): Pretty print value of object. Defaults to True.
:::
:::{doc} get_object_types_mro:238
Returns the MRO of an object's class, or of the object itself if it's a class.
:::
:::{doc} get_object_types_mro_as_strings:247
Returns the MRO of an object's class as full qualified names, or of the object itself if it's a class.

Examples:
    `object_types_mro_as_strings(JSONDecoder)` will return `['json.decoder.JSONDecoder', 'builtins.object']`
:::
:::{doc} is_object_one_of_types:260
Returns `True` if the given object's class (or the object itself, if it's a class) has one of the
fully qualified names in its MRO.
:::
**Imports**: `__future__.absolute_import`, `inspect`, `inspect.cleandoc`, `inspect.getdoc`, `inspect.getfile`, `inspect.isclass`, `inspect.ismodule`, `inspect.signature`, `typing.Any`, `typing.Collection`, `typing.Iterable`, `typing.Optional`, `typing.Tuple`, `typing.Type`, `typing.Union`, `console.Group`, `console.RenderableType`, `control.escape_control_codes`, `highlighter.ReprHighlighter`, `jupyter.JupyterMixin`, `panel.Panel`, `pretty.Pretty`, `table.Table`, `text.Text`, `text.TextType`
**Type References**: [[Inspect]], [[Optional]]

### Interface
- `_first_paragraph`(doc: str) -> str
- `get_object_types_mro`(obj: [Union[<ast.Tuple object at 0x162a26890>]](#union)) -> Tuple[<ast.Tuple object at 0x162a27990>]
- `get_object_types_mro_as_strings`(obj: object) -> Collection[str]
- `is_object_one_of_types`(obj: object, fully_qualified_types_names: Collection[str]) -> bool
- `__init__`(obj: Any) -> None
- `_make_title`(obj: Any) -> Text
- `__rich__`() -> Panel
- `_get_signature`(name: str, obj: Any) -> [Optional[Text]](#optional)
- `_render`() -> Iterable[RenderableType]
- `_get_formatted_doc`(object_: Any) -> [Optional[str]](#optional)
- `sort_items`(item: Tuple[<ast.Tuple object at 0x1629ea210>]) -> Tuple[<ast.Tuple object at 0x1629e9290>]
- `safe_getattr`(attr_name: str) -> Tuple[<ast.Tuple object at 0x1629e8110>]

### Implementation
**Inspect**
  - source_filename: Optional[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_inspect.py`  
**Dependencies**: `__future__.absolute_import`, `inspect`, `inspect.cleandoc`, `inspect.getdoc`, `inspect.getfile`, `inspect.isclass`, `inspect.ismodule`, `inspect.signature`, `typing.Any`, `typing.Collection`, `typing.Iterable`, `typing.Optional`, `typing.Tuple`, `typing.Type`, `typing.Union`, `console.Group`, `console.RenderableType`, `control.escape_control_codes`, `highlighter.ReprHighlighter`, `jupyter.JupyterMixin`, `panel.Panel`, `pretty.Pretty`, `table.Table`, `text.Text`, `text.TextType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.pager
:::{doc} Pager:5
Base class for a pager.
:::
:::{doc} SystemPager:17
Uses the pager installed on the system.
:::
**Imports**: `abc.ABC`, `abc.abstractmethod`, `typing.Any`, `__main__.make_test_card`, `console.Console`
**Type References**: [[Pager]], [[SystemPager]]

### Interface
- `show`(content: str) -> None
- `_pager`(content: str) -> Any

### Implementation
**Pager**

**SystemPager**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/pager.py`  
**Dependencies**: `abc.ABC`, `abc.abstractmethod`, `typing.Any`, `__main__.make_test_card`, `console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.text
:::{doc} Span:46
A marked up region in some text.
:::
:::{doc} Text:117
Text with color / style.

Args:
    text (str, optional): Default unstyled text. Defaults to "".
    style (Union[str, Style], optional): Base style for text. Defaults to "".
    justify (str, optional): Justify method: "left", "center", "full", "right". Defaults to None.
    overflow (str, optional): Overflow method: "crop", "fold", "ellipsis". Defaults to None.
    no_wrap (bool, optional): Disable text wrapping, or None for default. Defaults to None.
    end (str, optional): Character to end text with. Defaults to "\\n".
    tab_size (int): Number of spaces per tab, or ``None`` to use ``console.tab_size``. Defaults to None.
    spans (List[Span], optional). A list of predefined style spans. Defaults to None.
:::
**Imports**: `re`, `functools.partial`, `functools.reduce`, `math.gcd`, `operator.itemgetter`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Tuple`, `typing.Union`, `_loop.loop_last`, `_pick.pick_bool`, `_wrap.divide_line`, `align.AlignMethod`, `cells.cell_len`, `cells.set_cell_size`, `containers.Lines`, `control.strip_control_codes`, `emoji.EmojiVariant`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`, `style.StyleType`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.OverflowMethod`, `pip._vendor.rich.console.Console`, `markup.escape`, `markup.render`, `ansi.AnsiDecoder`
**Type References**: [[Dict]], [[JustifyMethod]], [[Lines]], [[List]], [[OverflowMethod]], [[Span]], [[Style]], [[Text]], [[Union]]

### Interface
- `__repr__`() -> str
- `__bool__`() -> bool
- `split`(separator: str) -> Lines
- `move`(offset: int) -> Span
- `right_crop`(amount: int) -> None
- `extend`(cells: int) -> Span
- `__init__`(text: str, style: [Union[<ast.Tuple object at 0x162a4f810>]](#union)) -> None
- `__len__`() -> int
- `__str__`() -> str
- `__add__`(other: Any) -> Text
- `__eq__`(other: object) -> bool
- `__contains__`(other: object) -> bool
- `__getitem__`(slice: [Union[<ast.Tuple object at 0x162a38190>]](#union)) -> Text
- `cell_len`() -> int
- `markup`() -> str
- `from_markup`(text: str) -> Text
- `from_ansi`(text: str) -> Text
- `styled`(text: str, style: StyleType) -> Text
- `assemble`() -> Text
- `plain`(new_text: str) -> None
- `spans`(spans: [List[Span]](#list)) -> None
- `blank_copy`(plain: str) -> Text
- `copy`() -> Text
- `stylize`(style: [Union[<ast.Tuple object at 0x162a62550>]](#union), start: int, end: [Optional[int]](#optional)) -> None
- `stylize_before`(style: [Union[<ast.Tuple object at 0x162a53590>]](#union), start: int, end: [Optional[int]](#optional)) -> None
- `apply_meta`(meta: [Dict[<ast.Tuple object at 0x162a50590>]](#dict), start: int, end: [Optional[int]](#optional)) -> None
- `on`(meta: [Optional[Dict[<ast.Tuple object at 0x162ac90d0>]]](#optional)) -> Text
- `remove_suffix`(suffix: str) -> None
- `get_style_at_offset`(console: Console, offset: int) -> Style
- `extend_style`(spaces: int) -> None
- `highlight_regex`(re_highlight: str, style: [Optional[Union[<ast.Tuple object at 0x162ae09d0>]]](#optional)) -> int
- `highlight_words`(words: Iterable[str], style: [Union[<ast.Tuple object at 0x162ae97d0>]](#union)) -> int
- `rstrip`() -> None
- `rstrip_end`(size: int) -> None
- `set_length`(new_length: int) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> Iterable[Segment]
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `render`(console: Console, end: str) -> Iterable[Segment]
- `join`(lines: Iterable[Text]) -> Text
- `expand_tabs`(tab_size: [Optional[int]](#optional)) -> None
- `truncate`(max_width: int) -> None
- `_trim_spans`() -> None
- `pad`(count: int, character: str) -> None
- `pad_left`(count: int, character: str) -> None
- `pad_right`(count: int, character: str) -> None
- `align`(align: AlignMethod, width: int, character: str) -> None
- `append`(text: [Union[<ast.Tuple object at 0x162b67290>]](#union), style: [Optional[Union[<ast.Tuple object at 0x162b676d0>]]](#optional)) -> Text
- `append_text`(text: Text) -> Text
- `append_tokens`(tokens: Iterable[Tuple[<ast.Tuple object at 0x162b77f10>]]) -> Text
- `copy_styles`(text: Text) -> None
- `divide`(offsets: Iterable[int]) -> Lines
- `wrap`(console: Console, width: int) -> Lines
- `fit`(width: int) -> Lines
- `detect_indentation`() -> int
- `with_indent_guides`(indent_size: [Optional[int]](#optional)) -> Text
- `get_text_at`(offset: int) -> Text
- `get_current_style`() -> Style
- `iter_text`() -> Iterable[Text]
- `flatten_spans`() -> Iterable[int]

### Implementation
**Span**
  - start: int
  - end: int
  - style: Union[<ast.Tuple object at 0x162a7fe50>]
**Text**
  - output: List[str]
  - tab_size: int
  - stack: List[int]
  - style_cache: Dict[<ast.Tuple object at 0x162b1a7d0>]
  - new_text: List[Text]
  - lines: Lines
  - new_lines: List[Text]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/text.py`  
**Dependencies**: `re`, `functools.partial`, `functools.reduce`, `math.gcd`, `operator.itemgetter`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Tuple`, `typing.Union`, `_loop.loop_last`, `_pick.pick_bool`, `_wrap.divide_line`, `align.AlignMethod`, `cells.cell_len`, `cells.set_cell_size`, `containers.Lines`, `control.strip_control_codes`, `emoji.EmojiVariant`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`, `style.StyleType`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.OverflowMethod`, `pip._vendor.rich.console.Console`, `markup.escape`, `markup.render`, `ansi.AnsiDecoder`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.highlighter
:::{doc} _combine_regex:8
Combine a number of regexes in to a single regex.

Returns:
    str: New regex with all regexes ORed together.
:::
:::{doc} Highlighter:17
Abstract base class for highlighters.
:::
:::{doc} NullHighlighter:50
A highlighter object that doesn't highlight.

May be used to disable highlighting entirely.
:::
:::{doc} RegexHighlighter:61
Applies highlighting from a list of regular expressions.
:::
:::{doc} ReprHighlighter:80
Highlights the text typically produced from ``__repr__`` methods.
:::
:::{doc} JSONHighlighter:106
Highlights JSON
:::
:::{doc} ISO8601Highlighter:143
Highlights the ISO8601 date time strings.
Regex reference: https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s07.html
:::
**Imports**: `re`, `abc.ABC`, `abc.abstractmethod`, `typing.List`, `typing.Union`, `text.Span`, `text.Text`, `console.Console`, `json`
**Type References**: [[Highlighter]], [[ISO8601Highlighter]], [[JSONHighlighter]], [[List]], [[NullHighlighter]], [[RegexHighlighter]], [[ReprHighlighter]]

### Interface
- `_combine_regex`() -> str
- `__call__`(text: [Union[<ast.Tuple object at 0x162c02b50>]](#union)) -> Text
- `highlight`(text: Text) -> None

### Implementation
**Highlighter**

**NullHighlighter**

**RegexHighlighter**
  - highlights: List[str]
  - base_style: str
**ReprHighlighter**

**JSONHighlighter**

**ISO8601Highlighter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/highlighter.py`  
**Dependencies**: `re`, `abc.ABC`, `abc.abstractmethod`, `typing.List`, `typing.Union`, `text.Span`, `text.Text`, `console.Console`, `json`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._spinners



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_spinners.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.terminal_theme
:::{doc} TerminalTheme:9
A color theme used when exporting console content.

Args:
    background (Tuple[int, int, int]): The background color.
    foreground (Tuple[int, int, int]): The foreground (text) color.
    normal (List[Tuple[int, int, int]]): A list of 8 normal intensity colors.
    bright (List[Tuple[int, int, int]], optional): A list of 8 bright colors, or None
        to repeat normal intensity. Defaults to None.
:::
**Imports**: `typing.List`, `typing.Optional`, `typing.Tuple`, `color_triplet.ColorTriplet`, `palette.Palette`
**Type References**: [[TerminalTheme]]

### Interface
- `__init__`(background: _ColorTuple, foreground: _ColorTuple, normal: [List[_ColorTuple]](#list), bright: [Optional[List[_ColorTuple]]](#optional)) -> None

### Implementation
**TerminalTheme**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/terminal_theme.py`  
**Dependencies**: `typing.List`, `typing.Optional`, `typing.Tuple`, `color_triplet.ColorTriplet`, `palette.Palette`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.bar
:::{doc} Bar:17
Renders a solid block bar.

Args:
    size (float): Value for the end of the bar.
    begin (float): Begin point (between 0 and size, inclusive).
    end (float): End point (between 0 and size, inclusive).
    width (int, optional): Width of the bar, or ``None`` for maximum width. Defaults to None.
    color (Union[Color, str], optional): Color of the bar. Defaults to "default".
    bgcolor (Union[Color, str], optional): Color of bar background. Defaults to "default".
:::
**Imports**: `typing.Optional`, `typing.Union`, `color.Color`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`
**Type References**: [[Bar]]

### Interface
- `__init__`(size: float, begin: float, end: float) -> Any
- `__repr__`() -> str
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement

### Implementation
**Bar**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/bar.py`  
**Dependencies**: `typing.Optional`, `typing.Union`, `color.Color`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.live
:::{doc} _RefreshThread:16
A thread that calls refresh() at regular intervals.
:::
:::{doc} Live:35
Renders an auto-updating live display of any given renderable.

Args:
    renderable (RenderableType, optional): The renderable to live display. Defaults to displaying nothing.
    console (Console, optional): Optional Console instance. Default will an internal Console instance writing to stdout.
    screen (bool, optional): Enable alternate screen mode. Defaults to False.
    auto_refresh (bool, optional): Enable auto refresh. If disabled, you will need to call `refresh()` or `update()` with refresh flag. Defaults to True
    refresh_per_second (float, optional): Number of times per second to refresh the live display. Defaults to 4.
    transient (bool, optional): Clear the renderable on exit (has no effect when screen=True). Defaults to False.
    redirect_stdout (bool, optional): Enable redirection of stdout, so ``print`` may be used. Defaults to True.
    redirect_stderr (bool, optional): Enable redirection of stderr. Defaults to True.
    vertical_overflow (VerticalOverflowMethod, optional): How to handle renderable when it is too tall for the console. Defaults to "ellipsis".
    get_renderable (Callable[[], RenderableType], optional): Optional callable to get renderable. Defaults to None.
:::
**Imports**: `sys`, `threading.Event`, `threading.RLock`, `threading.Thread`, `types.TracebackType`, `typing.IO`, `typing.Any`, `typing.Callable`, `typing.List`, `typing.Optional`, `typing.TextIO`, `typing.Type`, `typing.cast`, `get_console`, `console.Console`, `console.ConsoleRenderable`, `console.RenderableType`, `console.RenderHook`, `control.Control`, `file_proxy.FileProxy`, `jupyter.JupyterMixin`, `live_render.LiveRender`, `live_render.VerticalOverflowMethod`, `screen.Screen`, `text.Text`, `random`, `time`, `itertools.cycle`, `typing.Dict`, `typing.List`, `typing.Tuple`, `align.Align`, `console.Console`, `live.Live`, `panel.Panel`, `rule.Rule`, `syntax.Syntax`, `table.Table`, `IPython.display.display`, `ipywidgets.Output`, `warnings`
**Type References**: [[Dict]], [[Live]], [[_RefreshThread]]

### Interface
- `__init__`(renderable: [Optional[RenderableType]](#optional)) -> None
- `stop`() -> None
- `run`() -> None
- `is_started`() -> bool
- `get_renderable`() -> RenderableType
- `start`(refresh: bool) -> None
- `__enter__`() -> Live
- `__exit__`(exc_type: [Optional[Type[BaseException]]](#optional), exc_val: [Optional[BaseException]](#optional), exc_tb: [Optional[TracebackType]](#optional)) -> None
- `_enable_redirect_io`() -> None
- `_disable_redirect_io`() -> None
- `renderable`() -> RenderableType
- `update`(renderable: RenderableType) -> None
- `refresh`() -> None
- `process_renderables`(renderables: [List[ConsoleRenderable]](#list)) -> [List[ConsoleRenderable]](#list)

### Implementation
**_RefreshThread**

**Live**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/live.py`  
**Dependencies**: `sys`, `threading.Event`, `threading.RLock`, `threading.Thread`, `types.TracebackType`, `typing.IO`, `typing.Any`, `typing.Callable`, `typing.List`, `typing.Optional`, `typing.TextIO`, `typing.Type`, `typing.cast`, `get_console`, `console.Console`, `console.ConsoleRenderable`, `console.RenderableType`, `console.RenderHook`, `control.Control`, `file_proxy.FileProxy`, `jupyter.JupyterMixin`, `live_render.LiveRender`, `live_render.VerticalOverflowMethod`, `screen.Screen`, `text.Text`, `random`, `time`, `itertools.cycle`, `typing.Dict`, `typing.List`, `typing.Tuple`, `align.Align`, `console.Console`, `live.Live`, `panel.Panel`, `rule.Rule`, `syntax.Syntax`, `table.Table`, `IPython.display.display`, `ipywidgets.Output`, `warnings`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.syntax
:::{doc} SyntaxTheme:123
Base class for a syntax theme.
:::
:::{doc} PygmentsSyntaxTheme:137
Syntax theme that delegates to Pygments theme.
:::
:::{doc} ANSISyntaxTheme:179
Syntax theme to use standard colors.
:::
:::{doc} _SyntaxHighlightRange:215
A range to highlight in a Syntax object.
`start` and `end` are 2-integers tuples, where the first integer is the line number
(starting from 1) and the second integer is the column index (starting from 0).
:::
:::{doc} Syntax:227
Construct a Syntax object to render syntax highlighted code.

Args:
    code (str): Code to highlight.
    lexer (Lexer | str): Lexer to use (see https://pygments.org/docs/lexers/)
    theme (str, optional): Color theme, aka Pygments style (see https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to "monokai".
    dedent (bool, optional): Enable stripping of initial whitespace. Defaults to False.
    line_numbers (bool, optional): Enable rendering of line numbers. Defaults to False.
    start_line (int, optional): Starting number for line numbers. Defaults to 1.
    line_range (Tuple[int | None, int | None], optional): If given should be a tuple of the start and end line to render.
        A value of None in the tuple indicates the range is open in that direction.
    highlight_lines (Set[int]): A set of line numbers to highlight.
    code_width: Width of code to render (not including line numbers), or ``None`` to use all available width.
    tab_size (int, optional): Size of tabs. Defaults to 4.
    word_wrap (bool, optional): Enable word wrapping.
    background_color (str, optional): Optional background color, or None to use theme color. Defaults to None.
    indent_guides (bool, optional): Show indent guides. Defaults to False.
    padding (PaddingDimensions): Padding to apply around the syntax. Defaults to 0 (no padding).
:::
:::{doc} _get_code_index_for_syntax_position:814
Returns the index of the code string for the given positions.

Args:
    newlines_offsets (Sequence[int]): The offset of each newline character found in the code snippet.
    position (SyntaxPosition): The position to search for.

Returns:
    Optional[int]: The index of the code string for this position, or `None`
        if the given position's line number is out of range (if it's the column that is out of range
        we silently clamp its value so that it reaches the end of the line)
:::
**Imports**: `os.path`, `platform`, `re`, `sys`, `textwrap`, `abc.ABC`, `abc.abstractmethod`, `pathlib.Path`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `typing.Type`, `typing.Union`, `pip._vendor.pygments.lexer.Lexer`, `pip._vendor.pygments.lexers.get_lexer_by_name`, `pip._vendor.pygments.lexers.guess_lexer_for_filename`, `pip._vendor.pygments.style.Style`, `pip._vendor.pygments.styles.get_style_by_name`, `pip._vendor.pygments.token.Comment`, `pip._vendor.pygments.token.Error`, `pip._vendor.pygments.token.Generic`, `pip._vendor.pygments.token.Keyword`, `pip._vendor.pygments.token.Name`, `pip._vendor.pygments.token.Number`, `pip._vendor.pygments.token.Operator`, `pip._vendor.pygments.token.String`, `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.token.Whitespace`, `pip._vendor.pygments.util.ClassNotFound`, `pip._vendor.rich.containers.Lines`, `pip._vendor.rich.padding.Padding`, `pip._vendor.rich.padding.PaddingDimensions`, `_loop.loop_first`, `cells.cell_len`, `color.Color`, `color.blend_rgb`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `segment.Segments`, `style.Style`, `style.StyleType`, `text.Text`, `argparse`, `sys`, `pip._vendor.rich.console.Console`
**Type References**: [[ANSISyntaxTheme]], [[Dict]], [[JustifyMethod]], [[Lines]], [[Optional]], [[PygmentsSyntaxTheme]], [[StyleType]], [[Syntax]], [[SyntaxPosition]], [[SyntaxTheme]], [[Type]], [[Union]], [[_SyntaxHighlightRange]]

### Interface
- `_get_code_index_for_syntax_position`(newlines_offsets: Sequence[int], position: SyntaxPosition) -> [Optional[int]](#optional)
- `get_style_for_token`(token_type: TokenType) -> Style
- `get_background_style`() -> Style
- `__init__`(code: str, lexer: [Union[<ast.Tuple object at 0x162d7ba10>]](#union)) -> None
- `get_theme`(name: [Union[<ast.Tuple object at 0x162d81590>]](#union)) -> SyntaxTheme
- `from_path`(path: str, encoding: str, lexer: [Optional[Union[<ast.Tuple object at 0x162d5e3d0>]]](#optional), theme: [Union[<ast.Tuple object at 0x162d5e090>]](#union), dedent: bool, line_numbers: bool, line_range: [Optional[Tuple[<ast.Tuple object at 0x162d5da50>]]](#optional), start_line: int, highlight_lines: [Optional[Set[int]]](#optional), code_width: [Optional[int]](#optional), tab_size: int, word_wrap: bool, background_color: [Optional[str]](#optional), indent_guides: bool, padding: PaddingDimensions) -> Syntax
- `guess_lexer`(path: str, code: [Optional[str]](#optional)) -> str
- `_get_base_style`() -> Style
- `_get_token_color`(token_type: TokenType) -> [Optional[Color]](#optional)
- `lexer`() -> [Optional[Lexer]](#optional)
- `default_lexer`() -> Lexer
- `highlight`(code: str, line_range: [Optional[Tuple[<ast.Tuple object at 0x162d3b150>]]](#optional)) -> Text
- `stylize_range`(style: StyleType, start: SyntaxPosition, end: SyntaxPosition) -> None
- `_get_line_numbers_color`(blend: float) -> Color
- `_numbers_column_width`() -> int
- `_get_number_styles`(console: Console) -> Tuple[<ast.Tuple object at 0x162dcb1d0>]
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `_get_syntax`(console: Console, options: ConsoleOptions) -> Iterable[Segment]
- `_apply_stylized_ranges`(text: Text) -> None
- `_process_code`(code: str) -> Tuple[<ast.Tuple object at 0x162e11190>]
- `line_tokenize`() -> Iterable[Tuple[<ast.Tuple object at 0x162da8c90>]]
- `tokens_to_spans`() -> Iterable[Tuple[<ast.Tuple object at 0x162db4290>]]

### Implementation
**SyntaxTheme**

**PygmentsSyntaxTheme**

**ANSISyntaxTheme**

**_SyntaxHighlightRange**
  - style: StyleType
  - start: SyntaxPosition
  - end: SyntaxPosition
**Syntax**
  - _pygments_style_class: Type[PygmentsStyle]
  - _theme: SyntaxTheme
  - theme: SyntaxTheme
  - lexer: Optional[Lexer]
  - justify: JustifyMethod
  - lines: Union[<ast.Tuple object at 0x162dea8d0>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/syntax.py`  
**Dependencies**: `os.path`, `platform`, `re`, `sys`, `textwrap`, `abc.ABC`, `abc.abstractmethod`, `pathlib.Path`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `typing.Type`, `typing.Union`, `pip._vendor.pygments.lexer.Lexer`, `pip._vendor.pygments.lexers.get_lexer_by_name`, `pip._vendor.pygments.lexers.guess_lexer_for_filename`, `pip._vendor.pygments.style.Style`, `pip._vendor.pygments.styles.get_style_by_name`, `pip._vendor.pygments.token.Comment`, `pip._vendor.pygments.token.Error`, `pip._vendor.pygments.token.Generic`, `pip._vendor.pygments.token.Keyword`, `pip._vendor.pygments.token.Name`, `pip._vendor.pygments.token.Number`, `pip._vendor.pygments.token.Operator`, `pip._vendor.pygments.token.String`, `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.token.Whitespace`, `pip._vendor.pygments.util.ClassNotFound`, `pip._vendor.rich.containers.Lines`, `pip._vendor.rich.padding.Padding`, `pip._vendor.rich.padding.PaddingDimensions`, `_loop.loop_first`, `cells.cell_len`, `color.Color`, `color.blend_rgb`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `segment.Segments`, `style.Style`, `style.StyleType`, `text.Text`, `argparse`, `sys`, `pip._vendor.rich.console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.table
:::{doc} Column:39
Defines a column within a ~Table.

Args:
    title (Union[str, Text], optional): The title of the table rendered at the top. Defaults to None.
    caption (Union[str, Text], optional): The table caption rendered below. Defaults to None.
    width (int, optional): The width in characters of the table, or ``None`` to automatically fit. Defaults to None.
    min_width (Optional[int], optional): The minimum width of the table, or ``None`` for no minimum. Defaults to None.
    box (box.Box, optional): One of the constants in box.py used to draw the edges (see :ref:`appendix_box`), or ``None`` for no box lines. Defaults to box.HEAVY_HEAD.
    safe_box (Optional[bool], optional): Disable box characters that don't display on windows legacy terminal with *raster* fonts. Defaults to True.
    padding (PaddingDimensions, optional): Padding for cells (top, right, bottom, left). Defaults to (0, 1).
    collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to False.
    pad_edge (bool, optional): Enable padding of edge cells. Defaults to True.
    expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.
    show_header (bool, optional): Show a header row. Defaults to True.
    show_footer (bool, optional): Show a footer row. Defaults to False.
    show_edge (bool, optional): Draw a box around the outside of the table. Defaults to True.
    show_lines (bool, optional): Draw lines between every row. Defaults to False.
    leading (bool, optional): Number of blank lines between rows (precludes ``show_lines``). Defaults to 0.
    style (Union[str, Style], optional): Default style for the table. Defaults to "none".
    row_styles (List[Union, str], optional): Optional list of row styles, if more than one style is given then the styles will alternate. Defaults to None.
    header_style (Union[str, Style], optional): Style of the header. Defaults to "table.header".
    footer_style (Union[str, Style], optional): Style of the footer. Defaults to "table.footer".
    border_style (Union[str, Style], optional): Style of the border. Defaults to None.
    title_style (Union[str, Style], optional): Style of the title. Defaults to None.
    caption_style (Union[str, Style], optional): Style of the caption. Defaults to None.
    title_justify (str, optional): Justify method for title. Defaults to "center".
    caption_justify (str, optional): Justify method for caption. Defaults to "center".
    highlight (bool, optional): Highlight cell contents (if str). Defaults to False.
:::
:::{doc} Row:130
Information regarding a row.
:::
:::{doc} _Cell:140
A single cell in a table.
:::
:::{doc} Table:151
A console renderable to draw a table.

Args:
    *headers (Union[Column, str]): Column headers, either as a string, or :class:`~rich.table.Column` instance.
    title (Union[str, Text], optional): The title of the table rendered at the top. Defaults to None.
    caption (Union[str, Text], optional): The table caption rendered below. Defaults to None.
    width (int, optional): The width in characters of the table, or ``None`` to automatically fit. Defaults to None.
    min_width (Optional[int], optional): The minimum width of the table, or ``None`` for no minimum. Defaults to None.
    box (box.Box, optional): One of the constants in box.py used to draw the edges (see :ref:`appendix_box`), or ``None`` for no box lines. Defaults to box.HEAVY_HEAD.
    safe_box (Optional[bool], optional): Disable box characters that don't display on windows legacy terminal with *raster* fonts. Defaults to True.
    padding (PaddingDimensions, optional): Padding for cells (top, right, bottom, left). Defaults to (0, 1).
    collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to False.
    pad_edge (bool, optional): Enable padding of edge cells. Defaults to True.
    expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.
    show_header (bool, optional): Show a header row. Defaults to True.
    show_footer (bool, optional): Show a footer row. Defaults to False.
    show_edge (bool, optional): Draw a box around the outside of the table. Defaults to True.
    show_lines (bool, optional): Draw lines between every row. Defaults to False.
    leading (bool, optional): Number of blank lines between rows (precludes ``show_lines``). Defaults to 0.
    style (Union[str, Style], optional): Default style for the table. Defaults to "none".
    row_styles (List[Union, str], optional): Optional list of row styles, if more than one style is given then the styles will alternate. Defaults to None.
    header_style (Union[str, Style], optional): Style of the header. Defaults to "table.header".
    footer_style (Union[str, Style], optional): Style of the footer. Defaults to "table.footer".
    border_style (Union[str, Style], optional): Style of the border. Defaults to None.
    title_style (Union[str, Style], optional): Style of the title. Defaults to None.
    caption_style (Union[str, Style], optional): Style of the caption. Defaults to None.
    title_justify (str, optional): Justify method for title. Defaults to "center".
    caption_justify (str, optional): Justify method for caption. Defaults to "center".
    highlight (bool, optional): Highlight cell contents (if str). Defaults to False.
:::
**Imports**: `dataclasses.dataclass`, `dataclasses.field`, `dataclasses.replace`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `box`, `errors`, `_loop.loop_first_last`, `_loop.loop_last`, `_pick.pick_bool`, `_ratio.ratio_distribute`, `_ratio.ratio_reduce`, `align.VerticalAlignMethod`, `jupyter.JupyterMixin`, `measure.Measurement`, `padding.Padding`, `padding.PaddingDimensions`, `protocol.is_renderable`, `segment.Segment`, `style.Style`, `style.StyleType`, `text.Text`, `text.TextType`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.OverflowMethod`, `console.RenderableType`, `console.RenderResult`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.highlighter.ReprHighlighter`, `pip._vendor.rich.table.Table`, `_timer.timer`
**Type References**: [[Column]], [[Dict]], [[JustifyMethod]], [[List]], [[Optional]], [[OverflowMethod]], [[RenderableType]], [[Row]], [[StyleType]], [[Table]], [[Tuple]], [[VerticalAlignMethod]], [[_Cell]]

### Interface
- `copy`() -> Column
- `cells`() -> Iterable[RenderableType]
- `flexible`() -> bool
- `__init__`() -> None
- `grid`() -> Table
- `expand`(expand: bool) -> None
- `_extra_width`() -> int
- `row_count`() -> int
- `get_row_style`(console: Console, index: int) -> StyleType
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `padding`(padding: PaddingDimensions) -> Table
- `add_column`(header: RenderableType, footer: RenderableType) -> None
- `add_row`() -> None
- `add_section`() -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `_calculate_column_widths`(console: Console, options: ConsoleOptions) -> [List[int]](#list)
- `_collapse_widths`(widths: [List[int]](#list), wrapable: [List[bool]](#list), max_width: int) -> [List[int]](#list)
- `_get_cells`(console: Console, column_index: int, column: Column) -> Iterable[_Cell]
- `_get_padding_width`(column_index: int) -> int
- `_measure_column`(console: Console, options: ConsoleOptions, column: Column) -> Measurement
- `_render`(console: Console, options: ConsoleOptions, widths: [List[int]](#list)) -> RenderResult
- `add_cell`(column: Column, renderable: RenderableType) -> None
- `render_annotation`(text: TextType, style: StyleType, justify: JustifyMethod) -> RenderResult
- `get_padding`(first_row: bool, last_row: bool) -> Tuple[<ast.Tuple object at 0x162ef7c10>]
- `header`(text: str) -> None
- `align_cell`(cell: [List[List[Segment]]](#list), vertical: VerticalAlignMethod, width: int, style: Style) -> [List[List[Segment]]](#list)

### Implementation
**Column**
  - header: RenderableType
  - footer: RenderableType
  - header_style: StyleType
  - footer_style: StyleType
  - style: StyleType
  - justify: JustifyMethod
  - vertical: VerticalAlignMethod
  - overflow: OverflowMethod
  - width: Optional[int]
  - min_width: Optional[int]
  - max_width: Optional[int]
  - ratio: Optional[int]
  - no_wrap: bool
  - _index: int
  - _cells: List[RenderableType]
**Row**
  - style: Optional[StyleType]
  - end_section: bool
**_Cell**
  - style: StyleType
  - renderable: RenderableType
  - vertical: VerticalAlignMethod
**Table**
  - columns: List[Column]
  - rows: List[Row]
  - cell_renderables: List[Optional[RenderableType]]
  - _padding_cache: Dict[<ast.Tuple object at 0x162ee7b10>]
  - raw_cells: List[Tuple[<ast.Tuple object at 0x162f00250>]]
  - min_widths: List[int]
  - max_widths: List[int]
  - row_cells: List[Tuple[<ast.Tuple object at 0x162f1e4d0>]]
  - cells: List[List[List[Segment]]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/table.py`  
**Dependencies**: `dataclasses.dataclass`, `dataclasses.field`, `dataclasses.replace`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `box`, `errors`, `_loop.loop_first_last`, `_loop.loop_last`, `_pick.pick_bool`, `_ratio.ratio_distribute`, `_ratio.ratio_reduce`, `align.VerticalAlignMethod`, `jupyter.JupyterMixin`, `measure.Measurement`, `padding.Padding`, `padding.PaddingDimensions`, `protocol.is_renderable`, `segment.Segment`, `style.Style`, `style.StyleType`, `text.Text`, `text.TextType`, `console.Console`, `console.ConsoleOptions`, `console.JustifyMethod`, `console.OverflowMethod`, `console.RenderableType`, `console.RenderResult`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.highlighter.ReprHighlighter`, `pip._vendor.rich.table.Table`, `_timer.timer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._export_format



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_export_format.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.progress_bar
:::{doc} ProgressBar:18
Renders a (progress) bar. Used by rich.progress.

Args:
    total (float, optional): Number of steps in the bar. Defaults to 100. Set to None to render a pulsing animation.
    completed (float, optional): Number of steps completed. Defaults to 0.
    width (int, optional): Width of the bar, or ``None`` for maximum width. Defaults to None.
    pulse (bool, optional): Enable pulse effect. Defaults to False. Will pulse if a None total was passed.
    style (StyleType, optional): Style for the bar background. Defaults to "bar.back".
    complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".
    finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".
    pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".
    animation_time (Optional[float], optional): Time in seconds to use for animation, or None to use system time.
:::
**Imports**: `math`, `functools.lru_cache`, `time.monotonic`, `typing.Iterable`, `typing.List`, `typing.Optional`, `color.Color`, `color.blend_rgb`, `color_triplet.ColorTriplet`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`, `style.StyleType`, `time`
**Type References**: [[List]], [[Optional]], [[ProgressBar]]

### Interface
- `__init__`(total: [Optional[float]](#optional), completed: float, width: [Optional[int]](#optional), pulse: bool, style: StyleType, complete_style: StyleType, finished_style: StyleType, pulse_style: StyleType, animation_time: [Optional[float]](#optional)) -> Any
- `__repr__`() -> str
- `percentage_completed`() -> [Optional[float]](#optional)
- `_get_pulse_segments`(fore_style: Style, back_style: Style, color_system: str, no_color: bool, ascii: bool) -> [List[Segment]](#list)
- `update`(completed: float, total: [Optional[float]](#optional)) -> None
- `_render_pulse`(console: Console, width: int, ascii: bool) -> Iterable[Segment]
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement

### Implementation
**ProgressBar**
  - segments: List[Segment]
  - completed: Optional[float]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/progress_bar.py`  
**Dependencies**: `math`, `functools.lru_cache`, `time.monotonic`, `typing.Iterable`, `typing.List`, `typing.Optional`, `color.Color`, `color.blend_rgb`, `color_triplet.ColorTriplet`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `jupyter.JupyterMixin`, `measure.Measurement`, `segment.Segment`, `style.Style`, `style.StyleType`, `time`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.errors
:::{doc} ConsoleError:1
An error in console operation.
:::
:::{doc} StyleError:5
An error in styles.
:::
:::{doc} StyleSyntaxError:9
Style was badly formatted.
:::
:::{doc} MissingStyle:13
No such style.
:::
:::{doc} StyleStackError:17
Style stack is invalid.
:::
:::{doc} NotRenderableError:21
Object is not renderable.
:::
:::{doc} MarkupError:25
Markup was badly formatted.
:::
:::{doc} LiveError:29
Error related to Live display.
:::
:::{doc} NoAltScreen:33
Alt screen mode was required.
:::

**Type References**: [[ConsoleError]], [[LiveError]], [[MarkupError]], [[MissingStyle]], [[NoAltScreen]], [[NotRenderableError]], [[StyleError]], [[StyleStackError]], [[StyleSyntaxError]]


### Implementation
**ConsoleError**

**StyleError**

**StyleSyntaxError**

**MissingStyle**

**StyleStackError**

**NotRenderableError**

**MarkupError**

**LiveError**

**NoAltScreen**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/errors.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.prompt
:::{doc} PromptError:11
Exception base class for prompt related errors.
:::
:::{doc} InvalidResponse:15
Exception to indicate a response was invalid. Raise this within process_response() to indicate an error
and provide an error message.

Args:
    message (Union[str, Text]): Error message.
:::
:::{doc} PromptBase:30
Ask the user for input until a valid response is received. This is the base class, see one of
the concrete classes for examples.

Args:
    prompt (TextType, optional): Prompt text. Defaults to "".
    console (Console, optional): A Console instance or None to use global console. Defaults to None.
    password (bool, optional): Enable password input. Defaults to False.
    choices (List[str], optional): A list of valid choices. Defaults to None.
    show_default (bool, optional): Show default in prompt. Defaults to True.
    show_choices (bool, optional): Show choices in prompt. Defaults to True.
:::
:::{doc} Prompt:286
A prompt that returns a str.

Example:
    >>> name = Prompt.ask("Enter your name")
:::
:::{doc} IntPrompt:298
A prompt that returns an integer.

Example:
    >>> burrito_count = IntPrompt.ask("How many burritos do you want to order")
:::
:::{doc} FloatPrompt:310
A prompt that returns a float.

Example:
    >>> temperature = FloatPrompt.ask("Enter desired temperature")
:::
:::{doc} Confirm:322
A yes / no confirmation prompt.

Example:
    >>> if Confirm.ask("Continue"):
            run_job()
:::
**Imports**: `typing.Any`, `typing.Generic`, `typing.List`, `typing.Optional`, `typing.TextIO`, `typing.TypeVar`, `typing.Union`, `typing.overload`, `get_console`, `console.Console`, `text.Text`, `text.TextType`, `pip._vendor.rich.print`
**Type References**: [[Confirm]], [[FloatPrompt]], [[IntPrompt]], [[InvalidResponse]], [[List]], [[Optional]], [[Prompt]], [[PromptBase]], [[PromptError]], [[PromptType]]

### Interface
- `__init__`(prompt: TextType) -> None
- `__rich__`() -> TextType
- `ask`(prompt: TextType) -> Any
- `render_default`(default: DefaultType) -> Text
- `make_prompt`(default: DefaultType) -> Text
- `get_input`(console: Console, prompt: TextType, password: bool, stream: [Optional[TextIO]](#optional)) -> str
- `check_choice`(value: str) -> bool
- `process_response`(value: str) -> bool
- `on_validate_error`(value: str, error: InvalidResponse) -> None
- `pre_prompt`() -> None
- `__call__`() -> Any

### Implementation
**PromptError**

**InvalidResponse**

**PromptBase**
  - response_type: type
  - choices: Optional[List[str]]
  - return_value: PromptType
**Prompt**

**IntPrompt**

**FloatPrompt**

**Confirm**
  - choices: List[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/prompt.py`  
**Dependencies**: `typing.Any`, `typing.Generic`, `typing.List`, `typing.Optional`, `typing.TextIO`, `typing.TypeVar`, `typing.Union`, `typing.overload`, `get_console`, `console.Console`, `text.Text`, `text.TextType`, `pip._vendor.rich.print`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.segment
:::{doc} ControlType:35
Non-printable control codes which typically translate to ANSI codes.
:::
:::{doc} Segment:64
A piece of text with associated style. Segments are produced by the Console render process and
are ultimately converted in to strings to be written to the terminal.

Args:
    text (str): A piece of text.
    style (:class:`~rich.style.Style`, optional): An optional style to apply to the text.
    control (Tuple[ControlCode], optional): Optional sequence of control codes.

Attributes:
    cell_length (int): The cell length of this Segment.
:::
:::{doc} Segments:657
A simple renderable to render an iterable of segments. This class may be useful if
you want to print segments outside of a __rich_console__ method.

Args:
    segments (Iterable[Segment]): An iterable of segments.
    new_lines (bool, optional): Add new lines between segments. Defaults to False.
:::
**Imports**: `enum.IntEnum`, `functools.lru_cache`, `itertools.filterfalse`, `logging.getLogger`, `operator.attrgetter`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Type`, `typing.Union`, `cells._is_single_cell_widths`, `cells.cached_cell_len`, `cells.cell_len`, `cells.get_character_cell_size`, `cells.set_cell_size`, `repr.Result`, `repr.rich_repr`, `style.Style`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.syntax.Syntax`, `pip._vendor.rich.text.Text`
**Type References**: [[ControlType]], [[Dict]], [[List]], [[Optional]], [[Segment]], [[SegmentLines]], [[Segments]]

### Interface
- `cell_length`() -> int
- `__rich_repr__`() -> Result
- `__bool__`() -> bool
- `is_control`() -> bool
- `_split_cells`(segment: Segment, cut: int) -> Tuple[<ast.Tuple object at 0x163019790>]
- `split_cells`(cut: int) -> Tuple[<ast.Tuple object at 0x163058850>]
- `line`() -> Segment
- `apply_style`(segments: Iterable[Segment], style: [Optional[Style]](#optional), post_style: [Optional[Style]](#optional)) -> Iterable[Segment]
- `filter_control`(segments: Iterable[Segment], is_control: bool) -> Iterable[Segment]
- `split_lines`(segments: Iterable[Segment]) -> Iterable[List[Segment]]
- `split_and_crop_lines`(segments: Iterable[Segment], length: int, style: [Optional[Style]](#optional), pad: bool, include_new_lines: bool) -> Iterable[List[Segment]]
- `adjust_line_length`(line: [List[Segment]](#list), length: int, style: [Optional[Style]](#optional), pad: bool) -> [List[Segment]](#list)
- `get_line_length`(line: [List[Segment]](#list)) -> int
- `get_shape`(lines: [List[List[Segment]]](#list)) -> Tuple[<ast.Tuple object at 0x163070d50>]
- `set_shape`(lines: [List[List[Segment]]](#list), width: int, height: [Optional[int]](#optional), style: [Optional[Style]](#optional), new_lines: bool) -> [List[List[Segment]]](#list)
- `align_top`(cls: Type[Segment], lines: [List[List[Segment]]](#list), width: int, height: int, style: Style, new_lines: bool) -> [List[List[Segment]]](#list)
- `align_bottom`(cls: Type[Segment], lines: [List[List[Segment]]](#list), width: int, height: int, style: Style, new_lines: bool) -> [List[List[Segment]]](#list)
- `align_middle`(cls: Type[Segment], lines: [List[List[Segment]]](#list), width: int, height: int, style: Style, new_lines: bool) -> [List[List[Segment]]](#list)
- `simplify`(segments: Iterable[Segment]) -> Iterable[Segment]
- `strip_links`(segments: Iterable[Segment]) -> Iterable[Segment]
- `strip_styles`(segments: Iterable[Segment]) -> Iterable[Segment]
- `remove_color`(segments: Iterable[Segment]) -> Iterable[Segment]
- `divide`(segments: Iterable[Segment], cuts: Iterable[int]) -> Iterable[List[Segment]]
- `__init__`(lines: Iterable[List[Segment]], new_lines: bool) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult

### Implementation
**ControlType**

**Segment**
  - text: str
  - style: Optional[Style]
  - control: Optional[Sequence[ControlCode]]
  - line: List[Segment]
  - new_line: List[Segment]
  - cache: Dict[<ast.Tuple object at 0x1630a3790>]
  - split_segments: List[Segment]
**Segments**

**SegmentLines**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/segment.py`  
**Dependencies**: `enum.IntEnum`, `functools.lru_cache`, `itertools.filterfalse`, `logging.getLogger`, `operator.attrgetter`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Type`, `typing.Union`, `cells._is_single_cell_widths`, `cells.cached_cell_len`, `cells.cell_len`, `cells.get_character_cell_size`, `cells.set_cell_size`, `repr.Result`, `repr.rich_repr`, `style.Style`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.syntax.Syntax`, `pip._vendor.rich.text.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.ansi
:::{doc} _AnsiToken:19
Result of ansi tokenized string.
:::
:::{doc} _ansi_tokenize:27
Tokenize a string in to plain text and ANSI codes.

Args:
    ansi_text (str): A String containing ANSI codes.

Yields:
    AnsiToken: A named tuple of (plain, sgr, osc)
:::
:::{doc} AnsiDecoder:119
Translate ANSI code in to styled Text.
:::
**Imports**: `re`, `sys`, `contextlib.suppress`, `typing.Iterable`, `typing.NamedTuple`, `typing.Optional`, `color.Color`, `style.Style`, `text.Text`, `io`, `os`, `pty`, `sys`, `console.Console`
**Type References**: [[AnsiDecoder]], [[Optional]], [[_AnsiToken]]

### Interface
- `_ansi_tokenize`(ansi_text: str) -> Iterable[_AnsiToken]
- `__init__`() -> None
- `decode`(terminal_text: str) -> Iterable[Text]
- `decode_line`(line: str) -> Text
- `read`(fd: int) -> bytes

### Implementation
**_AnsiToken**
  - plain: str
  - sgr: Optional[str]
  - osc: Optional[str]
**AnsiDecoder**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/ansi.py`  
**Dependencies**: `re`, `sys`, `contextlib.suppress`, `typing.Iterable`, `typing.NamedTuple`, `typing.Optional`, `color.Color`, `style.Style`, `text.Text`, `io`, `os`, `pty`, `sys`, `console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.progress
:::{doc} _TrackThread:63
A thread to periodically update progress.
:::
:::{doc} track:103
Track progress by iterating over a sequence.

Args:
    sequence (Iterable[ProgressType]): A sequence (must support "len") you wish to iterate over.
    description (str, optional): Description of task show next to progress bar. Defaults to "Working".
    total: (float, optional): Total number of steps. Default is len(sequence).
    auto_refresh (bool, optional): Automatic refresh, disable to force a refresh after each iteration. Default is True.
    transient: (bool, optional): Clear the progress on exit. Defaults to False.
    console (Console, optional): Console to write to. Default creates internal Console instance.
    refresh_per_second (float): Number of times per second to refresh the progress information. Defaults to 10.
    style (StyleType, optional): Style for the bar background. Defaults to "bar.back".
    complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".
    finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".
    pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".
    update_period (float, optional): Minimum time (in seconds) between calls to update(). Defaults to 0.1.
    disable (bool, optional): Disable display of progress.
    show_speed (bool, optional): Show speed if total isn't known. Defaults to True.
Returns:
    Iterable[ProgressType]: An iterable of the values in the sequence.
:::
:::{doc} _Reader:173
A reader that tracks progress while it's being read from.
:::
:::{doc} _ReadContext:273
A utility class to handle a context for both a reader and a progress.
:::
:::{doc} wrap_file:294
Read bytes from a file while tracking progress.

Args:
    file (Union[str, PathLike[str], BinaryIO]): The path to the file to read, or a file-like object in binary mode.
    total (int): Total number of bytes to read.
    description (str, optional): Description of task show next to progress bar. Defaults to "Reading".
    auto_refresh (bool, optional): Automatic refresh, disable to force a refresh after each iteration. Default is True.
    transient: (bool, optional): Clear the progress on exit. Defaults to False.
    console (Console, optional): Console to write to. Default creates internal Console instance.
    refresh_per_second (float): Number of times per second to refresh the progress information. Defaults to 10.
    style (StyleType, optional): Style for the bar background. Defaults to "bar.back".
    complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".
    finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".
    pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".
    disable (bool, optional): Disable display of progress.
Returns:
    ContextManager[BinaryIO]: A context manager yielding a progress reader.
:::
:::{doc} open:409
Read bytes from a file while tracking progress.

Args:
    path (Union[str, PathLike[str], BinaryIO]): The path to the file to read, or a file-like object in binary mode.
    mode (str): The mode to use to open the file. Only supports "r", "rb" or "rt".
    buffering (int): The buffering strategy to use, see :func:`io.open`.
    encoding (str, optional): The encoding to use when reading in text mode, see :func:`io.open`.
    errors (str, optional): The error handling strategy for decoding errors, see :func:`io.open`.
    newline (str, optional): The strategy for handling newlines in text mode, see :func:`io.open`
    total: (int, optional): Total number of bytes to read. Must be provided if reading from a file handle. Default for a path is os.stat(file).st_size.
    description (str, optional): Description of task show next to progress bar. Defaults to "Reading".
    auto_refresh (bool, optional): Automatic refresh, disable to force a refresh after each iteration. Default is True.
    transient: (bool, optional): Clear the progress on exit. Defaults to False.
    console (Console, optional): Console to write to. Default creates internal Console instance.
    refresh_per_second (float): Number of times per second to refresh the progress information. Defaults to 10.
    style (StyleType, optional): Style for the bar background. Defaults to "bar.back".
    complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".
    finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".
    pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".
    disable (bool, optional): Disable display of progress.
    encoding (str, optional): The encoding to use when reading in text mode.

Returns:
    ContextManager[BinaryIO]: A context manager yielding a progress reader.
:::
:::{doc} ProgressColumn:495
Base class for a widget to use in progress display.
:::
:::{doc} RenderableColumn:537
A column to insert an arbitrary column.

Args:
    renderable (RenderableType, optional): Any renderable. Defaults to empty string.
:::
:::{doc} SpinnerColumn:554
A column with a 'spinner' animation.

Args:
    spinner_name (str, optional): Name of spinner animation. Defaults to "dots".
    style (StyleType, optional): Style of spinner. Defaults to "progress.spinner".
    speed (float, optional): Speed factor of spinner. Defaults to 1.0.
    finished_text (TextType, optional): Text used when task is finished. Defaults to " ".
:::
:::{doc} TextColumn:604
A column containing text.
:::
:::{doc} BarColumn:634
Renders a visual progress bar.

Args:
    bar_width (Optional[int], optional): Width of bar or None for full width. Defaults to 40.
    style (StyleType, optional): Style for the bar background. Defaults to "bar.back".
    complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".
    finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".
    pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".
:::
:::{doc} TimeElapsedColumn:676
Renders time elapsed.
:::
:::{doc} TaskProgressColumn:688
Show task progress as a percentage.

Args:
    text_format (str, optional): Format for percentage display. Defaults to "[progress.percentage]{task.percentage:>3.0f}%".
    text_format_no_percentage (str, optional): Format if percentage is unknown. Defaults to "".
    style (StyleType, optional): Style of output. Defaults to "none".
    justify (JustifyMethod, optional): Text justification. Defaults to "left".
    markup (bool, optional): Enable markup. Defaults to True.
    highlighter (Optional[Highlighter], optional): Highlighter to apply to output. Defaults to None.
    table_column (Optional[Column], optional): Table Column to use. Defaults to None.
    show_speed (bool, optional): Show speed if total is unknown. Defaults to False.
:::
:::{doc} TimeRemainingColumn:760
Renders estimated time remaining.

Args:
    compact (bool, optional): Render MM:SS when time remaining is less than an hour. Defaults to False.
    elapsed_when_finished (bool, optional): Render time elapsed when the task is finished. Defaults to False.
:::
:::{doc} FileSizeColumn:808
Renders completed filesize.
:::
:::{doc} TotalFileSizeColumn:817
Renders total filesize.
:::
:::{doc} MofNCompleteColumn:826
Renders completed count/total, e.g. '  10/1000'.

Best for bounded tasks with int quantities.

Space pads the completed count so that progress length does not change as task progresses
past powers of 10.

Args:
    separator (str, optional): Text to separate completed and total values. Defaults to "/".
:::
:::{doc} DownloadColumn:853
Renders file size downloaded and total, e.g. '0.5/2.3 GB'.

Args:
    binary_units (bool, optional): Use binary units, KiB, MiB etc. Defaults to False.
:::
:::{doc} TransferSpeedColumn:902
Renders human readable transfer speed.
:::
:::{doc} ProgressSample:914
Sample of progress for a given time.
:::
:::{doc} Task:924
Information regarding a progress task.

This object should be considered read-only outside of the :class:`~Progress` class.
:::
:::{doc} Progress:1049
Renders an auto-updating progress bar(s).

Args:
    console (Console, optional): Optional Console instance. Default will an internal Console instance writing to stdout.
    auto_refresh (bool, optional): Enable auto refresh. If disabled, you will need to call `refresh()`.
    refresh_per_second (Optional[float], optional): Number of times per second to refresh the progress information or None to use default (10). Defaults to None.
    speed_estimate_period: (float, optional): Period (in seconds) used to calculate the speed estimate. Defaults to 30.
    transient: (bool, optional): Clear the progress on exit. Defaults to False.
    redirect_stdout: (bool, optional): Enable redirection of stdout, so ``print`` may be used. Defaults to True.
    redirect_stderr: (bool, optional): Enable redirection of stderr. Defaults to True.
    get_time: (Callable, optional): A callable that gets the current time, or None to use Console.get_time. Defaults to None.
    disable (bool, optional): Disable progress display. Defaults to False
    expand (bool, optional): Expand tasks table to fit width. Defaults to False.
:::
**Imports**: `io`, `sys`, `typing`, `warnings`, `abc.ABC`, `abc.abstractmethod`, `collections.deque`, `dataclasses.dataclass`, `dataclasses.field`, `datetime.timedelta`, `io.RawIOBase`, `io.UnsupportedOperation`, `math.ceil`, `mmap.mmap`, `operator.length_hint`, `os.PathLike`, `os.stat`, `threading.Event`, `threading.RLock`, `threading.Thread`, `types.TracebackType`, `typing.Any`, `typing.BinaryIO`, `typing.Callable`, `typing.ContextManager`, `typing.Deque`, `typing.Dict`, `typing.Generic`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.NewType`, `typing.Optional`, `typing.Sequence`, `typing.TextIO`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `filesize`, `get_console`, `console.Console`, `console.Group`, `console.JustifyMethod`, `console.RenderableType`, `highlighter.Highlighter`, `jupyter.JupyterMixin`, `live.Live`, `progress_bar.ProgressBar`, `spinner.Spinner`, `style.StyleType`, `table.Column`, `table.Table`, `text.Text`, `text.TextType`, `typing.Literal`, `pip._vendor.typing_extensions.Literal`, `random`, `time`, `panel.Panel`, `rule.Rule`, `syntax.Syntax`, `table.Table`, `itertools.cycle`
**Type References**: [[BarColumn]], [[Deque]], [[Dict]], [[DownloadColumn]], [[FileSizeColumn]], [[GetTimeCallable]], [[List]], [[MofNCompleteColumn]], [[Optional]], [[Progress]], [[ProgressColumn]], [[ProgressSample]], [[RLock]], [[RenderableColumn]], [[SpinnerColumn]], [[Task]], [[TaskID]], [[TaskProgressColumn]], [[TextColumn]], [[TimeElapsedColumn]], [[TimeRemainingColumn]], [[TotalFileSizeColumn]], [[TransferSpeedColumn]], [[_ReadContext]], [[_Reader]], [[_TrackThread]]

### Interface
- `track`(sequence: [Union[<ast.Tuple object at 0x163264890>]](#union), total: [Optional[float]](#optional), task_id: [Optional[TaskID]](#optional), description: str, update_period: float) -> Iterable[ProgressType]
- `wrap_file`(file: BinaryIO, total: [Optional[int]](#optional)) -> BinaryIO
- `open`(file: [Union[<ast.Tuple object at 0x16327f990>]](#union), mode: [Union[<ast.Tuple object at 0x16327fd50>]](#union), buffering: int, encoding: [Optional[str]](#optional), errors: [Optional[str]](#optional), newline: [Optional[str]](#optional)) -> [Union[<ast.Tuple object at 0x163296d50>]](#union)
- `__init__`() -> None
- `run`() -> None
- `__enter__`() -> Progress
- `__exit__`(exc_type: [Optional[Type[BaseException]]](#optional), exc_val: [Optional[BaseException]](#optional), exc_tb: [Optional[TracebackType]](#optional)) -> None
- `__iter__`() -> BinaryIO
- `__next__`() -> bytes
- `closed`() -> bool
- `fileno`() -> int
- `isatty`() -> bool
- `mode`() -> str
- `name`() -> str
- `readable`() -> bool
- `seekable`() -> bool
- `writable`() -> bool
- `read`(size: int) -> bytes
- `readinto`(b: [Union[<ast.Tuple object at 0x16311df50>]](#union)) -> Any
- `readline`(size: int) -> bytes
- `readlines`(hint: int) -> [List[bytes]](#list)
- `close`() -> None
- `seek`(offset: int, whence: int) -> int
- `tell`() -> int
- `write`(s: Any) -> int
- `get_table_column`() -> Column
- `__call__`(task: Task) -> RenderableType
- `render`(task: Task) -> Text
- `set_spinner`(spinner_name: str, spinner_style: [Optional[StyleType]](#optional), speed: float) -> None
- `render_speed`(speed: [Optional[float]](#optional)) -> Text
- `get_time`() -> float
- `started`() -> bool
- `remaining`() -> [Optional[float]](#optional)
- `elapsed`() -> [Optional[float]](#optional)
- `finished`() -> bool
- `percentage`() -> float
- `speed`() -> [Optional[float]](#optional)
- `time_remaining`() -> [Optional[float]](#optional)
- `_reset`() -> None
- `get_default_columns`() -> Tuple[<ast.Tuple object at 0x163251f90>]
- `console`() -> Console
- `tasks`() -> [List[Task]](#list)
- `task_ids`() -> [List[TaskID]](#list)
- `start`() -> None
- `stop`() -> None
- `start_task`(task_id: TaskID) -> None
- `stop_task`(task_id: TaskID) -> None
- `update`(task_id: TaskID) -> None
- `reset`(task_id: TaskID) -> None
- `advance`(task_id: TaskID, advance: float) -> None
- `refresh`() -> None
- `get_renderable`() -> RenderableType
- `get_renderables`() -> Iterable[RenderableType]
- `make_tasks_table`(tasks: Iterable[Task]) -> Table
- `__rich__`() -> RenderableType
- `add_task`(description: str, start: bool, total: [Optional[float]](#optional), completed: int, visible: bool) -> TaskID
- `remove_task`(task_id: TaskID) -> None

### Implementation
**_TrackThread**

**_Reader**

**_ReadContext**

**ProgressColumn**
  - max_refresh: Optional[float]
**RenderableColumn**

**SpinnerColumn**

**TextColumn**

**BarColumn**

**TimeElapsedColumn**

**TaskProgressColumn**

**TimeRemainingColumn**

**FileSizeColumn**

**TotalFileSizeColumn**

**MofNCompleteColumn**

**DownloadColumn**

**TransferSpeedColumn**

**ProgressSample**
  - timestamp: float
  - completed: float
**Task**
  - id: TaskID
  - description: str
  - total: Optional[float]
  - completed: float
  - _get_time: GetTimeCallable
  - finished_time: Optional[float]
  - visible: bool
  - fields: Dict[<ast.Tuple object at 0x163200d50>]
  - start_time: Optional[float]
  - stop_time: Optional[float]
  - finished_speed: Optional[float]
  - _progress: Deque[ProgressSample]
  - _lock: RLock
**Progress**
  - total_bytes: Optional[float]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/progress.py`  
**Dependencies**: `io`, `sys`, `typing`, `warnings`, `abc.ABC`, `abc.abstractmethod`, `collections.deque`, `dataclasses.dataclass`, `dataclasses.field`, `datetime.timedelta`, `io.RawIOBase`, `io.UnsupportedOperation`, `math.ceil`, `mmap.mmap`, `operator.length_hint`, `os.PathLike`, `os.stat`, `threading.Event`, `threading.RLock`, `threading.Thread`, `types.TracebackType`, `typing.Any`, `typing.BinaryIO`, `typing.Callable`, `typing.ContextManager`, `typing.Deque`, `typing.Dict`, `typing.Generic`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.NewType`, `typing.Optional`, `typing.Sequence`, `typing.TextIO`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `filesize`, `get_console`, `console.Console`, `console.Group`, `console.JustifyMethod`, `console.RenderableType`, `highlighter.Highlighter`, `jupyter.JupyterMixin`, `live.Live`, `progress_bar.ProgressBar`, `spinner.Spinner`, `style.StyleType`, `table.Column`, `table.Table`, `text.Text`, `text.TextType`, `typing.Literal`, `pip._vendor.typing_extensions.Literal`, `random`, `time`, `panel.Panel`, `rule.Rule`, `syntax.Syntax`, `table.Table`, `itertools.cycle`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._stack
:::{doc} Stack:6
A small shim over builtin list.
:::
**Imports**: `typing.List`, `typing.TypeVar`
**Type References**: [[Stack]]

### Interface
- `top`() -> T
- `push`(item: T) -> None

### Implementation
**Stack**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_stack.py`  
**Dependencies**: `typing.List`, `typing.TypeVar`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._windows
:::{doc} WindowsConsoleFeatures:6
Windows features available.
:::
**Imports**: `sys`, `dataclasses.dataclass`, `ctypes`, `ctypes.LibraryLoader`, `pip._vendor.rich._win32_console.ENABLE_VIRTUAL_TERMINAL_PROCESSING`, `pip._vendor.rich._win32_console.GetConsoleMode`, `pip._vendor.rich._win32_console.GetStdHandle`, `pip._vendor.rich._win32_console.LegacyWindowsError`, `platform`, `pip._vendor.rich.print`
**Type References**: [[WindowsConsoleFeatures]]

### Interface
- `get_windows_console_features`() -> WindowsConsoleFeatures

### Implementation
**WindowsConsoleFeatures**
  - vt: bool
  - truecolor: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_windows.py`  
**Dependencies**: `sys`, `dataclasses.dataclass`, `ctypes`, `ctypes.LibraryLoader`, `pip._vendor.rich._win32_console.ENABLE_VIRTUAL_TERMINAL_PROCESSING`, `pip._vendor.rich._win32_console.GetConsoleMode`, `pip._vendor.rich._win32_console.GetStdHandle`, `pip._vendor.rich._win32_console.LegacyWindowsError`, `platform`, `pip._vendor.rich.print`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._cell_widths



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_cell_widths.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.cells
:::{doc} cached_cell_len:14
Get the number of cells required to display text.

This method always caches, which may use up a lot of memory. It is recommended to use
`cell_len` over this method.

Args:
    text (str): Text to display.

Returns:
    int: Get the number of cells required to display text.
:::
:::{doc} cell_len:31
Get the number of cells required to display text.

Args:
    text (str): Text to display.

Returns:
    int: Get the number of cells required to display text.
:::
:::{doc} get_character_cell_size:48
Get the cell size of a character.

Args:
    character (str): A single character.

Returns:
    int: Number of cells (0, 1 or 2) occupied by that character.
:::
:::{doc} _get_codepoint_cell_size:61
Get the cell size of a character.

Args:
    codepoint (int): Codepoint of a character.

Returns:
    int: Number of cells (0, 1 or 2) occupied by that character.
:::
:::{doc} set_cell_size:89
Set the length of a string to fit within given number of cells.
:::
:::{doc} chop_cells:124
Split text into lines such that each line fits within the available (cell) width.

Args:
    text: The text to fold such that it fits in the given width.
    width: The width available (number of cells).

Returns:
    A list of strings such that each string in the list has cell width
    less than or equal to the available width.
:::
**Imports**: `__future__.annotations`, `re`, `functools.lru_cache`, `typing.Callable`, `_cell_widths.CELL_WIDTHS`
### Interface
- `cached_cell_len`(text: str) -> int
- `cell_len`(text: str, _cell_len: Callable[<ast.Tuple object at 0x1633d9fd0>]) -> int
- `get_character_cell_size`(character: str) -> int
- `_get_codepoint_cell_size`(codepoint: int) -> int
- `set_cell_size`(text: str, total: int) -> str
- `chop_cells`(text: str, width: int) -> list[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/cells.py`  
**Dependencies**: `__future__.annotations`, `re`, `functools.lru_cache`, `typing.Callable`, `_cell_widths.CELL_WIDTHS`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._win32_console
:::{doc} WindowsCoordinates:32
Coordinates in the Windows Console API are (y, x), not (x, y).
This class is intended to prevent that confusion.
Rows and columns are indexed from 0.
This class can be used in place of wintypes._COORD in arguments and argtypes.
:::
:::{doc} GetStdHandle:77
Retrieves a handle to the specified standard device (standard input, standard output, or standard error).

Args:
    handle (int): Integer identifier for the handle. Defaults to -11 (stdout).

Returns:
    wintypes.HANDLE: The handle
:::
:::{doc} GetConsoleMode:94
Retrieves the current input mode of a console's input buffer
or the current output mode of a console screen buffer.

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.

Raises:
    LegacyWindowsError: If any error occurs while calling the Windows console API.

Returns:
    int: Value representing the current console mode as documented at
        https://docs.microsoft.com/en-us/windows/console/getconsolemode#parameters
:::
:::{doc} FillConsoleOutputCharacter:127
Writes a character to the console screen buffer a specified number of times, beginning at the specified coordinates.

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
    char (str): The character to write. Must be a string of length 1.
    length (int): The number of times to write the character.
    start (WindowsCoordinates): The coordinates to start writing at.

Returns:
    int: The number of characters written.
:::
:::{doc} FillConsoleOutputAttribute:168
Sets the character attributes for a specified number of character cells,
beginning at the specified coordinates in a screen buffer.

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
    attributes (int): Integer value representing the foreground and background colours of the cells.
    length (int): The number of cells to set the output attribute of.
    start (WindowsCoordinates): The coordinates of the first cell whose attributes are to be set.

Returns:
    int: The number of cells whose attributes were actually set.
:::
:::{doc} SetConsoleTextAttribute:203
Set the colour attributes for all text written after this function is called.

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
    attributes (int): Integer value representing the foreground and background colours.


Returns:
    bool: True if the attribute was set successfully, otherwise False.
:::
:::{doc} GetConsoleScreenBufferInfo:227
Retrieves information about the specified console screen buffer.

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.

Returns:
    CONSOLE_SCREEN_BUFFER_INFO: A CONSOLE_SCREEN_BUFFER_INFO ctype struct contain information about
        screen size, cursor position, colour attributes, and more.
:::
:::{doc} SetConsoleCursorPosition:251
Set the position of the cursor in the console screen

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
    coords (WindowsCoordinates): The coordinates to move the cursor to.

Returns:
    bool: True if the function succeeds, otherwise False.
:::
:::{doc} GetConsoleCursorInfo:274
Get the cursor info - used to get cursor visibility and width

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
    cursor_info (CONSOLE_CURSOR_INFO): CONSOLE_CURSOR_INFO ctype struct that receives information
        about the console's cursor.

Returns:
      bool: True if the function succeeds, otherwise False.
:::
:::{doc} SetConsoleCursorInfo:298
Set the cursor info - used for adjusting cursor visibility and width

Args:
    std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
    cursor_info (CONSOLE_CURSOR_INFO): CONSOLE_CURSOR_INFO ctype struct containing the new cursor info.

Returns:
      bool: True if the function succeeds, otherwise False.
:::
:::{doc} SetConsoleTitle:318
Sets the title of the current console window

Args:
    title (str): The new title of the console window.

Returns:
    bool: True if the function succeeds, otherwise False.
:::
:::{doc} LegacyWindowsTerm:330
This class allows interaction with the legacy Windows Console API. It should only be used in the context
of environments where virtual terminal processing is not available. However, if it is used in a Windows environment,
the entire API should work.

Args:
    file (IO[str]): The file which the Windows Console API HANDLE is retrieved from, defaults to sys.stdout.
:::
**Imports**: `ctypes`, `sys`, `typing.Any`, `time`, `ctypes.Structure`, `ctypes.byref`, `ctypes.wintypes`, `typing.IO`, `typing.NamedTuple`, `typing.Type`, `typing.cast`, `pip._vendor.rich.color.ColorSystem`, `pip._vendor.rich.style.Style`, `pip._vendor.rich.console.Console`
**Type References**: [[Any]], [[CONSOLE_CURSOR_INFO]], [[CONSOLE_SCREEN_BUFFER_INFO]], [[COORD]], [[LegacyWindowsError]], [[LegacyWindowsTerm]], [[WindowsCoordinates]]

### Interface
- `GetStdHandle`(handle: int) -> wintypes.HANDLE
- `GetConsoleMode`(std_handle: wintypes.HANDLE) -> int
- `FillConsoleOutputCharacter`(std_handle: wintypes.HANDLE, char: str, length: int, start: WindowsCoordinates) -> int
- `FillConsoleOutputAttribute`(std_handle: wintypes.HANDLE, attributes: int, length: int, start: WindowsCoordinates) -> int
- `SetConsoleTextAttribute`(std_handle: wintypes.HANDLE, attributes: wintypes.WORD) -> bool
- `GetConsoleScreenBufferInfo`(std_handle: wintypes.HANDLE) -> CONSOLE_SCREEN_BUFFER_INFO
- `SetConsoleCursorPosition`(std_handle: wintypes.HANDLE, coords: WindowsCoordinates) -> bool
- `GetConsoleCursorInfo`(std_handle: wintypes.HANDLE, cursor_info: CONSOLE_CURSOR_INFO) -> bool
- `SetConsoleCursorInfo`(std_handle: wintypes.HANDLE, cursor_info: CONSOLE_CURSOR_INFO) -> bool
- `SetConsoleTitle`(title: str) -> bool
- `from_param`(value: WindowsCoordinates) -> COORD
- `__init__`(file: IO[str]) -> None
- `cursor_position`() -> WindowsCoordinates
- `screen_size`() -> WindowsCoordinates
- `write_text`(text: str) -> None
- `write_styled`(text: str, style: Style) -> None
- `move_cursor_to`(new_position: WindowsCoordinates) -> None
- `erase_line`() -> None
- `erase_end_of_line`() -> None
- `erase_start_of_line`() -> None
- `move_cursor_up`() -> None
- `move_cursor_down`() -> None
- `move_cursor_forward`() -> None
- `move_cursor_to_column`(column: int) -> None
- `move_cursor_backward`() -> None
- `hide_cursor`() -> None
- `show_cursor`() -> None
- `set_title`(title: str) -> None
- `_get_cursor_size`() -> int

### Implementation
**LegacyWindowsError**

**WindowsCoordinates**
  - row: int
  - col: int
**CONSOLE_SCREEN_BUFFER_INFO**

**CONSOLE_CURSOR_INFO**

**LegacyWindowsTerm**
  - coord: COORD
  - screen_size: COORD
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_win32_console.py`  
**Dependencies**: `ctypes`, `sys`, `typing.Any`, `time`, `ctypes.Structure`, `ctypes.byref`, `ctypes.wintypes`, `typing.IO`, `typing.NamedTuple`, `typing.Type`, `typing.cast`, `pip._vendor.rich.color.ColorSystem`, `pip._vendor.rich.style.Style`, `pip._vendor.rich.console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.panel
:::{doc} Panel:17
A console renderable that draws a border around its contents.

Example:
    >>> console.print(Panel("Hello, World!"))

Args:
    renderable (RenderableType): A console renderable object.
    box (Box, optional): A Box instance that defines the look of the border (see :ref:`appendix_box`.
        Defaults to box.ROUNDED.
    safe_box (bool, optional): Disable box characters that don't display on windows legacy terminal with *raster* fonts. Defaults to True.
    expand (bool, optional): If True the panel will stretch to fill the console
        width, otherwise it will be sized to fit the contents. Defaults to True.
    style (str, optional): The style of the panel (border and contents). Defaults to "none".
    border_style (str, optional): The style of the border. Defaults to "none".
    width (Optional[int], optional): Optional width of panel. Defaults to None to auto-detect.
    height (Optional[int], optional): Optional height of panel. Defaults to None to auto-detect.
    padding (Optional[PaddingDimensions]): Optional padding around renderable. Defaults to 0.
    highlight (bool, optional): Enable automatic highlighting of panel title (if str). Defaults to False.
:::
**Imports**: `typing.TYPE_CHECKING`, `typing.Optional`, `align.AlignMethod`, `box.ROUNDED`, `box.Box`, `cells.cell_len`, `jupyter.JupyterMixin`, `measure.Measurement`, `measure.measure_renderables`, `padding.Padding`, `padding.PaddingDimensions`, `segment.Segment`, `style.Style`, `style.StyleType`, `text.Text`, `text.TextType`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `console.Console`, `box.DOUBLE`, `box.ROUNDED`, `padding.Padding`
**Type References**: [[Panel]]

### Interface
- `__init__`(renderable: RenderableType, box: Box) -> None
- `fit`(renderable: RenderableType, box: Box) -> Panel
- `_title`() -> [Optional[Text]](#optional)
- `_subtitle`() -> [Optional[Text]](#optional)
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `align_text`(text: Text, width: int, align: str, character: str, style: Style) -> Text

### Implementation
**Panel**
  - safe_box: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/panel.py`  
**Dependencies**: `typing.TYPE_CHECKING`, `typing.Optional`, `align.AlignMethod`, `box.ROUNDED`, `box.Box`, `cells.cell_len`, `jupyter.JupyterMixin`, `measure.Measurement`, `measure.measure_renderables`, `padding.Padding`, `padding.PaddingDimensions`, `segment.Segment`, `style.Style`, `style.StyleType`, `text.Text`, `text.TextType`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `console.Console`, `box.DOUBLE`, `box.ROUNDED`, `padding.Padding`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.styled
:::{doc} Styled:11
Apply a style to a renderable.

Args:
    renderable (RenderableType): Any renderable.
    style (StyleType): A style to apply across the entire renderable.
:::
**Imports**: `typing.TYPE_CHECKING`, `measure.Measurement`, `segment.Segment`, `style.StyleType`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `console.RenderableType`, `pip._vendor.rich.print`, `pip._vendor.rich.panel.Panel`
**Type References**: [[Styled]]

### Interface
- `__init__`(renderable: RenderableType, style: StyleType) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement

### Implementation
**Styled**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/styled.py`  
**Dependencies**: `typing.TYPE_CHECKING`, `measure.Measurement`, `segment.Segment`, `style.StyleType`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `console.RenderableType`, `pip._vendor.rich.print`, `pip._vendor.rich.panel.Panel`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.spinner
:::{doc} Spinner:13
A spinner animation.

Args:
    name (str): Name of spinner (run python -m rich.spinner).
    text (RenderableType, optional): A renderable to display at the right of the spinner (str or Text typically). Defaults to "".
    style (StyleType, optional): Style for spinner animation. Defaults to None.
    speed (float, optional): Speed factor for animation. Defaults to 1.0.

Raises:
    KeyError: If name isn't one of the supported spinner animations.
:::
**Imports**: `typing.cast`, `typing.List`, `typing.Optional`, `typing.TYPE_CHECKING`, `typing.Union`, `_spinners.SPINNERS`, `measure.Measurement`, `table.Table`, `text.Text`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `console.RenderableType`, `style.StyleType`, `time.sleep`, `columns.Columns`, `panel.Panel`, `live.Live`
**Type References**: [[Spinner]]

### Interface
- `__init__`(name: str, text: RenderableType) -> None
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `render`(time: float) -> RenderableType
- `update`() -> None

### Implementation
**Spinner**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/spinner.py`  
**Dependencies**: `typing.cast`, `typing.List`, `typing.Optional`, `typing.TYPE_CHECKING`, `typing.Union`, `_spinners.SPINNERS`, `measure.Measurement`, `table.Table`, `text.Text`, `console.Console`, `console.ConsoleOptions`, `console.RenderResult`, `console.RenderableType`, `style.StyleType`, `time.sleep`, `columns.Columns`, `panel.Panel`, `live.Live`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._windows_renderer
:::{doc} legacy_windows_render:7
Makes appropriate Windows Console API calls based on the segments in the buffer.

Args:
    buffer (Iterable[Segment]): Iterable of Segments to convert to Win32 API calls.
    term (LegacyWindowsTerm): Used to call the Windows Console API.
:::
**Imports**: `typing.Iterable`, `typing.Sequence`, `typing.Tuple`, `typing.cast`, `pip._vendor.rich._win32_console.LegacyWindowsTerm`, `pip._vendor.rich._win32_console.WindowsCoordinates`, `pip._vendor.rich.segment.ControlCode`, `pip._vendor.rich.segment.ControlType`, `pip._vendor.rich.segment.Segment`
**Type References**: [[Sequence]]

### Interface
- `legacy_windows_render`(buffer: Iterable[Segment], term: LegacyWindowsTerm) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_windows_renderer.py`  
**Dependencies**: `typing.Iterable`, `typing.Sequence`, `typing.Tuple`, `typing.cast`, `pip._vendor.rich._win32_console.LegacyWindowsTerm`, `pip._vendor.rich._win32_console.WindowsCoordinates`, `pip._vendor.rich.segment.ControlCode`, `pip._vendor.rich.segment.ControlType`, `pip._vendor.rich.segment.Segment`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.json
:::{doc} JSON:9
A renderable which pretty prints JSON.

Args:
    json (str): JSON encoded data.
    indent (Union[None, int, str], optional): Number of characters to indent by. Defaults to 2.
    highlight (bool, optional): Enable highlighting. Defaults to True.
    skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.
    ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.
    check_circular (bool, optional): Check for circular references. Defaults to True.
    allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.
    default (Callable, optional): A callable that converts values that can not be encoded
        in to something that can be JSON encoded. Defaults to None.
    sort_keys (bool, optional): Sort dictionary keys. Defaults to False.
:::
**Imports**: `pathlib.Path`, `json.loads`, `json.dumps`, `typing.Any`, `typing.Callable`, `typing.Optional`, `typing.Union`, `text.Text`, `highlighter.JSONHighlighter`, `highlighter.NullHighlighter`, `argparse`, `sys`, `pip._vendor.rich.console.Console`
**Type References**: [[JSON]]

### Interface
- `__init__`(json: str, indent: [Union[<ast.Tuple object at 0x163543010>]](#union), highlight: bool, skip_keys: bool, ensure_ascii: bool, check_circular: bool, allow_nan: bool, default: [Optional[Callable[<ast.Tuple object at 0x163542650>]]](#optional), sort_keys: bool) -> None
- `from_data`(data: Any, indent: [Union[<ast.Tuple object at 0x163527b90>]](#union), highlight: bool, skip_keys: bool, ensure_ascii: bool, check_circular: bool, allow_nan: bool, default: [Optional[Callable[<ast.Tuple object at 0x16353f8d0>]]](#optional), sort_keys: bool) -> JSON
- `__rich__`() -> Text

### Implementation
**JSON**
  - json_instance: JSON
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/json.py`  
**Dependencies**: `pathlib.Path`, `json.loads`, `json.dumps`, `typing.Any`, `typing.Callable`, `typing.Optional`, `typing.Union`, `text.Text`, `highlighter.JSONHighlighter`, `highlighter.NullHighlighter`, `argparse`, `sys`, `pip._vendor.rich.console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.padding
:::{doc} Padding:19
Draw space around content.

Example:
    >>> print(Padding("Hello", (2, 4), style="on blue"))

Args:
    renderable (RenderableType): String or other renderable.
    pad (Union[int, Tuple[int]]): Padding for top, right, bottom, and left borders.
        May be specified with 1, 2, or 4 integers (CSS style).
    style (Union[str, Style], optional): Style for padding characters. Defaults to "none".
    expand (bool, optional): Expand padding to fit available width. Defaults to True.
:::
**Imports**: `typing.cast`, `typing.List`, `typing.Optional`, `typing.Tuple`, `typing.TYPE_CHECKING`, `typing.Union`, `jupyter.JupyterMixin`, `measure.Measurement`, `style.Style`, `segment.Segment`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `pip._vendor.rich.print`
**Type References**: [[Optional]], [[Padding]]

### Interface
- `__init__`(renderable: RenderableType, pad: PaddingDimensions) -> Any
- `indent`(renderable: RenderableType, level: int) -> Padding
- `unpack`(pad: PaddingDimensions) -> Tuple[<ast.Tuple object at 0x163557990>]
- `__repr__`() -> str
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement

### Implementation
**Padding**
  - blank_line: Optional[List[Segment]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/padding.py`  
**Dependencies**: `typing.cast`, `typing.List`, `typing.Optional`, `typing.Tuple`, `typing.TYPE_CHECKING`, `typing.Union`, `jupyter.JupyterMixin`, `measure.Measurement`, `style.Style`, `segment.Segment`, `console.Console`, `console.ConsoleOptions`, `console.RenderableType`, `console.RenderResult`, `pip._vendor.rich.print`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.__main__
:::{doc} make_test_card:39
Get a renderable that demonstrates a number of features.
:::
**Imports**: `colorsys`, `io`, `time.process_time`, `pip._vendor.rich.box`, `pip._vendor.rich.color.Color`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.console.ConsoleOptions`, `pip._vendor.rich.console.Group`, `pip._vendor.rich.console.RenderableType`, `pip._vendor.rich.console.RenderResult`, `pip._vendor.rich.markdown.Markdown`, `pip._vendor.rich.measure.Measurement`, `pip._vendor.rich.pretty.Pretty`, `pip._vendor.rich.segment.Segment`, `pip._vendor.rich.style.Style`, `pip._vendor.rich.syntax.Syntax`, `pip._vendor.rich.table.Table`, `pip._vendor.rich.text.Text`, `pip._vendor.rich.panel.Panel`
**Type References**: [[ColorBox]]

### Interface
- `make_test_card`() -> Table
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `__rich_measure__`(console: Console, options: ConsoleOptions) -> Measurement
- `comparison`(renderable1: RenderableType, renderable2: RenderableType) -> Table

### Implementation
**ColorBox**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/__main__.py`  
**Dependencies**: `colorsys`, `io`, `time.process_time`, `pip._vendor.rich.box`, `pip._vendor.rich.color.Color`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.console.ConsoleOptions`, `pip._vendor.rich.console.Group`, `pip._vendor.rich.console.RenderableType`, `pip._vendor.rich.console.RenderResult`, `pip._vendor.rich.markdown.Markdown`, `pip._vendor.rich.measure.Measurement`, `pip._vendor.rich.pretty.Pretty`, `pip._vendor.rich.segment.Segment`, `pip._vendor.rich.style.Style`, `pip._vendor.rich.syntax.Syntax`, `pip._vendor.rich.table.Table`, `pip._vendor.rich.text.Text`, `pip._vendor.rich.panel.Panel`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.scope
:::{doc} render_scope:14
Render python variables in a given scope.

Args:
    scope (Mapping): A mapping containing variable names and values.
    title (str, optional): Optional title. Defaults to None.
    sort_keys (bool, optional): Enable sorting of items. Defaults to True.
    indent_guides (bool, optional): Enable indentation guides. Defaults to False.
    max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
        Defaults to None.
    max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.

Returns:
    ConsoleRenderable: A renderable object.
:::
**Imports**: `collections.abc.Mapping`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Optional`, `typing.Tuple`, `highlighter.ReprHighlighter`, `panel.Panel`, `pretty.Pretty`, `table.Table`, `text.Text`, `text.TextType`, `console.ConsoleRenderable`, `pip._vendor.rich.print`
### Interface
- `render_scope`(scope: Mapping[str, Any]) -> ConsoleRenderable
- `sort_items`(item: Tuple[<ast.Tuple object at 0x1635cd2d0>]) -> Tuple[<ast.Tuple object at 0x1635cc390>]
- `test`(foo: float, bar: float) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/scope.py`  
**Dependencies**: `collections.abc.Mapping`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Optional`, `typing.Tuple`, `highlighter.ReprHighlighter`, `panel.Panel`, `pretty.Pretty`, `table.Table`, `text.Text`, `text.TextType`, `console.ConsoleRenderable`, `pip._vendor.rich.print`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich._extension

**Imports**: `typing.Any`, `pip._vendor.rich.pretty.install`, `pip._vendor.rich.traceback.install`
### Interface
- `load_ipython_extension`(ip: Any) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/_extension.py`  
**Dependencies**: `typing.Any`, `pip._vendor.rich.pretty.install`, `pip._vendor.rich.traceback.install`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.status
:::{doc} Status:11
Displays a status indicator with a 'spinner' animation.

Args:
    status (RenderableType): A status renderable (str or Text typically).
    console (Console, optional): Console instance to use, or None for global console. Defaults to None.
    spinner (str, optional): Name of spinner animation (see python -m rich.spinner). Defaults to "dots".
    spinner_style (StyleType, optional): Style of spinner. Defaults to "status.spinner".
    speed (float, optional): Speed factor for spinner animation. Defaults to 1.0.
    refresh_per_second (float, optional): Number of refreshes per second. Defaults to 12.5.
:::
**Imports**: `types.TracebackType`, `typing.Optional`, `typing.Type`, `console.Console`, `console.RenderableType`, `jupyter.JupyterMixin`, `live.Live`, `spinner.Spinner`, `style.StyleType`, `time.sleep`, `console.Console`
**Type References**: [[Status]]

### Interface
- `__init__`(status: RenderableType) -> Any
- `renderable`() -> Spinner
- `console`() -> Console
- `update`(status: [Optional[RenderableType]](#optional)) -> None
- `start`() -> None
- `stop`() -> None
- `__rich__`() -> RenderableType
- `__enter__`() -> Status
- `__exit__`(exc_type: [Optional[Type[BaseException]]](#optional), exc_val: [Optional[BaseException]](#optional), exc_tb: [Optional[TracebackType]](#optional)) -> None

### Implementation
**Status**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/status.py`  
**Dependencies**: `types.TracebackType`, `typing.Optional`, `typing.Type`, `console.Console`, `console.RenderableType`, `jupyter.JupyterMixin`, `live.Live`, `spinner.Spinner`, `style.StyleType`, `time.sleep`, `console.Console`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.abc
:::{doc} RichRenderable:4
An abstract base class for Rich renderables.

Note that there is no need to extend this class, the intended use is to check if an
object supports the Rich renderable protocol. For example::

    if isinstance(my_object, RichRenderable):
        console.print(my_object)
:::
**Imports**: `abc.ABC`, `pip._vendor.rich.text.Text`
**Type References**: [[Foo]], [[RichRenderable]]

### Interface
- `__subclasshook__`(other: type) -> bool

### Implementation
**RichRenderable**

**Foo**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/abc.py`  
**Dependencies**: `abc.ABC`, `pip._vendor.rich.text.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.jupyter
:::{doc} JupyterRenderable:18
A shim to write html to Jupyter notebook.
:::
:::{doc} JupyterMixin:36
Add to an Rich renderable to make it render in Jupyter notebook.
:::
:::{doc} display:84
Render segments to Jupyter.
:::
:::{doc} print:98
Proxy for Console print.
:::
**Imports**: `typing.TYPE_CHECKING`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Sequence`, `get_console`, `segment.Segment`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `pip._vendor.rich.console.ConsoleRenderable`, `pip._vendor.rich.console.ConsoleRenderable`, `IPython.display.display`
**Type References**: [[JupyterMixin]], [[JupyterRenderable]], [[List]]

### Interface
- `_render_segments`(segments: Iterable[Segment]) -> str
- `display`(segments: Iterable[Segment], text: str) -> None
- `print`() -> None
- `__init__`(html: str, text: str) -> None
- `_repr_mimebundle_`(self: ConsoleRenderable, include: Sequence[str], exclude: Sequence[str]) -> [Dict[<ast.Tuple object at 0x16360bf10>]](#dict)
- `escape`(text: str) -> str

### Implementation
**JupyterRenderable**

**JupyterMixin**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/jupyter.py`  
**Dependencies**: `typing.TYPE_CHECKING`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Sequence`, `get_console`, `segment.Segment`, `terminal_theme.DEFAULT_TERMINAL_THEME`, `pip._vendor.rich.console.ConsoleRenderable`, `pip._vendor.rich.console.ConsoleRenderable`, `IPython.display.display`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.rich.color_triplet
:::{doc} ColorTriplet:4
The red, green, and blue components of a color.
:::
**Imports**: `typing.NamedTuple`, `typing.Tuple`
**Type References**: [[ColorTriplet]]

### Interface
- `hex`() -> str
- `rgb`() -> str
- `normalized`() -> Tuple[<ast.Tuple object at 0x16362c550>]

### Implementation
**ColorTriplet**
  - red: int
  - green: int
  - blue: int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/rich/color_triplet.py`  
**Dependencies**: `typing.NamedTuple`, `typing.Tuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.filepost
:::{doc} choose_boundary:15
Our embarrassingly-simple replacement for mimetools.choose_boundary.
:::
:::{doc} iter_field_objects:25
Iterate over fields.

Supports list of (k, v) tuples and dicts, and lists of
:class:`~urllib3.fields.RequestField`.
:::
:::{doc} iter_fields:45
.. deprecated:: 1.6

Iterate over fields.

The addition of :class:`~urllib3.fields.RequestField` makes this function
obsolete. Instead, use :func:`iter_field_objects`, which returns
:class:`~urllib3.fields.RequestField` objects.

Supports list of (k, v) tuples and dicts.
:::
:::{doc} encode_multipart_formdata:63
Encode a dictionary of ``fields`` using the multipart/form-data MIME format.

:param fields:
    Dictionary of fields or list of (key, :class:`~urllib3.fields.RequestField`).

:param boundary:
    If not specified, then a random boundary will be generated using
    :func:`urllib3.filepost.choose_boundary`.
:::
**Imports**: `__future__.absolute_import`, `binascii`, `codecs`, `os`, `io.BytesIO`, `fields.RequestField`, `packages.six`, `packages.six.b`
### Interface
- `choose_boundary`() -> Any
- `iter_field_objects`() -> Any
- `iter_fields`() -> Any
- `encode_multipart_formdata`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/filepost.py`  
**Dependencies**: `__future__.absolute_import`, `binascii`, `codecs`, `os`, `io.BytesIO`, `fields.RequestField`, `packages.six`, `packages.six.b`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.fields
:::{doc} guess_content_type:10
Guess the "Content-Type" of a file.

:param filename:
    The filename to guess the "Content-Type" of using :mod:`mimetypes`.
:param default:
    If no "Content-Type" can be guessed, default to `default`.
:::
:::{doc} format_header_param_rfc2231:24
Helper function to format and quote a single header parameter using the
strategy defined in RFC 2231.

Particularly useful for header parameters which might contain
non-ASCII values, like file names. This follows
`RFC 2388 Section 4.4 <https://tools.ietf.org/html/rfc2388#section-4.4>`_.

:param name:
    The name of the parameter, a string expected to be ASCII only.
:param value:
    The value of the parameter, provided as ``bytes`` or `str``.
:ret:
    An RFC-2231-formatted unicode string.
:::
:::{doc} format_header_param_html5:95
Helper function to format and quote a single header parameter using the
HTML5 strategy.

Particularly useful for header parameters which might contain
non-ASCII values, like file names. This follows the `HTML5 Working Draft
Section 4.10.22.7`_ and matches the behavior of curl and modern browsers.

.. _HTML5 Working Draft Section 4.10.22.7:
    https://w3c.github.io/html/sec-forms.html#multipart-form-data

:param name:
    The name of the parameter, a string expected to be ASCII only.
:param value:
    The value of the parameter, provided as ``bytes`` or `str``.
:ret:
    A unicode string, stripped of troublesome characters.
:::
:::{doc} RequestField:126
A data container for request body parameters.

:param name:
    The name of this request field. Must be unicode.
:param data:
    The data/value body.
:param filename:
    An optional filename of the request field. Must be unicode.
:param headers:
    An optional dict-like object of headers to initially use for the field.
:param header_formatter:
    An optional callable that is used to encode and format the headers. By
    default, this is :func:`format_header_param_html5`.
:::
**Imports**: `__future__.absolute_import`, `email.utils`, `mimetypes`, `re`, `packages.six`
**Type References**: [[RequestField]]

### Interface
- `guess_content_type`() -> Any
- `format_header_param_rfc2231`() -> Any
- `_replace_multiple`() -> Any
- `format_header_param_html5`() -> Any
- `replacer`() -> Any
- `__init__`() -> Any
- `from_tuples`() -> Any
- `_render_part`() -> Any
- `_render_parts`() -> Any
- `render_headers`() -> Any
- `make_multipart`() -> Any

### Implementation
**RequestField**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/fields.py`  
**Dependencies**: `__future__.absolute_import`, `email.utils`, `mimetypes`, `re`, `packages.six`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3._version



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/_version.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.request
:::{doc} RequestMethods:12
Convenience mixin for classes who implement a :meth:`urlopen` method, such
as :class:`urllib3.HTTPConnectionPool` and
:class:`urllib3.PoolManager`.

Provides behavior for making common types of HTTP request methods and
decides which type of request field encoding to use.

Specifically,

:meth:`.request_encode_url` is for sending requests whose fields are
encoded in the URL (such as GET, HEAD, DELETE).

:meth:`.request_encode_body` is for sending requests whose fields are
encoded in the *body* of the request using multipart or www-form-urlencoded
(such as for POST, PUT, PATCH).

:meth:`.request` is for making any kind of request, it will look up the
appropriate encoding format and use one of the above two methods to make
the request.

Initializer parameters:

:param headers:
    Headers to include with all requests, unless other headers are given
    explicitly.
:::
**Imports**: `__future__.absolute_import`, `sys`, `filepost.encode_multipart_formdata`, `packages.six`, `packages.six.moves.urllib.parse.urlencode`
**Type References**: [[RequestMethods]], [[RequestModule]]

### Interface
- `__init__`() -> Any
- `urlopen`() -> Any
- `request`() -> Any
- `request_encode_url`() -> Any
- `request_encode_body`() -> Any
- `__call__`() -> Any

### Implementation
**RequestMethods**

**RequestModule**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/request.py`  
**Dependencies**: `__future__.absolute_import`, `sys`, `filepost.encode_multipart_formdata`, `packages.six`, `packages.six.moves.urllib.parse.urlencode`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3
:::{doc} add_stderr_logger:63
Helper for quickly adding a StreamHandler to the logger. Useful for
debugging.

Returns the handler after adding it.
:::
:::{doc} disable_warnings:98
Helper for quickly disabling all urllib3 warnings.
:::
**Imports**: `__future__.absolute_import`, `logging`, `warnings`, `logging.NullHandler`, `exceptions`, `_version.__version__`, `connectionpool.HTTPConnectionPool`, `connectionpool.HTTPSConnectionPool`, `connectionpool.connection_from_url`, `filepost.encode_multipart_formdata`, `poolmanager.PoolManager`, `poolmanager.ProxyManager`, `poolmanager.proxy_from_url`, `response.HTTPResponse`, `util.request.make_headers`, `util.retry.Retry`, `util.timeout.Timeout`, `util.url.get_host`, `urllib3_secure_extra`
### Interface
- `add_stderr_logger`() -> Any
- `disable_warnings`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/__init__.py`  
**Dependencies**: `__future__.absolute_import`, `logging`, `warnings`, `logging.NullHandler`, `exceptions`, `_version.__version__`, `connectionpool.HTTPConnectionPool`, `connectionpool.HTTPSConnectionPool`, `connectionpool.connection_from_url`, `filepost.encode_multipart_formdata`, `poolmanager.PoolManager`, `poolmanager.ProxyManager`, `poolmanager.proxy_from_url`, `response.HTTPResponse`, `util.request.make_headers`, `util.retry.Retry`, `util.timeout.Timeout`, `util.url.get_host`, `urllib3_secure_extra`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.poolmanager
:::{doc} _default_key_normalizer:79
Create a pool key out of a request context dictionary.

According to RFC 3986, both the scheme and host are case-insensitive.
Therefore, this function normalizes both before constructing the pool
key for an HTTPS request. If you wish to change this behaviour, provide
alternate callables to ``key_fn_by_scheme``.

:param key_class:
    The class to use when constructing the key. This should be a namedtuple
    with the ``scheme`` and ``host`` keys at a minimum.
:type  key_class: namedtuple
:param request_context:
    A dictionary-like object that contain the context for a request.
:type  request_context: dict

:return: A namedtuple that can be used as a connection pool key.
:rtype:  PoolKey
:::
:::{doc} PoolManager:140
Allows for arbitrary requests while transparently keeping track of
necessary connection pools for you.

:param num_pools:
    Number of connection pools to cache before discarding the least
    recently used pool.

:param headers:
    Headers to include with all requests, unless other headers are given
    explicitly.

:param \**connection_pool_kw:
    Additional parameters are used to create fresh
    :class:`urllib3.connectionpool.ConnectionPool` instances.

Example::

    >>> manager = PoolManager(num_pools=2)
    >>> r = manager.request('GET', 'http://google.com/')
    >>> r = manager.request('GET', 'http://google.com/mail')
    >>> r = manager.request('GET', 'http://yahoo.com/')
    >>> len(manager.pools)
    2
:::
:::{doc} ProxyManager:424
Behaves just like :class:`PoolManager`, but sends all requests through
the defined proxy, using the CONNECT method for HTTPS URLs.

:param proxy_url:
    The URL of the proxy to be used.

:param proxy_headers:
    A dictionary containing headers that will be sent to the proxy. In case
    of HTTP they are being sent with each request, while in the
    HTTPS/CONNECT case they are sent only once. Could be used for proxy
    authentication.

:param proxy_ssl_context:
    The proxy SSL context is used to establish the TLS connection to the
    proxy when using HTTPS proxies.

:param use_forwarding_for_https:
    (Defaults to False) If set to True will forward requests to the HTTPS
    proxy to be made on behalf of the client instead of creating a TLS
    tunnel via the CONNECT method. **Enabling this flag means that request
    and response headers and content will be visible from the HTTPS proxy**
    whereas tunneling keeps request and response headers and content
    private.  IP address, target hostname, SNI, and port are always visible
    to an HTTPS proxy even when this flag is disabled.

Example:
    >>> proxy = urllib3.ProxyManager('http://localhost:3128/')
    >>> r1 = proxy.request('GET', 'http://google.com/')
    >>> r2 = proxy.request('GET', 'http://httpbin.org/')
    >>> len(proxy.pools)
    1
    >>> r3 = proxy.request('GET', 'https://httpbin.org/')
    >>> r4 = proxy.request('GET', 'https://twitter.com/')
    >>> len(proxy.pools)
    3
:::
**Imports**: `__future__.absolute_import`, `collections`, `functools`, `logging`, `_collections.HTTPHeaderDict`, `_collections.RecentlyUsedContainer`, `connectionpool.HTTPConnectionPool`, `connectionpool.HTTPSConnectionPool`, `connectionpool.port_by_scheme`, `exceptions.LocationValueError`, `exceptions.MaxRetryError`, `exceptions.ProxySchemeUnknown`, `exceptions.ProxySchemeUnsupported`, `exceptions.URLSchemeUnknown`, `packages.six`, `packages.six.moves.urllib.parse.urljoin`, `request.RequestMethods`, `util.proxy.connection_requires_http_tunnel`, `util.retry.Retry`, `util.url.parse_url`
**Type References**: [[PoolManager]], [[ProxyManager]]

### Interface
- `_default_key_normalizer`() -> Any
- `proxy_from_url`() -> Any
- `__init__`() -> Any
- `__enter__`() -> Any
- `__exit__`() -> Any
- `_new_pool`() -> Any
- `clear`() -> Any
- `connection_from_host`() -> Any
- `connection_from_context`() -> Any
- `connection_from_pool_key`() -> Any
- `connection_from_url`() -> Any
- `_merge_pool_kwargs`() -> Any
- `_proxy_requires_url_absolute_form`() -> Any
- `_validate_proxy_scheme_url_selection`() -> Any
- `urlopen`() -> Any
- `_set_proxy_headers`() -> Any

### Implementation
**PoolManager**

**ProxyManager**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/poolmanager.py`  
**Dependencies**: `__future__.absolute_import`, `collections`, `functools`, `logging`, `_collections.HTTPHeaderDict`, `_collections.RecentlyUsedContainer`, `connectionpool.HTTPConnectionPool`, `connectionpool.HTTPSConnectionPool`, `connectionpool.port_by_scheme`, `exceptions.LocationValueError`, `exceptions.MaxRetryError`, `exceptions.ProxySchemeUnknown`, `exceptions.ProxySchemeUnsupported`, `exceptions.URLSchemeUnknown`, `packages.six`, `packages.six.moves.urllib.parse.urljoin`, `request.RequestMethods`, `util.proxy.connection_requires_http_tunnel`, `util.retry.Retry`, `util.url.parse_url`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.response
:::{doc} MultiDecoder:123
From RFC7231:
    If one or more encodings have been applied to a representation, the
    sender that applied the encodings MUST generate a Content-Encoding
    header field that lists the content codings in the order in which
    they were applied.
:::
:::{doc} HTTPResponse:157
HTTP Response container.

Backwards-compatible with :class:`http.client.HTTPResponse` but the response ``body`` is
loaded and decoded on-demand when the ``data`` property is accessed.  This
class is also compatible with the Python standard library's :mod:`io`
module, and can hence be treated as a readable object in the context of that
framework.

Extra parameters for behaviour not present in :class:`http.client.HTTPResponse`:

:param preload_content:
    If True, the response's body will be preloaded during construction.

:param decode_content:
    If True, will attempt to decode the body based on the
    'content-encoding' header.

:param original_response:
    When this HTTPResponse wrapper is generated from an :class:`http.client.HTTPResponse`
    object, it's convenient to include the original for debug purposes. It's
    otherwise unused.

:param retries:
    The retries contains the last :class:`~urllib3.util.retry.Retry` that
    was used during the request.

:param enforce_content_length:
    Enforce content length checking. Body returned by server must match
    value of Content-Length header, if present. Otherwise, raise error.
:::
**Imports**: `__future__.absolute_import`, `io`, `logging`, `sys`, `warnings`, `zlib`, `contextlib.contextmanager`, `socket.error`, `socket.timeout`, `util`, `_collections.HTTPHeaderDict`, `connection.BaseSSLError`, `connection.HTTPException`, `exceptions.BodyNotHttplibCompatible`, `exceptions.DecodeError`, `exceptions.HTTPError`, `exceptions.IncompleteRead`, `exceptions.InvalidChunkLength`, `exceptions.InvalidHeader`, `exceptions.ProtocolError`, `exceptions.ReadTimeoutError`, `exceptions.ResponseNotChunked`, `exceptions.SSLError`, `packages.six`, `util.response.is_fp_closed`, `util.response.is_response_to_head`
**Type References**: [[BrotliDecoder]], [[DeflateDecoder]], [[GzipDecoder]], [[GzipDecoderState]], [[HTTPResponse]], [[MultiDecoder]]

### Interface
- `_get_decoder`() -> Any
- `__init__`() -> Any
- `__getattr__`() -> Any
- `decompress`() -> Any
- `flush`() -> Any
- `get_redirect_location`() -> Any
- `release_conn`() -> Any
- `drain_conn`() -> Any
- `data`() -> Any
- `connection`() -> Any
- `isclosed`() -> Any
- `tell`() -> Any
- `_init_length`() -> Any
- `_init_decoder`() -> Any
- `_decode`() -> Any
- `_flush_decoder`() -> Any
- `_error_catcher`() -> Any
- `_fp_read`() -> Any
- `read`() -> Any
- `stream`() -> Any
- `from_httplib`() -> Any
- `getheaders`() -> Any
- `getheader`() -> Any
- `info`() -> Any
- `close`() -> Any
- `closed`() -> Any
- `fileno`() -> Any
- `readable`() -> Any
- `readinto`() -> Any
- `supports_chunked_reads`() -> Any
- `_update_chunk_length`() -> Any
- `_handle_chunk`() -> Any
- `read_chunked`() -> Any
- `geturl`() -> Any
- `__iter__`() -> Any

### Implementation
**DeflateDecoder**

**GzipDecoderState**

**GzipDecoder**

**MultiDecoder**

**HTTPResponse**

**BrotliDecoder**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/response.py`  
**Dependencies**: `__future__.absolute_import`, `io`, `logging`, `sys`, `warnings`, `zlib`, `contextlib.contextmanager`, `socket.error`, `socket.timeout`, `util`, `_collections.HTTPHeaderDict`, `connection.BaseSSLError`, `connection.HTTPException`, `exceptions.BodyNotHttplibCompatible`, `exceptions.DecodeError`, `exceptions.HTTPError`, `exceptions.IncompleteRead`, `exceptions.InvalidChunkLength`, `exceptions.InvalidHeader`, `exceptions.ProtocolError`, `exceptions.ReadTimeoutError`, `exceptions.ResponseNotChunked`, `exceptions.SSLError`, `packages.six`, `util.response.is_fp_closed`, `util.response.is_response_to_head`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.connection
:::{doc} HTTPConnection:76
Based on :class:`http.client.HTTPConnection` but provides an extra constructor
backwards-compatibility layer between older and newer Pythons.

Additional keyword parameters are used to configure attributes of the connection.
Accepted parameters include:

- ``strict``: See the documentation on :class:`urllib3.connectionpool.HTTPConnectionPool`
- ``source_address``: Set the source address for the current connection.
- ``socket_options``: Set specific options on the underlying socket. If not specified, then
  defaults are loaded from ``HTTPConnection.default_socket_options`` which includes disabling
  Nagle's algorithm (sets TCP_NODELAY to 1) unless the connection is behind a proxy.

  For example, if you wish to enable TCP Keep Alive in addition to the defaults,
  you might pass:

  .. code-block:: python

     HTTPConnection.default_socket_options + [
         (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1),
     ]

  Or you may want to disable the defaults by passing an empty list (e.g., ``[]``).
:::
:::{doc} HTTPSConnection:286
Many of the parameters to this constructor are passed to the underlying SSL
socket by means of :py:func:`urllib3.util.ssl_wrap_socket`.
:::
:::{doc} DummyConnection:562
Used to detect a failed ConnectionCls import.
:::
**Imports**: `__future__.absolute_import`, `datetime`, `logging`, `os`, `re`, `socket`, `warnings`, `socket.error`, `socket.timeout`, `packages.six`, `packages.six.moves.http_client.HTTPConnection`, `packages.six.moves.http_client.HTTPException`, `util.proxy.create_proxy_ssl_context`, `_collections.HTTPHeaderDict`, `_version.__version__`, `exceptions.ConnectTimeoutError`, `exceptions.NewConnectionError`, `exceptions.SubjectAltNameWarning`, `exceptions.SystemTimeWarning`, `util.SKIP_HEADER`, `util.SKIPPABLE_HEADERS`, `util.connection`, `util.ssl_.assert_fingerprint`, `util.ssl_.create_urllib3_context`, `util.ssl_.is_ipaddress`, `util.ssl_.resolve_cert_reqs`, `util.ssl_.resolve_ssl_version`, `util.ssl_.ssl_wrap_socket`, `util.ssl_match_hostname.CertificateError`, `util.ssl_match_hostname.match_hostname`, `ssl`
**Type References**: [[BaseSSLError]], [[BrokenPipeError]], [[ConnectionError]], [[DummyConnection]], [[HTTPConnection]], [[HTTPSConnection]]

### Interface
- `_match_hostname`() -> Any
- `_get_default_user_agent`() -> Any
- `__init__`() -> Any
- `host`() -> Any
- `_new_conn`() -> Any
- `_is_using_tunnel`() -> Any
- `_prepare_conn`() -> Any
- `connect`() -> Any
- `putrequest`() -> Any
- `putheader`() -> Any
- `request`() -> Any
- `request_chunked`() -> Any
- `set_cert`() -> Any
- `_connect_tls_proxy`() -> Any

### Implementation
**HTTPConnection**

**HTTPSConnection**

**DummyConnection**

**BaseSSLError**

**ConnectionError**

**BrokenPipeError**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/connection.py`  
**Dependencies**: `__future__.absolute_import`, `datetime`, `logging`, `os`, `re`, `socket`, `warnings`, `socket.error`, `socket.timeout`, `packages.six`, `packages.six.moves.http_client.HTTPConnection`, `packages.six.moves.http_client.HTTPException`, `util.proxy.create_proxy_ssl_context`, `_collections.HTTPHeaderDict`, `_version.__version__`, `exceptions.ConnectTimeoutError`, `exceptions.NewConnectionError`, `exceptions.SubjectAltNameWarning`, `exceptions.SystemTimeWarning`, `util.SKIP_HEADER`, `util.SKIPPABLE_HEADERS`, `util.connection`, `util.ssl_.assert_fingerprint`, `util.ssl_.create_urllib3_context`, `util.ssl_.is_ipaddress`, `util.ssl_.resolve_cert_reqs`, `util.ssl_.resolve_ssl_version`, `util.ssl_.ssl_wrap_socket`, `util.ssl_match_hostname.CertificateError`, `util.ssl_match_hostname.match_hostname`, `ssl`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3._collections
:::{doc} RecentlyUsedContainer:31
Provides a thread-safe dict-like container which maintains up to
``maxsize`` keys while throwing away the least-recently-used keys beyond
``maxsize``.

:param maxsize:
    Maximum number of recent elements to retain.

:param dispose_func:
    Every time an item is evicted from the container,
    ``dispose_func(value)`` is called.  Callback which will get called
:::
:::{doc} HTTPHeaderDict:107
:param headers:
    An iterable of field-value pairs. Must not contain multiple field names
    when compared case-insensitively.

:param kwargs:
    Additional field-value pairs to pass in to ``dict.update``.

A ``dict`` like container for storing HTTP Headers.

Field names are stored and compared case-insensitively in compliance with
RFC 7230. Iteration provides the first case-sensitive key seen for each
case-insensitive pair.

Using ``__setitem__`` syntax overwrites fields that compare equal
case-insensitively in order to maintain ``dict``'s api. For fields that
compare equal, instead create a new ``HTTPHeaderDict`` and use ``.add``
in a loop.

If multiple fields that are equal case-insensitively are passed to the
constructor or ``.update``, the behavior is undefined and some will be
lost.

>>> headers = HTTPHeaderDict()
>>> headers.add('Set-Cookie', 'foo=bar')
>>> headers.add('set-cookie', 'baz=quxx')
>>> headers['content-length'] = '7'
>>> headers['SET-cookie']
'foo=bar, baz=quxx'
>>> headers['Content-Length']
'7'
:::
**Imports**: `__future__.absolute_import`, `collections.OrderedDict`, `exceptions.InvalidHeader`, `packages.six`, `packages.six.iterkeys`, `packages.six.itervalues`, `collections.abc.Mapping`, `collections.abc.MutableMapping`, `threading.RLock`, `collections.Mapping`, `collections.MutableMapping`
**Type References**: [[HTTPHeaderDict]], [[RLock]], [[RecentlyUsedContainer]]

### Interface
- `__init__`() -> Any
- `__getitem__`() -> Any
- `__setitem__`() -> Any
- `__delitem__`() -> Any
- `__len__`() -> Any
- `__iter__`() -> Any
- `clear`() -> Any
- `keys`() -> Any
- `__contains__`() -> Any
- `__eq__`() -> Any
- `__ne__`() -> Any
- `pop`() -> Any
- `discard`() -> Any
- `add`() -> Any
- `extend`() -> Any
- `getlist`() -> Any
- `_prepare_for_method_change`() -> Any
- `__repr__`() -> Any
- `_copy_from`() -> Any
- `copy`() -> Any
- `iteritems`() -> Any
- `itermerged`() -> Any
- `items`() -> Any
- `from_httplib`() -> Any
- `__enter__`() -> Any
- `__exit__`() -> Any

### Implementation
**RecentlyUsedContainer**

**HTTPHeaderDict**

**RLock**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/_collections.py`  
**Dependencies**: `__future__.absolute_import`, `collections.OrderedDict`, `exceptions.InvalidHeader`, `packages.six`, `packages.six.iterkeys`, `packages.six.itervalues`, `collections.abc.Mapping`, `collections.abc.MutableMapping`, `threading.RLock`, `collections.Mapping`, `collections.MutableMapping`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.exceptions
:::{doc} HTTPError:8
Base exception used by this module.
:::
:::{doc} HTTPWarning:14
Base warning used by this module.
:::
:::{doc} PoolError:20
Base exception for errors caused within a pool.
:::
:::{doc} RequestError:32
Base exception for PoolErrors that have associated URLs.
:::
:::{doc} SSLError:44
Raised when SSL certificate fails in an HTTPS connection.
:::
:::{doc} ProxyError:50
Raised when the connection to a proxy fails.
:::
:::{doc} DecodeError:58
Raised when automatic decoding based on Content-Type fails.
:::
:::{doc} ProtocolError:64
Raised when something unexpected happens mid-request/response.
:::
:::{doc} MaxRetryError:77
Raised when the maximum number of retries is exceeded.

:param pool: The connection pool
:type pool: :class:`~urllib3.connectionpool.HTTPConnectionPool`
:param string url: The requested Url
:param exceptions.Exception reason: The underlying error
:::
:::{doc} HostChangedError:95
Raised when an existing pool gets a request for a foreign host.
:::
:::{doc} TimeoutStateError:104
Raised when passing an invalid state to a timeout
:::
:::{doc} TimeoutError:110
Raised when a socket timeout error occurs.

Catching this error will catch both :exc:`ReadTimeoutErrors
<ReadTimeoutError>` and :exc:`ConnectTimeoutErrors <ConnectTimeoutError>`.
:::
:::{doc} ReadTimeoutError:120
Raised when a socket timeout occurs while receiving data from a server
:::
:::{doc} ConnectTimeoutError:128
Raised when a socket timeout occurs while connecting to a server
:::
:::{doc} NewConnectionError:134
Raised when we fail to establish a new connection. Usually ECONNREFUSED.
:::
:::{doc} EmptyPoolError:140
Raised when a pool runs out of connections and no more are allowed.
:::
:::{doc} ClosedPoolError:146
Raised when a request enters a pool after the pool has been closed.
:::
:::{doc} LocationValueError:152
Raised when there is something wrong with a given URL input.
:::
:::{doc} LocationParseError:158
Raised when get_host or similar fails to parse the URL input.
:::
:::{doc} URLSchemeUnknown:168
Raised when a URL input has an unsupported scheme.
:::
:::{doc} ResponseError:178
Used as a container for an error reason supplied in a MaxRetryError.
:::
:::{doc} SecurityWarning:185
Warned when performing security reducing actions
:::
:::{doc} SubjectAltNameWarning:191
Warned when connecting to a host with a certificate missing a SAN.
:::
:::{doc} InsecureRequestWarning:197
Warned when making an unverified HTTPS request.
:::
:::{doc} SystemTimeWarning:203
Warned when system time is suspected to be wrong
:::
:::{doc} InsecurePlatformWarning:209
Warned when certain TLS/SSL configuration is not available on a platform.
:::
:::{doc} SNIMissingWarning:215
Warned when making a HTTPS request without SNI available.
:::
:::{doc} DependencyWarning:221
Warned when an attempt is made to import a module with missing optional
dependencies.
:::
:::{doc} ResponseNotChunked:230
Response needs to be chunked in order to read it as chunks.
:::
:::{doc} BodyNotHttplibCompatible:236
Body should be :class:`http.client.HTTPResponse` like
(have an fp attribute which returns raw chunks) for read_chunked().
:::
:::{doc} IncompleteRead:245
Response length doesn't match expected Content-Length

Subclass of :class:`http.client.IncompleteRead` to allow int value
for ``partial`` to avoid creating large objects on streamed reads.
:::
:::{doc} InvalidChunkLength:263
Invalid chunk length in a chunked response.
:::
:::{doc} InvalidHeader:280
The header provided was somehow invalid.
:::
:::{doc} ProxySchemeUnknown:286
ProxyManager does not support the supplied scheme
:::
:::{doc} ProxySchemeUnsupported:306
Fetching HTTPS resources through HTTPS proxies is unsupported
:::
:::{doc} HeaderParsingError:312
Raised by assert_header_parsing, but we convert it to a log.warning statement.
:::
:::{doc} UnrewindableBodyError:320
urllib3 encountered an error when trying to rewind a body
:::
**Imports**: `__future__.absolute_import`, `packages.six.moves.http_client.IncompleteRead`
**Type References**: [[BodyNotHttplibCompatible]], [[ClosedPoolError]], [[ConnectTimeoutError]], [[DecodeError]], [[DependencyWarning]], [[EmptyPoolError]], [[HTTPError]], [[HTTPWarning]], [[HeaderParsingError]], [[HostChangedError]], [[IncompleteRead]], [[InsecurePlatformWarning]], [[InsecureRequestWarning]], [[InvalidChunkLength]], [[InvalidHeader]], [[LocationParseError]], [[LocationValueError]], [[MaxRetryError]], [[NewConnectionError]], [[PoolError]], [[ProtocolError]], [[ProxyError]], [[ProxySchemeUnknown]], [[ProxySchemeUnsupported]], [[ReadTimeoutError]], [[RequestError]], [[ResponseError]], [[ResponseNotChunked]], [[SNIMissingWarning]], [[SSLError]], [[SecurityWarning]], [[SubjectAltNameWarning]], [[SystemTimeWarning]], [[TimeoutError]], [[TimeoutStateError]], [[URLSchemeUnknown]], [[UnrewindableBodyError]]

### Interface
- `__init__`() -> Any
- `__reduce__`() -> Any
- `__repr__`() -> Any

### Implementation
**HTTPError**

**HTTPWarning**

**PoolError**

**RequestError**

**SSLError**

**ProxyError**

**DecodeError**

**ProtocolError**

**MaxRetryError**

**HostChangedError**

**TimeoutStateError**

**TimeoutError**

**ReadTimeoutError**

**ConnectTimeoutError**

**NewConnectionError**

**EmptyPoolError**

**ClosedPoolError**

**LocationValueError**

**LocationParseError**

**URLSchemeUnknown**

**ResponseError**

**SecurityWarning**

**SubjectAltNameWarning**

**InsecureRequestWarning**

**SystemTimeWarning**

**InsecurePlatformWarning**

**SNIMissingWarning**

**DependencyWarning**

**ResponseNotChunked**

**BodyNotHttplibCompatible**

**IncompleteRead**

**InvalidChunkLength**

**InvalidHeader**

**ProxySchemeUnknown**

**ProxySchemeUnsupported**

**HeaderParsingError**

**UnrewindableBodyError**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/exceptions.py`  
**Dependencies**: `__future__.absolute_import`, `packages.six.moves.http_client.IncompleteRead`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.connectionpool
:::{doc} ConnectionPool:69
Base class for all connection pools, such as
:class:`.HTTPConnectionPool` and :class:`.HTTPSConnectionPool`.

.. note::
   ConnectionPool.urlopen() does not normalize or percent-encode target URIs
   which is useful if your target server doesn't support percent-encoded
   target URIs.
:::
:::{doc} HTTPConnectionPool:113
Thread-safe connection pool for one host.

:param host:
    Host used for this HTTP Connection (e.g. "localhost"), passed into
    :class:`http.client.HTTPConnection`.

:param port:
    Port used for this HTTP Connection (None is equivalent to 80), passed
    into :class:`http.client.HTTPConnection`.

:param strict:
    Causes BadStatusLine to be raised if the status line can't be parsed
    as a valid HTTP/1.0 or 1.1 status line, passed into
    :class:`http.client.HTTPConnection`.

    .. note::
       Only works in Python 2. This parameter is ignored in Python 3.

:param timeout:
    Socket timeout in seconds for each individual connection. This can
    be a float or integer, which sets the timeout for the HTTP request,
    or an instance of :class:`urllib3.util.Timeout` which gives you more
    fine-grained control over request timeouts. After the constructor has
    been parsed, this is always a `urllib3.util.Timeout` object.

:param maxsize:
    Number of connections to save that can be reused. More than 1 is useful
    in multithreaded situations. If ``block`` is set to False, more
    connections will be created but they will not be saved once they've
    been used.

:param block:
    If set to True, no more than ``maxsize`` connections will be used at
    a time. When no free connections are available, the call will block
    until a connection has been released. This is a useful side effect for
    particular multithreaded situations where one does not want to use more
    than maxsize connections per host to prevent flooding.

:param headers:
    Headers to include with all requests, unless other headers are given
    explicitly.

:param retries:
    Retry configuration to use by default with requests in this pool.

:param _proxy:
    Parsed proxy URL, should not be used directly, instead, see
    :class:`urllib3.ProxyManager`

:param _proxy_headers:
    A dictionary with proxy headers, should not be used directly,
    instead, see :class:`urllib3.ProxyManager`

:param \**conn_kw:
    Additional parameters are used to create fresh :class:`urllib3.connection.HTTPConnection`,
    :class:`urllib3.connection.HTTPSConnection` instances.
:::
:::{doc} HTTPSConnectionPool:916
Same as :class:`.HTTPConnectionPool`, but HTTPS.

:class:`.HTTPSConnection` uses one of ``assert_fingerprint``,
``assert_hostname`` and ``host`` in this order to verify connections.
If ``assert_hostname`` is False, no verification is done.

The ``key_file``, ``cert_file``, ``cert_reqs``, ``ca_certs``,
``ca_cert_dir``, ``ssl_version``, ``key_password`` are only used if :mod:`ssl`
is available and are fed into :meth:`urllib3.util.ssl_wrap_socket` to upgrade
the connection socket into an SSL socket.
:::
:::{doc} connection_from_url:1086
Given a url, return an :class:`.ConnectionPool` instance of its host.

This is a shortcut for not having to parse out the scheme, host, and port
of the url before creating an :class:`.ConnectionPool` instance.

:param url:
    Absolute URL string that must include the scheme. Port is optional.

:param \**kw:
    Passes additional parameters to the constructor of the appropriate
    :class:`.ConnectionPool`. Useful for specifying things like
    timeout, maxsize, headers, etc.

Example::

    >>> conn = connection_from_url('http://google.com/')
    >>> r = conn.request('GET', '/')
:::
:::{doc} _normalize_host:1114
Normalize hosts for comparisons and use with sockets.
:::
:::{doc} _close_pool_connections:1132
Drains a queue of connections and closes each one.
:::
**Imports**: `__future__.absolute_import`, `errno`, `logging`, `re`, `socket`, `sys`, `warnings`, `socket.error`, `socket.timeout`, `_collections.HTTPHeaderDict`, `connection.BaseSSLError`, `connection.BrokenPipeError`, `connection.DummyConnection`, `connection.HTTPConnection`, `connection.HTTPException`, `connection.HTTPSConnection`, `connection.VerifiedHTTPSConnection`, `connection.port_by_scheme`, `exceptions.ClosedPoolError`, `exceptions.EmptyPoolError`, `exceptions.HeaderParsingError`, `exceptions.HostChangedError`, `exceptions.InsecureRequestWarning`, `exceptions.LocationValueError`, `exceptions.MaxRetryError`, `exceptions.NewConnectionError`, `exceptions.ProtocolError`, `exceptions.ProxyError`, `exceptions.ReadTimeoutError`, `exceptions.SSLError`, `exceptions.TimeoutError`, `packages.six`, `packages.six.moves.queue`, `request.RequestMethods`, `response.HTTPResponse`, `util.connection.is_connection_dropped`, `util.proxy.connection_requires_http_tunnel`, `util.queue.LifoQueue`, `util.request.set_file_position`, `util.response.assert_header_parsing`, `util.retry.Retry`, `util.ssl_match_hostname.CertificateError`, `util.timeout.Timeout`, `util.url.Url`, `util.url._encode_target`, `util.url._normalize_host`, `util.url.get_host`, `util.url.parse_url`, `weakref`, `packages.backports.weakref_finalize.weakref_finalize`
**Type References**: [[ConnectionPool]], [[HTTPConnectionPool]], [[HTTPSConnectionPool]]

### Interface
- `connection_from_url`() -> Any
- `_normalize_host`() -> Any
- `_close_pool_connections`() -> Any
- `__init__`() -> Any
- `__str__`() -> Any
- `__enter__`() -> Any
- `__exit__`() -> Any
- `close`() -> Any
- `_new_conn`() -> Any
- `_get_conn`() -> Any
- `_put_conn`() -> Any
- `_validate_conn`() -> Any
- `_prepare_proxy`() -> Any
- `_get_timeout`() -> Any
- `_raise_timeout`() -> Any
- `_make_request`() -> Any
- `_absolute_url`() -> Any
- `is_same_host`() -> Any
- `urlopen`() -> Any
- `_prepare_conn`() -> Any
- `_is_ssl_error_message_from_http_proxy`() -> Any

### Implementation
**ConnectionPool**

**HTTPConnectionPool**

**HTTPSConnectionPool**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/connectionpool.py`  
**Dependencies**: `__future__.absolute_import`, `errno`, `logging`, `re`, `socket`, `sys`, `warnings`, `socket.error`, `socket.timeout`, `_collections.HTTPHeaderDict`, `connection.BaseSSLError`, `connection.BrokenPipeError`, `connection.DummyConnection`, `connection.HTTPConnection`, `connection.HTTPException`, `connection.HTTPSConnection`, `connection.VerifiedHTTPSConnection`, `connection.port_by_scheme`, `exceptions.ClosedPoolError`, `exceptions.EmptyPoolError`, `exceptions.HeaderParsingError`, `exceptions.HostChangedError`, `exceptions.InsecureRequestWarning`, `exceptions.LocationValueError`, `exceptions.MaxRetryError`, `exceptions.NewConnectionError`, `exceptions.ProtocolError`, `exceptions.ProxyError`, `exceptions.ReadTimeoutError`, `exceptions.SSLError`, `exceptions.TimeoutError`, `packages.six`, `packages.six.moves.queue`, `request.RequestMethods`, `response.HTTPResponse`, `util.connection.is_connection_dropped`, `util.proxy.connection_requires_http_tunnel`, `util.queue.LifoQueue`, `util.request.set_file_position`, `util.response.assert_header_parsing`, `util.retry.Retry`, `util.ssl_match_hostname.CertificateError`, `util.timeout.Timeout`, `util.url.Url`, `util.url._encode_target`, `util.url._normalize_host`, `util.url.get_host`, `util.url.parse_url`, `weakref`, `packages.backports.weakref_finalize.weakref_finalize`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pkg_resources
:::{doc} PEP440Warning:146
Used when there is an issue with a version or specifier not complying with
PEP 440.
:::
:::{doc} get_supported_platform:199
Return this platform's maximum compatible version.

distutils.util.get_platform() normally reports the minimum version
of macOS that would be required to *use* extensions produced by
distutils.  But what we want when checking compatibility is to know the
version of macOS that we are *running*.  To allow usage of packages that
explicitly require a newer version of macOS, we must also know the
current version of the OS.

If this condition occurs for any other platform with a version in its
platform strings, this function should be extended accordingly.
:::
:::{doc} ResolutionError:309
Abstract base for dependency resolution errors
:::
:::{doc} VersionConflict:316
An already-installed version conflicts with the requested version.

Should be initialized with the installed Distribution and the requested
Requirement.
:::
:::{doc} ContextualVersionConflict:348
A VersionConflict that accepts a third parameter, the set of the
requirements that required the installed Distribution.
:::
:::{doc} DistributionNotFound:361
A requested distribution was not found
:::
:::{doc} UnknownExtra:390
Distribution doesn't have an "extra feature" of the given name
:::
:::{doc} register_loader_type:404
Register `provider_factory` to make providers for `loader_type`

`loader_type` is the type or class of a PEP 302 ``module.__loader__``,
and `provider_factory` is a function that, passed a *module* object,
returns an ``IResourceProvider`` for that module.
:::
:::{doc} get_provider:420
Return an IResourceProvider for the named module or requirement
:::
:::{doc} get_build_platform:451
Return this platform's string for platform-specific distributions

XXX Currently this is the same as ``distutils.util.get_platform()``, but it
needs some hacks for Linux and macOS.
:::
:::{doc} compatible_platforms:482
Can code for the `provided` platform run on the `required` platform?

Returns true if either platform is ``None``, or the platforms are equal.

XXX Needs compatibility checks for Linux and other unixy OSes.
:::
:::{doc} get_distribution:535
Return a current distribution object for a Requirement or string
:::
:::{doc} load_entry_point:547
Return `name` entry point of `group` for `dist` or raise ImportError
:::
:::{doc} get_entry_map:558
Return the entry point map for `group`, or the full entry map
:::
:::{doc} get_entry_info:563
Return the EntryPoint object for `group`+`name`, or ``None``
:::
:::{doc} IResourceProvider:591
An object that provides access to package resources
:::
:::{doc} WorkingSet:625
A collection of active distributions on sys.path (or a similar list)
:::
:::{doc} _ReqExtras:1106
Map each requirement to the extras that demanded it.
:::
:::{doc} Environment:1126
Searchable snapshot of distributions on a search path
:::
:::{doc} ExtractionError:1323
An error occurred extracting a resource

The following attributes are available from instances of this exception:

manager
    The resource manager that raised this exception

cache_path
    The base directory for resource extraction

original_error
    The exception instance that caused extraction to fail
:::
:::{doc} ResourceManager:1343
Manage resource extraction and packages
:::
:::{doc} get_default_cache:1526
Return the ``PYTHON_EGG_CACHE`` environment variable
or a platform-relevant user cache dir for an app
named "Python-Eggs".
:::
:::{doc} safe_name:1535
Convert an arbitrary string to a standard distribution name

Any runs of non-alphanumeric/. characters are replaced with a single '-'.
:::
:::{doc} safe_version:1543
Convert an arbitrary string to a standard version string
:::
:::{doc} _forgiving_version:1555
Fallback when ``safe_version`` is not safe enough
>>> parse_version(_forgiving_version('0.23ubuntu1'))
<Version('0.23.dev0+sanitized.ubuntu1')>
>>> parse_version(_forgiving_version('0.23-'))
<Version('0.23.dev0+sanitized')>
>>> parse_version(_forgiving_version('0.-_'))
<Version('0.dev0+sanitized')>
>>> parse_version(_forgiving_version('42.+?1'))
<Version('42.dev0+sanitized.1')>
>>> parse_version(_forgiving_version('hello world'))
<Version('0.dev0+sanitized.hello.world')>
:::
:::{doc} _safe_segment:1580
Convert an arbitrary string into a safe segment
:::
:::{doc} safe_extra:1587
Convert an arbitrary string to a standard 'extra' name

Any runs of non-alphanumeric characters are replaced with a single '_',
and the result is always lowercased.
:::
:::{doc} to_filename:1596
Convert a project or version name to its filename-escaped form

Any '-' characters are currently replaced with '_'.
:::
:::{doc} invalid_marker:1604
Validate text as a PEP 508 environment marker; return an exception
if invalid or False otherwise.
:::
:::{doc} evaluate_marker:1618
Evaluate a PEP 508 environment marker.
Return a boolean indicating the marker result in this environment.
Raise SyntaxError if marker is invalid.

This implementation uses the 'pyparsing' module.
:::
:::{doc} NullProvider:1633
Try to implement resources and metadata for arbitrary PEP 302 loaders
:::
:::{doc} _parents:1839
yield all parents of path including path
:::
:::{doc} EggProvider:1850
Provider based on a virtual filesystem
:::
:::{doc} DefaultProvider:1870
Provides access to package resources in the filesystem
:::
:::{doc} EmptyProvider:1903
Provider that returns nothing for all requests
:::
:::{doc} ZipManifests:1924
zip manifest builder
:::
:::{doc} MemoizedZipManifests:1952
Memoized zipfile manifests.
:::
:::{doc} ZipProvider:1975
Resource support for zips and eggs
:::
:::{doc} FileMetadata:2148
Metadata handler for standalone PKG-INFO files

Usage::

    metadata = FileMetadata("/path/to/PKG-INFO")

This provider rejects all data and metadata requests except for PKG-INFO,
which is treated as existing, and will be the contents of the file at
the provided location.
:::
:::{doc} PathMetadata:2189
Metadata provider for egg directories

Usage::

    # Development eggs:

    egg_info = "/path/to/PackageName.egg-info"
    base_dir = os.path.dirname(egg_info)
    metadata = PathMetadata(base_dir, egg_info)
    dist_name = os.path.splitext(os.path.basename(egg_info))[0]
    dist = Distribution(basedir, project_name=dist_name, metadata=metadata)

    # Unpacked egg directories:

    egg_path = "/path/to/PackageName-ver-pyver-etc.egg"
    metadata = PathMetadata(egg_path, os.path.join(egg_path,'EGG-INFO'))
    dist = Distribution.from_filename(egg_path, metadata=metadata)
:::
:::{doc} EggMetadata:2214
Metadata provider for .egg files
:::
:::{doc} register_finder:2234
Register `distribution_finder` to find distributions in sys.path items

`importer_type` is the type or class of a PEP 302 "Importer" (sys.path item
handler), and `distribution_finder` is a callable that, passed a path
item and the importer instance, yields ``Distribution`` instances found on
that path item.  See ``pkg_resources.find_on_path`` for an example.
:::
:::{doc} find_distributions:2244
Yield distributions accessible via `path_item`
:::
:::{doc} find_eggs_in_zip:2251
Find eggs in zip files; possibly multiple nested eggs.
:::
:::{doc} find_on_path:2291
Yield distributions accessible on a sys.path directory
:::
:::{doc} dist_factory:2311
Return a dist_factory for the given entry.
:::
:::{doc} NoDists:2330
>>> bool(NoDists())
False

>>> list(NoDists()('anything'))
[]
:::
:::{doc} safe_listdir:2346
Attempt to list contents of path, but suppress some exceptions.
:::
:::{doc} non_empty_lines:2380
Yield non-empty lines from file at path
:::
:::{doc} resolve_egg_link:2390
Given a path to an .egg-link, resolve distributions
present in the referenced path.
:::
:::{doc} register_namespace_handler:2416
Register `namespace_handler` to declare namespace packages

`importer_type` is the type or class of a PEP 302 "Importer" (sys.path item
handler), and `namespace_handler` is a callable like this::

    def namespace_handler(importer, path_entry, moduleName, module):
        # return a path_entry to use for child packages

Namespace handlers are only called if the importer object has already
agreed that it can handle the relevant path item, and they should only
return a subpath if the module __path__ does not already contain an
equivalent subpath.  For an example namespace handler, see
``pkg_resources.file_ns_handler``.
:::
:::{doc} _handle_ns:2436
Ensure that named package includes a subpath of path_item (if needed)
:::
:::{doc} _rebuild_mod_path:2473
Rebuild module.__path__ ensuring that all entries are ordered
corresponding to their sys.path order
:::
:::{doc} declare_namespace:2507
Declare that package 'packageName' is a namespace package
:::
:::{doc} fixup_namespace_packages:2550
Ensure that previously-declared namespace packages include path_item
:::
:::{doc} file_ns_handler:2562
Compute an ns-package subpath for a filesystem or zipfile importer
:::
:::{doc} normalize_path:2603
Normalize a file/dir name for comparison purposes
:::
:::{doc} _cygwin_patch:2608
Contrary to POSIX 2008, on Cygwin, getcwd (3) contains
symlink components. Using
os.path.abspath() works around this limitation. A fix in os.getcwd()
would probably better, in Cygwin even more so, except
that this seems to be by design...
:::
:::{doc} _is_egg_path:2634
Determine if given path appears to be an egg.
:::
:::{doc} _is_unpacked_egg:2649
Determine if given path appears to be an unpacked egg.
:::
:::{doc} EntryPoint:2681
Object representing an advertised importable object
:::
:::{doc} _version_from_file:2856
Given an iterable of lines from a Metadata file, return
the value of the Version field, if present, or None otherwise.
:::
:::{doc} Distribution:2871
Wrap an actual or potential sys.path entry w/metadata
:::
:::{doc} DistInfoDistribution:3345
Wrap an actual or potential sys.path entry
w/metadata, .dist-info style.
:::
:::{doc} parse_requirements:3418
Yield ``Requirement`` objects for each specification in `strs`.

`strs` must be a string, or a (possibly-nested) iterable thereof.
:::
:::{doc} RequirementParseError:3427
Compatibility wrapper for InvalidRequirement
:::
:::{doc} _always_object:3480
Ensure object appears in the mro even
for old-style classes.
:::
:::{doc} _find_adapter:3490
Return an adapter factory for `ob` from `registry`
:::
:::{doc} ensure_directory:3501
Ensure that the parent directory of `path` exists
:::
:::{doc} _bypass_ensure_directory:3507
Sandbox-bypassing version of ensure_directory()
:::
:::{doc} split_sections:3520
Split a string or iterable thereof into (section, content) pairs

Each ``section`` is a stripped version of the section header ("[section]")
and each ``content`` is a list of stripped lines excluding blank lines and
comment-only lines.  If there are any such lines before the first section
header, they're returned in a first ``section`` of ``None``.
:::
:::{doc} PkgResourcesDeprecationWarning:3564
Base class for warning about deprecations in ``pkg_resources``

This class is not derived from ``DeprecationWarning``, and as such is
visible by default.
:::
:::{doc} _read_utf8_with_fallback:3577
See setuptools.unicode_utils._read_utf8_with_fallback
:::
:::{doc} _initialize:3612
Set up global resource manager (deliberately not state-saved)
:::
:::{doc} _initialize_master_working_set:3624
Prepare the master working set and make the ``require()``
API available.

This function has explicit effects on the global state
of pkg_resources. It is intended to be invoked once at
the initialization of this module.

Invocation by other packages is unsupported and done
at their own risk.
:::
**Imports**: `__future__.annotations`, `sys`, `os`, `io`, `time`, `re`, `types`, `typing.Any`, `typing.Literal`, `typing.Dict`, `typing.Iterator`, `typing.Mapping`, `typing.MutableSequence`, `typing.NamedTuple`, `typing.NoReturn`, `typing.Tuple`, `typing.Union`, `typing.TYPE_CHECKING`, `typing.Protocol`, `typing.Callable`, `typing.Iterable`, `typing.TypeVar`, `typing.overload`, `zipfile`, `zipimport`, `warnings`, `stat`, `functools`, `pkgutil`, `operator`, `platform`, `collections`, `plistlib`, `email.parser`, `errno`, `tempfile`, `textwrap`, `inspect`, `ntpath`, `posixpath`, `importlib`, `importlib.abc`, `importlib.machinery`, `pkgutil.get_importer`, `_imp`, `os.utime`, `os.open`, `os.path.isdir`, `os.path.split`, `pip._internal.utils._jaraco_text.yield_lines`, `pip._internal.utils._jaraco_text.drop_comment`, `pip._internal.utils._jaraco_text.join_continuation`, `pip._vendor.packaging.markers`, `pip._vendor.packaging.requirements`, `pip._vendor.packaging.utils`, `pip._vendor.packaging.version`, `pip._vendor.platformdirs.user_cache_dir`, `os.mkdir`, `os.rename`, `os.unlink`, `_typeshed.BytesPath`, `_typeshed.StrPath`, `_typeshed.StrOrBytesPath`, `pip._vendor.typing_extensions.Self`, `sysconfig.get_platform`, `__main__.__requires__`, `linecache.cache`
**Type References**: [[Any]], [[BaseException]], [[ContextualVersionConflict]], [[DefaultProvider]], [[DistInfoDistribution]], [[Distribution]], [[DistributionNotFound]], [[EggInfoDistribution]], [[EggMetadata]], [[EggProvider]], [[EmptyProvider]], [[EntryPoint]], [[Environment]], [[Exception]], [[ExtractionError]], [[FileMetadata]], [[IMetadataProvider]], [[IResourceProvider]], [[Iterable]], [[MemoizedZipManifests]], [[MutableSequence]], [[NoDists]], [[None]], [[NullProvider]], [[PEP440Warning]], [[PathMetadata]], [[PkgResourcesDeprecationWarning]], [[Requirement]], [[RequirementParseError]], [[ResolutionError]], [[ResourceManager]], [[Self]], [[UnknownExtra]], [[VersionConflict]], [[WorkingSet]], [[ZipInfo]], [[ZipManifests]], [[ZipProvider]], [[_LoaderProtocol]], [[_ReqExtras]], [[_ZipLoaderModule]], [[manifest_mod]], [[zipfile.ZipInfo]]

### Interface
- `_declare_state`(vartype: str, varname: str, initial_value: _T) -> _T
- `__getstate__`() -> Any
- `__setstate__`() -> Any
- `_sget_dict`() -> Any
- `_sset_dict`() -> Any
- `_sget_object`() -> Any
- `_sset_object`() -> Any
- `get_supported_platform`() -> Any
- `register_loader_type`(loader_type: type[_ModuleLike], provider_factory: _ProviderFactoryType) -> Any
- `get_provider`(moduleOrReq: str | Requirement) -> IResourceProvider | Distribution
- `_macos_vers`() -> Any
- `_macos_arch`() -> Any
- `get_build_platform`() -> Any
- `compatible_platforms`(provided: str | None, required: str | None) -> Any
- `get_distribution`(dist: Distribution | _PkgReqType) -> Distribution
- `load_entry_point`(group: str, name: str) -> _ResolvedEntryPoint
- `get_entry_map`(group: str | None) -> Any
- `get_entry_info`(group: str, name: str) -> Any
- `get_default_cache`() -> str
- `safe_name`(name: str) -> Any
- `safe_version`(version: str) -> Any
- `_forgiving_version`() -> Any
- `_safe_segment`() -> Any
- `safe_extra`(extra: str) -> Any
- `to_filename`(name: str) -> Any
- `invalid_marker`(text: str) -> Any
- `evaluate_marker`(text: str, extra: str | None) -> bool
- `_parents`() -> Any
- `register_finder`(importer_type: type[_T], distribution_finder: _DistFinderType[_T]) -> Any
- `find_distributions`(path_item: str, only: bool) -> Any
- `find_eggs_in_zip`(importer: zipimport.zipimporter, path_item: str, only: bool) -> Iterator[Distribution]
- `find_nothing`(importer: object | None, path_item: str | None, only: bool | None) -> Any
- `find_on_path`(importer: object | None) -> Any
- `dist_factory`() -> Any
- `safe_listdir`(path: StrOrBytesPath) -> Any
- `distributions_from_metadata`(path: str) -> Any
- `non_empty_lines`() -> Any
- `resolve_egg_link`() -> Any
- `register_namespace_handler`(importer_type: type[_T], namespace_handler: _NSHandlerType[_T]) -> Any
- `_handle_ns`() -> Any
- `_rebuild_mod_path`(module: types.ModuleType) -> Any
- `declare_namespace`(packageName: str) -> Any
- `fixup_namespace_packages`(path_item: str, parent: str | None) -> Any
- `file_ns_handler`(importer: object, path_item: StrPath, packageName: str, module: types.ModuleType) -> Any
- `null_ns_handler`(importer: object, path_item: str | None, packageName: str | None, module: _ModuleLike | None) -> Any
- `normalize_path`(filename: StrOrBytesPath) -> Any
- `_cygwin_patch`(filename: StrOrBytesPath) -> Any
- `_is_egg_path`() -> Any
- `_is_zip_egg`() -> Any
- `_is_unpacked_egg`() -> Any
- `_set_parent_ns`() -> Any
- `_version_from_file`() -> Any
- `issue_warning`() -> Any
- `parse_requirements`(strs: _NestedStr) -> Any
- `_always_object`() -> Any
- `_find_adapter`(registry: Mapping[<ast.Tuple object at 0x163ddd2d0>], ob: object) -> _AdapterT
- `ensure_directory`(path: StrOrBytesPath) -> Any
- `_bypass_ensure_directory`() -> Any
- `split_sections`(s: _NestedStr) -> Iterator[tuple[<ast.Tuple object at 0x163df42d0>]]
- `_mkstemp`() -> Any
- `_read_utf8_with_fallback`(file: str) -> str
- `_call_aside`() -> Any
- `_initialize`() -> Any
- `_initialize_master_working_set`() -> Any
- `load_module`() -> types.ModuleType
- `__repr__`() -> Any
- `dist`() -> Distribution
- `req`() -> Requirement
- `report`() -> Any
- `with_context`(required_by: set[Distribution | str]) -> Any
- `required_by`() -> set[str]
- `requirers`() -> set[str] | None
- `requirers_str`() -> Any
- `__str__`() -> Any
- `has_metadata`(name: str) -> bool
- `get_metadata`(name: str) -> Any
- `get_metadata_lines`(name: str) -> Iterator[str]
- `metadata_isdir`(name: str) -> bool
- `metadata_listdir`(name: str) -> list[str]
- `run_script`(script_name: str, namespace: dict[<ast.Tuple object at 0x163b57250>]) -> Any
- `get_resource_filename`(manager: ResourceManager, resource_name: str) -> Any
- `get_resource_stream`(manager: object, resource_name: str) -> Any
- `get_resource_string`(manager: ResourceManager, resource_name: str) -> bytes
- `has_resource`(resource_name: str) -> Any
- `resource_isdir`(resource_name: str) -> Any
- `resource_listdir`(resource_name: str) -> Any
- `__init__`(requirement_string: str) -> Any
- `_build_master`() -> Any
- `_build_from_requirements`() -> Any
- `add_entry`(entry: str) -> Any
- `__contains__`(item: Distribution | str | tuple[<ast.Tuple object at 0x163dd5950>]) -> bool
- `find`(req: Requirement) -> Distribution | None
- `iter_entry_points`(group: str, name: str | None) -> Any
- `__iter__`() -> Iterator[str]
- `add`(dist: Distribution) -> Any
- `resolve`() -> _ResolvedEntryPoint
- `_resolve_dist`() -> Distribution
- `find_plugins`(plugin_env: Environment, full_env: Environment | None, installer: _InstallerType | None | _InstallerTypeT[_DistributionT], fallback: bool) -> tuple[<ast.Tuple object at 0x163a06690>]
- `require`(env: Environment | None, installer: _InstallerType | None) -> Any
- `subscribe`(callback: Callable[<ast.Tuple object at 0x163a04b10>], existing: bool) -> Any
- `_added_new`() -> Any
- `markers_pass`(req: Requirement, extras: tuple[<ast.Tuple object at 0x163bef590>] | None) -> Any
- `can_add`(dist: Distribution) -> Any
- `remove`(dist: Distribution) -> Any
- `scan`(search_path: Iterable[str] | None) -> Any
- `__getitem__`(project_name: str) -> list[Distribution]
- `best_match`(req: Requirement, working_set: WorkingSet, installer: _InstallerType | None | _InstallerTypeT[_DistributionT], replace_conflicting: bool) -> Distribution | None
- `obtain`(requirement: Requirement, installer: Callable[<ast.Tuple object at 0x163bbfd10>] | _InstallerType | None | _InstallerTypeT[_DistributionT]) -> Distribution | None
- `__iadd__`(other: Distribution | Environment) -> Any
- `__add__`(other: Distribution | Environment) -> Any
- `resource_exists`(package_or_requirement: _PkgReqType, resource_name: str) -> Any
- `resource_filename`(package_or_requirement: _PkgReqType, resource_name: str) -> Any
- `resource_stream`(package_or_requirement: _PkgReqType, resource_name: str) -> Any
- `resource_string`(package_or_requirement: _PkgReqType, resource_name: str) -> bytes
- `extraction_error`() -> NoReturn
- `get_cache_path`(archive_name: str, names: Iterable[StrPath]) -> Any
- `_warn_unsafe_extraction_path`() -> Any
- `postprocess`(tempname: StrOrBytesPath, filename: StrOrBytesPath) -> Any
- `set_extraction_path`(path: str) -> Any
- `cleanup_resources`(force: bool) -> list[str]
- `_get_metadata_path`() -> Any
- `_has`() -> bool
- `_isdir`() -> bool
- `_listdir`() -> Any
- `_fn`(base: str | None, resource_name: str) -> Any
- `_validate_resource_path`() -> Any
- `_get`() -> bytes
- `_setup_prefix`() -> Any
- `_set_egg`(path: str) -> Any
- `_register`() -> Any
- `build`(path: str) -> Any
- `load`(require: bool) -> _ResolvedEntryPoint
- `_zipinfo_name`() -> Any
- `_parts`() -> Any
- `zipinfo`() -> Any
- `_get_date_and_size`() -> Any
- `_extract_resource`(manager: ResourceManager) -> str
- `_is_current`() -> Any
- `_get_eager_resources`() -> Any
- `_index`() -> Any
- `_eager_to_zip`(resource_name: str) -> Any
- `_resource_to_zip`(resource_name: str) -> Any
- `_warn_on_replacement`() -> Any
- `__bool__`() -> Any
- `__call__`() -> Any
- `safe_sys_path_index`() -> Any
- `position_in_sys_path`() -> Any
- `_normalize_cached`() -> Any
- `parse`(s: str | Iterable[str]) -> Any
- `_parse_extras`() -> Any
- `parse_group`(group: str, lines: _NestedStr, dist: Distribution | None) -> Any
- `parse_map`(data: str | Iterable[str] | dict[<ast.Tuple object at 0x163d023d0>], dist: Distribution | None) -> Any
- `is_version_line`() -> Any
- `from_location`(location: str, basename: StrPath, metadata: _MetadataType) -> Distribution
- `_reload_version`() -> Any
- `hashcmp`() -> Any
- `__hash__`() -> Any
- `__lt__`(other: Distribution) -> Any
- `__le__`(other: Distribution) -> Any
- `__gt__`(other: Distribution) -> Any
- `__ge__`(other: Distribution) -> Any
- `__eq__`(other: object) -> Any
- `__ne__`() -> Any
- `key`() -> Any
- `parsed_version`() -> Any
- `_forgiving_parsed_version`() -> Any
- `version`() -> Any
- `_dep_map`() -> Any
- `_filter_extras`(dm: dict[<ast.Tuple object at 0x163d43a90>]) -> Any
- `_build_dep_map`() -> Any
- `requires`(extras: Iterable[str]) -> Any
- `_get_metadata_path_for_display`() -> Any
- `_get_metadata`() -> Any
- `_get_version`() -> Any
- `activate`(path: list[str] | None, replace: bool) -> Any
- `egg_name`() -> Any
- `__getattr__`() -> Any
- `__dir__`() -> Any
- `from_filename`(filename: StrPath, metadata: _MetadataType) -> Any
- `as_requirement`() -> Any
- `insert_on`(path: list[str], replace: bool) -> Any
- `check_version_conflict`() -> Any
- `has_version`() -> Any
- `clone`() -> Any
- `extras`() -> Any
- `_parsed_pkg_info`() -> Any
- `_compute_dependencies`() -> dict[<ast.Tuple object at 0x163dbd450>]
- `reqs_for_extra`() -> Any

### Implementation
**_LoaderProtocol**

**_ZipLoaderModule**
  - __loader__: zipimport.zipimporter
**PEP440Warning**

**ResolutionError**

**VersionConflict**

**ContextualVersionConflict**

**DistributionNotFound**

**UnknownExtra**

**IMetadataProvider**

**IResourceProvider**

**WorkingSet**
  - error_info: dict[<ast.Tuple object at 0x163a0ecd0>]
  - distributions: dict[<ast.Tuple object at 0x163a0e810>]
**_ReqExtras**

**Environment**

**ExtractionError**
  - manager: ResourceManager
  - cache_path: str
  - original_error: BaseException | None
**ResourceManager**
  - extraction_path: str | None
**NullProvider**
  - egg_name: str | None
  - egg_info: str | None
  - loader: _LoaderProtocol | None
**EggProvider**

**DefaultProvider**

**EmptyProvider**
  - module_path: str | None
**ZipManifests**

**MemoizedZipManifests**
  - manifest: dict[<ast.Tuple object at 0x163b17490>]
  - mtime: float
**ZipProvider**
  - eagers: list[str] | None
  - loader: zipimport.zipimporter
**FileMetadata**

**PathMetadata**

**EggMetadata**

**NoDists**

**EntryPoint**
  - this: dict[<ast.Tuple object at 0x163d00610>]
  - _data: Iterable[tuple[<ast.Tuple object at 0x163d02f10>]]
  - maps: dict[<ast.Tuple object at 0x163d03fd0>]
**Distribution**
  - deps: list[Requirement]
  - new_extra: str | None
**EggInfoDistribution**

**DistInfoDistribution**
  - reqs: list[Requirement]
**RequirementParseError**

**Requirement**

**PkgResourcesDeprecationWarning**

**manifest_mod**
  - manifest: dict[<ast.Tuple object at 0x163b17490>]
  - mtime: float
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pkg_resources/__init__.py`  
**Dependencies**: `__future__.annotations`, `sys`, `os`, `io`, `time`, `re`, `types`, `typing.Any`, `typing.Literal`, `typing.Dict`, `typing.Iterator`, `typing.Mapping`, `typing.MutableSequence`, `typing.NamedTuple`, `typing.NoReturn`, `typing.Tuple`, `typing.Union`, `typing.TYPE_CHECKING`, `typing.Protocol`, `typing.Callable`, `typing.Iterable`, `typing.TypeVar`, `typing.overload`, `zipfile`, `zipimport`, `warnings`, `stat`, `functools`, `pkgutil`, `operator`, `platform`, `collections`, `plistlib`, `email.parser`, `errno`, `tempfile`, `textwrap`, `inspect`, `ntpath`, `posixpath`, `importlib`, `importlib.abc`, `importlib.machinery`, `pkgutil.get_importer`, `_imp`, `os.utime`, `os.open`, `os.path.isdir`, `os.path.split`, `pip._internal.utils._jaraco_text.yield_lines`, `pip._internal.utils._jaraco_text.drop_comment`, `pip._internal.utils._jaraco_text.join_continuation`, `pip._vendor.packaging.markers`, `pip._vendor.packaging.requirements`, `pip._vendor.packaging.utils`, `pip._vendor.packaging.version`, `pip._vendor.platformdirs.user_cache_dir`, `os.mkdir`, `os.rename`, `os.unlink`, `_typeshed.BytesPath`, `_typeshed.StrPath`, `_typeshed.StrOrBytesPath`, `pip._vendor.typing_extensions.Self`, `sysconfig.get_platform`, `__main__.__requires__`, `linecache.cache`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.resolvelib.resolvers
:::{doc} ResolverException:13
A base class for all exceptions raised by this module.

Exceptions derived by this class should all be handled in this module. Any
bubbling pass the resolver should be treated as a bug.
:::
:::{doc} Criterion:45
Representation of possible resolution results of a package.

This holds three attributes:

* `information` is a collection of `RequirementInformation` pairs.
  Each pair is a requirement contributing to this criterion, and the
  candidate that provides the requirement.
* `incompatibilities` is a collection of all known not-to-work candidates
  to exclude from consideration.
* `candidates` is a collection containing all possible candidates deducted
  from the union of contributing requirements and known incompatibilities.
  It should never be empty, except when the criterion is an attribute of a
  raised `RequirementsConflicted` (in which case it is always empty).

.. note::
    This class is intended to be externally immutable. **Do not** mutate
    any of its attribute containers.
:::
:::{doc} Resolution:105
Stateful resolution object.

This is designed as a one-off object that holds information to kick start
the resolution process, and holds the results afterwards.
:::
:::{doc} Resolver:512
The thing that performs the actual resolution work.
:::
**Imports**: `collections`, `itertools`, `operator`, `providers.AbstractResolver`, `structs.DirectedGraph`, `structs.IteratorMapping`, `structs.build_iter_view`
**Type References**: [[Criterion]], [[InconsistentCandidate]], [[RequirementsConflicted]], [[Resolution]], [[ResolutionError]], [[ResolutionImpossible]], [[ResolutionTooDeep]], [[Resolver]], [[ResolverException]]

### Interface
- `_has_route_to_root`() -> Any
- `_build_result`() -> Any
- `__init__`() -> Any
- `__str__`() -> Any
- `__repr__`() -> Any
- `iter_requirement`() -> Any
- `iter_parent`() -> Any
- `state`() -> Any
- `_push_new_state`() -> Any
- `_add_to_criteria`() -> Any
- `_remove_information_from_criteria`() -> Any
- `_get_preference`() -> Any
- `_is_current_pin_satisfying`() -> Any
- `_get_updated_criteria`() -> Any
- `_attempt_to_pin_criterion`() -> Any
- `_backjump`() -> Any
- `resolve`() -> Any
- `_patch_criteria`() -> Any

### Implementation
**ResolverException**

**RequirementsConflicted**

**InconsistentCandidate**

**Criterion**

**ResolutionError**

**ResolutionImpossible**

**ResolutionTooDeep**

**Resolution**

**Resolver**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/resolvelib/resolvers.py`  
**Dependencies**: `collections`, `itertools`, `operator`, `providers.AbstractResolver`, `structs.DirectedGraph`, `structs.IteratorMapping`, `structs.build_iter_view`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.resolvelib

**Imports**: `providers.AbstractProvider`, `providers.AbstractResolver`, `reporters.BaseReporter`, `resolvers.InconsistentCandidate`, `resolvers.RequirementsConflicted`, `resolvers.ResolutionError`, `resolvers.ResolutionImpossible`, `resolvers.ResolutionTooDeep`, `resolvers.Resolver`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/resolvelib/__init__.py`  
**Dependencies**: `providers.AbstractProvider`, `providers.AbstractResolver`, `reporters.BaseReporter`, `resolvers.InconsistentCandidate`, `resolvers.RequirementsConflicted`, `resolvers.ResolutionError`, `resolvers.ResolutionImpossible`, `resolvers.ResolutionTooDeep`, `resolvers.Resolver`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.resolvelib.providers
:::{doc} AbstractProvider:1
Delegate class to provide the required interface for the resolver.
:::
:::{doc} AbstractResolver:112
The thing that performs the actual resolution work.
:::

**Type References**: [[AbstractProvider]], [[AbstractResolver]]

### Interface
- `identify`() -> Any
- `get_preference`() -> Any
- `find_matches`() -> Any
- `is_satisfied_by`() -> Any
- `get_dependencies`() -> Any
- `__init__`() -> Any
- `resolve`() -> Any

### Implementation
**AbstractProvider**

**AbstractResolver**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/resolvelib/providers.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.resolvelib.structs
:::{doc} DirectedGraph:6
A graph structure with directed edges.
:::
:::{doc} _FactoryIterableView:109
Wrap an iterator factory returned by `find_matches()`.

Calling `iter()` on this class would invoke the underlying iterator
factory, making it a "collection with ordering" that can be iterated
through multiple times, but lacks random access methods presented in
built-in Python sequence types.
:::
:::{doc} _SequenceIterableView:142
Wrap an iterable returned by find_matches().

This is essentially just a proxy to the underlying sequence that provides
the same interface as `_FactoryIterableView`.
:::
:::{doc} build_iter_view:164
Build an iterable view from the value returned by `find_matches()`.
:::
**Imports**: `itertools`, `compat.collections_abc`
**Type References**: [[DirectedGraph]], [[IteratorMapping]], [[_FactoryIterableView]], [[_SequenceIterableView]]

### Interface
- `build_iter_view`() -> Any
- `__init__`() -> Any
- `__iter__`() -> Any
- `__len__`() -> Any
- `__contains__`() -> Any
- `copy`() -> Any
- `add`() -> Any
- `remove`() -> Any
- `connected`() -> Any
- `connect`() -> Any
- `iter_edges`() -> Any
- `iter_children`() -> Any
- `iter_parents`() -> Any
- `__repr__`() -> Any
- `__bool__`() -> Any
- `__getitem__`() -> Any

### Implementation
**DirectedGraph**

**IteratorMapping**

**_FactoryIterableView**

**_SequenceIterableView**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/resolvelib/structs.py`  
**Dependencies**: `itertools`, `compat.collections_abc`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.resolvelib.reporters
:::{doc} BaseReporter:1
Delegate class to provider progress reporting for the resolver.
:::

**Type References**: [[BaseReporter]]

### Interface
- `starting`() -> Any
- `starting_round`() -> Any
- `ending_round`() -> Any
- `ending`() -> Any
- `adding_requirement`() -> Any
- `resolving_conflicts`() -> Any
- `rejecting_candidate`() -> Any
- `pinning`() -> Any

### Implementation
**BaseReporter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/resolvelib/reporters.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.platformdirs.macos
:::{doc} MacOS:11
Platform directories for the macOS operating system.

Follows the guidance from
`Apple documentation <https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html>`_.
Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`,
`version <platformdirs.api.PlatformDirsABC.version>`,
`ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:::
**Imports**: `__future__.annotations`, `os.path`, `sys`, `api.PlatformDirsABC`
**Type References**: [[MacOS]]

### Interface
- `user_data_dir`() -> str
- `site_data_dir`() -> str
- `user_config_dir`() -> str
- `site_config_dir`() -> str
- `user_cache_dir`() -> str
- `site_cache_dir`() -> str
- `user_state_dir`() -> str
- `user_log_dir`() -> str
- `user_documents_dir`() -> str
- `user_downloads_dir`() -> str
- `user_pictures_dir`() -> str
- `user_videos_dir`() -> str
- `user_music_dir`() -> str
- `user_desktop_dir`() -> str
- `user_runtime_dir`() -> str
- `site_runtime_dir`() -> str

### Implementation
**MacOS**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/platformdirs/macos.py`  
**Dependencies**: `__future__.annotations`, `os.path`, `sys`, `api.PlatformDirsABC`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.platformdirs.unix
:::{doc} Unix:23
On Unix/Linux, we follow the `XDG Basedir Spec <https://specifications.freedesktop.org/basedir-spec/basedir-spec-
latest.html>`_.

The spec allows overriding directories with environment variables. The examples shown are the default values,
alongside the name of the environment variable that overrides them. Makes use of the `appname
<platformdirs.api.PlatformDirsABC.appname>`, `version <platformdirs.api.PlatformDirsABC.version>`, `multipath
<platformdirs.api.PlatformDirsABC.multipath>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists
<platformdirs.api.PlatformDirsABC.ensure_exists>`.
:::
:::{doc} _get_user_dirs_folder:248
Return directory from user-dirs.dirs config file.

See https://freedesktop.org/wiki/Software/xdg-user-dirs/.
:::
**Imports**: `__future__.annotations`, `os`, `sys`, `configparser.ConfigParser`, `pathlib.Path`, `typing.Iterator`, `typing.NoReturn`, `api.PlatformDirsABC`, `os.getuid`
**Type References**: [[Unix]]

### Interface
- `_get_user_media_dir`(env_var: str, fallback_tilde_path: str) -> str
- `_get_user_dirs_folder`(key: str) -> str | None
- `getuid`() -> NoReturn
- `user_data_dir`() -> str
- `_site_data_dirs`() -> list[str]
- `site_data_dir`() -> str
- `user_config_dir`() -> str
- `_site_config_dirs`() -> list[str]
- `site_config_dir`() -> str
- `user_cache_dir`() -> str
- `site_cache_dir`() -> str
- `user_state_dir`() -> str
- `user_log_dir`() -> str
- `user_documents_dir`() -> str
- `user_downloads_dir`() -> str
- `user_pictures_dir`() -> str
- `user_videos_dir`() -> str
- `user_music_dir`() -> str
- `user_desktop_dir`() -> str
- `user_runtime_dir`() -> str
- `site_runtime_dir`() -> str
- `site_data_path`() -> Path
- `site_config_path`() -> Path
- `site_cache_path`() -> Path
- `_first_item_as_path_if_multipath`(directory: str) -> Path
- `iter_config_dirs`() -> Iterator[str]
- `iter_data_dirs`() -> Iterator[str]

### Implementation
**Unix**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/platformdirs/unix.py`  
**Dependencies**: `__future__.annotations`, `os`, `sys`, `configparser.ConfigParser`, `pathlib.Path`, `typing.Iterator`, `typing.NoReturn`, `api.PlatformDirsABC`, `os.getuid`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.platformdirs.version

**Imports**: `typing.Tuple`, `typing.Union`
**Type References**: [[VERSION_TUPLE]]

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/platformdirs/version.py`  
**Dependencies**: `typing.Tuple`, `typing.Union`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.platformdirs
:::{doc} user_data_dir:49
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: data directory tied to the user
:::
:::{doc} site_data_dir:73
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: data directory shared by users
:::
:::{doc} user_config_dir:97
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: config directory tied to the user
:::
:::{doc} site_config_dir:121
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: config directory shared by the users
:::
:::{doc} user_cache_dir:145
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: cache directory tied to the user
:::
:::{doc} site_cache_dir:169
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: cache directory tied to the user
:::
:::{doc} user_state_dir:193
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: state directory tied to the user
:::
:::{doc} user_log_dir:217
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: log directory tied to the user
:::
:::{doc} user_documents_dir:241
:returns: documents directory tied to the user
:::
:::{doc} user_downloads_dir:246
:returns: downloads directory tied to the user
:::
:::{doc} user_pictures_dir:251
:returns: pictures directory tied to the user
:::
:::{doc} user_videos_dir:256
:returns: videos directory tied to the user
:::
:::{doc} user_music_dir:261
:returns: music directory tied to the user
:::
:::{doc} user_desktop_dir:266
:returns: desktop directory tied to the user
:::
:::{doc} user_runtime_dir:271
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: runtime directory tied to the user
:::
:::{doc} site_runtime_dir:295
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: runtime directory shared by users
:::
:::{doc} user_data_path:319
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: data path tied to the user
:::
:::{doc} site_data_path:343
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param multipath: See `multipath <platformdirs.api.PlatformDirsABC.multipath>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: data path shared by users
:::
:::{doc} user_config_path:367
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: config path tied to the user
:::
:::{doc} site_config_path:391
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: config path shared by the users
:::
:::{doc} site_cache_path:415
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: cache directory tied to the user
:::
:::{doc} user_cache_path:439
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: cache path tied to the user
:::
:::{doc} user_state_path:463
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: state path tied to the user
:::
:::{doc} user_log_path:487
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: log path tied to the user
:::
:::{doc} user_documents_path:511
:returns: documents a path tied to the user
:::
:::{doc} user_downloads_path:516
:returns: downloads path tied to the user
:::
:::{doc} user_pictures_path:521
:returns: pictures path tied to the user
:::
:::{doc} user_videos_path:526
:returns: videos path tied to the user
:::
:::{doc} user_music_path:531
:returns: music path tied to the user
:::
:::{doc} user_desktop_path:536
:returns: desktop path tied to the user
:::
:::{doc} user_runtime_path:541
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: runtime path tied to the user
:::
:::{doc} site_runtime_path:565
:param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.
:param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.
:param version: See `version <platformdirs.api.PlatformDirsABC.version>`.
:param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.
:param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:returns: runtime path shared by users
:::
**Imports**: `__future__.annotations`, `os`, `sys`, `typing.TYPE_CHECKING`, `api.PlatformDirsABC`, `version.__version__`, `version.__version_tuple__`, `pathlib.Path`, `typing.Literal`, `pip._vendor.platformdirs.windows.Windows`, `pip._vendor.platformdirs.android._android_folder`, `pip._vendor.platformdirs.macos.MacOS`, `pip._vendor.platformdirs.unix.Unix`, `pip._vendor.platformdirs.android.Android`
### Interface
- `_set_platform_dir_class`() -> type[PlatformDirsABC]
- `user_data_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, roaming: bool, ensure_exists: bool) -> str
- `site_data_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, multipath: bool, ensure_exists: bool) -> str
- `user_config_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, roaming: bool, ensure_exists: bool) -> str
- `site_config_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, multipath: bool, ensure_exists: bool) -> str
- `user_cache_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> str
- `site_cache_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> str
- `user_state_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, roaming: bool, ensure_exists: bool) -> str
- `user_log_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> str
- `user_documents_dir`() -> str
- `user_downloads_dir`() -> str
- `user_pictures_dir`() -> str
- `user_videos_dir`() -> str
- `user_music_dir`() -> str
- `user_desktop_dir`() -> str
- `user_runtime_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> str
- `site_runtime_dir`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> str
- `user_data_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, roaming: bool, ensure_exists: bool) -> Path
- `site_data_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, multipath: bool, ensure_exists: bool) -> Path
- `user_config_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, roaming: bool, ensure_exists: bool) -> Path
- `site_config_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, multipath: bool, ensure_exists: bool) -> Path
- `site_cache_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> Path
- `user_cache_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> Path
- `user_state_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, roaming: bool, ensure_exists: bool) -> Path
- `user_log_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> Path
- `user_documents_path`() -> Path
- `user_downloads_path`() -> Path
- `user_pictures_path`() -> Path
- `user_videos_path`() -> Path
- `user_music_path`() -> Path
- `user_desktop_path`() -> Path
- `user_runtime_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> Path
- `site_runtime_path`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, opinion: bool, ensure_exists: bool) -> Path
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/platformdirs/__init__.py`  
**Dependencies**: `__future__.annotations`, `os`, `sys`, `typing.TYPE_CHECKING`, `api.PlatformDirsABC`, `version.__version__`, `version.__version_tuple__`, `pathlib.Path`, `typing.Literal`, `pip._vendor.platformdirs.windows.Windows`, `pip._vendor.platformdirs.android._android_folder`, `pip._vendor.platformdirs.macos.MacOS`, `pip._vendor.platformdirs.unix.Unix`, `pip._vendor.platformdirs.android.Android`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.platformdirs.api
:::{doc} PlatformDirsABC:14
Abstract base class for platform directories.
:::
**Imports**: `__future__.annotations`, `os`, `abc.ABC`, `abc.abstractmethod`, `pathlib.Path`, `typing.TYPE_CHECKING`, `typing.Iterator`, `typing.Literal`
**Type References**: [[PlatformDirsABC]]

### Interface
- `__init__`(appname: str | None, appauthor: str | None | Literal[False], version: str | None, roaming: bool, multipath: bool, opinion: bool, ensure_exists: bool) -> None
- `_append_app_name_and_version`() -> str
- `_optionally_create_directory`(path: str) -> None
- `user_data_dir`() -> str
- `site_data_dir`() -> str
- `user_config_dir`() -> str
- `site_config_dir`() -> str
- `user_cache_dir`() -> str
- `site_cache_dir`() -> str
- `user_state_dir`() -> str
- `user_log_dir`() -> str
- `user_documents_dir`() -> str
- `user_downloads_dir`() -> str
- `user_pictures_dir`() -> str
- `user_videos_dir`() -> str
- `user_music_dir`() -> str
- `user_desktop_dir`() -> str
- `user_runtime_dir`() -> str
- `site_runtime_dir`() -> str
- `user_data_path`() -> Path
- `site_data_path`() -> Path
- `user_config_path`() -> Path
- `site_config_path`() -> Path
- `user_cache_path`() -> Path
- `site_cache_path`() -> Path
- `user_state_path`() -> Path
- `user_log_path`() -> Path
- `user_documents_path`() -> Path
- `user_downloads_path`() -> Path
- `user_pictures_path`() -> Path
- `user_videos_path`() -> Path
- `user_music_path`() -> Path
- `user_desktop_path`() -> Path
- `user_runtime_path`() -> Path
- `site_runtime_path`() -> Path
- `iter_config_dirs`() -> Iterator[str]
- `iter_data_dirs`() -> Iterator[str]
- `iter_cache_dirs`() -> Iterator[str]
- `iter_runtime_dirs`() -> Iterator[str]
- `iter_config_paths`() -> Iterator[Path]
- `iter_data_paths`() -> Iterator[Path]
- `iter_cache_paths`() -> Iterator[Path]
- `iter_runtime_paths`() -> Iterator[Path]

### Implementation
**PlatformDirsABC**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/platformdirs/api.py`  
**Dependencies**: `__future__.annotations`, `os`, `abc.ABC`, `abc.abstractmethod`, `pathlib.Path`, `typing.TYPE_CHECKING`, `typing.Iterator`, `typing.Literal`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.platformdirs.android
:::{doc} Android:14
Follows the guidance `from here <https://android.stackexchange.com/a/216132>`_.

Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `version
<platformdirs.api.PlatformDirsABC.version>`, `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
:::
:::{doc} _android_folder:120
:return: base folder for the Android OS or None if it cannot be found
:::
:::{doc} _android_documents_folder:168
:return: documents folder for the Android OS
:::
:::{doc} _android_downloads_folder:184
:return: downloads folder for the Android OS
:::
:::{doc} _android_pictures_folder:200
:return: pictures folder for the Android OS
:::
:::{doc} _android_videos_folder:216
:return: videos folder for the Android OS
:::
:::{doc} _android_music_folder:232
:return: music folder for the Android OS
:::
**Imports**: `__future__.annotations`, `os`, `re`, `sys`, `functools.lru_cache`, `typing.TYPE_CHECKING`, `typing.cast`, `api.PlatformDirsABC`, `jnius.autoclass`, `jnius.autoclass`, `jnius.autoclass`, `jnius.autoclass`, `jnius.autoclass`, `android.mActivity`, `jnius.autoclass`
**Type References**: [[Android]], [[None]]

### Interface
- `_android_folder`() -> str | None
- `_android_documents_folder`() -> str
- `_android_downloads_folder`() -> str
- `_android_pictures_folder`() -> str
- `_android_videos_folder`() -> str
- `_android_music_folder`() -> str
- `user_data_dir`() -> str
- `site_data_dir`() -> str
- `user_config_dir`() -> str
- `site_config_dir`() -> str
- `user_cache_dir`() -> str
- `site_cache_dir`() -> str
- `user_state_dir`() -> str
- `user_log_dir`() -> str
- `user_documents_dir`() -> str
- `user_downloads_dir`() -> str
- `user_pictures_dir`() -> str
- `user_videos_dir`() -> str
- `user_music_dir`() -> str
- `user_desktop_dir`() -> str
- `user_runtime_dir`() -> str
- `site_runtime_dir`() -> str

### Implementation
**Android**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/platformdirs/android.py`  
**Dependencies**: `__future__.annotations`, `os`, `re`, `sys`, `functools.lru_cache`, `typing.TYPE_CHECKING`, `typing.cast`, `api.PlatformDirsABC`, `jnius.autoclass`, `jnius.autoclass`, `jnius.autoclass`, `jnius.autoclass`, `jnius.autoclass`, `android.mActivity`, `jnius.autoclass`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.platformdirs.windows
:::{doc} Windows:16
`MSDN on where to store app data files <https://learn.microsoft.com/en-us/windows/win32/shell/knownfolderid>`_.

Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `appauthor
<platformdirs.api.PlatformDirsABC.appauthor>`, `version <platformdirs.api.PlatformDirsABC.version>`, `roaming
<platformdirs.api.PlatformDirsABC.roaming>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists
<platformdirs.api.PlatformDirsABC.ensure_exists>`.
:::
:::{doc} get_win_folder_from_env_vars:143
Get folder from environment variables.
:::
:::{doc} get_win_folder_if_csidl_name_not_env_var:164
Get a folder for a CSIDL name that does not exist as an environment variable.
:::
:::{doc} get_win_folder_from_registry:183
Get folder from the registry.

This is a fallback technique at best. I'm not sure if using the registry for these guarantees us the correct answer
for all CSIDL_* names.
:::
:::{doc} get_win_folder_via_ctypes:213
Get folder with ctypes.
:::
**Imports**: `__future__.annotations`, `os`, `sys`, `functools.lru_cache`, `typing.TYPE_CHECKING`, `api.PlatformDirsABC`, `collections.abc.Callable`, `winreg`, `ctypes`, `ctypes`, `winreg`
**Type References**: [[Windows]]

### Interface
- `get_win_folder_from_env_vars`(csidl_name: str) -> str
- `get_win_folder_if_csidl_name_not_env_var`(csidl_name: str) -> str | None
- `get_win_folder_from_registry`(csidl_name: str) -> str
- `get_win_folder_via_ctypes`(csidl_name: str) -> str
- `_pick_get_win_folder`() -> Callable[<ast.Tuple object at 0x164092590>]
- `user_data_dir`() -> str
- `_append_parts`(path: str) -> str
- `site_data_dir`() -> str
- `user_config_dir`() -> str
- `site_config_dir`() -> str
- `user_cache_dir`() -> str
- `site_cache_dir`() -> str
- `user_state_dir`() -> str
- `user_log_dir`() -> str
- `user_documents_dir`() -> str
- `user_downloads_dir`() -> str
- `user_pictures_dir`() -> str
- `user_videos_dir`() -> str
- `user_music_dir`() -> str
- `user_desktop_dir`() -> str
- `user_runtime_dir`() -> str
- `site_runtime_dir`() -> str

### Implementation
**Windows**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/platformdirs/windows.py`  
**Dependencies**: `__future__.annotations`, `os`, `sys`, `functools.lru_cache`, `typing.TYPE_CHECKING`, `api.PlatformDirsABC`, `collections.abc.Callable`, `winreg`, `ctypes`, `ctypes`, `winreg`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.platformdirs.__main__
:::{doc} main:26
Run the main entry point.
:::
**Imports**: `__future__.annotations`, `pip._vendor.platformdirs.PlatformDirs`, `pip._vendor.platformdirs.__version__`
### Interface
- `main`() -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/platformdirs/__main__.py`  
**Dependencies**: `__future__.annotations`, `pip._vendor.platformdirs.PlatformDirs`, `pip._vendor.platformdirs.__version__`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.resolvelib.compat



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/resolvelib/compat/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.resolvelib.compat.collections_abc

**Imports**: `collections.abc.Mapping`, `collections.abc.Sequence`, `collections.Mapping`, `collections.Sequence`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/resolvelib/compat/collections_abc.py`  
**Dependencies**: `collections.abc.Mapping`, `collections.abc.Sequence`, `collections.Mapping`, `collections.Sequence`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.util.queue

**Imports**: `collections`, `packages.six`, `packages.six.moves.queue`, `Queue`
**Type References**: [[LifoQueue]]

### Interface
- `_init`() -> Any
- `_qsize`() -> Any
- `_put`() -> Any
- `_get`() -> Any

### Implementation
**LifoQueue**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/util/queue.py`  
**Dependencies**: `collections`, `packages.six`, `packages.six.moves.queue`, `Queue`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.util.ssltransport
:::{doc} SSLTransport:11
The SSLTransport wraps an existing socket and establishes an SSL connection.

Contrary to Python's implementation of SSLSocket, it allows you to chain
multiple TLS connections together. It's particularly useful if you need to
implement TLS within TLS.

The class supports most of the socket API operations.
:::
**Imports**: `io`, `socket`, `ssl`, `exceptions.ProxySchemeUnsupported`, `packages.six`
**Type References**: [[SSLTransport]]

### Interface
- `_validate_ssl_context_for_tls_in_tls`() -> Any
- `__init__`() -> Any
- `__enter__`() -> Any
- `__exit__`() -> Any
- `fileno`() -> Any
- `read`() -> Any
- `recv`() -> Any
- `recv_into`() -> Any
- `sendall`() -> Any
- `send`() -> Any
- `makefile`() -> Any
- `unwrap`() -> Any
- `close`() -> Any
- `getpeercert`() -> Any
- `version`() -> Any
- `cipher`() -> Any
- `selected_alpn_protocol`() -> Any
- `selected_npn_protocol`() -> Any
- `shared_ciphers`() -> Any
- `compression`() -> Any
- `settimeout`() -> Any
- `gettimeout`() -> Any
- `_decref_socketios`() -> Any
- `_wrap_ssl_read`() -> Any
- `_ssl_io_loop`() -> Any

### Implementation
**SSLTransport**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/util/ssltransport.py`  
**Dependencies**: `io`, `socket`, `ssl`, `exceptions.ProxySchemeUnsupported`, `packages.six`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.util.proxy
:::{doc} connection_requires_http_tunnel:4
Returns True if the connection requires an HTTP CONNECT through the proxy.

:param URL proxy_url:
    URL of the proxy.
:param ProxyConfig proxy_config:
    Proxy configuration from poolmanager.py
:param str destination_scheme:
    The scheme of the destination. (i.e https, http, etc)
:::
:::{doc} create_proxy_ssl_context:37
Generates a default proxy ssl context if one hasn't been provided by the
user.
:::
**Imports**: `ssl_.create_urllib3_context`, `ssl_.resolve_cert_reqs`, `ssl_.resolve_ssl_version`
### Interface
- `connection_requires_http_tunnel`() -> Any
- `create_proxy_ssl_context`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/util/proxy.py`  
**Dependencies**: `ssl_.create_urllib3_context`, `ssl_.resolve_cert_reqs`, `ssl_.resolve_ssl_version`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.util.wait
:::{doc} wait_for_read:141
Waits for reading to be available on a given socket.
Returns True if the socket is readable, or False if the timeout expired.
:::
:::{doc} wait_for_write:148
Waits for writing to be available on a given socket.
Returns True if the socket is readable, or False if the timeout expired.
:::
**Imports**: `errno`, `select`, `sys`, `functools.partial`, `time.monotonic`, `time.time`
**Type References**: [[NoWayToWaitForSocketError]]

### Interface
- `select_wait_for_socket`() -> Any
- `poll_wait_for_socket`() -> Any
- `null_wait_for_socket`() -> Any
- `_have_working_poll`() -> Any
- `wait_for_socket`() -> Any
- `wait_for_read`() -> Any
- `wait_for_write`() -> Any
- `_retry_on_intr`() -> Any
- `do_poll`() -> Any

### Implementation
**NoWayToWaitForSocketError**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/util/wait.py`  
**Dependencies**: `errno`, `select`, `sys`, `functools.partial`, `time.monotonic`, `time.time`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.util.request
:::{doc} make_headers:20
Shortcuts for generating request headers.

:param keep_alive:
    If ``True``, adds 'connection: keep-alive' header.

:param accept_encoding:
    Can be a boolean, list, or string.
    ``True`` translates to 'gzip,deflate'.
    List will get joined by comma.
    String will be used as provided.

:param user_agent:
    String representing the user-agent you want, such as
    "python-urllib3/0.6"

:param basic_auth:
    Colon-separated username:password string for 'authorization: basic ...'
    auth header.

:param proxy_basic_auth:
    Colon-separated username:password string for 'proxy-authorization: basic ...'
    auth header.

:param disable_cache:
    If ``True``, adds 'cache-control: no-cache' header.

Example::

    >>> make_headers(keep_alive=True, user_agent="Batman/1.0")
    {'connection': 'keep-alive', 'user-agent': 'Batman/1.0'}
    >>> make_headers(accept_encoding=True)
    {'accept-encoding': 'gzip,deflate'}
:::
:::{doc} set_file_position:92
If a position is provided, move file to that point.
Otherwise, we'll attempt to record a position for future use.
:::
:::{doc} rewind_body:110
Attempt to rewind body to a certain position.
Primarily used for request redirects and retries.

:param body:
    File-like object that supports seek.

:param int pos:
    Position to seek to in file.
:::
**Imports**: `__future__.absolute_import`, `base64.b64encode`, `exceptions.UnrewindableBodyError`, `packages.six.b`, `packages.six.integer_types`
### Interface
- `make_headers`() -> Any
- `set_file_position`() -> Any
- `rewind_body`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/util/request.py`  
**Dependencies**: `__future__.absolute_import`, `base64.b64encode`, `exceptions.UnrewindableBodyError`, `packages.six.b`, `packages.six.integer_types`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.util.timeout
:::{doc} Timeout:19
Timeout configuration.

Timeouts can be defined as a default for a pool:

.. code-block:: python

   timeout = Timeout(connect=2.0, read=7.0)
   http = PoolManager(timeout=timeout)
   response = http.request('GET', 'http://example.com/')

Or per-request (which overrides the default for the pool):

.. code-block:: python

   response = http.request('GET', 'http://example.com/', timeout=Timeout(10))

Timeouts can be disabled by setting all the parameters to ``None``:

.. code-block:: python

   no_timeout = Timeout(connect=None, read=None)
   response = http.request('GET', 'http://example.com/, timeout=no_timeout)


:param total:
    This combines the connect and read timeouts into one; the read timeout
    will be set to the time leftover from the connect attempt. In the
    event that both a connect timeout and a total are specified, or a read
    timeout and a total are specified, the shorter timeout will be applied.

    Defaults to None.

:type total: int, float, or None

:param connect:
    The maximum amount of time (in seconds) to wait for a connection
    attempt to a server to succeed. Omitting the parameter will default the
    connect timeout to the system default, probably `the global default
    timeout in socket.py
    <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.
    None will set an infinite timeout for connection attempts.

:type connect: int, float, or None

:param read:
    The maximum amount of time (in seconds) to wait between consecutive
    read operations for a response from the server. Omitting the parameter
    will default the read timeout to the system default, probably `the
    global default timeout in socket.py
    <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.
    None will set an infinite timeout.

:type read: int, float, or None

.. note::

    Many factors can affect the total amount of time for urllib3 to return
    an HTTP response.

    For example, Python's DNS resolver does not obey the timeout specified
    on the socket. Other factors that can affect total request time include
    high CPU load, high swap, the program running at a low priority level,
    or other behaviors.

    In addition, the read and total timeouts only measure the time between
    read operations on the socket connecting the client and the server,
    not the total amount of time for the request to return a complete
    response. For most requests, the timeout is raised because the server
    has not sent the first byte in the specified time. This is not always
    the case; if a server streams one byte every fifteen seconds, a timeout
    of 20 seconds will not trigger, even though the request will take
    several minutes to complete.

    If your goal is to cut off any request after a set amount of wall clock
    time, consider having a second "watcher" thread to cut off a slow
    request.
:::
**Imports**: `__future__.absolute_import`, `time`, `socket._GLOBAL_DEFAULT_TIMEOUT`, `socket.getdefaulttimeout`, `exceptions.TimeoutStateError`
**Type References**: [[Timeout]]

### Interface
- `__init__`() -> Any
- `__repr__`() -> Any
- `resolve_default_timeout`() -> Any
- `_validate_timeout`() -> Any
- `from_float`() -> Any
- `clone`() -> Any
- `start_connect`() -> Any
- `get_connect_duration`() -> Any
- `connect_timeout`() -> Any
- `read_timeout`() -> Any

### Implementation
**Timeout**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/util/timeout.py`  
**Dependencies**: `__future__.absolute_import`, `time`, `socket._GLOBAL_DEFAULT_TIMEOUT`, `socket.getdefaulttimeout`, `exceptions.TimeoutStateError`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.util

**Imports**: `__future__.absolute_import`, `connection.is_connection_dropped`, `request.SKIP_HEADER`, `request.SKIPPABLE_HEADERS`, `request.make_headers`, `response.is_fp_closed`, `retry.Retry`, `ssl_.ALPN_PROTOCOLS`, `ssl_.HAS_SNI`, `ssl_.IS_PYOPENSSL`, `ssl_.IS_SECURETRANSPORT`, `ssl_.PROTOCOL_TLS`, `ssl_.SSLContext`, `ssl_.assert_fingerprint`, `ssl_.resolve_cert_reqs`, `ssl_.resolve_ssl_version`, `ssl_.ssl_wrap_socket`, `timeout.Timeout`, `timeout.current_time`, `url.Url`, `url.get_host`, `url.parse_url`, `url.split_first`, `wait.wait_for_read`, `wait.wait_for_write`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/util/__init__.py`  
**Dependencies**: `__future__.absolute_import`, `connection.is_connection_dropped`, `request.SKIP_HEADER`, `request.SKIPPABLE_HEADERS`, `request.make_headers`, `response.is_fp_closed`, `retry.Retry`, `ssl_.ALPN_PROTOCOLS`, `ssl_.HAS_SNI`, `ssl_.IS_PYOPENSSL`, `ssl_.IS_SECURETRANSPORT`, `ssl_.PROTOCOL_TLS`, `ssl_.SSLContext`, `ssl_.assert_fingerprint`, `ssl_.resolve_cert_reqs`, `ssl_.resolve_ssl_version`, `ssl_.ssl_wrap_socket`, `timeout.Timeout`, `timeout.current_time`, `url.Url`, `url.get_host`, `url.parse_url`, `url.split_first`, `wait.wait_for_read`, `wait.wait_for_write`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.util.response
:::{doc} is_fp_closed:9
Checks whether a given file-like object is closed.

:param obj:
    The file-like object to check.
:::
:::{doc} assert_header_parsing:40
Asserts whether all headers have been successfully parsed.
Extracts encountered errors from the result of parsing headers.

Only works on Python 3.

:param http.client.HTTPMessage headers: Headers to verify.

:raises urllib3.exceptions.HeaderParsingError:
    If parsing errors are found.
:::
:::{doc} is_response_to_head:94
Checks whether the request of a response has been a HEAD-request.
Handles the quirks of AppEngine.

:param http.client.HTTPResponse response:
    Response to check if the originating request
    used 'HEAD' as a method.
:::
**Imports**: `__future__.absolute_import`, `email.errors.MultipartInvariantViolationDefect`, `email.errors.StartBoundaryNotFoundDefect`, `exceptions.HeaderParsingError`, `packages.six.moves.http_client`
### Interface
- `is_fp_closed`() -> Any
- `assert_header_parsing`() -> Any
- `is_response_to_head`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/util/response.py`  
**Dependencies**: `__future__.absolute_import`, `email.errors.MultipartInvariantViolationDefect`, `email.errors.StartBoundaryNotFoundDefect`, `exceptions.HeaderParsingError`, `packages.six.moves.http_client`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.util.ssl_
:::{doc} _const_compare_digest_backport:33
Compare two digests of equal length in constant time.

The digests must be of type str/bytes.
Returns True if the digests match, and False otherwise.
:::
:::{doc} assert_fingerprint:185
Checks if given fingerprint matches the supplied certificate.

:param cert:
    Certificate as bytes object.
:param fingerprint:
    Fingerprint as string of hexdigits, can be interspersed by colons.
:::
:::{doc} resolve_cert_reqs:220
Resolves the argument to a numeric constant, which can be passed to
the wrap_socket function/method from the ssl module.
Defaults to :data:`ssl.CERT_REQUIRED`.
If given a string it is assumed to be the name of the constant in the
:mod:`ssl` module or its abbreviation.
(So you can specify `REQUIRED` instead of `CERT_REQUIRED`.
If it's neither `None` nor a string we assume it is already the numeric
constant which can directly be passed to wrap_socket.
:::
:::{doc} resolve_ssl_version:243
like resolve_cert_reqs
:::
:::{doc} create_urllib3_context:259
All arguments have the same meaning as ``ssl_wrap_socket``.

By default, this function does a lot of the same work that
``ssl.create_default_context`` does on Python 3.4+. It:

- Disables SSLv2, SSLv3, and compression
- Sets a restricted set of server ciphers

If you wish to enable SSLv3, you can do::

    from pip._vendor.urllib3.util import ssl_
    context = ssl_.create_urllib3_context()
    context.options &= ~ssl_.OP_NO_SSLv3

You can do the same to enable compression (substituting ``COMPRESSION``
for ``SSLv3`` in the last line above).

:param ssl_version:
    The desired protocol version to use. This will default to
    PROTOCOL_SSLv23 which will negotiate the highest protocol that both
    the server and your installation of OpenSSL support.
:param cert_reqs:
    Whether to require the certificate verification. This defaults to
    ``ssl.CERT_REQUIRED``.
:param options:
    Specific OpenSSL options. These default to ``ssl.OP_NO_SSLv2``,
    ``ssl.OP_NO_SSLv3``, ``ssl.OP_NO_COMPRESSION``, and ``ssl.OP_NO_TICKET``.
:param ciphers:
    Which cipher suites to allow the server to select.
:returns:
    Constructed SSLContext object with specified options
:rtype: SSLContext
:::
:::{doc} ssl_wrap_socket:364
All arguments except for server_hostname, ssl_context, and ca_cert_dir have
the same meaning as they do when using :func:`ssl.wrap_socket`.

:param server_hostname:
    When SNI is supported, the expected hostname of the certificate
:param ssl_context:
    A pre-made :class:`SSLContext` object. If none is provided, one will
    be created using :func:`create_urllib3_context`.
:param ciphers:
    A string of ciphers we wish the client to support.
:param ca_cert_dir:
    A directory containing CA certificates in multiple separate files, as
    supported by OpenSSL's -CApath flag or the capath argument to
    SSLContext.load_verify_locations().
:param key_password:
    Optional password if the keyfile is encrypted.
:param ca_cert_data:
    Optional string containing CA certificates in PEM format suitable for
    passing as the cadata parameter to SSLContext.load_verify_locations()
:param tls_in_tls:
    Use SSLTransport to wrap the existing socket.
:::
:::{doc} is_ipaddress:466
Detects whether the hostname given is an IPv4 or IPv6 address.
Also detects IPv6 addresses with Zone IDs.

:param str hostname: Hostname to examine.
:return: True if the hostname is an IP address, False otherwise.
:::
:::{doc} _is_key_file_encrypted:479
Detects if a key file is encrypted or not.
:::
**Imports**: `__future__.absolute_import`, `hashlib`, `hmac`, `os`, `sys`, `warnings`, `binascii.hexlify`, `binascii.unhexlify`, `exceptions.InsecurePlatformWarning`, `exceptions.ProxySchemeUnsupported`, `exceptions.SNIMissingWarning`, `exceptions.SSLError`, `packages.six`, `url.BRACELESS_IPV6_ADDRZ_RE`, `url.IPV4_RE`, `ssl`, `ssl.CERT_REQUIRED`, `ssl.wrap_socket`, `ssl.HAS_SNI`, `ssltransport.SSLTransport`, `ssl.PROTOCOL_TLS`, `ssl.PROTOCOL_TLS_CLIENT`, `ssl.OP_NO_COMPRESSION`, `ssl.OP_NO_SSLv2`, `ssl.OP_NO_SSLv3`, `ssl.OP_NO_TICKET`, `ssl.SSLContext`, `ssl.PROTOCOL_SSLv23`
**Type References**: [[SSLContext]]

### Interface
- `_const_compare_digest_backport`() -> Any
- `assert_fingerprint`() -> Any
- `resolve_cert_reqs`() -> Any
- `resolve_ssl_version`() -> Any
- `create_urllib3_context`() -> Any
- `ssl_wrap_socket`() -> Any
- `is_ipaddress`() -> Any
- `_is_key_file_encrypted`() -> Any
- `_ssl_wrap_socket_impl`() -> Any
- `disable_check_hostname`() -> Any
- `__init__`() -> Any
- `load_cert_chain`() -> Any
- `load_verify_locations`() -> Any
- `set_ciphers`() -> Any
- `wrap_socket`() -> Any

### Implementation
**SSLContext**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/util/ssl_.py`  
**Dependencies**: `__future__.absolute_import`, `hashlib`, `hmac`, `os`, `sys`, `warnings`, `binascii.hexlify`, `binascii.unhexlify`, `exceptions.InsecurePlatformWarning`, `exceptions.ProxySchemeUnsupported`, `exceptions.SNIMissingWarning`, `exceptions.SSLError`, `packages.six`, `url.BRACELESS_IPV6_ADDRZ_RE`, `url.IPV4_RE`, `ssl`, `ssl.CERT_REQUIRED`, `ssl.wrap_socket`, `ssl.HAS_SNI`, `ssltransport.SSLTransport`, `ssl.PROTOCOL_TLS`, `ssl.PROTOCOL_TLS_CLIENT`, `ssl.OP_NO_COMPRESSION`, `ssl.OP_NO_SSLv2`, `ssl.OP_NO_SSLv3`, `ssl.OP_NO_TICKET`, `ssl.SSLContext`, `ssl.PROTOCOL_SSLv23`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.util.retry
:::{doc} Retry:92
Retry configuration.

Each retry attempt will create a new Retry object with updated values, so
they can be safely reused.

Retries can be defined as a default for a pool::

    retries = Retry(connect=5, read=2, redirect=5)
    http = PoolManager(retries=retries)
    response = http.request('GET', 'http://example.com/')

Or per-request (which overrides the default for the pool)::

    response = http.request('GET', 'http://example.com/', retries=Retry(10))

Retries can be disabled by passing ``False``::

    response = http.request('GET', 'http://example.com/', retries=False)

Errors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless
retries are disabled, in which case the causing exception will be raised.

:param int total:
    Total number of retries to allow. Takes precedence over other counts.

    Set to ``None`` to remove this constraint and fall back on other
    counts.

    Set to ``0`` to fail on the first retry.

    Set to ``False`` to disable and imply ``raise_on_redirect=False``.

:param int connect:
    How many connection-related errors to retry on.

    These are errors raised before the request is sent to the remote server,
    which we assume has not triggered the server to process the request.

    Set to ``0`` to fail on the first retry of this type.

:param int read:
    How many times to retry on read errors.

    These errors are raised after the request was sent to the server, so the
    request may have side-effects.

    Set to ``0`` to fail on the first retry of this type.

:param int redirect:
    How many redirects to perform. Limit this to avoid infinite redirect
    loops.

    A redirect is a HTTP response with a status code 301, 302, 303, 307 or
    308.

    Set to ``0`` to fail on the first retry of this type.

    Set to ``False`` to disable and imply ``raise_on_redirect=False``.

:param int status:
    How many times to retry on bad status codes.

    These are retries made on responses, where status code matches
    ``status_forcelist``.

    Set to ``0`` to fail on the first retry of this type.

:param int other:
    How many times to retry on other errors.

    Other errors are errors that are not connect, read, redirect or status errors.
    These errors might be raised after the request was sent to the server, so the
    request might have side-effects.

    Set to ``0`` to fail on the first retry of this type.

    If ``total`` is not set, it's a good idea to set this to 0 to account
    for unexpected edge cases and avoid infinite retry loops.

:param iterable allowed_methods:
    Set of uppercased HTTP method verbs that we should retry on.

    By default, we only retry on methods which are considered to be
    idempotent (multiple requests with the same parameters end with the
    same state). See :attr:`Retry.DEFAULT_ALLOWED_METHODS`.

    Set to a ``False`` value to retry on any verb.

    .. warning::

        Previously this parameter was named ``method_whitelist``, that
        usage is deprecated in v1.26.0 and will be removed in v2.0.

:param iterable status_forcelist:
    A set of integer HTTP status codes that we should force a retry on.
    A retry is initiated if the request method is in ``allowed_methods``
    and the response status code is in ``status_forcelist``.

    By default, this is disabled with ``None``.

:param float backoff_factor:
    A backoff factor to apply between attempts after the second try
    (most errors are resolved immediately by a second try without a
    delay). urllib3 will sleep for::

        {backoff factor} * (2 ** ({number of total retries} - 1))

    seconds. If the backoff_factor is 0.1, then :func:`.sleep` will sleep
    for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer
    than :attr:`Retry.DEFAULT_BACKOFF_MAX`.

    By default, backoff is disabled (set to 0).

:param bool raise_on_redirect: Whether, if the number of redirects is
    exhausted, to raise a MaxRetryError, or to return a response with a
    response code in the 3xx range.

:param bool raise_on_status: Similar meaning to ``raise_on_redirect``:
    whether we should raise an exception, or return a response,
    if status falls in ``status_forcelist`` range and retries have
    been exhausted.

:param tuple history: The history of the request encountered during
    each call to :meth:`~Retry.increment`. The list is in the order
    the requests occurred. Each list item is of class :class:`RequestHistory`.

:param bool respect_retry_after_header:
    Whether to respect Retry-After header on status codes defined as
    :attr:`Retry.RETRY_AFTER_STATUS_CODES` or not.

:param iterable remove_headers_on_redirect:
    Sequence of headers to remove from the request when a response
    indicating a redirect is returned before firing off the redirected
    request.
:::
**Imports**: `__future__.absolute_import`, `email`, `logging`, `re`, `time`, `warnings`, `collections.namedtuple`, `itertools.takewhile`, `exceptions.ConnectTimeoutError`, `exceptions.InvalidHeader`, `exceptions.MaxRetryError`, `exceptions.ProtocolError`, `exceptions.ProxyError`, `exceptions.ReadTimeoutError`, `exceptions.ResponseError`, `packages.six`
**Type References**: [[Retry]], [[_RetryMeta]]

### Interface
- `DEFAULT_METHOD_WHITELIST`() -> Any
- `DEFAULT_REDIRECT_HEADERS_BLACKLIST`() -> Any
- `BACKOFF_MAX`() -> Any
- `__init__`() -> Any
- `new`() -> Any
- `from_int`() -> Any
- `get_backoff_time`() -> Any
- `parse_retry_after`() -> Any
- `get_retry_after`() -> Any
- `sleep_for_retry`() -> Any
- `_sleep_backoff`() -> Any
- `sleep`() -> Any
- `_is_connection_error`() -> Any
- `_is_read_error`() -> Any
- `_is_method_retryable`() -> Any
- `is_retry`() -> Any
- `is_exhausted`() -> Any
- `increment`() -> Any
- `__repr__`() -> Any
- `__getattr__`() -> Any

### Implementation
**_RetryMeta**

**Retry**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/util/retry.py`  
**Dependencies**: `__future__.absolute_import`, `email`, `logging`, `re`, `time`, `warnings`, `collections.namedtuple`, `itertools.takewhile`, `exceptions.ConnectTimeoutError`, `exceptions.InvalidHeader`, `exceptions.MaxRetryError`, `exceptions.ProtocolError`, `exceptions.ProxyError`, `exceptions.ReadTimeoutError`, `exceptions.ResponseError`, `packages.six`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.util.url
:::{doc} Url:82
Data structure for representing an HTTP URL. Used as a return value for
:func:`parse_url`. Both the scheme and host are normalized as they are
both case-insensitive according to RFC 3986.
:::
:::{doc} split_first:175
.. deprecated:: 1.25

Given a string and an iterable of delimiters, split on the first found
delimiter. Return two split parts and the matched delimiter.

If not found, then the first part is the full input string.

Example::

    >>> split_first('foo/bar?baz', '?/=')
    ('foo', 'bar?baz', '/')
    >>> split_first('foo/bar?baz', '123')
    ('foo/bar?baz', '', None)

Scales linearly with number of delims. Not ideal for large number of delims.
:::
:::{doc} _encode_invalid_chars:210
Percent-encodes a URI component without reapplying
onto an already percent-encoded component.
:::
:::{doc} _encode_target:323
Percent-encodes a request target so that there are no invalid characters
:::
:::{doc} parse_url:333
Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is
performed to parse incomplete urls. Fields not provided will be None.
This parser is RFC 3986 and RFC 6874 compliant.

The parser logic and helper functions are based heavily on
work done in the ``rfc3986`` module.

:param str url: URL to parse into a :class:`.Url` namedtuple.

Partly backwards-compatible with :mod:`urlparse`.

Example::

    >>> parse_url('http://google.com/mail/')
    Url(scheme='http', host='google.com', port=None, path='/mail/', ...)
    >>> parse_url('google.com:80')
    Url(scheme=None, host='google.com', port=80, path=None, ...)
    >>> parse_url('/foo?bar')
    Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)
:::
:::{doc} get_host:430
Deprecated. Use :func:`parse_url` instead.
:::
**Imports**: `__future__.absolute_import`, `re`, `collections.namedtuple`, `exceptions.LocationParseError`, `packages.six`, `pip._vendor.idna`
**Type References**: [[Url]]

### Interface
- `split_first`() -> Any
- `_encode_invalid_chars`() -> Any
- `_remove_path_dot_segments`() -> Any
- `_normalize_host`() -> Any
- `_idna_encode`() -> Any
- `_encode_target`() -> Any
- `parse_url`() -> Any
- `get_host`() -> Any
- `__new__`() -> Any
- `hostname`() -> Any
- `request_uri`() -> Any
- `netloc`() -> Any
- `url`() -> Any
- `__str__`() -> Any
- `ensure_type`() -> Any

### Implementation
**Url**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/util/url.py`  
**Dependencies**: `__future__.absolute_import`, `re`, `collections.namedtuple`, `exceptions.LocationParseError`, `packages.six`, `pip._vendor.idna`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.util.connection
:::{doc} is_connection_dropped:11
Returns True if the connection is dropped and should be closed.

:param conn:
    :class:`http.client.HTTPConnection` object.

Note: For platforms like AppEngine, this will always return ``False`` to
let the platform handle connection recycling transparently for us.
:::
:::{doc} create_connection:37
Connect to *address* and return the socket object.

Convenience function.  Connect to *address* (a 2-tuple ``(host,
port)``) and return the socket object.  Passing the optional
*timeout* parameter will set the timeout on the socket instance
before attempting to connect.  If no *timeout* is supplied, the
global default timeout setting returned by :func:`socket.getdefaulttimeout`
is used.  If *source_address* is set it must be a tuple of (host, port)
for the socket to bind as a source address before making the connection.
An host of '' or port 0 tells the OS to use the default.
:::
:::{doc} allowed_gai_family:108
This function is designed to work in the context of
getaddrinfo, where family=socket.AF_UNSPEC is the default and
will perform a DNS search for both IPv6 and IPv4 records.
:::
:::{doc} _has_ipv6:119
Returns True if the system can bind an IPv6 address.
:::
**Imports**: `__future__.absolute_import`, `socket`, `contrib._appengine_environ`, `exceptions.LocationParseError`, `packages.six`, `wait.NoWayToWaitForSocketError`, `wait.wait_for_read`
### Interface
- `is_connection_dropped`() -> Any
- `create_connection`() -> Any
- `_set_socket_options`() -> Any
- `allowed_gai_family`() -> Any
- `_has_ipv6`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/util/connection.py`  
**Dependencies**: `__future__.absolute_import`, `socket`, `contrib._appengine_environ`, `exceptions.LocationParseError`, `packages.six`, `wait.NoWayToWaitForSocketError`, `wait.wait_for_read`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.util.ssl_match_hostname
:::{doc} _dnsname_match:25
Matching according to RFC 6125, section 6.4.3

http://tools.ietf.org/html/rfc6125#section-6.4.3
:::
:::{doc} _ipaddress_match:86
Exact matching of IP addresses.

RFC 6125 explicitly doesn't define an algorithm for this
(section 1.7.2 - "Out of Scope").
:::
:::{doc} match_hostname:98
Verify that *cert* (in decoded format as returned by
SSLSocket.getpeercert()) matches the *hostname*.  RFC 2818 and RFC 6125
rules are followed, but IP addresses are not accepted for *hostname*.

CertificateError is raised on failure. On success, the function
returns nothing.
:::
**Imports**: `re`, `sys`, `ipaddress`
**Type References**: [[CertificateError]]

### Interface
- `_dnsname_match`() -> Any
- `_to_unicode`() -> Any
- `_ipaddress_match`() -> Any
- `match_hostname`() -> Any

### Implementation
**CertificateError**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/util/ssl_match_hostname.py`  
**Dependencies**: `re`, `sys`, `ipaddress`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.contrib.securetransport
:::{doc} inject_into_urllib3:188
Monkey-patch urllib3 with SecureTransport-backed SSL-support.
:::
:::{doc} extract_from_urllib3:200
Undo monkey-patching by :func:`inject_into_urllib3`.
:::
:::{doc} _read_callback:212
SecureTransport read callback. This is called by ST to request that data
be returned from the socket.
:::
:::{doc} _write_callback:267
SecureTransport write callback. This is called by ST to request that data
actually be sent on the network.
:::
:::{doc} WrappedSocket:325
API-compatibility wrapper for Python's OpenSSL wrapped socket object.

Note: _makefile_refs, _drop(), and _reuse() are needed for the garbage
collector of PyPy.
:::
:::{doc} SecureTransportContext:784
I am a wrapper class for the SecureTransport library, to translate the
interface of the standard library ``SSLContext`` object to calls into
SecureTransport.
:::
**Imports**: `__future__.absolute_import`, `contextlib`, `ctypes`, `errno`, `os.path`, `shutil`, `socket`, `ssl`, `struct`, `threading`, `weakref`, `util`, `packages.six`, `util.ssl_.PROTOCOL_TLS_CLIENT`, `_securetransport.bindings.CoreFoundation`, `_securetransport.bindings.Security`, `_securetransport.bindings.SecurityConst`, `_securetransport.low_level._assert_no_error`, `_securetransport.low_level._build_tls_unknown_ca_alert`, `_securetransport.low_level._cert_array_from_pem`, `_securetransport.low_level._create_cfstring_array`, `_securetransport.low_level._load_client_cert_chain`, `_securetransport.low_level._temporary_keychain`, `socket._fileobject`, `packages.backports.makefile.backport_makefile`
**Type References**: [[SecureTransportContext]], [[WrappedSocket]]

### Interface
- `inject_into_urllib3`() -> Any
- `extract_from_urllib3`() -> Any
- `_read_callback`() -> Any
- `_write_callback`() -> Any
- `__init__`() -> Any
- `_raise_on_error`() -> Any
- `_set_ciphers`() -> Any
- `_set_alpn_protocols`() -> Any
- `_custom_validate`() -> Any
- `_evaluate_trust`() -> Any
- `handshake`() -> Any
- `fileno`() -> Any
- `_decref_socketios`() -> Any
- `recv`() -> Any
- `recv_into`() -> Any
- `settimeout`() -> Any
- `gettimeout`() -> Any
- `send`() -> Any
- `sendall`() -> Any
- `shutdown`() -> Any
- `close`() -> Any
- `getpeercert`() -> Any
- `version`() -> Any
- `_reuse`() -> Any
- `_drop`() -> Any
- `makefile`() -> Any
- `check_hostname`() -> Any
- `options`() -> Any
- `verify_mode`() -> Any
- `set_default_verify_paths`() -> Any
- `load_default_certs`() -> Any
- `set_ciphers`() -> Any
- `load_verify_locations`() -> Any
- `load_cert_chain`() -> Any
- `set_alpn_protocols`() -> Any
- `wrap_socket`() -> Any

### Implementation
**WrappedSocket**

**SecureTransportContext**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/contrib/securetransport.py`  
**Dependencies**: `__future__.absolute_import`, `contextlib`, `ctypes`, `errno`, `os.path`, `shutil`, `socket`, `ssl`, `struct`, `threading`, `weakref`, `util`, `packages.six`, `util.ssl_.PROTOCOL_TLS_CLIENT`, `_securetransport.bindings.CoreFoundation`, `_securetransport.bindings.Security`, `_securetransport.bindings.SecurityConst`, `_securetransport.low_level._assert_no_error`, `_securetransport.low_level._build_tls_unknown_ca_alert`, `_securetransport.low_level._cert_array_from_pem`, `_securetransport.low_level._create_cfstring_array`, `_securetransport.low_level._load_client_cert_chain`, `_securetransport.low_level._temporary_keychain`, `socket._fileobject`, `packages.backports.makefile.backport_makefile`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.contrib



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/contrib/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.contrib.socks
:::{doc} SOCKSConnection:75
A plain-text HTTP connection that connects via a SOCKS proxy.
:::
:::{doc} SOCKSProxyManager:159
A version of the urllib3 ProxyManager that routes connections via the
defined SOCKS proxy.
:::
**Imports**: `__future__.absolute_import`, `socket.error`, `socket.timeout`, `connection.HTTPConnection`, `connection.HTTPSConnection`, `connectionpool.HTTPConnectionPool`, `connectionpool.HTTPSConnectionPool`, `exceptions.ConnectTimeoutError`, `exceptions.NewConnectionError`, `poolmanager.PoolManager`, `util.url.parse_url`, `socks`, `ssl`, `warnings`, `exceptions.DependencyWarning`
**Type References**: [[SOCKSConnection]], [[SOCKSHTTPConnectionPool]], [[SOCKSHTTPSConnection]], [[SOCKSHTTPSConnectionPool]], [[SOCKSProxyManager]]

### Interface
- `__init__`() -> Any
- `_new_conn`() -> Any

### Implementation
**SOCKSConnection**

**SOCKSHTTPSConnection**

**SOCKSHTTPConnectionPool**

**SOCKSHTTPSConnectionPool**

**SOCKSProxyManager**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/contrib/socks.py`  
**Dependencies**: `__future__.absolute_import`, `socket.error`, `socket.timeout`, `connection.HTTPConnection`, `connection.HTTPSConnection`, `connectionpool.HTTPConnectionPool`, `connectionpool.HTTPSConnectionPool`, `exceptions.ConnectTimeoutError`, `exceptions.NewConnectionError`, `poolmanager.PoolManager`, `util.url.parse_url`, `socks`, `ssl`, `warnings`, `exceptions.DependencyWarning`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.contrib._appengine_environ
:::{doc} is_appengine_sandbox:12
Reports if the app is running in the first generation sandbox.

The second generation runtimes are technically still in a sandbox, but it
is much less restrictive, so generally you shouldn't need to check for it.
see https://cloud.google.com/appengine/docs/standard/runtimes
:::
:::{doc} is_prod_appengine_mvms:34
Deprecated.
:::
**Imports**: `os`
### Interface
- `is_appengine`() -> Any
- `is_appengine_sandbox`() -> Any
- `is_local_appengine`() -> Any
- `is_prod_appengine`() -> Any
- `is_prod_appengine_mvms`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/contrib/_appengine_environ.py`  
**Dependencies**: `os`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.contrib.pyopenssl
:::{doc} inject_into_urllib3:130
Monkey-patch urllib3 with PyOpenSSL-backed SSL-support.
:::
:::{doc} extract_from_urllib3:143
Undo monkey-patching by :func:`inject_into_urllib3`.
:::
:::{doc} _validate_dependencies_met:154
Verifies that PyOpenSSL's package-level dependencies have been met.
Throws `ImportError` if they are not met.
:::
:::{doc} _dnsname_to_stdlib:180
Converts a dNSName SubjectAlternativeName field to the form used by the
standard library on the given Python version.

Cryptography produces a dNSName as a unicode string that was idna-decoded
from ASCII bytes. We need to idna-encode that string to get it back, and
then on Python 3 we also need to convert to unicode via UTF-8 (the stdlib
uses PyUnicode_FromStringAndSize on it, which decodes via UTF-8).

If the name cannot be idna-encoded then we return None signalling that
the name given should be skipped.
:::
:::{doc} get_subj_alt_name:223
Given an PyOpenSSL certificate, provides all the subject alternative names.
:::
:::{doc} WrappedSocket:276
API-compatibility wrapper for Python OpenSSL's Connection-class.

Note: _makefile_refs, _drop() and _reuse() are needed for the garbage
collector of pypy.
:::
:::{doc} PyOpenSSLContext:423
I am a wrapper class for the PyOpenSSL ``Context`` object. I am responsible
for translating the interface of the standard library ``SSLContext`` object
to calls into PyOpenSSL.
:::
**Imports**: `__future__.absolute_import`, `OpenSSL.crypto`, `OpenSSL.SSL`, `cryptography.x509`, `cryptography.hazmat.backends.openssl.backend`, `io.BytesIO`, `socket.error`, `socket.timeout`, `logging`, `ssl`, `sys`, `warnings`, `util`, `packages.six`, `util.ssl_.PROTOCOL_TLS_CLIENT`, `cryptography.x509.UnsupportedExtension`, `socket._fileobject`, `cryptography.x509.extensions.Extensions`, `OpenSSL.crypto.X509`, `packages.backports.makefile.backport_makefile`, `pip._vendor.idna`
**Type References**: [[PyOpenSSLContext]], [[UnsupportedExtension]], [[WrappedSocket]]

### Interface
- `inject_into_urllib3`() -> Any
- `extract_from_urllib3`() -> Any
- `_validate_dependencies_met`() -> Any
- `_dnsname_to_stdlib`() -> Any
- `get_subj_alt_name`() -> Any
- `_verify_callback`() -> Any
- `idna_encode`() -> Any
- `__init__`() -> Any
- `fileno`() -> Any
- `_decref_socketios`() -> Any
- `recv`() -> Any
- `recv_into`() -> Any
- `settimeout`() -> Any
- `_send_until_done`() -> Any
- `sendall`() -> Any
- `shutdown`() -> Any
- `close`() -> Any
- `getpeercert`() -> Any
- `version`() -> Any
- `_reuse`() -> Any
- `_drop`() -> Any
- `makefile`() -> Any
- `options`() -> Any
- `verify_mode`() -> Any
- `set_default_verify_paths`() -> Any
- `set_ciphers`() -> Any
- `load_verify_locations`() -> Any
- `load_cert_chain`() -> Any
- `set_alpn_protocols`() -> Any
- `wrap_socket`() -> Any

### Implementation
**WrappedSocket**

**PyOpenSSLContext**

**UnsupportedExtension**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py`  
**Dependencies**: `__future__.absolute_import`, `OpenSSL.crypto`, `OpenSSL.SSL`, `cryptography.x509`, `cryptography.hazmat.backends.openssl.backend`, `io.BytesIO`, `socket.error`, `socket.timeout`, `logging`, `ssl`, `sys`, `warnings`, `util`, `packages.six`, `util.ssl_.PROTOCOL_TLS_CLIENT`, `cryptography.x509.UnsupportedExtension`, `socket._fileobject`, `cryptography.x509.extensions.Extensions`, `OpenSSL.crypto.X509`, `packages.backports.makefile.backport_makefile`, `pip._vendor.idna`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.contrib.appengine
:::{doc} AppEngineManager:79
Connection manager for Google App Engine sandbox applications.

This manager uses the URLFetch service directly instead of using the
emulated httplib, and is subject to URLFetch limitations as described in
the App Engine documentation `here
<https://cloud.google.com/appengine/docs/python/urlfetch>`_.

Notably it will raise an :class:`AppEnginePlatformError` if:
    * URLFetch is not available.
    * If you attempt to use this on App Engine Flexible, as full socket
      support is available.
    * If a request size is more than 10 megabytes.
    * If a response size is more than 32 megabytes.
    * If you use an unsupported request method such as OPTIONS.

Beyond those cases, it will raise normal urllib3 errors.
:::
**Imports**: `__future__.absolute_import`, `io`, `logging`, `warnings`, `exceptions.HTTPError`, `exceptions.HTTPWarning`, `exceptions.MaxRetryError`, `exceptions.ProtocolError`, `exceptions.SSLError`, `exceptions.TimeoutError`, `packages.six.moves.urllib.parse.urljoin`, `request.RequestMethods`, `response.HTTPResponse`, `util.retry.Retry`, `util.timeout.Timeout`, `_appengine_environ`, `google.appengine.api.urlfetch`
**Type References**: [[AppEngineManager]], [[AppEnginePlatformError]], [[AppEnginePlatformWarning]]

### Interface
- `__init__`() -> Any
- `__enter__`() -> Any
- `__exit__`() -> Any
- `urlopen`() -> Any
- `_urlfetch_response_to_http_response`() -> Any
- `_get_absolute_timeout`() -> Any
- `_get_retries`() -> Any

### Implementation
**AppEnginePlatformWarning**

**AppEnginePlatformError**

**AppEngineManager**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/contrib/appengine.py`  
**Dependencies**: `__future__.absolute_import`, `io`, `logging`, `warnings`, `exceptions.HTTPError`, `exceptions.HTTPWarning`, `exceptions.MaxRetryError`, `exceptions.ProtocolError`, `exceptions.SSLError`, `exceptions.TimeoutError`, `packages.six.moves.urllib.parse.urljoin`, `request.RequestMethods`, `response.HTTPResponse`, `util.retry.Retry`, `util.timeout.Timeout`, `_appengine_environ`, `google.appengine.api.urlfetch`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.contrib.ntlmpool
:::{doc} NTLMConnectionPool:27
Implements an NTLM authentication version of an urllib3 connection pool
:::
**Imports**: `__future__.absolute_import`, `warnings`, `logging.getLogger`, `ntlm.ntlm`, `HTTPSConnectionPool`, `packages.six.moves.http_client.HTTPSConnection`
**Type References**: [[NTLMConnectionPool]]

### Interface
- `__init__`() -> Any
- `_new_conn`() -> Any
- `urlopen`() -> Any

### Implementation
**NTLMConnectionPool**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/contrib/ntlmpool.py`  
**Dependencies**: `__future__.absolute_import`, `warnings`, `logging.getLogger`, `ntlm.ntlm`, `HTTPSConnectionPool`, `packages.six.moves.http_client.HTTPSConnection`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.packages



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/packages/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.packages.six
:::{doc} _add_doc:80
Add documentation to a function.
:::
:::{doc} _import_module:85
Import module, returning the module after the last dot.
:::
:::{doc} _SixMetaPathImporter:165
A meta path importer to import six.moves and its submodules.

This class implements a PEP302 finder and loader. It should be compatible
with Python 2.5 and all existing versions of Python3
:::
:::{doc} _MovedItems:243
Lazy loading of moved objects
:::
:::{doc} Module_six_moves_urllib_parse:352
Lazy loading of moved objects in six.moves.urllib_parse
:::
:::{doc} Module_six_moves_urllib_error:399
Lazy loading of moved objects in six.moves.urllib_error
:::
:::{doc} Module_six_moves_urllib_request:422
Lazy loading of moved objects in six.moves.urllib_request
:::
:::{doc} Module_six_moves_urllib_response:477
Lazy loading of moved objects in six.moves.urllib_response
:::
:::{doc} Module_six_moves_urllib_robotparser:501
Lazy loading of moved objects in six.moves.urllib_robotparser
:::
:::{doc} Module_six_moves_urllib:524
Create a six.moves.urllib namespace that resembles the Python 3 namespace
:::
:::{doc} add_move:544
Add an item to six.moves.
:::
:::{doc} remove_move:549
Remove item from six.moves.
:::
:::{doc} with_metaclass:929
Create a base class with a metaclass.
:::
:::{doc} add_metaclass:953
Class decorator for creating a class with a metaclass.
:::
:::{doc} ensure_binary:973
Coerce **s** to six.binary_type.

For Python 2:
  - `unicode` -> encoded to `str`
  - `str` -> `str`

For Python 3:
  - `str` -> encoded to `bytes`
  - `bytes` -> `bytes`
:::
:::{doc} ensure_str:991
Coerce *s* to `str`.

For Python 2:
  - `unicode` -> encoded to `str`
  - `str` -> `str`

For Python 3:
  - `str` -> `str`
  - `bytes` -> decoded to `str`
:::
:::{doc} ensure_text:1014
Coerce *s* to six.text_type.

For Python 2:
  - `unicode` -> `unicode`
  - `str` -> `unicode`

For Python 3:
  - `str` -> `str`
  - `bytes` -> decoded to `str`
:::
:::{doc} python_2_unicode_compatible:1033
A class decorator that defines __unicode__ and __str__ methods under Python 2.
Under Python 3 it does nothing.

To support Python 2 and 3 with a single code base, define a __str__ method
returning text and apply this decorator to the class.
:::
**Imports**: `__future__.absolute_import`, `functools`, `itertools`, `operator`, `sys`, `types`, `importlib.util.spec_from_loader`, `struct`, `io`, `StringIO`
**Type References**: [[Iterator]], [[Module_six_moves_urllib]], [[Module_six_moves_urllib_error]], [[Module_six_moves_urllib_parse]], [[Module_six_moves_urllib_request]], [[Module_six_moves_urllib_response]], [[Module_six_moves_urllib_robotparser]], [[MovedAttribute]], [[MovedModule]], [[X]], [[_LazyDescr]], [[_LazyModule]], [[_MovedItems]], [[_SixMetaPathImporter]], [[metaclass]]

### Interface
- `_add_doc`() -> Any
- `_import_module`() -> Any
- `add_move`() -> Any
- `remove_move`() -> Any
- `assertCountEqual`() -> Any
- `assertRaisesRegex`() -> Any
- `assertRegex`() -> Any
- `assertNotRegex`() -> Any
- `with_metaclass`() -> Any
- `add_metaclass`() -> Any
- `ensure_binary`() -> Any
- `ensure_str`() -> Any
- `ensure_text`() -> Any
- `python_2_unicode_compatible`() -> Any
- `__init__`() -> Any
- `__get__`() -> Any
- `_resolve`() -> Any
- `__getattr__`() -> Any
- `__dir__`() -> Any
- `_add_module`() -> Any
- `_get_module`() -> Any
- `find_module`() -> Any
- `find_spec`() -> Any
- `__get_module`() -> Any
- `load_module`() -> Any
- `is_package`() -> Any
- `get_code`() -> Any
- `create_module`() -> Any
- `exec_module`() -> Any
- `get_unbound_function`() -> Any
- `create_unbound_method`() -> Any
- `create_bound_method`() -> Any
- `iterkeys`() -> Any
- `itervalues`() -> Any
- `iteritems`() -> Any
- `iterlists`() -> Any
- `b`() -> Any
- `u`() -> Any
- `byte2int`() -> Any
- `indexbytes`() -> Any
- `reraise`() -> Any
- `exec_`() -> Any
- `raise_from`() -> Any
- `print_`() -> Any
- `_update_wrapper`() -> Any
- `wraps`() -> Any
- `wrapper`() -> Any
- `advance_iterator`() -> Any
- `callable`() -> Any
- `next`() -> Any
- `write`() -> Any
- `__new__`() -> Any
- `__prepare__`() -> Any
- `__len__`() -> Any

### Implementation
**_LazyDescr**

**MovedModule**

**_LazyModule**

**MovedAttribute**

**_SixMetaPathImporter**

**_MovedItems**

**Module_six_moves_urllib_parse**

**Module_six_moves_urllib_error**

**Module_six_moves_urllib_request**

**Module_six_moves_urllib_response**

**Module_six_moves_urllib_robotparser**

**Module_six_moves_urllib**

**Iterator**

**metaclass**

**X**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/packages/six.py`  
**Dependencies**: `__future__.absolute_import`, `functools`, `itertools`, `operator`, `sys`, `types`, `importlib.util.spec_from_loader`, `struct`, `io`, `StringIO`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.packages.backports



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/packages/backports/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.packages.backports.makefile
:::{doc} backport_makefile:13
Backport of ``socket.makefile`` from Python 3.5.
:::
**Imports**: `io`, `socket.SocketIO`
### Interface
- `backport_makefile`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/packages/backports/makefile.py`  
**Dependencies**: `io`, `socket.SocketIO`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.packages.backports.weakref_finalize
:::{doc} weakref_finalize:17
Class for finalization of weakrefable objects
finalize(obj, func, *args, **kwargs) returns a callable finalizer
object which will be called when obj is garbage collected. The
first time the finalizer is called it evaluates func(*arg, **kwargs)
and returns the result. After this the finalizer is dead, and
calling it just returns None.
When the program exits any remaining finalizers for which the
atexit attribute is true will be run in reverse order of creation.
By default atexit is true.
:::
**Imports**: `__future__.absolute_import`, `itertools`, `sys`, `weakref.ref`, `atexit`, `gc`
**Type References**: [[_Info]], [[weakref_finalize]]

### Interface
- `__init__`() -> Any
- `__call__`() -> Any
- `detach`() -> Any
- `peek`() -> Any
- `alive`() -> Any
- `atexit`() -> Any
- `__repr__`() -> Any
- `_select_for_exit`() -> Any
- `_exitfunc`() -> Any

### Implementation
**weakref_finalize**

**_Info**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/packages/backports/weakref_finalize.py`  
**Dependencies**: `__future__.absolute_import`, `itertools`, `sys`, `weakref.ref`, `atexit`, `gc`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.contrib._securetransport



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/contrib/_securetransport/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.contrib._securetransport.low_level
:::{doc} _cf_data_from_bytes:27
Given a bytestring, create a CFData object from it. This CFData object must
be CFReleased by the caller.
:::
:::{doc} _cf_dictionary_from_tuples:37
Given a list of Python tuples, create an associated CFDictionary.
:::
:::{doc} _cfstr:59
Given a Python binary data, create a CFString.
The string must be CFReleased by the caller.
:::
:::{doc} _create_cfstring_array:73
Given a list of Python binary data, create an associated CFMutableArray.
The array must be CFReleased by the caller.

Raises an ssl.SSLError on failure.
:::
:::{doc} _cf_string_to_unicode:104
Creates a Unicode string from a CFString object. Used entirely for error
reporting.

Yes, it annoys me quite a lot that this function is this complex.
:::
:::{doc} _assert_no_error:129
Checks the return code and throws an exception if there is an error to
report
:::
:::{doc} _cert_array_from_pem:150
Given a bundle of certs in PEM format, turns them into a CFArray of certs
that can be used to validate a cert chain.
:::
:::{doc} _is_cert:196
Returns True if a given CFTypeRef is a certificate.
:::
:::{doc} _is_identity:204
Returns True if a given CFTypeRef is an identity.
:::
:::{doc} _temporary_keychain:212
This function creates a temporary Mac keychain that we can use to work with
credentials. This keychain uses a one-time password and a temporary file to
store the data. We expect to have one keychain per socket. The returned
SecKeychainRef must be freed by the caller, including calling
SecKeychainDelete.

Returns a tuple of the SecKeychainRef and the path to the temporary
directory that contains it.
:::
:::{doc} _load_items_from_file:247
Given a single file, loads all the trust objects from it into arrays and
the keychain.
Returns a tuple of lists: the first list is a list of identities, the
second a list of certs.
:::
:::{doc} _load_client_cert_chain:302
Load certificates and maybe keys from a number of files. Has the end goal
of returning a CFArray containing one SecIdentityRef, and then zero or more
SecCertificateRef objects, suitable for use as a client certificate trust
chain.
:::
:::{doc} _build_tls_unknown_ca_alert:386
Builds a TLS alert record for an unknown CA.
:::
**Imports**: `base64`, `ctypes`, `itertools`, `os`, `re`, `ssl`, `struct`, `tempfile`, `bindings.CFConst`, `bindings.CoreFoundation`, `bindings.Security`
### Interface
- `_cf_data_from_bytes`() -> Any
- `_cf_dictionary_from_tuples`() -> Any
- `_cfstr`() -> Any
- `_create_cfstring_array`() -> Any
- `_cf_string_to_unicode`() -> Any
- `_assert_no_error`() -> Any
- `_cert_array_from_pem`() -> Any
- `_is_cert`() -> Any
- `_is_identity`() -> Any
- `_temporary_keychain`() -> Any
- `_load_items_from_file`() -> Any
- `_load_client_cert_chain`() -> Any
- `_build_tls_unknown_ca_alert`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py`  
**Dependencies**: `base64`, `ctypes`, `itertools`, `os`, `re`, `ssl`, `struct`, `tempfile`, `bindings.CFConst`, `bindings.CoreFoundation`, `bindings.Security`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.urllib3.contrib._securetransport.bindings
:::{doc} load_cdll:65
Loads a CDLL by name, falling back to known path on 10.16+
:::
:::{doc} CFConst:423
A class object that acts as essentially a namespace for CoreFoundation
constants.
:::
:::{doc} SecurityConst:432
A class object that acts as essentially a namespace for Security constants.
:::
**Imports**: `__future__.absolute_import`, `platform`, `ctypes.CDLL`, `ctypes.CFUNCTYPE`, `ctypes.POINTER`, `ctypes.c_bool`, `ctypes.c_byte`, `ctypes.c_char_p`, `ctypes.c_int32`, `ctypes.c_long`, `ctypes.c_size_t`, `ctypes.c_uint32`, `ctypes.c_ulong`, `ctypes.c_void_p`, `ctypes.util.find_library`, `packages.six.raise_from`
**Type References**: [[CFConst]], [[SecurityConst]]

### Interface
- `load_cdll`() -> Any

### Implementation
**CFConst**

**SecurityConst**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/urllib3/contrib/_securetransport/bindings.py`  
**Dependencies**: `__future__.absolute_import`, `platform`, `ctypes.CDLL`, `ctypes.CFUNCTYPE`, `ctypes.POINTER`, `ctypes.c_bool`, `ctypes.c_byte`, `ctypes.c_char_p`, `ctypes.c_int32`, `ctypes.c_long`, `ctypes.c_size_t`, `ctypes.c_uint32`, `ctypes.c_ulong`, `ctypes.c_void_p`, `ctypes.util.find_library`, `packages.six.raise_from`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pyproject_hooks._in_process._in_process
:::{doc} BackendUnavailable:40
Raised if we cannot import the backend
:::
:::{doc} BackendInvalid:46
Raised if the backend is invalid
:::
:::{doc} HookMissing:52
Raised if a hook is missing and we are not executing the fallback
:::
:::{doc} contained_in:59
Test if a file is located within the given directory.
:::
:::{doc} _build_backend:66
Find and load the build backend
:::
:::{doc} _supported_features:94
Return the list of options features supported by the backend.

Returns a list of strings.
The only possible value is 'build_editable'.
:::
:::{doc} get_requires_for_build_wheel:107
Invoke the optional get_requires_for_build_wheel hook

Returns [] if the hook is not defined.
:::
:::{doc} get_requires_for_build_editable:121
Invoke the optional get_requires_for_build_editable hook

Returns [] if the hook is not defined.
:::
:::{doc} prepare_metadata_for_build_wheel:135
Invoke optional prepare_metadata_for_build_wheel

Implements a fallback by building a wheel if the hook isn't defined,
unless _allow_fallback is False in which case HookMissing is raised.
:::
:::{doc} prepare_metadata_for_build_editable:157
Invoke optional prepare_metadata_for_build_editable

Implements a fallback by building an editable wheel if the hook isn't
defined, unless _allow_fallback is False in which case HookMissing is
raised.
:::
:::{doc} _dist_info_files:187
Identify the .dist-info folder inside a wheel ZipFile.
:::
:::{doc} _get_wheel_metadata_from_wheel:199
Extract the metadata from a wheel.

Fallback for when the build backend does not
define the 'get_wheel_metadata' hook.
:::
:::{doc} _find_already_built_wheel:217
Check for a wheel already built during the get_wheel_metadata hook.
    
:::
:::{doc} build_wheel:239
Invoke the mandatory build_wheel hook.

If a wheel was already built in the
prepare_metadata_for_build_wheel fallback, this
will copy it rather than rebuilding the wheel.
:::
:::{doc} build_editable:255
Invoke the optional build_editable hook.

If a wheel was already built in the
prepare_metadata_for_build_editable fallback, this
will copy it rather than rebuilding the wheel.
:::
:::{doc} get_requires_for_build_sdist:276
Invoke the optional get_requires_for_build_wheel hook

Returns [] if the hook is not defined.
:::
:::{doc} _DummyException:290
Nothing should ever raise this exception
:::
:::{doc} GotUnsupportedOperation:294
For internal use when backend raises UnsupportedOperation
:::
:::{doc} build_sdist:300
Invoke the mandatory build_sdist hook.
:::
**Imports**: `json`, `os`, `os.path`, `re`, `shutil`, `sys`, `traceback`, `glob.glob`, `importlib.import_module`, `os.path.join`, `zipfile.ZipFile`
**Type References**: [[BackendInvalid]], [[BackendUnavailable]], [[GotUnsupportedOperation]], [[HookMissing]], [[_DummyException]]

### Interface
- `write_json`() -> Any
- `read_json`() -> Any
- `contained_in`() -> Any
- `_build_backend`() -> Any
- `_supported_features`() -> Any
- `get_requires_for_build_wheel`() -> Any
- `get_requires_for_build_editable`() -> Any
- `prepare_metadata_for_build_wheel`() -> Any
- `prepare_metadata_for_build_editable`() -> Any
- `_dist_info_files`() -> Any
- `_get_wheel_metadata_from_wheel`() -> Any
- `_find_already_built_wheel`() -> Any
- `build_wheel`() -> Any
- `build_editable`() -> Any
- `get_requires_for_build_sdist`() -> Any
- `build_sdist`() -> Any
- `main`() -> Any
- `__init__`() -> Any

### Implementation
**BackendUnavailable**

**BackendInvalid**

**HookMissing**

**_DummyException**

**GotUnsupportedOperation**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py`  
**Dependencies**: `json`, `os`, `os.path`, `re`, `shutil`, `sys`, `traceback`, `glob.glob`, `importlib.import_module`, `os.path.join`, `zipfile.ZipFile`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pyproject_hooks._in_process

**Imports**: `importlib.resources`
### Interface
- `_in_proc_script_path`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pyproject_hooks/_in_process/__init__.py`  
**Dependencies**: `importlib.resources`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.cachecontrol.caches.file_cache
:::{doc} _FileCacheMixin:62
Shared implementation for both FileCache variants.
:::
:::{doc} FileCache:144
Traditional FileCache: body is stored in memory, so not suitable for large
downloads.
:::
:::{doc} SeparateBodyFileCache:154
Memory-efficient FileCache: body is stored in a separate file, reducing
peak memory usage.
:::
:::{doc} url_to_file_path:176
Return the file cache path based on the URL.

This does not ensure the file exists!
:::
**Imports**: `__future__.annotations`, `hashlib`, `os`, `textwrap.dedent`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Union`, `pathlib.Path`, `pip._vendor.cachecontrol.cache.BaseCache`, `pip._vendor.cachecontrol.cache.SeparateBodyBaseCache`, `pip._vendor.cachecontrol.controller.CacheController`, `datetime.datetime`, `filelock.BaseFileLock`, `filelock.FileLock`
**Type References**: [[FileCache]], [[SeparateBodyFileCache]], [[_FileCacheMixin]]

### Interface
- `_secure_open_write`(filename: str, fmode: int) -> IO[bytes]
- `url_to_file_path`(url: str, filecache: FileCache) -> str
- `__init__`(directory: str | Path, forever: bool, filemode: int, dirmode: int, lock_class: type[BaseFileLock] | None) -> None
- `encode`(x: str) -> str
- `_fn`(name: str) -> str
- `get`(key: str) -> bytes | None
- `set`(key: str, value: bytes, expires: int | datetime | None) -> None
- `_write`(path: str, data: bytes) -> None
- `_delete`(key: str, suffix: str) -> None
- `delete`(key: str) -> None
- `get_body`(key: str) -> IO[bytes] | None
- `set_body`(key: str, body: bytes) -> None

### Implementation
**_FileCacheMixin**

**FileCache**

**SeparateBodyFileCache**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py`  
**Dependencies**: `__future__.annotations`, `hashlib`, `os`, `textwrap.dedent`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Union`, `pathlib.Path`, `pip._vendor.cachecontrol.cache.BaseCache`, `pip._vendor.cachecontrol.cache.SeparateBodyBaseCache`, `pip._vendor.cachecontrol.controller.CacheController`, `datetime.datetime`, `filelock.BaseFileLock`, `filelock.FileLock`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.cachecontrol.caches

**Imports**: `pip._vendor.cachecontrol.caches.file_cache.FileCache`, `pip._vendor.cachecontrol.caches.file_cache.SeparateBodyFileCache`, `pip._vendor.cachecontrol.caches.redis_cache.RedisCache`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/cachecontrol/caches/__init__.py`  
**Dependencies**: `pip._vendor.cachecontrol.caches.file_cache.FileCache`, `pip._vendor.cachecontrol.caches.file_cache.SeparateBodyFileCache`, `pip._vendor.cachecontrol.caches.redis_cache.RedisCache`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.cachecontrol.caches.redis_cache

**Imports**: `__future__.annotations`, `datetime.datetime`, `datetime.timezone`, `typing.TYPE_CHECKING`, `pip._vendor.cachecontrol.cache.BaseCache`, `redis.Redis`
**Type References**: [[RedisCache]]

### Interface
- `__init__`(conn: Redis[bytes]) -> None
- `get`(key: str) -> bytes | None
- `set`(key: str, value: bytes, expires: int | datetime | None) -> None
- `delete`(key: str) -> None
- `clear`() -> None
- `close`() -> None

### Implementation
**RedisCache**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/cachecontrol/caches/redis_cache.py`  
**Dependencies**: `__future__.annotations`, `datetime.datetime`, `datetime.timezone`, `typing.TYPE_CHECKING`, `pip._vendor.cachecontrol.cache.BaseCache`, `redis.Redis`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.filters
:::{doc} find_filter_class:22
Lookup a filter by name. Return None if not found.
:::
:::{doc} get_filter_by_name:32
Return an instantiated filter.

Options are passed to the filter initializer if wanted.
Raise a ClassNotFound if not found.
:::
:::{doc} get_all_filters:45
Return a generator of all filter names.
:::
:::{doc} CodeTagFilter:65
Highlight special code tags in comments and docstrings.

Options accepted:

`codetags` : list of strings
   A list of strings that are flagged as code tags.  The default is to
   highlight ``XXX``, ``TODO``, ``FIXME``, ``BUG`` and ``NOTE``.

.. versionchanged:: 2.13
   Now recognizes ``FIXME`` by default.
:::
:::{doc} SymbolFilter:97
Convert mathematical symbols such as \<longrightarrow> in Isabelle
or \longrightarrow in LaTeX into Unicode characters.

This is mostly useful for HTML or console output when you want to
approximate the source rendering you'd see in an IDE.

Options accepted:

`lang` : string
   The symbol language. Must be one of ``'isabelle'`` or
   ``'latex'``.  The default is ``'isabelle'``.
:::
:::{doc} KeywordCaseFilter:687
Convert keywords to lowercase or uppercase or capitalize them, which
means first letter uppercase, rest lowercase.

This can be useful e.g. if you highlight Pascal code and want to adapt the
code to your styleguide.

Options accepted:

`case` : string
   The casing to convert keywords to. Must be one of ``'lower'``,
   ``'upper'`` or ``'capitalize'``.  The default is ``'lower'``.
:::
:::{doc} NameHighlightFilter:715
Highlight a normal Name (and Name.*) token with a different token type.

Example::

    filter = NameHighlightFilter(
        names=['foo', 'bar', 'baz'],
        tokentype=Name.Function,
    )

This would highlight the names "foo", "bar" and "baz"
as functions. `Name.Function` is the default token type.

Options accepted:

`names` : list of strings
  A list of names that should be given the different token type.
  There is no default.
`tokentype` : TokenType or string
  A token type or a string containing a token type name that is
  used for highlighting the strings in `names`.  The default is
  `Name.Function`.
:::
:::{doc} RaiseOnErrorTokenFilter:760
Raise an exception when the lexer generates an error token.

Options accepted:

`excclass` : Exception class
  The exception class to raise.
  The default is `pygments.filters.ErrorToken`.

.. versionadded:: 0.8
:::
:::{doc} VisibleWhitespaceFilter:789
Convert tabs, newlines and/or spaces to visible characters.

Options accepted:

`spaces` : string or bool
  If this is a one-character string, spaces will be replaces by this string.
  If it is another true value, spaces will be replaced by ``·`` (unicode
  MIDDLE DOT).  If it is a false value, spaces will not be replaced.  The
  default is ``False``.
`tabs` : string or bool
  The same as for `spaces`, but the default replacement character is ``»``
  (unicode RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK).  The default value
  is ``False``.  Note: this will not work if the `tabsize` option for the
  lexer is nonzero, as tabs will already have been expanded then.
`tabsize` : int
  If tabs are to be replaced by this filter (see the `tabs` option), this
  is the total number of characters that a tab should be expanded to.
  The default is ``8``.
`newlines` : string or bool
  The same as for `spaces`, but the default replacement character is ``¶``
  (unicode PILCROW SIGN).  The default value is ``False``.
`wstokentype` : bool
  If true, give whitespace the special `Whitespace` token type.  This allows
  styling the visible whitespace differently (e.g. greyed out), but it can
  disrupt background colors.  The default is ``True``.

.. versionadded:: 0.8
:::
:::{doc} GobbleFilter:868
Gobbles source code lines (eats initial characters).

This filter drops the first ``n`` characters off every line of code.  This
may be useful when the source code fed to the lexer is indented by a fixed
amount of space that isn't desired in the output.

Options accepted:

`n` : int
   The number of characters to gobble.

.. versionadded:: 1.2
:::
:::{doc} TokenMergeFilter:907
Merges consecutive tokens with the same token type in the output
stream of a lexer.

.. versionadded:: 1.2
:::
**Imports**: `re`, `pip._vendor.pygments.token.String`, `pip._vendor.pygments.token.Comment`, `pip._vendor.pygments.token.Keyword`, `pip._vendor.pygments.token.Name`, `pip._vendor.pygments.token.Error`, `pip._vendor.pygments.token.Whitespace`, `pip._vendor.pygments.token.string_to_tokentype`, `pip._vendor.pygments.filter.Filter`, `pip._vendor.pygments.util.get_list_opt`, `pip._vendor.pygments.util.get_int_opt`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_choice_opt`, `pip._vendor.pygments.util.ClassNotFound`, `pip._vendor.pygments.util.OptionError`, `pip._vendor.pygments.plugin.find_plugin_filters`
**Type References**: [[CodeTagFilter]], [[ErrorToken]], [[GobbleFilter]], [[KeywordCaseFilter]], [[NameHighlightFilter]], [[RaiseOnErrorTokenFilter]], [[SymbolFilter]], [[TokenMergeFilter]], [[VisibleWhitespaceFilter]]

### Interface
- `find_filter_class`() -> Any
- `get_filter_by_name`() -> Any
- `get_all_filters`() -> Any
- `_replace_special`() -> Any
- `__init__`() -> Any
- `filter`() -> Any
- `gobble`() -> Any
- `replacefunc`() -> Any

### Implementation
**CodeTagFilter**

**SymbolFilter**

**KeywordCaseFilter**

**NameHighlightFilter**

**ErrorToken**

**RaiseOnErrorTokenFilter**

**VisibleWhitespaceFilter**

**GobbleFilter**

**TokenMergeFilter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/filters/__init__.py`  
**Dependencies**: `re`, `pip._vendor.pygments.token.String`, `pip._vendor.pygments.token.Comment`, `pip._vendor.pygments.token.Keyword`, `pip._vendor.pygments.token.Name`, `pip._vendor.pygments.token.Error`, `pip._vendor.pygments.token.Whitespace`, `pip._vendor.pygments.token.string_to_tokentype`, `pip._vendor.pygments.filter.Filter`, `pip._vendor.pygments.util.get_list_opt`, `pip._vendor.pygments.util.get_int_opt`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_choice_opt`, `pip._vendor.pygments.util.ClassNotFound`, `pip._vendor.pygments.util.OptionError`, `pip._vendor.pygments.plugin.find_plugin_filters`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.lexers
:::{doc} _fn_matches:35
Return whether the supplied file name fn matches pattern filename.
:::
:::{doc} _load_lexers:43
Load a lexer (and all others in the module too).
:::
:::{doc} get_all_lexers:51
Return a generator of tuples in the form ``(name, aliases,
filenames, mimetypes)`` of all know lexers.

If *plugins* is true (the default), plugin lexers supplied by entrypoints
are also returned.  Otherwise, only builtin ones are considered.
:::
:::{doc} find_lexer_class:65
Return the `Lexer` subclass that with the *name* attribute as given by
the *name* argument.
:::
:::{doc} find_lexer_class_by_name:83
Return the `Lexer` subclass that has `alias` in its aliases list, without
instantiating it.

Like `get_lexer_by_name`, but does not instantiate the class.

Will raise :exc:`pygments.util.ClassNotFound` if no lexer with that alias is
found.

.. versionadded:: 2.2
:::
:::{doc} get_lexer_by_name:110
Return an instance of a `Lexer` subclass that has `alias` in its
aliases list. The lexer is given the `options` at its
instantiation.

Will raise :exc:`pygments.util.ClassNotFound` if no lexer with that alias is
found.
:::
:::{doc} load_lexer_from_file:135
Load a lexer from a file.

This method expects a file located relative to the current working
directory, which contains a Lexer class. By default, it expects the
Lexer to be name CustomLexer; you can specify your own class name
as the second argument to this function.

Users should be very careful with the input, because this method
is equivalent to running eval on the input file.

Raises ClassNotFound if there are any problems importing the Lexer.

.. versionadded:: 2.2
:::
:::{doc} find_lexer_class_for_filename:169
Get a lexer for a filename.

If multiple lexers match the filename pattern, use ``analyse_text()`` to
figure out which one is more appropriate.

Returns None if not found.
:::
:::{doc} get_lexer_for_filename:212
Get a lexer for a filename.

Return a `Lexer` subclass instance that has a filename pattern
matching `fn`. The lexer is given the `options` at its
instantiation.

Raise :exc:`pygments.util.ClassNotFound` if no lexer for that filename
is found.

If multiple lexers match the filename pattern, use their ``analyse_text()``
methods to figure out which one is more appropriate.
:::
:::{doc} get_lexer_for_mimetype:231
Return a `Lexer` subclass instance that has `mime` in its mimetype
list. The lexer is given the `options` at its instantiation.

Will raise :exc:`pygments.util.ClassNotFound` if not lexer for that mimetype
is found.
:::
:::{doc} _iter_lexerclasses:250
Return an iterator over all lexer classes.
:::
:::{doc} guess_lexer_for_filename:261
As :func:`guess_lexer()`, but only lexers which have a pattern in `filenames`
or `alias_filenames` that matches `filename` are taken into consideration.

:exc:`pygments.util.ClassNotFound` is raised if no lexer thinks it can
handle the content.
:::
:::{doc} guess_lexer:304
Return a `Lexer` subclass instance that's guessed from the text in
`text`. For that, the :meth:`.analyse_text()` method of every known lexer
class is called with the text as argument, and the lexer which returned the
highest value will be instantiated and returned.

:exc:`pygments.util.ClassNotFound` is raised if no lexer thinks it can
handle the content.
:::
:::{doc} _automodule:343
Automatically import lexers.
:::
**Imports**: `re`, `sys`, `types`, `fnmatch`, `os.path.basename`, `pip._vendor.pygments.lexers._mapping.LEXERS`, `pip._vendor.pygments.modeline.get_filetype_from_buffer`, `pip._vendor.pygments.plugin.find_plugin_lexers`, `pip._vendor.pygments.util.ClassNotFound`, `pip._vendor.pygments.util.guess_decode`
**Type References**: [[_automodule]]

### Interface
- `_fn_matches`() -> Any
- `_load_lexers`() -> Any
- `get_all_lexers`() -> Any
- `find_lexer_class`() -> Any
- `find_lexer_class_by_name`() -> Any
- `get_lexer_by_name`() -> Any
- `load_lexer_from_file`() -> Any
- `find_lexer_class_for_filename`() -> Any
- `get_lexer_for_filename`() -> Any
- `get_lexer_for_mimetype`() -> Any
- `_iter_lexerclasses`() -> Any
- `guess_lexer_for_filename`() -> Any
- `guess_lexer`() -> Any
- `get_rating`() -> Any
- `type_sort`() -> Any
- `__getattr__`() -> Any

### Implementation
**_automodule**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/lexers/__init__.py`  
**Dependencies**: `re`, `sys`, `types`, `fnmatch`, `os.path.basename`, `pip._vendor.pygments.lexers._mapping.LEXERS`, `pip._vendor.pygments.modeline.get_filetype_from_buffer`, `pip._vendor.pygments.plugin.find_plugin_lexers`, `pip._vendor.pygments.util.ClassNotFound`, `pip._vendor.pygments.util.guess_decode`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.lexers.python
:::{doc} PythonLexer:25
For Python source code (version 3.x).

.. versionchanged:: 2.5
   This is now the default ``PythonLexer``.  It is still available as the
   alias ``Python3Lexer``.
:::
:::{doc} Python2Lexer:416
For Python 2.x source code.

.. versionchanged:: 2.5
   This class has been renamed from ``PythonLexer``.  ``PythonLexer`` now
   refers to the Python 3 variant.  File name patterns like ``*.py`` have
   been moved to Python 3 as well.
:::
:::{doc} PythonConsoleLexer:674
For Python console output or doctests, such as:

.. sourcecode:: pycon

    >>> a = 'foo'
    >>> print(a)
    foo
    >>> 1 / 0
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    ZeroDivisionError: integer division or modulo by zero

Additional options:

`python3`
    Use Python 3 lexer for code.  Default is ``True``.

    .. versionadded:: 1.0
    .. versionchanged:: 2.5
       Now defaults to ``True``.
:::
:::{doc} PythonTracebackLexer:722
For Python 3.x tracebacks, with support for chained exceptions.

.. versionchanged:: 2.5
   This is now the default ``PythonTracebackLexer``.  It is still available
   as the alias ``Python3TracebackLexer``.
:::
:::{doc} Python2TracebackLexer:779
For Python tracebacks.

.. versionchanged:: 2.5
   This class has been renamed from ``PythonTracebackLexer``.
   ``PythonTracebackLexer`` now refers to the Python 3 variant.
:::
:::{doc} CythonLexer:827
For Pyrex and Cython source code.
:::
:::{doc} DgLexer:1006
Lexer for dg,
a functional and object-oriented programming language
running on the CPython 3 VM.
:::
:::{doc} NumPyLexer:1105
A Python lexer recognizing Numerical Python builtins.
:::
**Imports**: `keyword`, `pip._vendor.pygments.lexer.DelegatingLexer`, `pip._vendor.pygments.lexer.RegexLexer`, `pip._vendor.pygments.lexer.include`, `pip._vendor.pygments.lexer.bygroups`, `pip._vendor.pygments.lexer.using`, `pip._vendor.pygments.lexer.default`, `pip._vendor.pygments.lexer.words`, `pip._vendor.pygments.lexer.combined`, `pip._vendor.pygments.lexer.this`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.shebang_matches`, `pip._vendor.pygments.token.Text`, `pip._vendor.pygments.token.Comment`, `pip._vendor.pygments.token.Operator`, `pip._vendor.pygments.token.Keyword`, `pip._vendor.pygments.token.Name`, `pip._vendor.pygments.token.String`, `pip._vendor.pygments.token.Number`, `pip._vendor.pygments.token.Punctuation`, `pip._vendor.pygments.token.Generic`, `pip._vendor.pygments.token.Other`, `pip._vendor.pygments.token.Error`, `pip._vendor.pygments.token.Whitespace`, `pip._vendor.pygments.unistring`
**Type References**: [[CythonLexer]], [[DgLexer]], [[NumPyLexer]], [[Python2Lexer]], [[Python2TracebackLexer]], [[PythonConsoleLexer]], [[PythonLexer]], [[PythonTracebackLexer]], [[_PythonConsoleLexerBase]], [[_ReplaceInnerCode]]

### Interface
- `innerstring_rules`() -> Any
- `fstring_rules`() -> Any
- `analyse_text`() -> Any
- `__init__`() -> Any
- `get_tokens_unprocessed`() -> Any

### Implementation
**PythonLexer**

**Python2Lexer**

**_PythonConsoleLexerBase**

**PythonConsoleLexer**

**PythonTracebackLexer**

**Python2TracebackLexer**

**CythonLexer**

**DgLexer**

**NumPyLexer**

**_ReplaceInnerCode**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/lexers/python.py`  
**Dependencies**: `keyword`, `pip._vendor.pygments.lexer.DelegatingLexer`, `pip._vendor.pygments.lexer.RegexLexer`, `pip._vendor.pygments.lexer.include`, `pip._vendor.pygments.lexer.bygroups`, `pip._vendor.pygments.lexer.using`, `pip._vendor.pygments.lexer.default`, `pip._vendor.pygments.lexer.words`, `pip._vendor.pygments.lexer.combined`, `pip._vendor.pygments.lexer.this`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.shebang_matches`, `pip._vendor.pygments.token.Text`, `pip._vendor.pygments.token.Comment`, `pip._vendor.pygments.token.Operator`, `pip._vendor.pygments.token.Keyword`, `pip._vendor.pygments.token.Name`, `pip._vendor.pygments.token.String`, `pip._vendor.pygments.token.Number`, `pip._vendor.pygments.token.Punctuation`, `pip._vendor.pygments.token.Generic`, `pip._vendor.pygments.token.Other`, `pip._vendor.pygments.token.Error`, `pip._vendor.pygments.token.Whitespace`, `pip._vendor.pygments.unistring`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.lexers._mapping



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/lexers/_mapping.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatters.terminal
:::{doc} TerminalFormatter:56
Format tokens with ANSI color sequences, for output in a text console.
Color sequences are terminated at newlines, so that paging the output
works correctly.

The `get_style_defs()` method doesn't do anything special since there is
no support for common styles.

Options accepted:

`bg`
    Set to ``"light"`` or ``"dark"`` depending on the terminal's background
    (default: ``"light"``).

`colorscheme`
    A dictionary mapping token types to (lightbg, darkbg) color names or
    ``None`` (default: ``None`` = use builtin colorscheme).

`linenos`
    Set to ``True`` to have line numbers on the terminal output as well
    (default: ``False`` = no line numbers).
:::
**Imports**: `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.token.Keyword`, `pip._vendor.pygments.token.Name`, `pip._vendor.pygments.token.Comment`, `pip._vendor.pygments.token.String`, `pip._vendor.pygments.token.Error`, `pip._vendor.pygments.token.Number`, `pip._vendor.pygments.token.Operator`, `pip._vendor.pygments.token.Generic`, `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.token.Whitespace`, `pip._vendor.pygments.console.ansiformat`, `pip._vendor.pygments.util.get_choice_opt`
**Type References**: [[TerminalFormatter]]

### Interface
- `__init__`() -> Any
- `format`() -> Any
- `_write_lineno`() -> Any
- `_get_color`() -> Any
- `format_unencoded`() -> Any

### Implementation
**TerminalFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatters/terminal.py`  
**Dependencies**: `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.token.Keyword`, `pip._vendor.pygments.token.Name`, `pip._vendor.pygments.token.Comment`, `pip._vendor.pygments.token.String`, `pip._vendor.pygments.token.Error`, `pip._vendor.pygments.token.Number`, `pip._vendor.pygments.token.Operator`, `pip._vendor.pygments.token.Generic`, `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.token.Whitespace`, `pip._vendor.pygments.console.ansiformat`, `pip._vendor.pygments.util.get_choice_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatters.html
:::{doc} escape_html:38
Escape &, <, > as well as single and double quotes for HTML.
:::
:::{doc} HtmlFormatter:113
Format tokens as HTML 4 ``<span>`` tags. By default, the content is enclosed
in a ``<pre>`` tag, itself wrapped in a ``<div>`` tag (but see the `nowrap` option).
The ``<div>``'s CSS class can be set by the `cssclass` option.

If the `linenos` option is set to ``"table"``, the ``<pre>`` is
additionally wrapped inside a ``<table>`` which has one row and two
cells: one containing the line numbers and one containing the code.
Example:

.. sourcecode:: html

    <div class="highlight" >
    <table><tr>
      <td class="linenos" title="click to toggle"
        onclick="with (this.firstChild.style)
                 { display = (display == '') ? 'none' : '' }">
        <pre>1
        2</pre>
      </td>
      <td class="code">
        <pre><span class="Ke">def </span><span class="NaFu">foo</span>(bar):
          <span class="Ke">pass</span>
        </pre>
      </td>
    </tr></table></div>

(whitespace added to improve clarity).

A list of lines can be specified using the `hl_lines` option to make these
lines highlighted (as of Pygments 0.11).

With the `full` option, a complete HTML 4 document is output, including
the style definitions inside a ``<style>`` tag, or in a separate file if
the `cssfile` option is given.

When `tagsfile` is set to the path of a ctags index file, it is used to
generate hyperlinks from names to their definition.  You must enable
`lineanchors` and run ctags with the `-n` option for this to work.  The
`python-ctags` module from PyPI must be installed to use this feature;
otherwise a `RuntimeError` will be raised.

The `get_style_defs(arg='')` method of a `HtmlFormatter` returns a string
containing CSS rules for the CSS classes used by the formatter. The
argument `arg` can be used to specify additional CSS selectors that
are prepended to the classes. A call `fmter.get_style_defs('td .code')`
would result in the following CSS classes:

.. sourcecode:: css

    td .code .kw { font-weight: bold; color: #00FF00 }
    td .code .cm { color: #999999 }
    ...

If you have Pygments 0.6 or higher, you can also pass a list or tuple to the
`get_style_defs()` method to request multiple prefixes for the tokens:

.. sourcecode:: python

    formatter.get_style_defs(['div.syntax pre', 'pre.syntax'])

The output would then look like this:

.. sourcecode:: css

    div.syntax pre .kw,
    pre.syntax .kw { font-weight: bold; color: #00FF00 }
    div.syntax pre .cm,
    pre.syntax .cm { color: #999999 }
    ...

Additional options accepted:

`nowrap`
    If set to ``True``, don't add a ``<pre>`` and a ``<div>`` tag
    around the tokens. This disables most other options (default: ``False``).

`full`
    Tells the formatter to output a "full" document, i.e. a complete
    self-contained document (default: ``False``).

`title`
    If `full` is true, the title that should be used to caption the
    document (default: ``''``).

`style`
    The style to use, can be a string or a Style subclass (default:
    ``'default'``). This option has no effect if the `cssfile`
    and `noclobber_cssfile` option are given and the file specified in
    `cssfile` exists.

`noclasses`
    If set to true, token ``<span>`` tags (as well as line number elements)
    will not use CSS classes, but inline styles. This is not recommended
    for larger pieces of code since it increases output size by quite a bit
    (default: ``False``).

`classprefix`
    Since the token types use relatively short class names, they may clash
    with some of your own class names. In this case you can use the
    `classprefix` option to give a string to prepend to all Pygments-generated
    CSS class names for token types.
    Note that this option also affects the output of `get_style_defs()`.

`cssclass`
    CSS class for the wrapping ``<div>`` tag (default: ``'highlight'``).
    If you set this option, the default selector for `get_style_defs()`
    will be this class.

    .. versionadded:: 0.9
       If you select the ``'table'`` line numbers, the wrapping table will
       have a CSS class of this string plus ``'table'``, the default is
       accordingly ``'highlighttable'``.

`cssstyles`
    Inline CSS styles for the wrapping ``<div>`` tag (default: ``''``).

`prestyles`
    Inline CSS styles for the ``<pre>`` tag (default: ``''``).

    .. versionadded:: 0.11

`cssfile`
    If the `full` option is true and this option is given, it must be the
    name of an external file. If the filename does not include an absolute
    path, the file's path will be assumed to be relative to the main output
    file's path, if the latter can be found. The stylesheet is then written
    to this file instead of the HTML file.

    .. versionadded:: 0.6

`noclobber_cssfile`
    If `cssfile` is given and the specified file exists, the css file will
    not be overwritten. This allows the use of the `full` option in
    combination with a user specified css file. Default is ``False``.

    .. versionadded:: 1.1

`linenos`
    If set to ``'table'``, output line numbers as a table with two cells,
    one containing the line numbers, the other the whole code.  This is
    copy-and-paste-friendly, but may cause alignment problems with some
    browsers or fonts.  If set to ``'inline'``, the line numbers will be
    integrated in the ``<pre>`` tag that contains the code (that setting
    is *new in Pygments 0.8*).

    For compatibility with Pygments 0.7 and earlier, every true value
    except ``'inline'`` means the same as ``'table'`` (in particular, that
    means also ``True``).

    The default value is ``False``, which means no line numbers at all.

    **Note:** with the default ("table") line number mechanism, the line
    numbers and code can have different line heights in Internet Explorer
    unless you give the enclosing ``<pre>`` tags an explicit ``line-height``
    CSS property (you get the default line spacing with ``line-height:
    125%``).

`hl_lines`
    Specify a list of lines to be highlighted. The line numbers are always
    relative to the input (i.e. the first line is line 1) and are
    independent of `linenostart`.

    .. versionadded:: 0.11

`linenostart`
    The line number for the first line (default: ``1``).

`linenostep`
    If set to a number n > 1, only every nth line number is printed.

`linenospecial`
    If set to a number n > 0, every nth line number is given the CSS
    class ``"special"`` (default: ``0``).

`nobackground`
    If set to ``True``, the formatter won't output the background color
    for the wrapping element (this automatically defaults to ``False``
    when there is no wrapping element [eg: no argument for the
    `get_syntax_defs` method given]) (default: ``False``).

    .. versionadded:: 0.6

`lineseparator`
    This string is output between lines of code. It defaults to ``"\n"``,
    which is enough to break a line inside ``<pre>`` tags, but you can
    e.g. set it to ``"<br>"`` to get HTML line breaks.

    .. versionadded:: 0.7

`lineanchors`
    If set to a nonempty string, e.g. ``foo``, the formatter will wrap each
    output line in an anchor tag with an ``id`` (and `name`) of ``foo-linenumber``.
    This allows easy linking to certain lines.

    .. versionadded:: 0.9

`linespans`
    If set to a nonempty string, e.g. ``foo``, the formatter will wrap each
    output line in a span tag with an ``id`` of ``foo-linenumber``.
    This allows easy access to lines via javascript.

    .. versionadded:: 1.6

`anchorlinenos`
    If set to `True`, will wrap line numbers in <a> tags. Used in
    combination with `linenos` and `lineanchors`.

`tagsfile`
    If set to the path of a ctags file, wrap names in anchor tags that
    link to their definitions. `lineanchors` should be used, and the
    tags file should specify line numbers (see the `-n` option to ctags).
    The tags file is assumed to be encoded in UTF-8.

    .. versionadded:: 1.6

`tagurlformat`
    A string formatting pattern used to generate links to ctags definitions.
    Available variables are `%(path)s`, `%(fname)s` and `%(fext)s`.
    Defaults to an empty string, resulting in just `#prefix-number` links.

    .. versionadded:: 1.6

`filename`
    A string used to generate a filename when rendering ``<pre>`` blocks,
    for example if displaying source code. If `linenos` is set to
    ``'table'`` then the filename will be rendered in an initial row
    containing a single `<th>` which spans both columns.

    .. versionadded:: 2.1

`wrapcode`
    Wrap the code inside ``<pre>`` blocks using ``<code>``, as recommended
    by the HTML5 specification.

    .. versionadded:: 2.4

`debug_token_types`
    Add ``title`` attributes to all token ``<span>`` tags that show the
    name of the token.

    .. versionadded:: 2.10


**Subclassing the HTML formatter**

.. versionadded:: 0.7

The HTML formatter is now built in a way that allows easy subclassing, thus
customizing the output HTML code. The `format()` method calls
`self._format_lines()` which returns a generator that yields tuples of ``(1,
line)``, where the ``1`` indicates that the ``line`` is a line of the
formatted source code.

If the `nowrap` option is set, the generator is the iterated over and the
resulting HTML is output.

Otherwise, `format()` calls `self.wrap()`, which wraps the generator with
other generators. These may add some HTML code to the one generated by
`_format_lines()`, either by modifying the lines generated by the latter,
then yielding them again with ``(1, line)``, and/or by yielding other HTML
code before or after the lines, with ``(0, html)``. The distinction between
source lines and other code makes it possible to wrap the generator multiple
times.

The default `wrap()` implementation adds a ``<div>`` and a ``<pre>`` tag.

A custom `HtmlFormatter` subclass could look like this:

.. sourcecode:: python

    class CodeHtmlFormatter(HtmlFormatter):

        def wrap(self, source, *, include_div):
            return self._wrap_code(source)

        def _wrap_code(self, source):
            yield 0, '<code>'
            for i, t in source:
                if i == 1:
                    # it's a line of formatted code
                    t += '<br>'
                yield i, t
            yield 0, '</code>'

This results in wrapping the formatted lines with a ``<code>`` tag, where the
source lines are broken using ``<br>`` tags.

After calling `wrap()`, the `format()` method also adds the "line numbers"
and/or "full document" wrappers if the respective options are set. Then, all
HTML yielded by the wrapped generator is output.
:::
**Imports**: `functools`, `os`, `sys`, `os.path`, `io.StringIO`, `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.token.Text`, `pip._vendor.pygments.token.STANDARD_TYPES`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_int_opt`, `pip._vendor.pygments.util.get_list_opt`, `ctags`
**Type References**: [[HtmlFormatter]]

### Interface
- `escape_html`() -> Any
- `webify`() -> Any
- `_get_ttype_class`() -> Any
- `__init__`() -> Any
- `_get_css_class`() -> Any
- `_get_css_classes`() -> Any
- `_get_css_inline_styles`() -> Any
- `_create_stylesheet`() -> Any
- `get_style_defs`() -> Any
- `get_token_style_defs`() -> Any
- `get_background_style_defs`() -> Any
- `get_linenos_style_defs`() -> Any
- `get_css_prefix`() -> Any
- `_pre_style`() -> Any
- `_linenos_style`() -> Any
- `_linenos_special_style`() -> Any
- `_decodeifneeded`() -> Any
- `_wrap_full`() -> Any
- `_wrap_tablelinenos`() -> Any
- `_wrap_inlinelinenos`() -> Any
- `_wrap_lineanchors`() -> Any
- `_wrap_linespans`() -> Any
- `_wrap_div`() -> Any
- `_wrap_pre`() -> Any
- `_wrap_code`() -> Any
- `_translate_parts`() -> Any
- `_format_lines`() -> Any
- `_lookup_ctag`() -> Any
- `_highlight_lines`() -> Any
- `wrap`() -> Any
- `format_unencoded`() -> Any
- `prefix`() -> Any

### Implementation
**HtmlFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatters/html.py`  
**Dependencies**: `functools`, `os`, `sys`, `os.path`, `io.StringIO`, `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.token.Text`, `pip._vendor.pygments.token.STANDARD_TYPES`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_int_opt`, `pip._vendor.pygments.util.get_list_opt`, `ctags`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatters.irc
:::{doc} IRCFormatter:97
Format tokens with IRC color sequences

The `get_style_defs()` method doesn't do anything special since there is
no support for common styles.

Options accepted:

`bg`
    Set to ``"light"`` or ``"dark"`` depending on the terminal's background
    (default: ``"light"``).

`colorscheme`
    A dictionary mapping token types to (lightbg, darkbg) color names or
    ``None`` (default: ``None`` = use builtin colorscheme).

`linenos`
    Set to ``True`` to have line numbers in the output as well
    (default: ``False`` = no line numbers).
:::
**Imports**: `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.token.Keyword`, `pip._vendor.pygments.token.Name`, `pip._vendor.pygments.token.Comment`, `pip._vendor.pygments.token.String`, `pip._vendor.pygments.token.Error`, `pip._vendor.pygments.token.Number`, `pip._vendor.pygments.token.Operator`, `pip._vendor.pygments.token.Generic`, `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.token.Whitespace`, `pip._vendor.pygments.util.get_choice_opt`
**Type References**: [[IRCFormatter]]

### Interface
- `ircformat`() -> Any
- `__init__`() -> Any
- `_write_lineno`() -> Any
- `format_unencoded`() -> Any

### Implementation
**IRCFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatters/irc.py`  
**Dependencies**: `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.token.Keyword`, `pip._vendor.pygments.token.Name`, `pip._vendor.pygments.token.Comment`, `pip._vendor.pygments.token.String`, `pip._vendor.pygments.token.Error`, `pip._vendor.pygments.token.Number`, `pip._vendor.pygments.token.Operator`, `pip._vendor.pygments.token.Generic`, `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.token.Whitespace`, `pip._vendor.pygments.util.get_choice_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatters
:::{doc} _fn_matches:28
Return whether the supplied file name fn matches pattern filename.
:::
:::{doc} _load_formatters:36
Load a formatter (and all others in the module too).
:::
:::{doc} get_all_formatters:44
Return a generator for all formatter classes.
:::
:::{doc} find_formatter_class:55
Lookup a formatter by alias.

Returns None if not found.
:::
:::{doc} get_formatter_by_name:70
Return an instance of a :class:`.Formatter` subclass that has `alias` in its
aliases list. The formatter is given the `options` at its instantiation.

Will raise :exc:`pygments.util.ClassNotFound` if no formatter with that
alias is found.
:::
:::{doc} load_formatter_from_file:84
Return a `Formatter` subclass instance loaded from the provided file, relative
to the current directory.

The file is expected to contain a Formatter class named ``formattername``
(by default, CustomFormatter). Users should be very careful with the input, because
this method is equivalent to running ``eval()`` on the input file. The formatter is
given the `options` at its instantiation.

:exc:`pygments.util.ClassNotFound` is raised if there are any errors loading
the formatter.

.. versionadded:: 2.2
:::
:::{doc} get_formatter_for_filename:118
Return a :class:`.Formatter` subclass instance that has a filename pattern
matching `fn`. The formatter is given the `options` at its instantiation.

Will raise :exc:`pygments.util.ClassNotFound` if no formatter for that filename
is found.
:::
:::{doc} _automodule:140
Automatically import formatters.
:::
**Imports**: `re`, `sys`, `types`, `fnmatch`, `os.path.basename`, `pip._vendor.pygments.formatters._mapping.FORMATTERS`, `pip._vendor.pygments.plugin.find_plugin_formatters`, `pip._vendor.pygments.util.ClassNotFound`
**Type References**: [[_automodule]]

### Interface
- `_fn_matches`() -> Any
- `_load_formatters`() -> Any
- `get_all_formatters`() -> Any
- `find_formatter_class`() -> Any
- `get_formatter_by_name`() -> Any
- `load_formatter_from_file`() -> Any
- `get_formatter_for_filename`() -> Any
- `__getattr__`() -> Any

### Implementation
**_automodule**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatters/__init__.py`  
**Dependencies**: `re`, `sys`, `types`, `fnmatch`, `os.path.basename`, `pip._vendor.pygments.formatters._mapping.FORMATTERS`, `pip._vendor.pygments.plugin.find_plugin_formatters`, `pip._vendor.pygments.util.ClassNotFound`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatters.other
:::{doc} NullFormatter:19
Output the text unchanged without any formatting.
:::
:::{doc} RawTokenFormatter:36
Format tokens as a raw representation for storing token streams.

The format is ``tokentype<TAB>repr(tokenstring)\n``. The output can later
be converted to a token stream with the `RawTokenLexer`, described in the
:doc:`lexer list <lexers>`.

Only two options are accepted:

`compress`
    If set to ``'gz'`` or ``'bz2'``, compress the output with the given
    compression algorithm after encoding (default: ``''``).
`error_color`
    If set to a color name, highlight error tokens using that color.  If
    set but with no value, defaults to ``'red'``.

    .. versionadded:: 0.11
:::
:::{doc} TestcaseFormatter:129
Format tokens as appropriate for a new testcase.

.. versionadded:: 2.0
:::
**Imports**: `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.util.get_choice_opt`, `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.console.colorize`, `gzip`, `bz2`
**Type References**: [[NullFormatter]], [[RawTokenFormatter]], [[TestcaseFormatter]]

### Interface
- `format`() -> Any
- `__init__`() -> Any
- `write`() -> Any
- `flush`() -> Any

### Implementation
**NullFormatter**

**RawTokenFormatter**

**TestcaseFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatters/other.py`  
**Dependencies**: `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.util.get_choice_opt`, `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.console.colorize`, `gzip`, `bz2`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatters.img
:::{doc} PilNotAvailable:52
When Python imaging library is not available
:::
:::{doc} FontNotFound:56
When there are no usable fonts specified
:::
:::{doc} FontManager:60
Manages a set of fonts: normal, italic, bold, etc...
:::
:::{doc} ImageFormatter:269
Create a PNG image from source code. This uses the Python Imaging Library to
generate a pixmap from the source code.

.. versionadded:: 0.10

Additional options accepted:

`image_format`
    An image format to output to that is recognised by PIL, these include:

    * "PNG" (default)
    * "JPEG"
    * "BMP"
    * "GIF"

`line_pad`
    The extra spacing (in pixels) between each line of text.

    Default: 2

`font_name`
    The font name to be used as the base font from which others, such as
    bold and italic fonts will be generated.  This really should be a
    monospace font to look sane.
    If a filename or a file-like object is specified, the user must
    provide different styles of the font.

    Default: "Courier New" on Windows, "Menlo" on Mac OS, and
             "DejaVu Sans Mono" on \*nix

`font_size`
    The font size in points to be used.

    Default: 14

`image_pad`
    The padding, in pixels to be used at each edge of the resulting image.

    Default: 10

`line_numbers`
    Whether line numbers should be shown: True/False

    Default: True

`line_number_start`
    The line number of the first line.

    Default: 1

`line_number_step`
    The step used when printing line numbers.

    Default: 1

`line_number_bg`
    The background colour (in "#123456" format) of the line number bar, or
    None to use the style background color.

    Default: "#eed"

`line_number_fg`
    The text color of the line numbers (in "#123456"-like format).

    Default: "#886"

`line_number_chars`
    The number of columns of line numbers allowable in the line number
    margin.

    Default: 2

`line_number_bold`
    Whether line numbers will be bold: True/False

    Default: False

`line_number_italic`
    Whether line numbers will be italicized: True/False

    Default: False

`line_number_separator`
    Whether a line will be drawn between the line number area and the
    source code area: True/False

    Default: True

`line_number_pad`
    The horizontal padding (in pixels) between the line number margin, and
    the source code area.

    Default: 6

`hl_lines`
    Specify a list of lines to be highlighted.

    .. versionadded:: 1.2

    Default: empty list

`hl_color`
    Specify the color for highlighting lines.

    .. versionadded:: 1.2

    Default: highlight color of the selected style
:::
:::{doc} GifImageFormatter:646
Create a GIF image from source code. This uses the Python Imaging Library to
generate a pixmap from the source code.

.. versionadded:: 1.0
:::
:::{doc} JpgImageFormatter:660
Create a JPEG image from source code. This uses the Python Imaging Library to
generate a pixmap from the source code.

.. versionadded:: 1.0
:::
:::{doc} BmpImageFormatter:674
Create a bitmap image from source code. This uses the Python Imaging Library to
generate a pixmap from the source code.

.. versionadded:: 1.0
:::
**Imports**: `os`, `sys`, `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_int_opt`, `pip._vendor.pygments.util.get_list_opt`, `pip._vendor.pygments.util.get_choice_opt`, `subprocess`, `PIL.Image`, `PIL.ImageDraw`, `PIL.ImageFont`, `_winreg`, `winreg`
**Type References**: [[BmpImageFormatter]], [[FontManager]], [[FontNotFound]], [[GifImageFormatter]], [[ImageFormatter]], [[JpgImageFormatter]], [[PilNotAvailable]]

### Interface
- `__init__`() -> Any
- `_get_nix_font_path`() -> Any
- `_create_nix`() -> Any
- `_get_mac_font_path`() -> Any
- `_create_mac`() -> Any
- `_lookup_win`() -> Any
- `_create_win`() -> Any
- `get_char_size`() -> Any
- `get_text_size`() -> Any
- `get_font`() -> Any
- `get_style`() -> Any
- `get_style_defs`() -> Any
- `_get_line_height`() -> Any
- `_get_line_y`() -> Any
- `_get_char_width`() -> Any
- `_get_char_x`() -> Any
- `_get_text_pos`() -> Any
- `_get_linenumber_pos`() -> Any
- `_get_text_color`() -> Any
- `_get_text_bg_color`() -> Any
- `_get_style_font`() -> Any
- `_get_image_size`() -> Any
- `_draw_linenumber`() -> Any
- `_draw_text`() -> Any
- `_create_drawables`() -> Any
- `_draw_line_numbers`() -> Any
- `_paint_line_number_bg`() -> Any
- `format`() -> Any

### Implementation
**PilNotAvailable**

**FontNotFound**

**FontManager**

**ImageFormatter**

**GifImageFormatter**

**JpgImageFormatter**

**BmpImageFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatters/img.py`  
**Dependencies**: `os`, `sys`, `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_int_opt`, `pip._vendor.pygments.util.get_list_opt`, `pip._vendor.pygments.util.get_choice_opt`, `subprocess`, `PIL.Image`, `PIL.ImageDraw`, `PIL.ImageFont`, `_winreg`, `winreg`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatters.terminal256
:::{doc} Terminal256Formatter:98
Format tokens with ANSI color sequences, for output in a 256-color
terminal or console.  Like in `TerminalFormatter` color sequences
are terminated at newlines, so that paging the output works correctly.

The formatter takes colors from a style defined by the `style` option
and converts them to nearest ANSI 256-color escape sequences. Bold and
underline attributes from the style are preserved (and displayed).

.. versionadded:: 0.9

.. versionchanged:: 2.2
   If the used style defines foreground colors in the form ``#ansi*``, then
   `Terminal256Formatter` will map these to non extended foreground color.
   See :ref:`AnsiTerminalStyle` for more information.

.. versionchanged:: 2.4
   The ANSI color names have been updated with names that are easier to
   understand and align with colornames of other projects and terminals.
   See :ref:`this table <new-ansi-color-names>` for more information.


Options accepted:

`style`
    The style to use, can be a string or a Style subclass (default:
    ``'default'``).

`linenos`
    Set to ``True`` to have line numbers on the terminal output as well
    (default: ``False`` = no line numbers).
:::
:::{doc} TerminalTrueColorFormatter:293
Format tokens with ANSI color sequences, for output in a true-color
terminal or console.  Like in `TerminalFormatter` color sequences
are terminated at newlines, so that paging the output works correctly.

.. versionadded:: 2.1

Options accepted:

`style`
    The style to use, can be a string or a Style subclass (default:
    ``'default'``).
:::
**Imports**: `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.console.codes`, `pip._vendor.pygments.style.ansicolors`
**Type References**: [[EscapeSequence]], [[Terminal256Formatter]], [[TerminalTrueColorFormatter]]

### Interface
- `__init__`() -> Any
- `escape`() -> Any
- `color_string`() -> Any
- `true_color_string`() -> Any
- `reset_string`() -> Any
- `_build_color_table`() -> Any
- `_closest_color`() -> Any
- `_color_index`() -> Any
- `_setup_styles`() -> Any
- `_write_lineno`() -> Any
- `format`() -> Any
- `format_unencoded`() -> Any
- `_color_tuple`() -> Any

### Implementation
**EscapeSequence**

**Terminal256Formatter**

**TerminalTrueColorFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatters/terminal256.py`  
**Dependencies**: `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.console.codes`, `pip._vendor.pygments.style.ansicolors`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatters.rtf
:::{doc} RtfFormatter:20
Format tokens as RTF markup. This formatter automatically outputs full RTF
documents with color information and other useful stuff. Perfect for Copy and
Paste into Microsoft(R) Word(R) documents.

Please note that ``encoding`` and ``outencoding`` options are ignored.
The RTF format is ASCII natively, but handles unicode characters correctly
thanks to escape sequences.

.. versionadded:: 0.6

Additional options accepted:

`style`
    The style to use, can be a string or a Style subclass (default:
    ``'default'``).

`fontface`
    The used font family, for example ``Bitstream Vera Sans``. Defaults to
    some generic font which is supposed to have fixed width.

`fontsize`
    Size of the font used. Size is specified in half points. The
    default is 24 half-points, giving a size 12 font.

    .. versionadded:: 2.0

`linenos`
    Turn on line numbering (default: ``False``).

    .. versionadded:: 2.18

`lineno_fontsize`
    Font size for line numbers. Size is specified in half points
    (default: `fontsize`). 

    .. versionadded:: 2.18

`lineno_padding`
    Number of spaces between the (inline) line numbers and the
    source code (default: ``2``).

    .. versionadded:: 2.18

`linenostart`
    The line number for the first line (default: ``1``).

    .. versionadded:: 2.18

`linenostep`
    If set to a number n > 1, only every nth line number is printed.

    .. versionadded:: 2.18

`lineno_color`
    Color for line numbers specified as a hex triplet, e.g. ``'5e5e5e'``. 
    Defaults to the style's line number color if it is a hex triplet, 
    otherwise ansi bright black.

    .. versionadded:: 2.18

`hl_lines`
    Specify a list of lines to be highlighted, as line numbers separated by
    spaces, e.g. ``'3 7 8'``. The line numbers are relative to the input 
    (i.e. the first line is line 1) unless `hl_linenostart` is set.

    .. versionadded:: 2.18

`hl_color`
    Color for highlighting the lines specified in `hl_lines`, specified as 
    a hex triplet (default: style's `highlight_color`).

    .. versionadded:: 2.18

`hl_linenostart`
    If set to ``True`` line numbers in `hl_lines` are specified
    relative to `linenostart` (default ``False``).

    .. versionadded:: 2.18
:::
**Imports**: `collections.OrderedDict`, `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.style._ansimap`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_int_opt`, `pip._vendor.pygments.util.get_list_opt`, `pip._vendor.pygments.util.surrogatepair`
**Type References**: [[RtfFormatter]]

### Interface
- `__init__`() -> Any
- `_escape`() -> Any
- `_escape_text`() -> Any
- `hex_to_rtf_color`() -> Any
- `_split_tokens_on_newlines`() -> Any
- `_create_color_mapping`() -> Any
- `_lineno_template`() -> Any
- `_hl_open_str`() -> Any
- `_rtf_header`() -> Any
- `format_unencoded`() -> Any

### Implementation
**RtfFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatters/rtf.py`  
**Dependencies**: `collections.OrderedDict`, `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.style._ansimap`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_int_opt`, `pip._vendor.pygments.util.get_list_opt`, `pip._vendor.pygments.util.surrogatepair`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatters.svg
:::{doc} escape_html:18
Escape &, <, > as well as single and double quotes for HTML.
:::
:::{doc} SvgFormatter:29
Format tokens as an SVG graphics file.  This formatter is still experimental.
Each line of code is a ``<text>`` element with explicit ``x`` and ``y``
coordinates containing ``<tspan>`` elements with the individual token styles.

By default, this formatter outputs a full SVG document including doctype
declaration and the ``<svg>`` root element.

.. versionadded:: 0.9

Additional options accepted:

`nowrap`
    Don't wrap the SVG ``<text>`` elements in ``<svg><g>`` elements and
    don't add a XML declaration and a doctype.  If true, the `fontfamily`
    and `fontsize` options are ignored.  Defaults to ``False``.

`fontfamily`
    The value to give the wrapping ``<g>`` element's ``font-family``
    attribute, defaults to ``"monospace"``.

`fontsize`
    The value to give the wrapping ``<g>`` element's ``font-size``
    attribute, defaults to ``"14px"``.

`linenos`
    If ``True``, add line numbers (default: ``False``).

`linenostart`
    The line number for the first line (default: ``1``).

`linenostep`
    If set to a number n > 1, only every nth line number is printed.

`linenowidth`
    Maximum width devoted to line numbers (default: ``3*ystep``, sufficient
    for up to 4-digit line numbers. Increase width for longer code blocks).

`xoffset`
    Starting offset in X direction, defaults to ``0``.

`yoffset`
    Starting offset in Y direction, defaults to the font size if it is given
    in pixels, or ``20`` else.  (This is necessary since text coordinates
    refer to the text baseline, not the top edge.)

`ystep`
    Offset to add to the Y coordinate for each subsequent line.  This should
    roughly be the text size plus 5.  It defaults to that value if the text
    size is given in pixels, or ``25`` else.

`spacehack`
    Convert spaces in the source to ``&#160;``, which are non-breaking
    spaces.  SVG provides the ``xml:space`` attribute to control how
    whitespace inside tags is handled, in theory, the ``preserve`` value
    could be used to keep all whitespace as-is.  However, many current SVG
    viewers don't obey that rule, so this option is provided as a workaround
    and defaults to ``True``.
:::
**Imports**: `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.token.Comment`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_int_opt`
**Type References**: [[SvgFormatter]]

### Interface
- `escape_html`() -> Any
- `__init__`() -> Any
- `format_unencoded`() -> Any
- `_get_style`() -> Any

### Implementation
**SvgFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatters/svg.py`  
**Dependencies**: `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.token.Comment`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_int_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatters.bbcode
:::{doc} BBCodeFormatter:18
Format tokens with BBcodes. These formatting codes are used by many
bulletin boards, so you can highlight your sourcecode with pygments before
posting it there.

This formatter has no support for background colors and borders, as there
are no common BBcode tags for that.

Some board systems (e.g. phpBB) don't support colors in their [code] tag,
so you can't use the highlighting together with that tag.
Text in a [code] tag usually is shown with a monospace font (which this
formatter can do with the ``monofont`` option) and no spaces (which you
need for indentation) are removed.

Additional options accepted:

`style`
    The style to use, can be a string or a Style subclass (default:
    ``'default'``).

`codetag`
    If set to true, put the output into ``[code]`` tags (default:
    ``false``)

`monofont`
    If set to true, add a tag to show the code with a monospace font
    (default: ``false``).
:::
**Imports**: `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.util.get_bool_opt`
**Type References**: [[BBCodeFormatter]]

### Interface
- `__init__`() -> Any
- `_make_styles`() -> Any
- `format_unencoded`() -> Any

### Implementation
**BBCodeFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatters/bbcode.py`  
**Dependencies**: `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.util.get_bool_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatters.pangomarkup
:::{doc} escape_special_chars:23
Escape & and < for Pango Markup.
:::
:::{doc} PangoMarkupFormatter:28
Format tokens as Pango Markup code. It can then be rendered to an SVG.

.. versionadded:: 2.9
:::
**Imports**: `pip._vendor.pygments.formatter.Formatter`
**Type References**: [[PangoMarkupFormatter]]

### Interface
- `escape_special_chars`() -> Any
- `__init__`() -> Any
- `format_unencoded`() -> Any

### Implementation
**PangoMarkupFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatters/pangomarkup.py`  
**Dependencies**: `pip._vendor.pygments.formatter.Formatter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatters._mapping



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatters/_mapping.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatters.groff
:::{doc} GroffFormatter:18
Format tokens with groff escapes to change their color and font style.

.. versionadded:: 2.11

Additional options accepted:

`style`
    The style to use, can be a string or a Style subclass (default:
    ``'default'``).

`monospaced`
    If set to true, monospace font will be used (default: ``true``).

`linenos`
    If set to true, print the line numbers (default: ``false``).

`wrap`
    Wrap lines to the specified number of characters. Disabled if set to 0
    (default: ``0``).
:::
**Imports**: `math`, `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_int_opt`
**Type References**: [[GroffFormatter]]

### Interface
- `__init__`() -> Any
- `_make_styles`() -> Any
- `_define_colors`() -> Any
- `_write_lineno`() -> Any
- `_wrap_line`() -> Any
- `_escape_chars`() -> Any
- `format_unencoded`() -> Any

### Implementation
**GroffFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatters/groff.py`  
**Dependencies**: `math`, `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_int_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.formatters.latex
:::{doc} LatexFormatter:147
Format tokens as LaTeX code. This needs the `fancyvrb` and `color`
standard packages.

Without the `full` option, code is formatted as one ``Verbatim``
environment, like this:

.. sourcecode:: latex

    \begin{Verbatim}[commandchars=\\\{\}]
    \PY{k}{def }\PY{n+nf}{foo}(\PY{n}{bar}):
        \PY{k}{pass}
    \end{Verbatim}

Wrapping can be disabled using the `nowrap` option.

The special command used here (``\PY``) and all the other macros it needs
are output by the `get_style_defs` method.

With the `full` option, a complete LaTeX document is output, including
the command definitions in the preamble.

The `get_style_defs()` method of a `LatexFormatter` returns a string
containing ``\def`` commands defining the macros needed inside the
``Verbatim`` environments.

Additional options accepted:

`nowrap`
    If set to ``True``, don't wrap the tokens at all, not even inside a
    ``\begin{Verbatim}`` environment. This disables most other options
    (default: ``False``).

`style`
    The style to use, can be a string or a Style subclass (default:
    ``'default'``).

`full`
    Tells the formatter to output a "full" document, i.e. a complete
    self-contained document (default: ``False``).

`title`
    If `full` is true, the title that should be used to caption the
    document (default: ``''``).

`docclass`
    If the `full` option is enabled, this is the document class to use
    (default: ``'article'``).

`preamble`
    If the `full` option is enabled, this can be further preamble commands,
    e.g. ``\usepackage`` (default: ``''``).

`linenos`
    If set to ``True``, output line numbers (default: ``False``).

`linenostart`
    The line number for the first line (default: ``1``).

`linenostep`
    If set to a number n > 1, only every nth line number is printed.

`verboptions`
    Additional options given to the Verbatim environment (see the *fancyvrb*
    docs for possible values) (default: ``''``).

`commandprefix`
    The LaTeX commands used to produce colored output are constructed
    using this prefix and some letters (default: ``'PY'``).

    .. versionadded:: 0.7
    .. versionchanged:: 0.10
       The default is now ``'PY'`` instead of ``'C'``.

`texcomments`
    If set to ``True``, enables LaTeX comment lines.  That is, LaTex markup
    in comment tokens is not escaped so that LaTeX can render it (default:
    ``False``).

    .. versionadded:: 1.2

`mathescape`
    If set to ``True``, enables LaTeX math mode escape in comments. That
    is, ``'$...$'`` inside a comment will trigger math mode (default:
    ``False``).

    .. versionadded:: 1.2

`escapeinside`
    If set to a string of length 2, enables escaping to LaTeX. Text
    delimited by these 2 characters is read as LaTeX code and
    typeset accordingly. It has no effect in string literals. It has
    no effect in comments if `texcomments` or `mathescape` is
    set. (default: ``''``).

    .. versionadded:: 2.0

`envname`
    Allows you to pick an alternative environment name replacing Verbatim.
    The alternate environment still has to support Verbatim's option syntax.
    (default: ``'Verbatim'``).

    .. versionadded:: 2.0
:::
:::{doc} LatexEmbeddedLexer:437
This lexer takes one lexer as argument, the lexer for the language
being formatted, and the left and right delimiters for escaped text.

First everything is scanned using the language lexer to obtain
strings and comments. All other consecutive tokens are merged and
the resulting text is scanned for escaped segments, which are given
the Token.Escape type. Finally text that is not escaped is scanned
again with the language lexer.
:::
**Imports**: `io.StringIO`, `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.lexer.Lexer`, `pip._vendor.pygments.lexer.do_insertions`, `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.token.STANDARD_TYPES`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_int_opt`
**Type References**: [[LatexEmbeddedLexer]], [[LatexFormatter]]

### Interface
- `escape_tex`() -> Any
- `_get_ttype_name`() -> Any
- `__init__`() -> Any
- `_create_stylesheet`() -> Any
- `get_style_defs`() -> Any
- `format_unencoded`() -> Any
- `get_tokens_unprocessed`() -> Any
- `_find_safe_escape_tokens`() -> Any
- `_filter_to`() -> Any
- `_find_escape_tokens`() -> Any
- `rgbcolor`() -> Any

### Implementation
**LatexFormatter**

**LatexEmbeddedLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/formatters/latex.py`  
**Dependencies**: `io.StringIO`, `pip._vendor.pygments.formatter.Formatter`, `pip._vendor.pygments.lexer.Lexer`, `pip._vendor.pygments.lexer.do_insertions`, `pip._vendor.pygments.token.Token`, `pip._vendor.pygments.token.STANDARD_TYPES`, `pip._vendor.pygments.util.get_bool_opt`, `pip._vendor.pygments.util.get_int_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.styles
:::{doc} get_style_by_name:24
Return a style class by its short name. The names of the builtin styles
are listed in :data:`pygments.styles.STYLE_MAP`.

Will raise :exc:`pygments.util.ClassNotFound` if no style of that name is
found.
:::
:::{doc} get_all_styles:56
Return a generator for all styles by name, both builtin and plugin.
:::
**Imports**: `pip._vendor.pygments.plugin.find_plugin_styles`, `pip._vendor.pygments.util.ClassNotFound`, `pip._vendor.pygments.styles._mapping.STYLES`
### Interface
- `get_style_by_name`() -> Any
- `get_all_styles`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/styles/__init__.py`  
**Dependencies**: `pip._vendor.pygments.plugin.find_plugin_styles`, `pip._vendor.pygments.util.ClassNotFound`, `pip._vendor.pygments.styles._mapping.STYLES`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._vendor.pygments.styles._mapping



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_vendor/pygments/styles/_mapping.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.network.auth
:::{doc} KeyRingBaseProvider:45
Keyring base provider interface
:::
:::{doc} KeyRingNullProvider:59
Keyring null provider
:::
:::{doc} KeyRingPythonProvider:71
Keyring interface which uses locally imported `keyring`
:::
:::{doc} KeyRingCliProvider:103
Provider which uses `keyring` cli

Instead of calling the keyring package installed alongside pip
we call keyring on the command line which will enable pip to
use which ever installation of keyring is available first in
PATH.
:::
**Imports**: `logging`, `os`, `shutil`, `subprocess`, `sysconfig`, `typing`, `urllib.parse`, `abc.ABC`, `abc.abstractmethod`, `functools.lru_cache`, `os.path.commonprefix`, `pathlib.Path`, `typing.Any`, `typing.Dict`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Tuple`, `pip._vendor.requests.auth.AuthBase`, `pip._vendor.requests.auth.HTTPBasicAuth`, `pip._vendor.requests.models.Request`, `pip._vendor.requests.models.Response`, `pip._vendor.requests.utils.get_netrc_auth`, `pip._internal.utils.logging.getLogger`, `pip._internal.utils.misc.ask`, `pip._internal.utils.misc.ask_input`, `pip._internal.utils.misc.ask_password`, `pip._internal.utils.misc.remove_auth_from_url`, `pip._internal.utils.misc.split_auth_netloc_from_url`, `pip._internal.vcs.versioncontrol.AuthInfo`, `keyring`
**Type References**: [[Credentials]], [[KeyRingBaseProvider]], [[KeyRingCliProvider]], [[KeyRingNullProvider]], [[KeyRingPythonProvider]], [[MultiDomainBasicAuth]]

### Interface
- `get_keyring_provider`(provider: str) -> KeyRingBaseProvider
- `get_auth_info`(url: str, username: [Optional[str]](#optional)) -> [Optional[AuthInfo]](#optional)
- `save_auth_info`(url: str, username: str, password: str) -> None
- `__init__`(prompting: bool, index_urls: [Optional[List[str]]](#optional), keyring_provider: str) -> None
- `_get_password`(service_name: str, username: str) -> [Optional[str]](#optional)
- `_set_password`(service_name: str, username: str, password: str) -> None
- `keyring_provider`(provider: str) -> None
- `use_keyring`() -> bool
- `_get_keyring_auth`(url: [Optional[str]](#optional), username: [Optional[str]](#optional)) -> [Optional[AuthInfo]](#optional)
- `_get_index_url`(url: str) -> [Optional[str]](#optional)
- `_get_new_credentials`(original_url: str) -> AuthInfo
- `_get_url_and_credentials`(original_url: str) -> Tuple[<ast.Tuple object at 0x16525de50>]
- `__call__`(req: Request) -> Request
- `_prompt_for_password`(netloc: str) -> Tuple[<ast.Tuple object at 0x165272b10>]
- `_should_save_password_to_keyring`() -> bool
- `handle_401`(resp: Response) -> Response
- `warn_on_401`(resp: Response) -> None
- `save_credentials`(resp: Response) -> None
- `PATH_as_shutil_which_determines_it`() -> str

### Implementation
**Credentials**
  - url: str
  - username: str
  - password: str
**KeyRingBaseProvider**
  - has_keyring: bool
**KeyRingNullProvider**

**KeyRingPythonProvider**

**KeyRingCliProvider**

**MultiDomainBasicAuth**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/network/auth.py`  
**Dependencies**: `logging`, `os`, `shutil`, `subprocess`, `sysconfig`, `typing`, `urllib.parse`, `abc.ABC`, `abc.abstractmethod`, `functools.lru_cache`, `os.path.commonprefix`, `pathlib.Path`, `typing.Any`, `typing.Dict`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Tuple`, `pip._vendor.requests.auth.AuthBase`, `pip._vendor.requests.auth.HTTPBasicAuth`, `pip._vendor.requests.models.Request`, `pip._vendor.requests.models.Response`, `pip._vendor.requests.utils.get_netrc_auth`, `pip._internal.utils.logging.getLogger`, `pip._internal.utils.misc.ask`, `pip._internal.utils.misc.ask_input`, `pip._internal.utils.misc.ask_password`, `pip._internal.utils.misc.remove_auth_from_url`, `pip._internal.utils.misc.split_auth_netloc_from_url`, `pip._internal.vcs.versioncontrol.AuthInfo`, `keyring`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.network.xmlrpc
:::{doc} PipXmlrpcTransport:21
Provide a `xmlrpclib.Transport` implementation via a `PipSession`
object.
:::
**Imports**: `logging`, `urllib.parse`, `xmlrpc.client`, `typing.TYPE_CHECKING`, `typing.Tuple`, `pip._internal.exceptions.NetworkConnectionError`, `pip._internal.network.session.PipSession`, `pip._internal.network.utils.raise_for_status`, `xmlrpc.client._HostType`, `xmlrpc.client._Marshallable`, `_typeshed.SizedBuffer`
**Type References**: [[PipXmlrpcTransport]]

### Interface
- `__init__`(index_url: str, session: PipSession, use_datetime: bool) -> None
- `request`(host: _HostType, handler: str, request_body: SizedBuffer, verbose: bool) -> Tuple[<ast.Tuple object at 0x16528ded0>]

### Implementation
**PipXmlrpcTransport**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/network/xmlrpc.py`  
**Dependencies**: `logging`, `urllib.parse`, `xmlrpc.client`, `typing.TYPE_CHECKING`, `typing.Tuple`, `pip._internal.exceptions.NetworkConnectionError`, `pip._internal.network.session.PipSession`, `pip._internal.network.utils.raise_for_status`, `xmlrpc.client._HostType`, `xmlrpc.client._Marshallable`, `_typeshed.SizedBuffer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.network.download
:::{doc} sanitize_content_filename:73
Sanitize the "filename" value from a Content-Disposition header.
:::
:::{doc} parse_content_disposition:80
Parse the "filename" value from a Content-Disposition header, and
return the default filename if the result is empty.
:::
:::{doc} _get_http_response_filename:95
Get an ideal filename from the given HTTP response, falling back to
the link filename if not provided.
:::
**Imports**: `email.message`, `logging`, `mimetypes`, `os`, `typing.Iterable`, `typing.Optional`, `typing.Tuple`, `pip._vendor.requests.models.Response`, `pip._internal.cli.progress_bars.get_download_progress_renderer`, `pip._internal.exceptions.NetworkConnectionError`, `pip._internal.models.index.PyPI`, `pip._internal.models.link.Link`, `pip._internal.network.cache.is_from_cache`, `pip._internal.network.session.PipSession`, `pip._internal.network.utils.HEADERS`, `pip._internal.network.utils.raise_for_status`, `pip._internal.network.utils.response_chunks`, `pip._internal.utils.misc.format_size`, `pip._internal.utils.misc.redact_auth_from_url`, `pip._internal.utils.misc.splitext`
**Type References**: [[BatchDownloader]], [[Downloader]], [[Optional]]

### Interface
- `_get_http_response_size`(resp: Response) -> [Optional[int]](#optional)
- `_prepare_download`(resp: Response, link: Link, progress_bar: str) -> Iterable[bytes]
- `sanitize_content_filename`(filename: str) -> str
- `parse_content_disposition`(content_disposition: str, default_filename: str) -> str
- `_get_http_response_filename`(resp: Response, link: Link) -> str
- `_http_get_download`(session: PipSession, link: Link) -> Response
- `__init__`(session: PipSession, progress_bar: str) -> None
- `__call__`(links: Iterable[Link], location: str) -> Iterable[Tuple[<ast.Tuple object at 0x1652d4050>]]

### Implementation
**Downloader**

**BatchDownloader**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/network/download.py`  
**Dependencies**: `email.message`, `logging`, `mimetypes`, `os`, `typing.Iterable`, `typing.Optional`, `typing.Tuple`, `pip._vendor.requests.models.Response`, `pip._internal.cli.progress_bars.get_download_progress_renderer`, `pip._internal.exceptions.NetworkConnectionError`, `pip._internal.models.index.PyPI`, `pip._internal.models.link.Link`, `pip._internal.network.cache.is_from_cache`, `pip._internal.network.session.PipSession`, `pip._internal.network.utils.HEADERS`, `pip._internal.network.utils.raise_for_status`, `pip._internal.network.utils.response_chunks`, `pip._internal.utils.misc.format_size`, `pip._internal.utils.misc.redact_auth_from_url`, `pip._internal.utils.misc.splitext`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.network.session
:::{doc} looks_like_ci:100
Return whether it looks like pip is running under CI.
:::
:::{doc} user_agent:111
Return a string representing the user agent.
:::
:::{doc} _SSLContextAdapterMixin:256
Mixin to add the ``ssl_context`` constructor argument to HTTP adapters.

The additional argument is forwarded directly to the pool manager. This allows us
to dynamically decide what SSL store to use at runtime, which is used to implement
the optional ``truststore`` backend.
:::
**Imports**: `email.utils`, `functools`, `io`, `ipaddress`, `json`, `logging`, `mimetypes`, `os`, `platform`, `shutil`, `subprocess`, `sys`, `urllib.parse`, `warnings`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Dict`, `typing.Generator`, `typing.List`, `typing.Mapping`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `pip._vendor.requests`, `pip._vendor.urllib3`, `pip._vendor.cachecontrol.CacheControlAdapter`, `pip._vendor.requests.adapters.DEFAULT_POOLBLOCK`, `pip._vendor.requests.adapters.BaseAdapter`, `pip._vendor.requests.adapters.HTTPAdapter`, `pip._vendor.requests.models.PreparedRequest`, `pip._vendor.requests.models.Response`, `pip._vendor.requests.structures.CaseInsensitiveDict`, `pip._vendor.urllib3.connectionpool.ConnectionPool`, `pip._vendor.urllib3.exceptions.InsecureRequestWarning`, `pip.__version__`, `pip._internal.metadata.get_default_environment`, `pip._internal.models.link.Link`, `pip._internal.network.auth.MultiDomainBasicAuth`, `pip._internal.network.cache.SafeFileCache`, `pip._internal.utils.compat.has_tls`, `pip._internal.utils.glibc.libc_ver`, `pip._internal.utils.misc.build_url_from_netloc`, `pip._internal.utils.misc.parse_netloc`, `pip._internal.utils.urls.url_to_path`, `ssl.SSLContext`, `pip._vendor.urllib3.poolmanager.PoolManager`, `pip._vendor.distro`, `_ssl`
**Type References**: [[CacheControlAdapter]], [[Dict]], [[HTTPAdapter]], [[InsecureCacheControlAdapter]], [[InsecureHTTPAdapter]], [[List]], [[LocalFSAdapter]], [[Optional]], [[PipSession]], [[_SSLContextAdapterMixin]]

### Interface
- `looks_like_ci`() -> bool
- `user_agent`() -> str
- `send`(request: PreparedRequest, stream: bool, timeout: [Optional[Union[<ast.Tuple object at 0x16530f610>]]](#optional), verify: [Union[<ast.Tuple object at 0x16530f090>]](#union), cert: [Optional[Union[<ast.Tuple object at 0x16530ec50>]]](#optional), proxies: [Optional[Mapping[<ast.Tuple object at 0x16530e5d0>]]](#optional)) -> Response
- `close`() -> None
- `__init__`() -> None
- `init_poolmanager`(connections: int, maxsize: int, block: bool) -> PoolManager
- `cert_verify`(conn: ConnectionPool, url: str, verify: [Union[<ast.Tuple object at 0x165323350>]](#union), cert: [Optional[Union[<ast.Tuple object at 0x165323790>]]](#optional)) -> None
- `update_index_urls`(new_index_urls: [List[str]](#list)) -> None
- `add_trusted_host`(host: str, source: [Optional[str]](#optional), suppress_logging: bool) -> None
- `iter_secure_origins`() -> Generator[<ast.Tuple object at 0x165350fd0>]
- `is_secure_origin`(location: Link) -> bool
- `request`(method: str, url: str) -> Response

### Implementation
**LocalFSAdapter**

**_SSLContextAdapterMixin**

**HTTPAdapter**

**CacheControlAdapter**

**InsecureHTTPAdapter**

**InsecureCacheControlAdapter**

**PipSession**
  - timeout: Optional[int]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/network/session.py`  
**Dependencies**: `email.utils`, `functools`, `io`, `ipaddress`, `json`, `logging`, `mimetypes`, `os`, `platform`, `shutil`, `subprocess`, `sys`, `urllib.parse`, `warnings`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Dict`, `typing.Generator`, `typing.List`, `typing.Mapping`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `pip._vendor.requests`, `pip._vendor.urllib3`, `pip._vendor.cachecontrol.CacheControlAdapter`, `pip._vendor.requests.adapters.DEFAULT_POOLBLOCK`, `pip._vendor.requests.adapters.BaseAdapter`, `pip._vendor.requests.adapters.HTTPAdapter`, `pip._vendor.requests.models.PreparedRequest`, `pip._vendor.requests.models.Response`, `pip._vendor.requests.structures.CaseInsensitiveDict`, `pip._vendor.urllib3.connectionpool.ConnectionPool`, `pip._vendor.urllib3.exceptions.InsecureRequestWarning`, `pip.__version__`, `pip._internal.metadata.get_default_environment`, `pip._internal.models.link.Link`, `pip._internal.network.auth.MultiDomainBasicAuth`, `pip._internal.network.cache.SafeFileCache`, `pip._internal.utils.compat.has_tls`, `pip._internal.utils.glibc.libc_ver`, `pip._internal.utils.misc.build_url_from_netloc`, `pip._internal.utils.misc.parse_netloc`, `pip._internal.utils.urls.url_to_path`, `ssl.SSLContext`, `pip._vendor.urllib3.poolmanager.PoolManager`, `pip._vendor.distro`, `_ssl`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.network.cache
:::{doc} suppressed_cache_errors:22
If we can't access the cache then we can just skip caching and process
requests as if caching wasn't enabled.
:::
:::{doc} SafeFileCache:32
A file based cache which is safe to use even when the target directory may
not be accessible or writable.

There is a race condition when two processes try to write and/or read the
same entry at the same time, since each entry consists of two separate
files (https://github.com/psf/cachecontrol/issues/324).  We therefore have
additional logic that makes sure that both files to be present before
returning an entry; this fixes the read side of the race condition.

For the write side, we assume that the server will only ever return the
same data for the same URL, which ought to be the case for files pip is
downloading.  PyPI does not have a mechanism to swap out a wheel for
another wheel, for example.  If this assumption is not true, the
CacheControl issue will need to be fixed.
:::
**Imports**: `os`, `contextlib.contextmanager`, `datetime.datetime`, `typing.BinaryIO`, `typing.Generator`, `typing.Optional`, `typing.Union`, `pip._vendor.cachecontrol.cache.SeparateBodyBaseCache`, `pip._vendor.cachecontrol.caches.SeparateBodyFileCache`, `pip._vendor.requests.models.Response`, `pip._internal.utils.filesystem.adjacent_tmp_file`, `pip._internal.utils.filesystem.replace`, `pip._internal.utils.misc.ensure_dir`
**Type References**: [[SafeFileCache]]

### Interface
- `is_from_cache`(response: Response) -> bool
- `suppressed_cache_errors`() -> Generator[<ast.Tuple object at 0x165366090>]
- `__init__`(directory: str) -> None
- `_get_cache_path`(name: str) -> str
- `get`(key: str) -> [Optional[bytes]](#optional)
- `_write`(path: str, data: bytes) -> None
- `set`(key: str, value: bytes, expires: [Union[<ast.Tuple object at 0x1653682d0>]](#union)) -> None
- `delete`(key: str) -> None
- `get_body`(key: str) -> [Optional[BinaryIO]](#optional)
- `set_body`(key: str, body: bytes) -> None

### Implementation
**SafeFileCache**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/network/cache.py`  
**Dependencies**: `os`, `contextlib.contextmanager`, `datetime.datetime`, `typing.BinaryIO`, `typing.Generator`, `typing.Optional`, `typing.Union`, `pip._vendor.cachecontrol.cache.SeparateBodyBaseCache`, `pip._vendor.cachecontrol.caches.SeparateBodyFileCache`, `pip._vendor.requests.models.Response`, `pip._internal.utils.filesystem.adjacent_tmp_file`, `pip._internal.utils.filesystem.replace`, `pip._internal.utils.misc.ensure_dir`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.network



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/network/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.network.utils
:::{doc} response_chunks:59
Given a requests Response, provide the data chunks.
:::
**Imports**: `typing.Dict`, `typing.Generator`, `pip._vendor.requests.models.Response`, `pip._internal.exceptions.NetworkConnectionError`
**Type References**: [[Dict]]

### Interface
- `raise_for_status`(resp: Response) -> None
- `response_chunks`(response: Response, chunk_size: int) -> Generator[<ast.Tuple object at 0x16537e0d0>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/network/utils.py`  
**Dependencies**: `typing.Dict`, `typing.Generator`, `pip._vendor.requests.models.Response`, `pip._internal.exceptions.NetworkConnectionError`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.network.lazy_wheel
:::{doc} dist_from_wheel_url:23
Return a distribution object from the given wheel URL.

This uses HTTP range requests to only fetch the portion of the wheel
containing metadata, just enough for the object to be constructed.
If such requests are not supported, HTTPRangeRequestUnsupported
is raised.
:::
:::{doc} LazyZipOverHTTP:40
File-like object mapped to a ZIP file over HTTP.

This uses HTTP range requests to lazily fetch the file's content,
which is supposed to be fed to ZipFile.  If such requests are not
supported by the server, raise HTTPRangeRequestUnsupported
during initialization.
:::
**Imports**: `bisect.bisect_left`, `bisect.bisect_right`, `contextlib.contextmanager`, `tempfile.NamedTemporaryFile`, `typing.Any`, `typing.Dict`, `typing.Generator`, `typing.List`, `typing.Optional`, `typing.Tuple`, `zipfile.BadZipFile`, `zipfile.ZipFile`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.requests.models.CONTENT_CHUNK_SIZE`, `pip._vendor.requests.models.Response`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.MemoryWheel`, `pip._internal.metadata.get_wheel_distribution`, `pip._internal.network.session.PipSession`, `pip._internal.network.utils.HEADERS`, `pip._internal.network.utils.raise_for_status`, `pip._internal.network.utils.response_chunks`
**Type References**: [[HTTPRangeRequestUnsupported]], [[LazyZipOverHTTP]]

### Interface
- `dist_from_wheel_url`(name: str, url: str, session: PipSession) -> BaseDistribution
- `__init__`(url: str, session: PipSession, chunk_size: int) -> None
- `mode`() -> str
- `name`() -> str
- `seekable`() -> bool
- `close`() -> None
- `closed`() -> bool
- `read`(size: int) -> bytes
- `readable`() -> bool
- `seek`(offset: int, whence: int) -> int
- `tell`() -> int
- `truncate`(size: [Optional[int]](#optional)) -> int
- `writable`() -> bool
- `__enter__`() -> LazyZipOverHTTP
- `__exit__`() -> None
- `_stay`() -> Generator[<ast.Tuple object at 0x16537d950>]
- `_check_zip`() -> None
- `_stream_response`(start: int, end: int, base_headers: [Dict[<ast.Tuple object at 0x1653b6310>]](#dict)) -> Response
- `_merge`(start: int, end: int, left: int, right: int) -> Generator[<ast.Tuple object at 0x1653c3a90>]
- `_download`(start: int, end: int) -> None

### Implementation
**HTTPRangeRequestUnsupported**

**LazyZipOverHTTP**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/network/lazy_wheel.py`  
**Dependencies**: `bisect.bisect_left`, `bisect.bisect_right`, `contextlib.contextmanager`, `tempfile.NamedTemporaryFile`, `typing.Any`, `typing.Dict`, `typing.Generator`, `typing.List`, `typing.Optional`, `typing.Tuple`, `zipfile.BadZipFile`, `zipfile.ZipFile`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.requests.models.CONTENT_CHUNK_SIZE`, `pip._vendor.requests.models.Response`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.MemoryWheel`, `pip._internal.metadata.get_wheel_distribution`, `pip._internal.network.session.PipSession`, `pip._internal.network.utils.HEADERS`, `pip._internal.network.utils.raise_for_status`, `pip._internal.network.utils.response_chunks`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.logging
:::{doc} BrokenStdoutLoggingError:35
Raised if BrokenPipeError occurs for the stdout stream while logging.
:::
:::{doc} indent_log:55
A context manager which will cause the log output to be indented for any
log messages emitted inside it.
:::
:::{doc} ExcludeLoggerFilter:214
A logging Filter that excludes records from a logger (or its children).
:::
:::{doc} setup_logging:225
Configures and sets up all of the logging

Returns the requested logging level, as its integer value.
:::
**Imports**: `contextlib`, `errno`, `logging`, `logging.handlers`, `os`, `sys`, `threading`, `dataclasses.dataclass`, `io.TextIOWrapper`, `logging.Filter`, `typing.Any`, `typing.ClassVar`, `typing.Generator`, `typing.List`, `typing.Optional`, `typing.TextIO`, `typing.Type`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.console.ConsoleOptions`, `pip._vendor.rich.console.ConsoleRenderable`, `pip._vendor.rich.console.RenderableType`, `pip._vendor.rich.console.RenderResult`, `pip._vendor.rich.console.RichCast`, `pip._vendor.rich.highlighter.NullHighlighter`, `pip._vendor.rich.logging.RichHandler`, `pip._vendor.rich.segment.Segment`, `pip._vendor.rich.style.Style`, `pip._internal.utils._log.VERBOSE`, `pip._internal.utils._log.getLogger`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.deprecation.DEPRECATION_MSG_PREFIX`, `pip._internal.utils.misc.ensure_dir`
**Type References**: [[BetterRotatingFileHandler]], [[BrokenStdoutLoggingError]], [[ClassVar]], [[ExcludeLoggerFilter]], [[IndentedRenderable]], [[IndentingFormatter]], [[MaxLevelFilter]], [[Optional]], [[RenderableType]], [[RichPipStreamHandler]]

### Interface
- `_is_broken_pipe_error`(exc_class: Type[BaseException], exc: BaseException) -> bool
- `indent_log`(num: int) -> Generator[<ast.Tuple object at 0x1653e2d50>]
- `get_indentation`() -> int
- `setup_logging`(verbosity: int, no_color: bool, user_log_file: [Optional[str]](#optional)) -> int
- `__init__`(level: int) -> None
- `get_message_start`(formatted: str, levelno: int) -> str
- `format`(record: logging.LogRecord) -> str
- `__rich_console__`(console: Console, options: ConsoleOptions) -> RenderResult
- `emit`(record: logging.LogRecord) -> None
- `handleError`(record: logging.LogRecord) -> None
- `_open`() -> TextIOWrapper
- `filter`(record: logging.LogRecord) -> bool

### Implementation
**BrokenStdoutLoggingError**

**IndentingFormatter**

**IndentedRenderable**
  - renderable: RenderableType
  - indent: int
**RichPipStreamHandler**
  - KEYWORDS: ClassVar[Optional[List[str]]]
  - style: Optional[Style]
  - renderable: RenderableType
**BetterRotatingFileHandler**

**MaxLevelFilter**

**ExcludeLoggerFilter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/logging.py`  
**Dependencies**: `contextlib`, `errno`, `logging`, `logging.handlers`, `os`, `sys`, `threading`, `dataclasses.dataclass`, `io.TextIOWrapper`, `logging.Filter`, `typing.Any`, `typing.ClassVar`, `typing.Generator`, `typing.List`, `typing.Optional`, `typing.TextIO`, `typing.Type`, `pip._vendor.rich.console.Console`, `pip._vendor.rich.console.ConsoleOptions`, `pip._vendor.rich.console.ConsoleRenderable`, `pip._vendor.rich.console.RenderableType`, `pip._vendor.rich.console.RenderResult`, `pip._vendor.rich.console.RichCast`, `pip._vendor.rich.highlighter.NullHighlighter`, `pip._vendor.rich.logging.RichHandler`, `pip._vendor.rich.segment.Segment`, `pip._vendor.rich.style.Style`, `pip._internal.utils._log.VERBOSE`, `pip._internal.utils._log.getLogger`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.deprecation.DEPRECATION_MSG_PREFIX`, `pip._internal.utils.misc.ensure_dir`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.misc
:::{doc} normalize_version_info:82
Convert a tuple of ints representing a Python version to one of length
three.

:param py_version_info: a tuple of ints representing a Python version,
    or None to specify no version. The tuple can have any length.

:return: a tuple of length three if `py_version_info` is non-None.
    Otherwise, return `py_version_info` unchanged (i.e. None).
:::
:::{doc} ensure_dir:101
os.path.makedirs without EEXIST.
:::
:::{doc} rmtree_errorhandler:148
`rmtree` error handler to 'force' a file remove (i.e. like `rm -f`).

* If a file is readonly then it's write flag is set and operation is
  retried.

* `onerror` is the original callback from `rmtree(... onerror=onerror)`
  that is chained at the end if the "rm -f" still fails.
:::
:::{doc} display_path:189
Gives the display value for a given path, making it relative to cwd
if possible.
:::
:::{doc} backup_dir:198
Figure out the name of a directory to back up the given dir to
(adding .bak, .bak2, etc)
:::
:::{doc} _check_no_input:216
Raise an error if no input is allowed.
:::
:::{doc} ask:224
Ask the message interactively, with the given possible responses
:::
:::{doc} ask_input:239
Ask for input interactively.
:::
:::{doc} ask_password:245
Ask for a password interactively.
:::
:::{doc} strtobool:251
Convert a string representation of truth to true (1) or false (0).

True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values
are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if
'val' is anything else.
:::
:::{doc} tabulate:278
Return a list of formatted rows and a list of column sizes.

For example::

>>> tabulate([['foobar', 2000], [0xdeadbeef]])
(['foobar     2000', '3735928559'], [10, 4])
:::
:::{doc} is_installable_dir:292
Is path is a directory containing pyproject.toml or setup.py?

If pyproject.toml exists, this is a PEP 517 project. Otherwise we look for
a legacy setuptools layout by identifying setup.py. We don't check for the
setup.cfg because using it without setup.py is only available for PEP 517
projects, which are already covered by the pyproject.toml check.
:::
:::{doc} read_chunks:309
Yield pieces of data from a file-like object until EOF.
:::
:::{doc} normalize_path:320
Convert a path to its canonical, case-normalized, absolute version.
:::
:::{doc} splitext:333
Like os.path.splitext, but take off .tar too
:::
:::{doc} renames:342
Like os.renames(), but handles renaming across devices.
:::
:::{doc} is_local:359
Return True if path is within sys.prefix, if we're running in a virtualenv.

If we're not in a virtualenv, all paths are considered "local."

Caution: this function assumes the head of path has been normalized
with normalize_path.
:::
:::{doc} build_netloc:401
Build a netloc from a host-port pair
:::
:::{doc} build_url_from_netloc:413
Build a full URL from a netloc.
:::
:::{doc} parse_netloc:423
Return the host-port pair from a netloc.
:::
:::{doc} split_auth_from_netloc:432
Parse out and remove the auth information from a netloc.

Returns: (netloc, (username, password)).
:::
:::{doc} redact_netloc:461
Replace the sensitive data in a netloc with "****", if it exists.

For example:
    - "user:pass@example.com" returns "user:****@example.com"
    - "accesstoken@example.com" returns "****@example.com"
:::
:::{doc} _transform_url:481
Transform and replace netloc in a url.

transform_netloc is a function taking the netloc and returning a
tuple. The first element of this tuple is the new netloc. The
entire tuple is returned.

Returns a tuple containing the transformed url as item 0 and the
original tuple returned by transform_netloc as item 1.
:::
:::{doc} split_auth_netloc_from_url:509
Parse a url into separate netloc, auth, and url with no auth.

Returns: (url_without_auth, netloc, (username, password))
:::
:::{doc} remove_auth_from_url:521
Return a copy of url with 'username:password@' removed.
:::
:::{doc} redact_auth_from_url:528
Replace the password in a given url with ****.
:::
:::{doc} redact_auth_from_requirement:533
Replace the password in a given requirement url with ****.
:::
:::{doc} protect_pip_from_modification_on_windows:570
Protection of pip.exe from modification on Windows

On Windows, any operation modifying pip should be run as:
    python -m pip ...
:::
:::{doc} check_externally_managed:596
Check whether the current environment is externally managed.

If the ``EXTERNALLY-MANAGED`` config file is found, the current environment
is considered externally managed, and an ExternallyManagedEnvironment is
raised.
:::
:::{doc} is_console_interactive:611
Is this console interactive?
:::
:::{doc} hash_file:616
Return (hash, length) for path using hashlib.sha256()
:::
:::{doc} pairwise:628
Return paired elements.

For example:
    s -> (s0, s1), (s2, s3), (s4, s5), ...
:::
:::{doc} partition:639
Use a predicate to partition entries into false entries and true entries,
like

    partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9
:::
:::{doc} warn_if_run_as_root:742
Output a warning for sudo users on Unix.

In a virtual environment, sudo pip still writes to virtualenv.
On Windows, users may run pip as Administrator without issues.
This warning only applies to Unix root users outside of virtualenv.
:::
**Imports**: `errno`, `getpass`, `hashlib`, `logging`, `os`, `posixpath`, `shutil`, `stat`, `sys`, `sysconfig`, `urllib.parse`, `dataclasses.dataclass`, `functools.partial`, `io.StringIO`, `itertools.filterfalse`, `itertools.tee`, `itertools.zip_longest`, `pathlib.Path`, `types.FunctionType`, `types.TracebackType`, `typing.Any`, `typing.BinaryIO`, `typing.Callable`, `typing.Dict`, `typing.Generator`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.TextIO`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `typing.cast`, `pip._vendor.packaging.requirements.Requirement`, `pip._vendor.pyproject_hooks.BuildBackendHookCaller`, `pip.__version__`, `pip._internal.exceptions.CommandError`, `pip._internal.exceptions.ExternallyManagedEnvironment`, `pip._internal.locations.get_major_minor_version`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.retry.retry`, `pip._internal.utils.virtualenv.running_under_virtualenv`
**Type References**: [[ConfiguredBuildBackendHookCaller]], [[HiddenText]], [[OnErr]], [[Optional]], [[StreamWrapper]], [[TextIO]]

### Interface
- `get_pip_version`() -> str
- `normalize_version_info`(py_version_info: Tuple[<ast.Tuple object at 0x16543b450>]) -> Tuple[<ast.Tuple object at 0x165439a50>]
- `ensure_dir`(path: str) -> None
- `get_prog`() -> str
- `rmtree`(dir: str, ignore_errors: bool, onexc: [Optional[OnExc]](#optional)) -> None
- `_onerror_ignore`() -> None
- `_onerror_reraise`() -> None
- `rmtree_errorhandler`(func: FunctionType, path: Path, exc_info: [Union[<ast.Tuple object at 0x16542f190>]](#union)) -> None
- `display_path`(path: str) -> str
- `backup_dir`(dir: str, ext: str) -> str
- `ask_path_exists`(message: str, options: Iterable[str]) -> str
- `_check_no_input`(message: str) -> None
- `ask`(message: str, options: Iterable[str]) -> str
- `ask_input`(message: str) -> str
- `ask_password`(message: str) -> str
- `strtobool`(val: str) -> int
- `format_size`(bytes: float) -> str
- `tabulate`(rows: Iterable[Iterable[Any]]) -> Tuple[<ast.Tuple object at 0x165475b10>]
- `is_installable_dir`(path: str) -> bool
- `read_chunks`(file: BinaryIO, size: int) -> Generator[<ast.Tuple object at 0x16546ea50>]
- `normalize_path`(path: str, resolve_symlinks: bool) -> str
- `splitext`(path: str) -> Tuple[<ast.Tuple object at 0x16545f450>]
- `renames`(old: str, new: str) -> None
- `is_local`(path: str) -> bool
- `write_output`(msg: Any) -> None
- `enum`() -> Type[Any]
- `build_netloc`(host: str, port: [Optional[int]](#optional)) -> str
- `build_url_from_netloc`(netloc: str, scheme: str) -> str
- `parse_netloc`(netloc: str) -> Tuple[<ast.Tuple object at 0x165433f90>]
- `split_auth_from_netloc`(netloc: str) -> NetlocTuple
- `redact_netloc`(netloc: str) -> str
- `_transform_url`(url: str, transform_netloc: Callable[<ast.Tuple object at 0x1654b19d0>]) -> Tuple[<ast.Tuple object at 0x1654b39d0>]
- `_get_netloc`(netloc: str) -> NetlocTuple
- `_redact_netloc`(netloc: str) -> Tuple[str]
- `split_auth_netloc_from_url`(url: str) -> Tuple[<ast.Tuple object at 0x1654c1a90>]
- `remove_auth_from_url`(url: str) -> str
- `redact_auth_from_url`(url: str) -> str
- `redact_auth_from_requirement`(req: Requirement) -> str
- `hide_value`(value: str) -> HiddenText
- `hide_url`(url: str) -> HiddenText
- `protect_pip_from_modification_on_windows`(modifying_pip: bool) -> None
- `check_externally_managed`() -> None
- `is_console_interactive`() -> bool
- `hash_file`(path: str, blocksize: int) -> Tuple[<ast.Tuple object at 0x1654de7d0>]
- `pairwise`(iterable: Iterable[Any]) -> Iterator[Tuple[<ast.Tuple object at 0x1654df7d0>]]
- `partition`(pred: Callable[<ast.Tuple object at 0x1654dfcd0>], iterable: Iterable[T]) -> Tuple[<ast.Tuple object at 0x1654e4f90>]
- `warn_if_run_as_root`() -> None
- `from_stream`(orig_stream: TextIO) -> StreamWrapper
- `encoding`() -> str
- `__repr__`() -> str
- `__str__`() -> str
- `__eq__`(other: Any) -> bool
- `__init__`(config_holder: Any, source_dir: str, build_backend: str, backend_path: [Optional[str]](#optional), runner: [Optional[Callable[<ast.Tuple object at 0x1654e5f10>]]](#optional), python_executable: [Optional[str]](#optional)) -> Any
- `build_wheel`(wheel_directory: str, config_settings: [Optional[Dict[<ast.Tuple object at 0x1654e7390>]]](#optional), metadata_directory: [Optional[str]](#optional)) -> str
- `build_sdist`(sdist_directory: str, config_settings: [Optional[Dict[<ast.Tuple object at 0x1654ecc10>]]](#optional)) -> str
- `build_editable`(wheel_directory: str, config_settings: [Optional[Dict[<ast.Tuple object at 0x1654ee0d0>]]](#optional), metadata_directory: [Optional[str]](#optional)) -> str
- `get_requires_for_build_wheel`(config_settings: [Optional[Dict[<ast.Tuple object at 0x1654ef810>]]](#optional)) -> [List[str]](#list)
- `get_requires_for_build_sdist`(config_settings: [Optional[Dict[<ast.Tuple object at 0x165500c90>]]](#optional)) -> [List[str]](#list)
- `get_requires_for_build_editable`(config_settings: [Optional[Dict[<ast.Tuple object at 0x1655020d0>]]](#optional)) -> [List[str]](#list)
- `prepare_metadata_for_build_wheel`(metadata_directory: str, config_settings: [Optional[Dict[<ast.Tuple object at 0x165503610>]]](#optional), _allow_fallback: bool) -> str
- `prepare_metadata_for_build_editable`(metadata_directory: str, config_settings: [Optional[Dict[<ast.Tuple object at 0x165508e10>]]](#optional), _allow_fallback: bool) -> str

### Implementation
**StreamWrapper**
  - orig_stream: TextIO
**HiddenText**
  - secret: str
  - redacted: str
**ConfiguredBuildBackendHookCaller**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/misc.py`  
**Dependencies**: `errno`, `getpass`, `hashlib`, `logging`, `os`, `posixpath`, `shutil`, `stat`, `sys`, `sysconfig`, `urllib.parse`, `dataclasses.dataclass`, `functools.partial`, `io.StringIO`, `itertools.filterfalse`, `itertools.tee`, `itertools.zip_longest`, `pathlib.Path`, `types.FunctionType`, `types.TracebackType`, `typing.Any`, `typing.BinaryIO`, `typing.Callable`, `typing.Dict`, `typing.Generator`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.TextIO`, `typing.Tuple`, `typing.Type`, `typing.TypeVar`, `typing.Union`, `typing.cast`, `pip._vendor.packaging.requirements.Requirement`, `pip._vendor.pyproject_hooks.BuildBackendHookCaller`, `pip.__version__`, `pip._internal.exceptions.CommandError`, `pip._internal.exceptions.ExternallyManagedEnvironment`, `pip._internal.locations.get_major_minor_version`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.retry.retry`, `pip._internal.utils.virtualenv.running_under_virtualenv`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.egg_link
:::{doc} _egg_link_names:18
Convert a Name metadata value to a .egg-link name, by applying
the same substitution as pkg_resources's safe_name function.
Note: we cannot use canonicalize_name because it has a different logic.

We also look for the raw name (without normalization) as setuptools 69 changed
the way it names .egg-link files (https://github.com/pypa/setuptools/issues/4167).
:::
:::{doc} egg_link_path_from_sys_path:33
Look for a .egg-link file for project name, by walking sys.path.
:::
:::{doc} egg_link_path_from_location:46
Return the path for the .egg-link file if it exists, otherwise, None.

There's 3 scenarios:
1) not in a virtualenv
   try to find in site.USER_SITE, then site_packages
2) in a no-global virtualenv
   try to find in site_packages
3) in a yes-global virtualenv
   try to find in site_packages, then site.USER_SITE
   (don't look in global location)

For #1 and #3, there could be odd cases, where there's an egg-link in 2
locations.

This method will just return the first one found.
:::
**Imports**: `os`, `re`, `sys`, `typing.List`, `typing.Optional`, `pip._internal.locations.site_packages`, `pip._internal.locations.user_site`, `pip._internal.utils.virtualenv.running_under_virtualenv`, `pip._internal.utils.virtualenv.virtualenv_no_global`
**Type References**: [[List]]

### Interface
- `_egg_link_names`(raw_name: str) -> [List[str]](#list)
- `egg_link_path_from_sys_path`(raw_name: str) -> [Optional[str]](#optional)
- `egg_link_path_from_location`(raw_name: str) -> [Optional[str]](#optional)
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/egg_link.py`  
**Dependencies**: `os`, `re`, `sys`, `typing.List`, `typing.Optional`, `pip._internal.locations.site_packages`, `pip._internal.locations.user_site`, `pip._internal.utils.virtualenv.running_under_virtualenv`, `pip._internal.utils.virtualenv.virtualenv_no_global`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.compat
:::{doc} get_path_uid:29
Return path's uid.

Does not follow symlinks:
    https://github.com/pypa/pip/pull/935#discussion_r5307003

Placed this function in compat due to differences on AIX and
Jython, that should eventually go away.

:raises OSError: When path is a symlink or can't be read.
:::
**Imports**: `importlib.resources`, `logging`, `os`, `sys`, `typing.IO`, `pip._vendor.urllib3.util.IS_PYOPENSSL`, `_ssl`
### Interface
- `has_tls`() -> bool
- `get_path_uid`(path: str) -> int
- `open_text_resource`(package: str, resource: str, encoding: str, errors: str) -> IO[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/compat.py`  
**Dependencies**: `importlib.resources`, `logging`, `os`, `sys`, `typing.IO`, `pip._vendor.urllib3.util.IS_PYOPENSSL`, `_ssl`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.encoding
:::{doc} auto_decode:20
Check a bytes string for a BOM to correctly detect the encoding

Fallback to locale.getpreferredencoding(False) like open() on Python3
:::
**Imports**: `codecs`, `locale`, `re`, `sys`, `typing.List`, `typing.Tuple`
**Type References**: [[List]]

### Interface
- `auto_decode`(data: bytes) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/encoding.py`  
**Dependencies**: `codecs`, `locale`, `re`, `sys`, `typing.List`, `typing.Tuple`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.deprecation
:::{doc} deprecated:55
Helper to deprecate existing functionality.

reason:
    Textual reason shown to the user about why this functionality has
    been deprecated. Should be a complete sentence.
replacement:
    Textual suggestion shown to the user about what alternative
    functionality they can use.
gone_in:
    The version of pip does this functionality should get removed in.
    Raises an error if pip's current version is greater than or equal to
    this.
feature_flag:
    Command-line flag of the form --use-feature={feature_flag} for testing
    upcoming functionality.
issue:
    Issue number on the tracker that would serve as a useful place for
    users to find related discussion and provide feedback.
:::
**Imports**: `logging`, `warnings`, `typing.Any`, `typing.Optional`, `typing.TextIO`, `typing.Type`, `typing.Union`, `pip._vendor.packaging.version.parse`, `pip.__version__`
**Type References**: [[Any]], [[PipDeprecationWarning]]

### Interface
- `_showwarning`(message: [Union[<ast.Tuple object at 0x16554add0>]](#union), category: Type[Warning], filename: str, lineno: int, file: [Optional[TextIO]](#optional), line: [Optional[str]](#optional)) -> None
- `install_warning_logger`() -> None
- `deprecated`() -> None

### Implementation
**PipDeprecationWarning**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/deprecation.py`  
**Dependencies**: `logging`, `warnings`, `typing.Any`, `typing.Optional`, `typing.TextIO`, `typing.Type`, `typing.Union`, `pip._vendor.packaging.version.parse`, `pip.__version__`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.subprocess
:::{doc} make_command:17
Create a CommandArgs object.
:::
:::{doc} format_command_args:34
Format command arguments for display.
:::
:::{doc} reveal_command_args:49
Return the arguments in their raw, unredacted form.
:::
:::{doc} call_subprocess:56
Args:
  show_stdout: if true, use INFO to log the subprocess's stderr and
    stdout streams.  Otherwise, use DEBUG.  Defaults to False.
  extra_ok_returncodes: an iterable of integer return codes that are
    acceptable, in addition to 0. Defaults to None, which means [].
  unset_environ: an iterable of environment variable names to unset
    prior to calling subprocess.Popen().
  log_failed_cmd: if false, failed commands are not logged, only raised.
  stdout_only: if true, return only stdout, else return both. When true,
    logging of both stdout and stderr occurs when the subprocess has
    terminated, else logging occurs as subprocess output is produced.
:::
:::{doc} runner_with_spinner_message:224
Provide a subprocess_runner that shows a spinner message.

Intended for use with for BuildBackendHookCaller. Thus, the runner has
an API that matches what's expected by BuildBackendHookCaller.subprocess_runner.
:::
**Imports**: `logging`, `os`, `shlex`, `subprocess`, `typing.Any`, `typing.Callable`, `typing.Iterable`, `typing.List`, `typing.Literal`, `typing.Mapping`, `typing.Optional`, `typing.Union`, `pip._vendor.rich.markup.escape`, `pip._internal.cli.spinners.SpinnerInterface`, `pip._internal.cli.spinners.open_spinner`, `pip._internal.exceptions.InstallationSubprocessError`, `pip._internal.utils.logging.VERBOSE`, `pip._internal.utils.logging.subprocess_logger`, `pip._internal.utils.misc.HiddenText`
**Type References**: [[Callable]], [[CommandArgs]]

### Interface
- `make_command`() -> CommandArgs
- `format_command_args`(args: [Union[<ast.Tuple object at 0x165568ad0>]](#union)) -> str
- `reveal_command_args`(args: [Union[<ast.Tuple object at 0x165563350>]](#union)) -> [List[str]](#list)
- `call_subprocess`(cmd: [Union[<ast.Tuple object at 0x165561c90>]](#union), show_stdout: bool, cwd: [Optional[str]](#optional), on_returncode: Literal["raise", "warn", "ignore"], extra_ok_returncodes: [Optional[Iterable[int]]](#optional), extra_environ: [Optional[Mapping[<ast.Tuple object at 0x165561050>]]](#optional), unset_environ: [Optional[Iterable[str]]](#optional), spinner: [Optional[SpinnerInterface]](#optional), log_failed_cmd: [Optional[bool]](#optional), stdout_only: [Optional[bool]](#optional)) -> str
- `runner_with_spinner_message`(message: str) -> Callable[<ast.Tuple object at 0x16558dc10>]
- `runner`(cmd: [List[str]](#list), cwd: [Optional[str]](#optional), extra_environ: [Optional[Mapping[<ast.Tuple object at 0x16558ca90>]]](#optional)) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/subprocess.py`  
**Dependencies**: `logging`, `os`, `shlex`, `subprocess`, `typing.Any`, `typing.Callable`, `typing.Iterable`, `typing.List`, `typing.Literal`, `typing.Mapping`, `typing.Optional`, `typing.Union`, `pip._vendor.rich.markup.escape`, `pip._internal.cli.spinners.SpinnerInterface`, `pip._internal.cli.spinners.open_spinner`, `pip._internal.exceptions.InstallationSubprocessError`, `pip._internal.utils.logging.VERBOSE`, `pip._internal.utils.logging.subprocess_logger`, `pip._internal.utils.misc.HiddenText`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.filesystem
:::{doc} adjacent_tmp_file:43
Return a file-like object pointing to a tmp file next to path.

The file is created securely and is ensured to be written to disk
after the context reaches its end.

kwargs will be passed to tempfile.NamedTemporaryFile to control
the way the temporary file will be opened.
:::
:::{doc} test_writable_dir:72
Check if a directory is writable.

Uses os.access() on POSIX, tries creating files on Windows.
:::
:::{doc} find_files:118
Returns a list of absolute paths of files beneath path, recursively,
with filenames which match the UNIX-style shell glob pattern.
:::
**Imports**: `fnmatch`, `os`, `os.path`, `random`, `sys`, `contextlib.contextmanager`, `tempfile.NamedTemporaryFile`, `typing.Any`, `typing.BinaryIO`, `typing.Generator`, `typing.List`, `typing.Union`, `typing.cast`, `pip._internal.utils.compat.get_path_uid`, `pip._internal.utils.misc.format_size`, `pip._internal.utils.retry.retry`
**Type References**: [[List]]

### Interface
- `check_path_owner`(path: str) -> bool
- `adjacent_tmp_file`(path: str) -> Generator[<ast.Tuple object at 0x165595890>]
- `test_writable_dir`(path: str) -> bool
- `_test_writable_dir_win`(path: str) -> bool
- `find_files`(path: str, pattern: str) -> [List[str]](#list)
- `file_size`(path: str) -> [Union[<ast.Tuple object at 0x1655b4f90>]](#union)
- `format_file_size`(path: str) -> str
- `directory_size`(path: str) -> [Union[<ast.Tuple object at 0x1655b7110>]](#union)
- `format_directory_size`(path: str) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/filesystem.py`  
**Dependencies**: `fnmatch`, `os`, `os.path`, `random`, `sys`, `contextlib.contextmanager`, `tempfile.NamedTemporaryFile`, `typing.Any`, `typing.BinaryIO`, `typing.Generator`, `typing.List`, `typing.Union`, `typing.cast`, `pip._internal.utils.compat.get_path_uid`, `pip._internal.utils.misc.format_size`, `pip._internal.utils.retry.retry`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.direct_url_helpers
:::{doc} direct_url_as_pep440_direct_reference:9
Convert a DirectUrl to a pip requirement string.
:::
**Imports**: `typing.Optional`, `pip._internal.models.direct_url.ArchiveInfo`, `pip._internal.models.direct_url.DirectUrl`, `pip._internal.models.direct_url.DirInfo`, `pip._internal.models.direct_url.VcsInfo`, `pip._internal.models.link.Link`, `pip._internal.utils.urls.path_to_url`, `pip._internal.vcs.vcs`
### Interface
- `direct_url_as_pep440_direct_reference`(direct_url: DirectUrl, name: str) -> str
- `direct_url_for_editable`(source_dir: str) -> DirectUrl
- `direct_url_from_link`(link: Link, source_dir: [Optional[str]](#optional), link_is_in_wheel_cache: bool) -> DirectUrl
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/direct_url_helpers.py`  
**Dependencies**: `typing.Optional`, `pip._internal.models.direct_url.ArchiveInfo`, `pip._internal.models.direct_url.DirectUrl`, `pip._internal.models.direct_url.DirInfo`, `pip._internal.models.direct_url.VcsInfo`, `pip._internal.models.link.Link`, `pip._internal.utils.urls.path_to_url`, `pip._internal.vcs.vcs`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils._jaraco_text
:::{doc} yield_lines:41
Yield valid lines of a string or iterable.

>>> list(yield_lines(''))
[]
>>> list(yield_lines(['foo', 'bar']))
['foo', 'bar']
>>> list(yield_lines('foo\nbar'))
['foo', 'bar']
>>> list(yield_lines('\nfoo\n#bar\nbaz #comment'))
['foo', 'baz #comment']
>>> list(yield_lines(['foo\nbar', 'baz', 'bing\n\n\n']))
['foo', 'bar', 'baz', 'bing']
:::
:::{doc} drop_comment:64
Drop comments.

>>> drop_comment('foo # bar')
'foo'

A hash without a space may be in a URL.

>>> drop_comment('http://example.com/foo#bar')
'http://example.com/foo#bar'
:::
:::{doc} join_continuation:79
Join lines continued by a trailing backslash.

>>> list(join_continuation(['foo \\', 'bar', 'baz']))
['foobar', 'baz']
>>> list(join_continuation(['foo \\', 'bar', 'baz']))
['foobar', 'baz']
>>> list(join_continuation(['foo \\', 'bar \\', 'baz']))
['foobarbaz']

Not sure why, but...
The character preceding the backslash is also elided.

>>> list(join_continuation(['goo\\', 'dly']))
['godly']

A terrible idea, but...
If no line is available to continue, suppress the lines.

>>> list(join_continuation(['foo', 'bar\\', 'baz\\']))
['foo']
:::
**Imports**: `functools`, `itertools`
### Interface
- `_nonblank`() -> Any
- `yield_lines`() -> Any
- `_`() -> Any
- `drop_comment`() -> Any
- `join_continuation`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/_jaraco_text.py`  
**Dependencies**: `functools`, `itertools`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.temp_dir
:::{doc} TempDirectoryTypeRegistry:50
Manages temp directory behavior
:::
:::{doc} tempdir_registry:73
Provides a scoped global tempdir registry that can be used to dictate
whether directories should be deleted.
:::
:::{doc} TempDirectory:93
Helper class that owns and cleans up a temporary directory.

This class can be used as a context manager or as an OO representation of a
temporary directory.

Attributes:
    path
        Location to the created temporary directory
    delete
        Whether the directory should be deleted when exiting
        (when used as a contextmanager)

Methods:
    cleanup()
        Deletes the temporary directory

When used as a context manager, if the delete attribute is True, on
exiting the context the temporary directory is deleted.
:::
:::{doc} AdjacentTempDirectory:226
Helper class that creates a temporary directory adjacent to a real one.

Attributes:
    original
        The original directory to create a temp directory for.
    path
        After calling create() or entering, contains the full
        path to the temporary directory.
    delete
        Whether the directory should be deleted when exiting
        (when used as a contextmanager)
:::
**Imports**: `errno`, `itertools`, `logging`, `os.path`, `tempfile`, `traceback`, `contextlib.ExitStack`, `contextlib.contextmanager`, `pathlib.Path`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Generator`, `typing.List`, `typing.Optional`, `typing.TypeVar`, `typing.Union`, `pip._internal.utils.misc.enum`, `pip._internal.utils.misc.rmtree`
**Type References**: [[AdjacentTempDirectory]], [[List]], [[Optional]], [[TempDirectory]], [[TempDirectoryTypeRegistry]], [[_Default]]

### Interface
- `global_tempdir_manager`() -> Generator[<ast.Tuple object at 0x1655f09d0>]
- `tempdir_registry`() -> Generator[<ast.Tuple object at 0x1655e8ed0>]
- `__init__`(original: str, delete: [Optional[bool]](#optional)) -> None
- `set_delete`(kind: str, value: bool) -> None
- `get_delete`(kind: str) -> bool
- `path`() -> str
- `__repr__`() -> str
- `__enter__`(self: _T) -> _T
- `__exit__`(exc: Any, value: Any, tb: Any) -> None
- `_create`(kind: str) -> str
- `cleanup`() -> None
- `_generate_names`(name: str) -> Generator[<ast.Tuple object at 0x165617d50>]
- `onerror`(func: Callable[<ast.Tuple object at 0x165600290>], path: Path, exc_val: BaseException) -> None

### Implementation
**TempDirectoryTypeRegistry**

**_Default**

**TempDirectory**
  - errors: List[BaseException]
**AdjacentTempDirectory**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/temp_dir.py`  
**Dependencies**: `errno`, `itertools`, `logging`, `os.path`, `tempfile`, `traceback`, `contextlib.ExitStack`, `contextlib.contextmanager`, `pathlib.Path`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Generator`, `typing.List`, `typing.Optional`, `typing.TypeVar`, `typing.Union`, `pip._internal.utils.misc.enum`, `pip._internal.utils.misc.rmtree`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.retry
:::{doc} retry:11
Decorator to automatically retry a function on error.

If the function raises, the function is recalled with the same arguments
until it returns or the time limit is reached. When the time limit is
surpassed, the last exception raised is reraised.

:param wait: The time to wait after an error before retrying, in seconds.
:param stop_after_delay: The time limit after which retries will cease,
    in seconds.
:::
**Imports**: `functools`, `time.perf_counter`, `time.sleep`, `typing.Callable`, `typing.TypeVar`, `pip._vendor.typing_extensions.ParamSpec`
### Interface
- `retry`(wait: float, stop_after_delay: float) -> Callable[<ast.Tuple object at 0x165624650>]
- `wrapper`(func: Callable[<ast.Tuple object at 0x165626c50>]) -> Callable[<ast.Tuple object at 0x165624b10>]
- `retry_wrapped`() -> T
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/retry.py`  
**Dependencies**: `functools`, `time.perf_counter`, `time.sleep`, `typing.Callable`, `typing.TypeVar`, `pip._vendor.typing_extensions.ParamSpec`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.appdirs

**Imports**: `os`, `sys`, `typing.List`, `pip._vendor.platformdirs`
### Interface
- `user_cache_dir`(appname: str) -> str
- `_macos_user_config_dir`(appname: str, roaming: bool) -> str
- `user_config_dir`(appname: str, roaming: bool) -> str
- `site_config_dirs`(appname: str) -> [List[str]](#list)
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/appdirs.py`  
**Dependencies**: `os`, `sys`, `typing.List`, `pip._vendor.platformdirs`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.setuptools_build
:::{doc} make_setuptools_shim_args:49
Get setuptools command arguments with shim wrapped setup file invocation.

:param setup_py_path: The path to setup.py to be wrapped.
:param global_options: Additional global options.
:param no_user_config: If True, disables personal user configuration.
:param unbuffered_output: If True, adds the unbuffered switch to the
 argument list.
:::
**Imports**: `sys`, `textwrap`, `typing.List`, `typing.Optional`, `typing.Sequence`
### Interface
- `make_setuptools_shim_args`(setup_py_path: str, global_options: [Optional[Sequence[str]]](#optional), no_user_config: bool, unbuffered_output: bool) -> [List[str]](#list)
- `make_setuptools_bdist_wheel_args`(setup_py_path: str, global_options: Sequence[str], build_options: Sequence[str], destination_dir: str) -> [List[str]](#list)
- `make_setuptools_clean_args`(setup_py_path: str, global_options: Sequence[str]) -> [List[str]](#list)
- `make_setuptools_develop_args`(setup_py_path: str) -> [List[str]](#list)
- `make_setuptools_egg_info_args`(setup_py_path: str, egg_info_dir: [Optional[str]](#optional), no_user_config: bool) -> [List[str]](#list)
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/setuptools_build.py`  
**Dependencies**: `sys`, `textwrap`, `typing.List`, `typing.Optional`, `typing.Sequence`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.packaging
:::{doc} check_requires_python:14
Check if the given Python version matches a "Requires-Python" specifier.

:param version_info: A 3-tuple of ints representing a Python
    major-minor-micro version to check (e.g. `sys.version_info[:3]`).

:return: `True` if the given Python version satisfies the requirement.
    Otherwise, return `False`.

:raises InvalidSpecifier: If `requires_python` has an invalid format.
:::
:::{doc} get_requirement:38
Construct a packaging.Requirement object with caching
:::
:::{doc} safe_extra:48
Convert an arbitrary string to a standard 'extra' name

Any runs of non-alphanumeric characters are replaced with a single '_',
and the result is always lowercased.

This function is duplicated from ``pkg_resources``. Note that this is not
the same to either ``canonicalize_name`` or ``_egg_link_name``.
:::
**Imports**: `functools`, `logging`, `re`, `typing.NewType`, `typing.Optional`, `typing.Tuple`, `typing.cast`, `pip._vendor.packaging.specifiers`, `pip._vendor.packaging.version`, `pip._vendor.packaging.requirements.Requirement`
### Interface
- `check_requires_python`(requires_python: [Optional[str]](#optional), version_info: Tuple[<ast.Tuple object at 0x165652c50>]) -> bool
- `get_requirement`(req_string: str) -> Requirement
- `safe_extra`(extra: str) -> NormalizedExtra
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/packaging.py`  
**Dependencies**: `functools`, `logging`, `re`, `typing.NewType`, `typing.Optional`, `typing.Tuple`, `typing.cast`, `pip._vendor.packaging.specifiers`, `pip._vendor.packaging.version`, `pip._vendor.packaging.requirements.Requirement`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.entrypoints
:::{doc} _wrapper:23
Central wrapper for all old entrypoints.

Historically pip has had several entrypoints defined. Because of issues
arising from PATH, sys.path, multiple Pythons, their interactions, and most
of them having a pip installed, users suffer every time an entrypoint gets
moved.

To alleviate this pain, and provide a mechanism for warning users and
directing them to an appropriate place for help, we now define all of
our old entrypoints as wrappers for the current one.
:::
:::{doc} get_best_invocation_for_this_pip:46
Try to figure out the best way to invoke pip in the current environment.
:::
:::{doc} get_best_invocation_for_this_python:73
Try to figure out the best way to invoke the current Python.
:::
**Imports**: `itertools`, `os`, `shutil`, `sys`, `typing.List`, `typing.Optional`, `pip._internal.cli.main.main`, `pip._internal.utils.compat.WINDOWS`
### Interface
- `_wrapper`(args: [Optional[List[str]]](#optional)) -> int
- `get_best_invocation_for_this_pip`() -> str
- `get_best_invocation_for_this_python`() -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/entrypoints.py`  
**Dependencies**: `itertools`, `os`, `shutil`, `sys`, `typing.List`, `typing.Optional`, `pip._internal.cli.main.main`, `pip._internal.utils.compat.WINDOWS`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.filetypes
:::{doc} is_archive_file:22
Return True if `name` is a considered as an archive file.
:::
**Imports**: `typing.Tuple`, `pip._internal.utils.misc.splitext`
**Type References**: [[Tuple]]

### Interface
- `is_archive_file`(name: str) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/filetypes.py`  
**Dependencies**: `typing.Tuple`, `pip._internal.utils.misc.splitext`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.compatibility_tags
:::{doc} get_supported:135
Return a list of supported tags for each version specified in
`versions`.

:param version: a string version, of the form "33" or "32",
    or None. The version will be assumed to support our ABI.
:param platform: specify a list of platforms you want valid
    tags for, or None. If None, use the local system platform.
:param impl: specify the exact implementation you want valid
    tags for, or None. If None, use the local interpreter impl.
:param abis: specify a list of abis you want valid
    tags for, or None. If None, use the local interpreter abi.
:::
**Imports**: `re`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._vendor.packaging.tags.PythonVersion`, `pip._vendor.packaging.tags.Tag`, `pip._vendor.packaging.tags.compatible_tags`, `pip._vendor.packaging.tags.cpython_tags`, `pip._vendor.packaging.tags.generic_tags`, `pip._vendor.packaging.tags.interpreter_name`, `pip._vendor.packaging.tags.interpreter_version`, `pip._vendor.packaging.tags.ios_platforms`, `pip._vendor.packaging.tags.mac_platforms`
**Type References**: [[List]], [[Optional]]

### Interface
- `version_info_to_nodot`(version_info: Tuple[<ast.Tuple object at 0x165683010>]) -> str
- `_mac_platforms`(arch: str) -> [List[str]](#list)
- `_ios_platforms`(arch: str) -> [List[str]](#list)
- `_custom_manylinux_platforms`(arch: str) -> [List[str]](#list)
- `_get_custom_platforms`(arch: str) -> [List[str]](#list)
- `_expand_allowed_platforms`(platforms: [Optional[List[str]]](#optional)) -> [Optional[List[str]]](#optional)
- `_get_python_version`(version: str) -> PythonVersion
- `_get_custom_interpreter`(implementation: [Optional[str]](#optional), version: [Optional[str]](#optional)) -> str
- `get_supported`(version: [Optional[str]](#optional), platforms: [Optional[List[str]]](#optional), impl: [Optional[str]](#optional), abis: [Optional[List[str]]](#optional)) -> [List[Tag]](#list)
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/compatibility_tags.py`  
**Dependencies**: `re`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._vendor.packaging.tags.PythonVersion`, `pip._vendor.packaging.tags.Tag`, `pip._vendor.packaging.tags.compatible_tags`, `pip._vendor.packaging.tags.cpython_tags`, `pip._vendor.packaging.tags.generic_tags`, `pip._vendor.packaging.tags.interpreter_name`, `pip._vendor.packaging.tags.interpreter_version`, `pip._vendor.packaging.tags.ios_platforms`, `pip._vendor.packaging.tags.mac_platforms`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.datetime

**Imports**: `datetime`
### Interface
- `today_is_later_than`(year: int, month: int, day: int) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/datetime.py`  
**Dependencies**: `datetime`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.urls
:::{doc} path_to_url:9
Convert a path to a file: URL.  The path will be made absolute and have
quoted path parts.
:::
:::{doc} url_to_path:19
Convert a file: URL to a path.
:::
**Imports**: `os`, `string`, `urllib.parse`, `urllib.request`, `compat.WINDOWS`
### Interface
- `path_to_url`(path: str) -> str
- `url_to_path`(url: str) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/urls.py`  
**Dependencies**: `os`, `string`, `urllib.parse`, `urllib.request`, `compat.WINDOWS`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.hashes
:::{doc} Hashes:21
A wrapper that builds multiple hashes at once and checks them against
known-good values
:::
:::{doc} MissingHashes:132
A workalike for Hashes used when we're missing a hash for a requirement

It computes the actual hash of the requirement and raises a HashMissing
exception showing it to the user.
:::
**Imports**: `hashlib`, `typing.TYPE_CHECKING`, `typing.BinaryIO`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NoReturn`, `typing.Optional`, `pip._internal.exceptions.HashMismatch`, `pip._internal.exceptions.HashMissing`, `pip._internal.exceptions.InstallationError`, `pip._internal.utils.misc.read_chunks`, `hashlib._Hash`
**Type References**: [[Hashes]], [[MissingHashes]]

### Interface
- `__init__`() -> None
- `__and__`(other: Hashes) -> Hashes
- `digest_count`() -> int
- `is_hash_allowed`(hash_name: str, hex_digest: str) -> bool
- `check_against_chunks`(chunks: Iterable[bytes]) -> None
- `_raise`(gots: [Dict[<ast.Tuple object at 0x1656dea50>]](#dict)) -> NoReturn
- `check_against_file`(file: BinaryIO) -> None
- `check_against_path`(path: str) -> None
- `has_one_of`(hashes: [Dict[<ast.Tuple object at 0x1656cde90>]](#dict)) -> bool
- `__bool__`() -> bool
- `__eq__`(other: object) -> bool
- `__hash__`() -> int

### Implementation
**Hashes**

**MissingHashes**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/hashes.py`  
**Dependencies**: `hashlib`, `typing.TYPE_CHECKING`, `typing.BinaryIO`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.NoReturn`, `typing.Optional`, `pip._internal.exceptions.HashMismatch`, `pip._internal.exceptions.HashMissing`, `pip._internal.exceptions.InstallationError`, `pip._internal.utils.misc.read_chunks`, `hashlib._Hash`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.virtualenv
:::{doc} _running_under_venv:14
Checks if sys.base_prefix and sys.prefix match.

This handles PEP 405 compliant virtual environments.
:::
:::{doc} _running_under_legacy_virtualenv:22
Checks if sys.real_prefix is set.

This handles virtual environments created with pypa's virtualenv.
:::
:::{doc} running_under_virtualenv:31
True if we're running inside a virtual environment, False otherwise.
:::
:::{doc} _get_pyvenv_cfg_lines:36
Reads {sys.prefix}/pyvenv.cfg and returns its contents as list of lines

Returns None, if it could not read/access the file.
:::
:::{doc} _no_global_under_venv:51
Check `{sys.prefix}/pyvenv.cfg` for system site-packages inclusion

PEP 405 specifies that when system site-packages are not supposed to be
visible from a virtual environment, `pyvenv.cfg` must contain the following
line:

    include-system-site-packages = false

Additionally, log a warning if accessing the file fails.
:::
:::{doc} _no_global_under_legacy_virtualenv:80
Check if "no-global-site-packages.txt" exists beside site.py

This mirrors logic in pypa/virtualenv for determining whether system
site-packages are visible in the virtual environment.
:::
:::{doc} virtualenv_no_global:94
Returns a boolean, whether running in venv with no system site-packages.
:::
**Imports**: `logging`, `os`, `re`, `site`, `sys`, `typing.List`, `typing.Optional`
### Interface
- `_running_under_venv`() -> bool
- `_running_under_legacy_virtualenv`() -> bool
- `running_under_virtualenv`() -> bool
- `_get_pyvenv_cfg_lines`() -> [Optional[List[str]]](#optional)
- `_no_global_under_venv`() -> bool
- `_no_global_under_legacy_virtualenv`() -> bool
- `virtualenv_no_global`() -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/virtualenv.py`  
**Dependencies**: `logging`, `os`, `re`, `site`, `sys`, `typing.List`, `typing.Optional`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils._log
:::{doc} VerboseLogger:16
Custom Logger, defining a verbose log-level

VERBOSE is between INFO and DEBUG.
:::
:::{doc} getLogger:26
logging.getLogger, but ensures our VerboseLogger class is returned
:::
:::{doc} init_logging:31
Register our VerboseLogger and VERBOSE log level.

Should be called before any calls to getLogger(),
i.e. in pip._internal.__init__
:::
**Imports**: `logging`, `typing.Any`, `typing.cast`
**Type References**: [[VerboseLogger]]

### Interface
- `getLogger`(name: str) -> VerboseLogger
- `init_logging`() -> None
- `verbose`(msg: str) -> None

### Implementation
**VerboseLogger**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/_log.py`  
**Dependencies**: `logging`, `typing.Any`, `typing.cast`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.glibc
:::{doc} glibc_version_string:6
Returns glibc version string, or None if not using glibc.
:::
:::{doc} glibc_version_string_confstr:11
Primary implementation of glibc_version_string using os.confstr.
:::
:::{doc} glibc_version_string_ctypes:31
Fallback implementation of glibc_version_string using ctypes.
:::
:::{doc} libc_ver:91
Try to determine the glibc version

Returns a tuple of strings (lib, version) which default to empty strings
in case the lookup fails.
:::
**Imports**: `os`, `sys`, `typing.Optional`, `typing.Tuple`, `ctypes`
### Interface
- `glibc_version_string`() -> [Optional[str]](#optional)
- `glibc_version_string_confstr`() -> [Optional[str]](#optional)
- `glibc_version_string_ctypes`() -> [Optional[str]](#optional)
- `libc_ver`() -> Tuple[<ast.Tuple object at 0x1657020d0>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/glibc.py`  
**Dependencies**: `os`, `sys`, `typing.Optional`, `typing.Tuple`, `ctypes`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.wheel
:::{doc} parse_wheel:20
Extract information from the provided wheel, ensuring it meets basic
standards.

Returns the name of the .dist-info directory and the parsed WHEEL metadata.
:::
:::{doc} wheel_dist_info_dir:38
Returns the name of the contained .dist-info directory.

Raises AssertionError or UnsupportedWheel if not found, >1 found, or
it doesn't match the provided name.
:::
:::{doc} wheel_metadata:78
Return the WHEEL metadata of an extracted wheel, if possible.
Otherwise, raise UnsupportedWheel.
:::
:::{doc} wheel_version:97
Given WHEEL metadata, return the parsed Wheel-Version.
Otherwise, raise UnsupportedWheel.
:::
:::{doc} check_compatibility:113
Raises errors or warns if called with an incompatible Wheel-Version.

pip should refuse to install a Wheel-Version that's a major series
ahead of what it's compatible with (e.g 2.0 > 1.1); and warn when
installing a version only minor version ahead (e.g 1.2 > 1.1).

version: a 2-tuple representing a Wheel-Version (Major, Minor)
name: name of wheel or package to raise exception about

:raises UnsupportedWheel: when an incompatible Wheel-Version is given
:::
**Imports**: `logging`, `email.message.Message`, `email.parser.Parser`, `typing.Tuple`, `zipfile.BadZipFile`, `zipfile.ZipFile`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.exceptions.UnsupportedWheel`
### Interface
- `parse_wheel`(wheel_zip: ZipFile, name: str) -> Tuple[<ast.Tuple object at 0x165710a90>]
- `wheel_dist_info_dir`(source: ZipFile, name: str) -> str
- `read_wheel_metadata_file`(source: ZipFile, path: str) -> bytes
- `wheel_metadata`(source: ZipFile, dist_info_dir: str) -> Message
- `wheel_version`(wheel_data: Message) -> Tuple[<ast.Tuple object at 0x165718650>]
- `check_compatibility`(version: Tuple[<ast.Tuple object at 0x165718150>], name: str) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/wheel.py`  
**Dependencies**: `logging`, `email.message.Message`, `email.parser.Parser`, `typing.Tuple`, `zipfile.BadZipFile`, `zipfile.ZipFile`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.exceptions.UnsupportedWheel`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.utils.unpacking
:::{doc} current_umask:44
Get the current umask which involves having to set it temporarily.
:::
:::{doc} has_leading_dir:63
Returns true if all the paths have the same leading path name
(i.e., everything is in one subdirectory in an archive)
:::
:::{doc} is_within_directory:78
Return true if the absolute path of target is within the directory
:::
:::{doc} set_extracted_file_to_default_mode_plus_executable:93
Make file present at path have execute for user/group/world
(chmod +x) is no-op on windows per python docs
:::
:::{doc} unzip_file:108
Unzip the file (with path `filename`) to the destination `location`.  All
files are written based on system defaults and umask (i.e. permissions are
not preserved), except that regular file members with any execute
permissions (user, group, or world) have "chmod +x" applied after being
written. Note that for windows, any execute changes using os.chmod are
no-ops per the python docs.
:::
:::{doc} untar_file:154
Untar the file (with path `filename`) to the destination `location`.
All files are written based on system defaults and umask (i.e. permissions
are not preserved), except that regular file members with any execute
permissions (user, group, or world) have "chmod +x" applied on top of the
default.  Note that for windows, any execute changes using os.chmod are
no-ops per the python docs.
:::
:::{doc} _untar_without_filter:251
Fallback for Python without tarfile.data_filter
:::
**Imports**: `logging`, `os`, `shutil`, `stat`, `sys`, `tarfile`, `zipfile`, `typing.Iterable`, `typing.List`, `typing.Optional`, `zipfile.ZipInfo`, `pip._internal.exceptions.InstallationError`, `pip._internal.utils.filetypes.BZ2_EXTENSIONS`, `pip._internal.utils.filetypes.TAR_EXTENSIONS`, `pip._internal.utils.filetypes.XZ_EXTENSIONS`, `pip._internal.utils.filetypes.ZIP_EXTENSIONS`, `pip._internal.utils.misc.ensure_dir`, `bz2`, `lzma`
### Interface
- `current_umask`() -> int
- `split_leading_dir`(path: str) -> [List[str]](#list)
- `has_leading_dir`(paths: Iterable[str]) -> bool
- `is_within_directory`(directory: str, target: str) -> bool
- `_get_default_mode_plus_executable`() -> int
- `set_extracted_file_to_default_mode_plus_executable`(path: str) -> None
- `zip_item_is_executable`(info: ZipInfo) -> bool
- `unzip_file`(filename: str, location: str, flatten: bool) -> None
- `untar_file`(filename: str, location: str) -> None
- `_untar_without_filter`(filename: str, location: str, tar: tarfile.TarFile, leading: bool) -> None
- `unpack_file`(filename: str, location: str, content_type: [Optional[str]](#optional)) -> None
- `pip_filter`(member: tarfile.TarInfo, path: str) -> tarfile.TarInfo
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/utils/unpacking.py`  
**Dependencies**: `logging`, `os`, `shutil`, `stat`, `sys`, `tarfile`, `zipfile`, `typing.Iterable`, `typing.List`, `typing.Optional`, `zipfile.ZipInfo`, `pip._internal.exceptions.InstallationError`, `pip._internal.utils.filetypes.BZ2_EXTENSIONS`, `pip._internal.utils.filetypes.TAR_EXTENSIONS`, `pip._internal.utils.filetypes.XZ_EXTENSIONS`, `pip._internal.utils.filetypes.ZIP_EXTENSIONS`, `pip._internal.utils.misc.ensure_dir`, `bz2`, `lzma`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.models.link
:::{doc} LinkHash:44
Links to content may have embedded hash values. This class parses those.

`name` must be any member of `_SUPPORTED_HASHES`.

This class can be converted to and from `ArchiveInfo`. While ArchiveInfo intends to
be JSON-serializable to conform to PEP 610, this class contains the logic for
parsing a hash name and value for correctness, and then checking whether that hash
conforms to a schema with `.is_hash_allowed()`.
:::
:::{doc} MetadataFile:98
Information about a core metadata file associated with a distribution.
:::
:::{doc} _clean_url_path_part:119
Clean a "part" of a URL path (i.e. after splitting on "@" characters).
:::
:::{doc} _clean_file_url_path:127
Clean the first part of a URL path that corresponds to a local
filesystem path (i.e. the first part after splitting on "@" characters).
:::
:::{doc} _clean_url_path:144
Clean the path portion of a URL.
:::
:::{doc} _ensure_quoted_url:166
Make sure a link is fully quoted.
For example, if ' ' occurs in the URL, it will be replaced with "%20",
and without double-quoting other characters.
:::
:::{doc} Link:182
Represents a parsed link from a Package Index's simple URL
:::
:::{doc} _CleanResult:530
Convert link for equivalency check.

This is used in the resolver to check whether two URL-specified requirements
likely point to the same distribution and can be considered equivalent. This
equivalency logic avoids comparing URLs literally, which can be too strict
(e.g. "a=1&b=2" vs "b=2&a=1") and produce conflicts unexpecting to users.

Currently this does three things:

1. Drop the basic auth part. This is technically wrong since a server can
   serve different content based on auth, but if it does that, it is even
   impossible to guarantee two URLs without auth are equivalent, since
   the user can input different auth information when prompted. So the
   practical solution is to assume the auth doesn't affect the response.
2. Parse the query to avoid the ordering issue. Note that ordering under the
   same key in the query are NOT cleaned; i.e. "a=1&a=2" and "a=2&a=1" are
   still considered different.
3. Explicitly drop most of the fragment part, except ``subdirectory=`` and
   hash values, since it should have no impact the downloaded content. Note
   that this drops the "egg=" part historically used to denote the requested
   project (and extras), which is wrong in the strictest sense, but too many
   people are supplying it inconsistently to cause superfluous resolution
   conflicts, so we choose to also ignore them.
:::
**Imports**: `functools`, `itertools`, `logging`, `os`, `posixpath`, `re`, `urllib.parse`, `dataclasses.dataclass`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Dict`, `typing.List`, `typing.Mapping`, `typing.NamedTuple`, `typing.Optional`, `typing.Tuple`, `typing.Union`, `pip._internal.utils.deprecation.deprecated`, `pip._internal.utils.filetypes.WHEEL_EXTENSION`, `pip._internal.utils.hashes.Hashes`, `pip._internal.utils.misc.pairwise`, `pip._internal.utils.misc.redact_auth_from_url`, `pip._internal.utils.misc.split_auth_from_netloc`, `pip._internal.utils.misc.splitext`, `pip._internal.utils.urls.path_to_url`, `pip._internal.utils.urls.url_to_path`, `pip._internal.index.collector.IndexContent`, `pip._internal.vcs.vcs`
**Type References**: [[Dict]], [[Link]], [[LinkHash]], [[MetadataFile]], [[Optional]], [[SplitResult]], [[_CleanResult]], [[urllib.parse.SplitResult]]

### Interface
- `supported_hashes`(hashes: [Optional[Dict[<ast.Tuple object at 0x16579cbd0>]]](#optional)) -> [Optional[Dict[<ast.Tuple object at 0x165793510>]]](#optional)
- `_clean_url_path_part`(part: str) -> str
- `_clean_file_url_path`(part: str) -> str
- `_clean_url_path`(path: str, is_local_path: bool) -> str
- `_ensure_quoted_url`(url: str) -> str
- `_clean_link`(link: Link) -> _CleanResult
- `links_equivalent`(link1: Link, link2: Link) -> bool
- `__post_init__`() -> None
- `find_hash_url_fragment`(url: str) -> [Optional[LinkHash]](#optional)
- `as_dict`() -> [Dict[<ast.Tuple object at 0x1657ad290>]](#dict)
- `as_hashes`() -> Hashes
- `is_hash_allowed`(hashes: [Optional[Hashes]](#optional)) -> bool
- `__init__`(url: str, comes_from: [Optional[Union[<ast.Tuple object at 0x16578c6d0>]]](#optional), requires_python: [Optional[str]](#optional), yanked_reason: [Optional[str]](#optional), metadata_file_data: [Optional[MetadataFile]](#optional), cache_link_parsing: bool, hashes: [Optional[Mapping[<ast.Tuple object at 0x165787b50>]]](#optional)) -> None
- `from_json`(file_data: [Dict[<ast.Tuple object at 0x1657d3010>]](#dict), page_url: str) -> [Optional[Link]](#optional)
- `from_element`(anchor_attribs: [Dict[<ast.Tuple object at 0x16579bf10>]](#dict), page_url: str, base_url: str) -> [Optional[Link]](#optional)
- `__str__`() -> str
- `__repr__`() -> str
- `__hash__`() -> int
- `__eq__`(other: Any) -> bool
- `__lt__`(other: Any) -> bool
- `url`() -> str
- `filename`() -> str
- `file_path`() -> str
- `scheme`() -> str
- `netloc`() -> str
- `path`() -> str
- `splitext`() -> Tuple[<ast.Tuple object at 0x1657f2290>]
- `ext`() -> str
- `url_without_fragment`() -> str
- `_egg_fragment`() -> [Optional[str]](#optional)
- `subdirectory_fragment`() -> [Optional[str]](#optional)
- `metadata_link`() -> [Optional[Link]](#optional)
- `hash`() -> [Optional[str]](#optional)
- `hash_name`() -> [Optional[str]](#optional)
- `show_url`() -> str
- `is_file`() -> bool
- `is_existing_dir`() -> bool
- `is_wheel`() -> bool
- `is_vcs`() -> bool
- `is_yanked`() -> bool
- `has_hash`() -> bool

### Implementation
**LinkHash**
  - name: str
  - value: str
**MetadataFile**
  - hashes: Optional[Dict[<ast.Tuple object at 0x16579e310>]]
**Link**

**_CleanResult**
  - parsed: urllib.parse.SplitResult
  - query: Dict[<ast.Tuple object at 0x16581d390>]
  - subdirectory: str
  - hashes: Dict[<ast.Tuple object at 0x16581d9d0>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/models/link.py`  
**Dependencies**: `functools`, `itertools`, `logging`, `os`, `posixpath`, `re`, `urllib.parse`, `dataclasses.dataclass`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Dict`, `typing.List`, `typing.Mapping`, `typing.NamedTuple`, `typing.Optional`, `typing.Tuple`, `typing.Union`, `pip._internal.utils.deprecation.deprecated`, `pip._internal.utils.filetypes.WHEEL_EXTENSION`, `pip._internal.utils.hashes.Hashes`, `pip._internal.utils.misc.pairwise`, `pip._internal.utils.misc.redact_auth_from_url`, `pip._internal.utils.misc.split_auth_from_netloc`, `pip._internal.utils.misc.splitext`, `pip._internal.utils.urls.path_to_url`, `pip._internal.utils.urls.url_to_path`, `pip._internal.index.collector.IndexContent`, `pip._internal.vcs.vcs`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.models.selection_prefs
:::{doc} SelectionPreferences:8
Encapsulates the candidate selection preferences for downloading
and installing files.
:::
**Imports**: `typing.Optional`, `pip._internal.models.format_control.FormatControl`
**Type References**: [[SelectionPreferences]]

### Interface
- `__init__`(allow_yanked: bool, allow_all_prereleases: bool, format_control: [Optional[FormatControl]](#optional), prefer_binary: bool, ignore_requires_python: [Optional[bool]](#optional)) -> None

### Implementation
**SelectionPreferences**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/models/selection_prefs.py`  
**Dependencies**: `typing.Optional`, `pip._internal.models.format_control.FormatControl`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.models.direct_url
:::{doc} _get:27
Get value from dictionary and verify expected type.
:::
:::{doc} _filter_none:64
Make dict excluding None values.
:::
**Imports**: `json`, `re`, `urllib.parse`, `dataclasses.dataclass`, `typing.Any`, `typing.ClassVar`, `typing.Dict`, `typing.Iterable`, `typing.Optional`, `typing.Type`, `typing.TypeVar`, `typing.Union`
**Type References**: [[ArchiveInfo]], [[ClassVar]], [[DirInfo]], [[DirectUrl]], [[DirectUrlValidationError]], [[InfoType]], [[Optional]], [[VcsInfo]]

### Interface
- `_get`(d: [Dict[<ast.Tuple object at 0x165846010>]](#dict), expected_type: Type[T], key: str, default: [Optional[T]](#optional)) -> [Optional[T]](#optional)
- `_get_required`(d: [Dict[<ast.Tuple object at 0x16583fe90>]](#dict), expected_type: Type[T], key: str, default: [Optional[T]](#optional)) -> T
- `_exactly_one_of`(infos: Iterable[Optional[InfoType]]) -> InfoType
- `_filter_none`() -> [Dict[<ast.Tuple object at 0x16583b850>]](#dict)
- `_from_dict`(d: [Optional[Dict[<ast.Tuple object at 0x165861b10>]]](#optional)) -> [Optional[DirInfo]](#optional)
- `_to_dict`() -> [Dict[<ast.Tuple object at 0x1658633d0>]](#dict)
- `__init__`(hash: [Optional[str]](#optional), hashes: [Optional[Dict[<ast.Tuple object at 0x165830890>]]](#optional)) -> None
- `hash`(value: [Optional[str]](#optional)) -> None
- `_remove_auth_from_netloc`(netloc: str) -> str
- `redacted_url`() -> str
- `validate`() -> None
- `from_dict`(d: [Dict[<ast.Tuple object at 0x165870650>]](#dict)) -> DirectUrl
- `to_dict`() -> [Dict[<ast.Tuple object at 0x165873610>]](#dict)
- `from_json`(s: str) -> DirectUrl
- `to_json`() -> str
- `is_local_editable`() -> bool

### Implementation
**DirectUrlValidationError**

**VcsInfo**
  - name: ClassVar
  - vcs: str
  - commit_id: str
  - requested_revision: Optional[str]
**ArchiveInfo**

**DirInfo**
  - name: ClassVar
  - editable: bool
**DirectUrl**
  - url: str
  - info: InfoType
  - subdirectory: Optional[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/models/direct_url.py`  
**Dependencies**: `json`, `re`, `urllib.parse`, `dataclasses.dataclass`, `typing.Any`, `typing.ClassVar`, `typing.Dict`, `typing.Iterable`, `typing.Optional`, `typing.Type`, `typing.TypeVar`, `typing.Union`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.models.index
:::{doc} PackageIndex:4
Represents a Package Index and provides easier access to endpoints
:::
**Imports**: `urllib.parse`
**Type References**: [[PackageIndex]]

### Interface
- `__init__`(url: str, file_storage_domain: str) -> None
- `_url_for_path`(path: str) -> str

### Implementation
**PackageIndex**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/models/index.py`  
**Dependencies**: `urllib.parse`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.models.target_python
:::{doc} TargetPython:10
Encapsulates the properties of a Python interpreter one is targeting
for a package install, download, etc.
:::
**Imports**: `sys`, `typing.List`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `pip._vendor.packaging.tags.Tag`, `pip._internal.utils.compatibility_tags.get_supported`, `pip._internal.utils.compatibility_tags.version_info_to_nodot`, `pip._internal.utils.misc.normalize_version_info`
**Type References**: [[TargetPython]]

### Interface
- `__init__`(platforms: [Optional[List[str]]](#optional), py_version_info: [Optional[Tuple[<ast.Tuple object at 0x165886690>]]](#optional), abis: [Optional[List[str]]](#optional), implementation: [Optional[str]](#optional)) -> None
- `format_given`() -> str
- `get_sorted_tags`() -> [List[Tag]](#list)
- `get_unsorted_tags`() -> Set[Tag]

### Implementation
**TargetPython**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/models/target_python.py`  
**Dependencies**: `sys`, `typing.List`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `pip._vendor.packaging.tags.Tag`, `pip._internal.utils.compatibility_tags.get_supported`, `pip._internal.utils.compatibility_tags.version_info_to_nodot`, `pip._internal.utils.misc.normalize_version_info`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.models



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/models/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.models.search_scope
:::{doc} SearchScope:19
Encapsulates the locations that pip is configured to search.
:::
**Imports**: `itertools`, `logging`, `os`, `posixpath`, `urllib.parse`, `dataclasses.dataclass`, `typing.List`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.models.index.PyPI`, `pip._internal.utils.compat.has_tls`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.misc.redact_auth_from_url`
**Type References**: [[List]], [[SearchScope]]

### Interface
- `create`(find_links: [List[str]](#list), index_urls: [List[str]](#list), no_index: bool) -> SearchScope
- `get_formatted_locations`() -> str
- `get_index_urls_locations`(project_name: str) -> [List[str]](#list)
- `mkurl_pypi_url`(url: str) -> str

### Implementation
**SearchScope**
  - find_links: List[str]
  - index_urls: List[str]
  - no_index: bool
  - built_find_links: List[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/models/search_scope.py`  
**Dependencies**: `itertools`, `logging`, `os`, `posixpath`, `urllib.parse`, `dataclasses.dataclass`, `typing.List`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.models.index.PyPI`, `pip._internal.utils.compat.has_tls`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.misc.redact_auth_from_url`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.models.candidate
:::{doc} InstallationCandidate:10
Represents a potential "candidate" for installation.
:::
**Imports**: `dataclasses.dataclass`, `pip._vendor.packaging.version.Version`, `pip._vendor.packaging.version.parse`, `pip._internal.models.link.Link`
**Type References**: [[InstallationCandidate]], [[Link]], [[Version]]

### Interface
- `__init__`(name: str, version: str, link: Link) -> None
- `__str__`() -> str

### Implementation
**InstallationCandidate**
  - name: str
  - version: Version
  - link: Link
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/models/candidate.py`  
**Dependencies**: `dataclasses.dataclass`, `pip._vendor.packaging.version.Version`, `pip._vendor.packaging.version.parse`, `pip._internal.models.link.Link`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.models.format_control
:::{doc} FormatControl:8
Helper for managing formats from which a package can be installed.
:::
**Imports**: `typing.FrozenSet`, `typing.Optional`, `typing.Set`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.exceptions.CommandError`
**Type References**: [[FormatControl]]

### Interface
- `__init__`(no_binary: [Optional[Set[str]]](#optional), only_binary: [Optional[Set[str]]](#optional)) -> None
- `__eq__`(other: object) -> bool
- `__repr__`() -> str
- `handle_mutual_excludes`(value: str, target: Set[str], other: Set[str]) -> None
- `get_allowed_formats`(canonical_name: str) -> FrozenSet[str]
- `disallow_binaries`() -> None

### Implementation
**FormatControl**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/models/format_control.py`  
**Dependencies**: `typing.FrozenSet`, `typing.Optional`, `typing.Set`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.exceptions.CommandError`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.models.installation_report

**Imports**: `typing.Any`, `typing.Dict`, `typing.Sequence`, `pip._vendor.packaging.markers.default_environment`, `pip.__version__`, `pip._internal.req.req_install.InstallRequirement`
**Type References**: [[InstallationReport]]

### Interface
- `__init__`(install_requirements: Sequence[InstallRequirement]) -> Any
- `_install_req_to_dict`(ireq: InstallRequirement) -> [Dict[<ast.Tuple object at 0x1658e8f50>]](#dict)
- `to_dict`() -> [Dict[<ast.Tuple object at 0x1658e9890>]](#dict)

### Implementation
**InstallationReport**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/models/installation_report.py`  
**Dependencies**: `typing.Any`, `typing.Dict`, `typing.Sequence`, `pip._vendor.packaging.markers.default_environment`, `pip.__version__`, `pip._internal.req.req_install.InstallRequirement`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.models.scheme
:::{doc} Scheme:14
A Scheme holds paths which are used as the base directories for
artifacts associated with a Python package.
:::
**Imports**: `dataclasses.dataclass`
**Type References**: [[Scheme]]


### Implementation
**Scheme**
  - platlib: str
  - purelib: str
  - headers: str
  - scripts: str
  - data: str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/models/scheme.py`  
**Dependencies**: `dataclasses.dataclass`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.models.wheel
:::{doc} Wheel:18
A wheel file
:::
**Imports**: `re`, `typing.Dict`, `typing.Iterable`, `typing.List`, `pip._vendor.packaging.tags.Tag`, `pip._vendor.packaging.utils.InvalidWheelFilename`, `pip._vendor.packaging.utils.parse_wheel_filename`, `pip._internal.exceptions.InvalidWheelFilename`, `pip._internal.utils.deprecation.deprecated`
**Type References**: [[Wheel]]

### Interface
- `__init__`(filename: str) -> None
- `get_formatted_file_tags`() -> [List[str]](#list)
- `support_index_min`(tags: [List[Tag]](#list)) -> int
- `find_most_preferred_tag`(tags: [List[Tag]](#list), tag_to_priority: [Dict[<ast.Tuple object at 0x165909310>]](#dict)) -> int
- `supported`(tags: Iterable[Tag]) -> bool

### Implementation
**Wheel**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/models/wheel.py`  
**Dependencies**: `re`, `typing.Dict`, `typing.Iterable`, `typing.List`, `pip._vendor.packaging.tags.Tag`, `pip._vendor.packaging.utils.InvalidWheelFilename`, `pip._vendor.packaging.utils.parse_wheel_filename`, `pip._internal.exceptions.InvalidWheelFilename`, `pip._internal.utils.deprecation.deprecated`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.cli.cmdoptions
:::{doc} raise_option_error:36
Raise an option parsing error using parser.error().

Args:
  parser: an OptionParser instance.
  option: an Option instance.
  msg: the error text.
:::
:::{doc} make_option_group:50
Return an OptionGroup object
group  -- assumed to be dict with 'name' and 'options' keys
parser -- an optparse Parser
:::
:::{doc} check_dist_restriction:62
Function for determining if custom platform options are allowed.

:param options: The OptionParser options.
:param check_target: Whether or not to check if --target is being used.
:::
:::{doc} _get_format_control:469
Get a format_control object.
:::
:::{doc} _convert_python_version:548
Convert a version string like "3", "37", or "3.7.3" into a tuple of ints.

:return: A 2-tuple (version_info, error_msg), where `error_msg` is
    non-None if and only if there was a parsing error.
:::
:::{doc} _handle_python_version:577
Handle a provided --python-version value.
:::
:::{doc} _handle_no_cache_dir:688
Process a value provided for the --no-cache-dir option.

This is an optparse.Option callback for the --no-cache-dir option.
:::
:::{doc} _handle_no_use_pep517:765
Process a value provided for the --no-use-pep517 option.

This is an optparse.Option callback for the no_use_pep517 option.
:::
:::{doc} _handle_merge_hash:910
Given a value spelled "algo:digest", append the digest to a list
pointed to in a dict by the algo name.
:::
**Imports**: `importlib.util`, `logging`, `os`, `textwrap`, `functools.partial`, `optparse.SUPPRESS_HELP`, `optparse.Option`, `optparse.OptionGroup`, `optparse.OptionParser`, `optparse.Values`, `textwrap.dedent`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Optional`, `typing.Tuple`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.cli.parser.ConfigOptionParser`, `pip._internal.exceptions.CommandError`, `pip._internal.locations.USER_CACHE_DIR`, `pip._internal.locations.get_src_prefix`, `pip._internal.models.format_control.FormatControl`, `pip._internal.models.index.PyPI`, `pip._internal.models.target_python.TargetPython`, `pip._internal.utils.hashes.STRONG_HASHES`, `pip._internal.utils.misc.strtobool`
**Type References**: [[Any]], [[Callable]], [[Dict]], [[PipOption]]

### Interface
- `raise_option_error`(parser: OptionParser, option: Option, msg: str) -> None
- `make_option_group`(group: [Dict[<ast.Tuple object at 0x16593a650>]](#dict), parser: ConfigOptionParser) -> OptionGroup
- `check_dist_restriction`(options: Values, check_target: bool) -> None
- `_path_option_check`(option: Option, opt: str, value: str) -> str
- `_package_name_option_check`(option: Option, opt: str, value: str) -> str
- `exists_action`() -> Option
- `extra_index_url`() -> Option
- `find_links`() -> Option
- `trusted_host`() -> Option
- `constraints`() -> Option
- `requirements`() -> Option
- `editable`() -> Option
- `_handle_src`(option: Option, opt_str: str, value: str, parser: OptionParser) -> None
- `_get_format_control`(values: Values, option: Option) -> Any
- `_handle_no_binary`(option: Option, opt_str: str, value: str, parser: OptionParser) -> None
- `_handle_only_binary`(option: Option, opt_str: str, value: str, parser: OptionParser) -> None
- `no_binary`() -> Option
- `only_binary`() -> Option
- `_convert_python_version`(value: str) -> Tuple[<ast.Tuple object at 0x16598c150>]
- `_handle_python_version`(option: Option, opt_str: str, value: str, parser: OptionParser) -> None
- `add_target_python_options`(cmd_opts: OptionGroup) -> None
- `make_target_python`(options: Values) -> TargetPython
- `prefer_binary`() -> Option
- `_handle_no_cache_dir`(option: Option, opt: str, value: str, parser: OptionParser) -> None
- `_handle_no_use_pep517`(option: Option, opt: str, value: str, parser: OptionParser) -> None
- `_handle_config_settings`(option: Option, opt_str: str, value: str, parser: OptionParser) -> None
- `_handle_merge_hash`(option: Option, opt_str: str, value: str, parser: OptionParser) -> None
- `check_list_path_option`(options: Values) -> None

### Implementation
**PipOption**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/cli/cmdoptions.py`  
**Dependencies**: `importlib.util`, `logging`, `os`, `textwrap`, `functools.partial`, `optparse.SUPPRESS_HELP`, `optparse.Option`, `optparse.OptionGroup`, `optparse.OptionParser`, `optparse.Values`, `textwrap.dedent`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Optional`, `typing.Tuple`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.cli.parser.ConfigOptionParser`, `pip._internal.exceptions.CommandError`, `pip._internal.locations.USER_CACHE_DIR`, `pip._internal.locations.get_src_prefix`, `pip._internal.models.format_control.FormatControl`, `pip._internal.models.index.PyPI`, `pip._internal.models.target_python.TargetPython`, `pip._internal.utils.hashes.STRONG_HASHES`, `pip._internal.utils.misc.strtobool`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.cli



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/cli/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.cli.index_command
:::{doc} SessionCommandMixin:50
A class mixin for command classes needing _build_session().
:::
:::{doc} IndexGroupCommand:140
Abstract base class for commands with the index_group options.

This also corresponds to the commands that permit the pip version check.
:::
**Imports**: `logging`, `os`, `sys`, `optparse.Values`, `typing.TYPE_CHECKING`, `typing.List`, `typing.Optional`, `pip._vendor.certifi`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.command_context.CommandContextMixIn`, `ssl.SSLContext`, `pip._internal.network.session.PipSession`, `pip._internal.self_outdated_check.pip_self_version_check`, `ssl`, `pip._vendor.truststore`, `pip._internal.network.session.PipSession`
**Type References**: [[IndexGroupCommand]], [[SessionCommandMixin]]

### Interface
- `_create_truststore_ssl_context`() -> [Optional[SSLContext]](#optional)
- `_pip_self_version_check`(session: PipSession, options: Values) -> None
- `__init__`() -> None
- `_get_index_urls`(options: Values) -> [Optional[List[str]]](#optional)
- `get_default_session`(options: Values) -> PipSession
- `_build_session`(options: Values, retries: [Optional[int]](#optional), timeout: [Optional[int]](#optional)) -> PipSession
- `handle_pip_version_check`(options: Values) -> None

### Implementation
**SessionCommandMixin**

**IndexGroupCommand**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/cli/index_command.py`  
**Dependencies**: `logging`, `os`, `sys`, `optparse.Values`, `typing.TYPE_CHECKING`, `typing.List`, `typing.Optional`, `pip._vendor.certifi`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.command_context.CommandContextMixIn`, `ssl.SSLContext`, `pip._internal.network.session.PipSession`, `pip._internal.self_outdated_check.pip_self_version_check`, `ssl`, `pip._vendor.truststore`, `pip._internal.network.session.PipSession`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.cli.status_codes



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/cli/status_codes.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.cli.parser
:::{doc} PrettyHelpFormatter:18
A prettier/less verbose help formatter for optparse.
:::
:::{doc} UpdatingDefaultsHelpFormatter:100
Custom help formatter for use in ConfigOptionParser.

This is updates the defaults before expanding them, allowing
them to show up correctly in the help listing.

Also redact auth from url type options
:::
:::{doc} ConfigOptionParser:154
Custom option parser which updates its defaults by checking the
configuration files and environmental variables
:::
**Imports**: `logging`, `optparse`, `shutil`, `sys`, `textwrap`, `contextlib.suppress`, `typing.Any`, `typing.Dict`, `typing.Generator`, `typing.List`, `typing.NoReturn`, `typing.Optional`, `typing.Tuple`, `pip._internal.cli.status_codes.UNKNOWN_ERROR`, `pip._internal.configuration.Configuration`, `pip._internal.configuration.ConfigurationError`, `pip._internal.utils.misc.redact_auth_from_url`, `pip._internal.utils.misc.strtobool`
**Type References**: [[ConfigOptionParser]], [[CustomOptionParser]], [[Dict]], [[PrettyHelpFormatter]], [[UpdatingDefaultsHelpFormatter]]

### Interface
- `__init__`() -> None
- `format_option_strings`(option: optparse.Option) -> str
- `_format_option_strings`(option: optparse.Option, mvarfmt: str, optsep: str) -> str
- `format_heading`(heading: str) -> str
- `format_usage`(usage: str) -> str
- `format_description`(description: [Optional[str]](#optional)) -> str
- `format_epilog`(epilog: [Optional[str]](#optional)) -> str
- `indent_lines`(text: str, indent: str) -> str
- `expand_default`(option: optparse.Option) -> str
- `insert_option_group`(idx: int) -> optparse.OptionGroup
- `option_list_all`() -> [List[optparse.Option]](#list)
- `check_default`(option: optparse.Option, key: str, val: Any) -> Any
- `_get_ordered_configuration_items`() -> Generator[<ast.Tuple object at 0x165a4b9d0>]
- `_update_defaults`(defaults: [Dict[<ast.Tuple object at 0x165a50250>]](#dict)) -> [Dict[<ast.Tuple object at 0x165a6cf10>]](#dict)
- `get_default_values`() -> optparse.Values
- `error`(msg: str) -> NoReturn

### Implementation
**PrettyHelpFormatter**

**UpdatingDefaultsHelpFormatter**

**CustomOptionParser**

**ConfigOptionParser**
  - section_items: Dict[<ast.Tuple object at 0x165a48dd0>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/cli/parser.py`  
**Dependencies**: `logging`, `optparse`, `shutil`, `sys`, `textwrap`, `contextlib.suppress`, `typing.Any`, `typing.Dict`, `typing.Generator`, `typing.List`, `typing.NoReturn`, `typing.Optional`, `typing.Tuple`, `pip._internal.cli.status_codes.UNKNOWN_ERROR`, `pip._internal.configuration.Configuration`, `pip._internal.configuration.ConfigurationError`, `pip._internal.utils.misc.redact_auth_from_url`, `pip._internal.utils.misc.strtobool`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.cli.command_context

**Imports**: `contextlib.ExitStack`, `contextlib.contextmanager`, `typing.ContextManager`, `typing.Generator`, `typing.TypeVar`
**Type References**: [[CommandContextMixIn]]

### Interface
- `__init__`() -> None
- `main_context`() -> Generator[<ast.Tuple object at 0x165a7db90>]
- `enter_context`(context_provider: ContextManager[_T]) -> _T

### Implementation
**CommandContextMixIn**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/cli/command_context.py`  
**Dependencies**: `contextlib.ExitStack`, `contextlib.contextmanager`, `typing.ContextManager`, `typing.Generator`, `typing.TypeVar`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.cli.spinners

**Imports**: `contextlib`, `itertools`, `logging`, `sys`, `time`, `typing.IO`, `typing.Generator`, `typing.Optional`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.logging.get_indentation`
**Type References**: [[InteractiveSpinner]], [[NonInteractiveSpinner]], [[RateLimiter]], [[SpinnerInterface]]

### Interface
- `open_spinner`(message: str) -> Generator[<ast.Tuple object at 0x165aa3910>]
- `hidden_cursor`(file: IO[str]) -> Generator[<ast.Tuple object at 0x165aa9a50>]
- `spin`() -> None
- `finish`(final_status: str) -> None
- `__init__`(min_update_interval_seconds: float) -> None
- `_write`(status: str) -> None
- `_update`(status: str) -> None
- `ready`() -> bool
- `reset`() -> None

### Implementation
**SpinnerInterface**

**InteractiveSpinner**

**NonInteractiveSpinner**

**RateLimiter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/cli/spinners.py`  
**Dependencies**: `contextlib`, `itertools`, `logging`, `sys`, `time`, `typing.IO`, `typing.Generator`, `typing.Optional`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.logging.get_indentation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.cli.autocompletion
:::{doc} autocomplete:15
Entry Point for completion of main and subcommand options.
:::
:::{doc} get_path_completion_type:124
Get the type of path completion (``file``, ``dir``, ``path`` or None)

:param cwords: same as the environmental variable ``COMP_WORDS``
:param cword: same as the environmental variable ``COMP_CWORD``
:param opts: The available options to check
:return: path completion type (``file``, ``dir``, ``path`` or None)
:::
:::{doc} auto_complete_paths:148
If ``completion_type`` is ``file`` or ``path``, list all regular files
and directories starting with ``current``; otherwise only list directories
starting with ``current``.

:param current: The word to be completed
:param completion_type: path completion type(``file``, ``path`` or ``dir``)
:return: A generator of regular files and/or directories
:::
**Imports**: `optparse`, `os`, `sys`, `itertools.chain`, `typing.Any`, `typing.Iterable`, `typing.List`, `typing.Optional`, `pip._internal.cli.main_parser.create_main_parser`, `pip._internal.commands.commands_dict`, `pip._internal.commands.create_command`, `pip._internal.metadata.get_default_environment`
**Type References**: [[Optional]]

### Interface
- `autocomplete`() -> None
- `get_path_completion_type`(cwords: [List[str]](#list), cword: int, opts: Iterable[Any]) -> [Optional[str]](#optional)
- `auto_complete_paths`(current: str, completion_type: str) -> Iterable[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/cli/autocompletion.py`  
**Dependencies**: `optparse`, `os`, `sys`, `itertools.chain`, `typing.Any`, `typing.Iterable`, `typing.List`, `typing.Optional`, `pip._internal.cli.main_parser.create_main_parser`, `pip._internal.commands.commands_dict`, `pip._internal.commands.create_command`, `pip._internal.metadata.get_default_environment`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.cli.base_command

**Imports**: `logging`, `logging.config`, `optparse`, `os`, `sys`, `traceback`, `optparse.Values`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._vendor.rich.reconfigure`, `pip._vendor.rich.traceback`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.command_context.CommandContextMixIn`, `pip._internal.cli.parser.ConfigOptionParser`, `pip._internal.cli.parser.UpdatingDefaultsHelpFormatter`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.PREVIOUS_BUILD_DIR_ERROR`, `pip._internal.cli.status_codes.UNKNOWN_ERROR`, `pip._internal.cli.status_codes.VIRTUALENV_NOT_FOUND`, `pip._internal.exceptions.BadCommand`, `pip._internal.exceptions.CommandError`, `pip._internal.exceptions.DiagnosticPipError`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.NetworkConnectionError`, `pip._internal.exceptions.PreviousBuildDirError`, `pip._internal.utils.filesystem.check_path_owner`, `pip._internal.utils.logging.BrokenStdoutLoggingError`, `pip._internal.utils.logging.setup_logging`, `pip._internal.utils.misc.get_prog`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.temp_dir.TempDirectoryTypeRegistry`, `pip._internal.utils.temp_dir.global_tempdir_manager`, `pip._internal.utils.temp_dir.tempdir_registry`, `pip._internal.utils.virtualenv.running_under_virtualenv`
**Type References**: [[Command]]

### Interface
- `__init__`(name: str, summary: str, isolated: bool) -> None
- `add_options`() -> None
- `handle_pip_version_check`(options: Values) -> None
- `run`(options: Values, args: [List[str]](#list)) -> int
- `_run_wrapper`(level_number: int, options: Values, args: [List[str]](#list)) -> int
- `parse_args`(args: [List[str]](#list)) -> Tuple[<ast.Tuple object at 0x165ae7b10>]
- `main`(args: [List[str]](#list)) -> int
- `_main`(args: [List[str]](#list)) -> int
- `_inner_run`() -> int

### Implementation
**Command**
  - usage: str
  - ignore_require_venv: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/cli/base_command.py`  
**Dependencies**: `logging`, `logging.config`, `optparse`, `os`, `sys`, `traceback`, `optparse.Values`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._vendor.rich.reconfigure`, `pip._vendor.rich.traceback`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.command_context.CommandContextMixIn`, `pip._internal.cli.parser.ConfigOptionParser`, `pip._internal.cli.parser.UpdatingDefaultsHelpFormatter`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.PREVIOUS_BUILD_DIR_ERROR`, `pip._internal.cli.status_codes.UNKNOWN_ERROR`, `pip._internal.cli.status_codes.VIRTUALENV_NOT_FOUND`, `pip._internal.exceptions.BadCommand`, `pip._internal.exceptions.CommandError`, `pip._internal.exceptions.DiagnosticPipError`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.NetworkConnectionError`, `pip._internal.exceptions.PreviousBuildDirError`, `pip._internal.utils.filesystem.check_path_owner`, `pip._internal.utils.logging.BrokenStdoutLoggingError`, `pip._internal.utils.logging.setup_logging`, `pip._internal.utils.misc.get_prog`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.temp_dir.TempDirectoryTypeRegistry`, `pip._internal.utils.temp_dir.global_tempdir_manager`, `pip._internal.utils.temp_dir.tempdir_registry`, `pip._internal.utils.virtualenv.running_under_virtualenv`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.cli.main_parser
:::{doc} create_main_parser:19
Creates and returns the main parser for pip's CLI
:::
**Imports**: `os`, `subprocess`, `sys`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._internal.build_env.get_runnable_pip`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.parser.ConfigOptionParser`, `pip._internal.cli.parser.UpdatingDefaultsHelpFormatter`, `pip._internal.commands.commands_dict`, `pip._internal.commands.get_similar_commands`, `pip._internal.exceptions.CommandError`, `pip._internal.utils.misc.get_pip_version`, `pip._internal.utils.misc.get_prog`
### Interface
- `create_main_parser`() -> ConfigOptionParser
- `identify_python_interpreter`(python: str) -> [Optional[str]](#optional)
- `parse_command`(args: [List[str]](#list)) -> Tuple[<ast.Tuple object at 0x165b35e50>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/cli/main_parser.py`  
**Dependencies**: `os`, `subprocess`, `sys`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._internal.build_env.get_runnable_pip`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.parser.ConfigOptionParser`, `pip._internal.cli.parser.UpdatingDefaultsHelpFormatter`, `pip._internal.commands.commands_dict`, `pip._internal.commands.get_similar_commands`, `pip._internal.exceptions.CommandError`, `pip._internal.utils.misc.get_pip_version`, `pip._internal.utils.misc.get_prog`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.cli.progress_bars
:::{doc} get_download_progress_renderer:82
Get an object that can be used to render the download progress.

Returns a callable, that takes an iterable to "wrap".
:::
**Imports**: `functools`, `sys`, `typing.Callable`, `typing.Generator`, `typing.Iterable`, `typing.Iterator`, `typing.Optional`, `typing.Tuple`, `pip._vendor.rich.progress.BarColumn`, `pip._vendor.rich.progress.DownloadColumn`, `pip._vendor.rich.progress.FileSizeColumn`, `pip._vendor.rich.progress.Progress`, `pip._vendor.rich.progress.ProgressColumn`, `pip._vendor.rich.progress.SpinnerColumn`, `pip._vendor.rich.progress.TextColumn`, `pip._vendor.rich.progress.TimeElapsedColumn`, `pip._vendor.rich.progress.TimeRemainingColumn`, `pip._vendor.rich.progress.TransferSpeedColumn`, `pip._internal.cli.spinners.RateLimiter`, `pip._internal.utils.logging.get_indentation`
**Type References**: [[Tuple]]

### Interface
- `_rich_progress_bar`(iterable: Iterable[bytes]) -> Generator[<ast.Tuple object at 0x165b46450>]
- `_raw_progress_bar`(iterable: Iterable[bytes]) -> Generator[<ast.Tuple object at 0x165b36bd0>]
- `get_download_progress_renderer`() -> DownloadProgressRenderer
- `write_progress`(current: int, total: int) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/cli/progress_bars.py`  
**Dependencies**: `functools`, `sys`, `typing.Callable`, `typing.Generator`, `typing.Iterable`, `typing.Iterator`, `typing.Optional`, `typing.Tuple`, `pip._vendor.rich.progress.BarColumn`, `pip._vendor.rich.progress.DownloadColumn`, `pip._vendor.rich.progress.FileSizeColumn`, `pip._vendor.rich.progress.Progress`, `pip._vendor.rich.progress.ProgressColumn`, `pip._vendor.rich.progress.SpinnerColumn`, `pip._vendor.rich.progress.TextColumn`, `pip._vendor.rich.progress.TimeElapsedColumn`, `pip._vendor.rich.progress.TimeRemainingColumn`, `pip._vendor.rich.progress.TransferSpeedColumn`, `pip._internal.cli.spinners.RateLimiter`, `pip._internal.utils.logging.get_indentation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.cli.main

**Imports**: `locale`, `logging`, `os`, `sys`, `warnings`, `typing.List`, `typing.Optional`, `pip._internal.cli.autocompletion.autocomplete`, `pip._internal.cli.main_parser.parse_command`, `pip._internal.commands.create_command`, `pip._internal.exceptions.PipError`, `pip._internal.utils.deprecation`
### Interface
- `main`(args: [Optional[List[str]]](#optional)) -> int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/cli/main.py`  
**Dependencies**: `locale`, `logging`, `os`, `sys`, `warnings`, `typing.List`, `typing.Optional`, `pip._internal.cli.autocompletion.autocomplete`, `pip._internal.cli.main_parser.parse_command`, `pip._internal.commands.create_command`, `pip._internal.exceptions.PipError`, `pip._internal.utils.deprecation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.cli.req_command
:::{doc} with_cleanup:50
Decorator for common logic related to managing temporary
directories.
:::
**Imports**: `logging`, `functools.partial`, `optparse.Values`, `typing.Any`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._internal.cache.WheelCache`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.index_command.IndexGroupCommand`, `pip._internal.cli.index_command.SessionCommandMixin`, `pip._internal.exceptions.CommandError`, `pip._internal.exceptions.PreviousBuildDirError`, `pip._internal.index.collector.LinkCollector`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.models.selection_prefs.SelectionPreferences`, `pip._internal.models.target_python.TargetPython`, `pip._internal.network.session.PipSession`, `pip._internal.operations.build.build_tracker.BuildTracker`, `pip._internal.operations.prepare.RequirementPreparer`, `pip._internal.req.constructors.install_req_from_editable`, `pip._internal.req.constructors.install_req_from_line`, `pip._internal.req.constructors.install_req_from_parsed_requirement`, `pip._internal.req.constructors.install_req_from_req_string`, `pip._internal.req.req_file.parse_requirements`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.resolution.base.BaseResolver`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.temp_dir.TempDirectoryTypeRegistry`, `pip._internal.utils.temp_dir.tempdir_kinds`, `pip._internal.resolution.legacy.resolver`, `pip._internal.resolution.resolvelib.resolver`
**Type References**: [[List]], [[RequirementCommand]]

### Interface
- `with_cleanup`(func: Any) -> Any
- `configure_tempdir_registry`(registry: TempDirectoryTypeRegistry) -> None
- `wrapper`(self: RequirementCommand, options: Values, args: [List[Any]](#list)) -> [Optional[int]](#optional)
- `__init__`() -> None
- `determine_resolver_variant`(options: Values) -> str
- `make_requirement_preparer`(temp_build_dir: TempDirectory, options: Values, build_tracker: BuildTracker, session: PipSession, finder: PackageFinder, use_user_site: bool, download_dir: [Optional[str]](#optional), verbosity: int) -> RequirementPreparer
- `make_resolver`(preparer: RequirementPreparer, finder: PackageFinder, options: Values, wheel_cache: [Optional[WheelCache]](#optional), use_user_site: bool, ignore_installed: bool, ignore_requires_python: bool, force_reinstall: bool, upgrade_strategy: str, use_pep517: [Optional[bool]](#optional), py_version_info: [Optional[Tuple[<ast.Tuple object at 0x165b6a1d0>]]](#optional)) -> BaseResolver
- `get_requirements`(args: [List[str]](#list), options: Values, finder: PackageFinder, session: PipSession) -> [List[InstallRequirement]](#list)
- `trace_basic_info`(finder: PackageFinder) -> None
- `_build_package_finder`(options: Values, session: PipSession, target_python: [Optional[TargetPython]](#optional), ignore_requires_python: [Optional[bool]](#optional)) -> PackageFinder

### Implementation
**RequirementCommand**
  - requirements: List[InstallRequirement]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/cli/req_command.py`  
**Dependencies**: `logging`, `functools.partial`, `optparse.Values`, `typing.Any`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._internal.cache.WheelCache`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.index_command.IndexGroupCommand`, `pip._internal.cli.index_command.SessionCommandMixin`, `pip._internal.exceptions.CommandError`, `pip._internal.exceptions.PreviousBuildDirError`, `pip._internal.index.collector.LinkCollector`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.models.selection_prefs.SelectionPreferences`, `pip._internal.models.target_python.TargetPython`, `pip._internal.network.session.PipSession`, `pip._internal.operations.build.build_tracker.BuildTracker`, `pip._internal.operations.prepare.RequirementPreparer`, `pip._internal.req.constructors.install_req_from_editable`, `pip._internal.req.constructors.install_req_from_line`, `pip._internal.req.constructors.install_req_from_parsed_requirement`, `pip._internal.req.constructors.install_req_from_req_string`, `pip._internal.req.req_file.parse_requirements`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.resolution.base.BaseResolver`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.temp_dir.TempDirectoryTypeRegistry`, `pip._internal.utils.temp_dir.tempdir_kinds`, `pip._internal.resolution.legacy.resolver`, `pip._internal.resolution.resolvelib.resolver`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations.check
:::{doc} create_package_set_from_installed:50
Converts a list of distributions into a PackageSet.
:::
:::{doc} check_package_set:67
Check if a package set is consistent

If should_ignore is passed, it should be a callable that takes a
package name and returns a boolean.
:::
:::{doc} check_install_conflicts:112
For checking if the dependency graph would be consistent after     installing given requirements
    
:::
:::{doc} _simulate_installation_of:148
Computes the version of packages after installing to_install.
:::
**Imports**: `logging`, `contextlib.suppress`, `email.parser.Parser`, `functools.reduce`, `typing.Callable`, `typing.Dict`, `typing.FrozenSet`, `typing.Generator`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `pip._vendor.packaging.requirements.Requirement`, `pip._vendor.packaging.tags.Tag`, `pip._vendor.packaging.tags.parse_tag`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.Version`, `pip._internal.distributions.make_distribution_for_install_requirement`, `pip._internal.metadata.get_default_environment`, `pip._internal.metadata.base.BaseDistribution`, `pip._internal.req.req_install.InstallRequirement`
**Type References**: [[FrozenSet]], [[List]], [[PackageDetails]], [[Set]], [[Version]]

### Interface
- `create_package_set_from_installed`() -> Tuple[<ast.Tuple object at 0x165bb5310>]
- `check_package_set`(package_set: PackageSet, should_ignore: [Optional[Callable[<ast.Tuple object at 0x165bb4c10>]]](#optional)) -> CheckResult
- `check_install_conflicts`(to_install: [List[InstallRequirement]](#list)) -> ConflictDetails
- `check_unsupported`(packages: Iterable[BaseDistribution], supported_tags: Iterable[Tag]) -> Generator[<ast.Tuple object at 0x165bd3b90>]
- `_simulate_installation_of`(to_install: [List[InstallRequirement]](#list), package_set: PackageSet) -> Set[NormalizedName]
- `_create_whitelist`(would_be_installed: Set[NormalizedName], package_set: PackageSet) -> Set[NormalizedName]

### Implementation
**PackageDetails**
  - version: Version
  - dependencies: List[Requirement]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/check.py`  
**Dependencies**: `logging`, `contextlib.suppress`, `email.parser.Parser`, `functools.reduce`, `typing.Callable`, `typing.Dict`, `typing.FrozenSet`, `typing.Generator`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `pip._vendor.packaging.requirements.Requirement`, `pip._vendor.packaging.tags.Tag`, `pip._vendor.packaging.tags.parse_tag`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.Version`, `pip._internal.distributions.make_distribution_for_install_requirement`, `pip._internal.metadata.get_default_environment`, `pip._internal.metadata.base.BaseDistribution`, `pip._internal.req.req_install.InstallRequirement`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations.freeze
:::{doc} _get_editable_info:157
Compute and return values (req, comments) for use in
FrozenRequirement.from_dist().
:::
**Imports**: `collections`, `logging`, `os`, `typing.Container`, `typing.Dict`, `typing.Generator`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Set`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.InvalidVersion`, `pip._internal.exceptions.BadCommand`, `pip._internal.exceptions.InstallationError`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.get_environment`, `pip._internal.req.constructors.install_req_from_editable`, `pip._internal.req.constructors.install_req_from_line`, `pip._internal.req.req_file.COMMENT_RE`, `pip._internal.utils.direct_url_helpers.direct_url_as_pep440_direct_reference`, `pip._internal.vcs.RemoteNotFoundError`, `pip._internal.vcs.RemoteNotValidError`, `pip._internal.vcs.vcs`
**Type References**: [[Dict]], [[FrozenRequirement]], [[List]], [[Set]], [[_EditableInfo]]

### Interface
- `freeze`(requirement: [Optional[List[str]]](#optional), local_only: bool, user_only: bool, paths: [Optional[List[str]]](#optional), isolated: bool, exclude_editable: bool, skip: Container[str]) -> Generator[<ast.Tuple object at 0x165c00d90>]
- `_format_as_name_version`(dist: BaseDistribution) -> str
- `_get_editable_info`(dist: BaseDistribution) -> _EditableInfo
- `__init__`(name: str, req: str, editable: bool, comments: Iterable[str]) -> None
- `from_dist`(dist: BaseDistribution) -> FrozenRequirement
- `__str__`() -> str

### Implementation
**_EditableInfo**
  - requirement: str
  - comments: List[str]
**FrozenRequirement**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/freeze.py`  
**Dependencies**: `collections`, `logging`, `os`, `typing.Container`, `typing.Dict`, `typing.Generator`, `typing.Iterable`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Set`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.InvalidVersion`, `pip._internal.exceptions.BadCommand`, `pip._internal.exceptions.InstallationError`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.get_environment`, `pip._internal.req.constructors.install_req_from_editable`, `pip._internal.req.constructors.install_req_from_line`, `pip._internal.req.req_file.COMMENT_RE`, `pip._internal.utils.direct_url_helpers.direct_url_as_pep440_direct_reference`, `pip._internal.vcs.RemoteNotFoundError`, `pip._internal.vcs.RemoteNotValidError`, `pip._internal.vcs.vcs`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations.prepare
:::{doc} _get_prepared_distribution:60
Prepare a distribution for installation.
:::
:::{doc} get_file_url:118
Get file and optionally check its hash.
:::
:::{doc} unpack_url:142
Unpack link into location, downloading if required.

:param hashes: A Hashes object, one of whose embedded hashes must match,
    or HashMismatch will be raised. If the Hashes is empty, no matches are
    required, and unhashable types of requirements (like VCS ones, which
    would ordinarily raise HashUnsupported) are allowed.
:::
:::{doc} _check_download_dir:185
Check download_dir for previously downloaded file with correct hash
If a correct file is found return its path else None
:::
:::{doc} RequirementPreparer:215
Prepares a Requirement
:::
**Imports**: `mimetypes`, `os`, `shutil`, `dataclasses.dataclass`, `pathlib.Path`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.distributions.make_distribution_for_install_requirement`, `pip._internal.distributions.installed.InstalledDistribution`, `pip._internal.exceptions.DirectoryUrlHashUnsupported`, `pip._internal.exceptions.HashMismatch`, `pip._internal.exceptions.HashUnpinned`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.MetadataInconsistent`, `pip._internal.exceptions.NetworkConnectionError`, `pip._internal.exceptions.VcsHashUnsupported`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.get_metadata_distribution`, `pip._internal.models.direct_url.ArchiveInfo`, `pip._internal.models.link.Link`, `pip._internal.models.wheel.Wheel`, `pip._internal.network.download.BatchDownloader`, `pip._internal.network.download.Downloader`, `pip._internal.network.lazy_wheel.HTTPRangeRequestUnsupported`, `pip._internal.network.lazy_wheel.dist_from_wheel_url`, `pip._internal.network.session.PipSession`, `pip._internal.operations.build.build_tracker.BuildTracker`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.utils._log.getLogger`, `pip._internal.utils.direct_url_helpers.direct_url_for_editable`, `pip._internal.utils.direct_url_helpers.direct_url_from_link`, `pip._internal.utils.hashes.Hashes`, `pip._internal.utils.hashes.MissingHashes`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.misc.hash_file`, `pip._internal.utils.misc.hide_url`, `pip._internal.utils.misc.redact_auth_from_requirement`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.unpacking.unpack_file`, `pip._internal.vcs.vcs`
**Type References**: [[Dict]], [[File]], [[List]], [[Optional]], [[RequirementPreparer]]

### Interface
- `_get_prepared_distribution`(req: InstallRequirement, build_tracker: BuildTracker, finder: PackageFinder, build_isolation: bool, check_build_deps: bool) -> BaseDistribution
- `unpack_vcs_link`(link: Link, location: str, verbosity: int) -> None
- `get_http_url`(link: Link, download: Downloader, download_dir: [Optional[str]](#optional), hashes: [Optional[Hashes]](#optional)) -> File
- `get_file_url`(link: Link, download_dir: [Optional[str]](#optional), hashes: [Optional[Hashes]](#optional)) -> File
- `unpack_url`(link: Link, location: str, download: Downloader, verbosity: int, download_dir: [Optional[str]](#optional), hashes: [Optional[Hashes]](#optional)) -> [Optional[File]](#optional)
- `_check_download_dir`(link: Link, download_dir: str, hashes: [Optional[Hashes]](#optional), warn_on_hash_mismatch: bool) -> [Optional[str]](#optional)
- `__post_init__`() -> None
- `__init__`(build_dir: str, download_dir: [Optional[str]](#optional), src_dir: str, build_isolation: bool, check_build_deps: bool, build_tracker: BuildTracker, session: PipSession, progress_bar: str, finder: PackageFinder, require_hashes: bool, use_user_site: bool, lazy_wheel: bool, verbosity: int, legacy_resolver: bool) -> None
- `_log_preparing_link`(req: InstallRequirement) -> None
- `_ensure_link_req_src_dir`(req: InstallRequirement, parallel_builds: bool) -> None
- `_get_linked_req_hashes`(req: InstallRequirement) -> Hashes
- `_fetch_metadata_only`(req: InstallRequirement) -> [Optional[BaseDistribution]](#optional)
- `_fetch_metadata_using_link_data_attr`(req: InstallRequirement) -> [Optional[BaseDistribution]](#optional)
- `_fetch_metadata_using_lazy_wheel`(link: Link) -> [Optional[BaseDistribution]](#optional)
- `_complete_partial_requirements`(partially_downloaded_reqs: Iterable[InstallRequirement], parallel_builds: bool) -> None
- `prepare_linked_requirement`(req: InstallRequirement, parallel_builds: bool) -> BaseDistribution
- `prepare_linked_requirements_more`(reqs: Iterable[InstallRequirement], parallel_builds: bool) -> None
- `_prepare_linked_requirement`(req: InstallRequirement, parallel_builds: bool) -> BaseDistribution
- `save_linked_requirement`(req: InstallRequirement) -> None
- `prepare_editable_requirement`(req: InstallRequirement) -> BaseDistribution
- `prepare_installed_requirement`(req: InstallRequirement, skip_reason: str) -> BaseDistribution

### Implementation
**File**
  - path: str
  - content_type: Optional[str]
**RequirementPreparer**
  - links_to_fully_download: Dict[<ast.Tuple object at 0x165c87f50>]
  - partially_downloaded_reqs: List[InstallRequirement]
  - comes_from: Optional[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/prepare.py`  
**Dependencies**: `mimetypes`, `os`, `shutil`, `dataclasses.dataclass`, `pathlib.Path`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.distributions.make_distribution_for_install_requirement`, `pip._internal.distributions.installed.InstalledDistribution`, `pip._internal.exceptions.DirectoryUrlHashUnsupported`, `pip._internal.exceptions.HashMismatch`, `pip._internal.exceptions.HashUnpinned`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.MetadataInconsistent`, `pip._internal.exceptions.NetworkConnectionError`, `pip._internal.exceptions.VcsHashUnsupported`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.get_metadata_distribution`, `pip._internal.models.direct_url.ArchiveInfo`, `pip._internal.models.link.Link`, `pip._internal.models.wheel.Wheel`, `pip._internal.network.download.BatchDownloader`, `pip._internal.network.download.Downloader`, `pip._internal.network.lazy_wheel.HTTPRangeRequestUnsupported`, `pip._internal.network.lazy_wheel.dist_from_wheel_url`, `pip._internal.network.session.PipSession`, `pip._internal.operations.build.build_tracker.BuildTracker`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.utils._log.getLogger`, `pip._internal.utils.direct_url_helpers.direct_url_for_editable`, `pip._internal.utils.direct_url_helpers.direct_url_from_link`, `pip._internal.utils.hashes.Hashes`, `pip._internal.utils.hashes.MissingHashes`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.misc.hash_file`, `pip._internal.utils.misc.hide_url`, `pip._internal.utils.misc.redact_auth_from_requirement`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.unpacking.unpack_file`, `pip._internal.vcs.vcs`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.req.req_install
:::{doc} InstallRequirement:65
Represents something that may be installed later on, may have information
about where to fetch the relevant requirement and also contains logic for
installing the said requirement.
:::
**Imports**: `functools`, `logging`, `os`, `shutil`, `sys`, `uuid`, `zipfile`, `optparse.Values`, `pathlib.Path`, `typing.Any`, `typing.Collection`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Union`, `pip._vendor.packaging.markers.Marker`, `pip._vendor.packaging.requirements.Requirement`, `pip._vendor.packaging.specifiers.SpecifierSet`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.Version`, `pip._vendor.packaging.version.parse`, `pip._vendor.pyproject_hooks.BuildBackendHookCaller`, `pip._internal.build_env.BuildEnvironment`, `pip._internal.build_env.NoOpBuildEnvironment`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.PreviousBuildDirError`, `pip._internal.locations.get_scheme`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.get_default_environment`, `pip._internal.metadata.get_directory_distribution`, `pip._internal.metadata.get_wheel_distribution`, `pip._internal.metadata.base.FilesystemWheel`, `pip._internal.models.direct_url.DirectUrl`, `pip._internal.models.link.Link`, `pip._internal.operations.build.metadata.generate_metadata`, `pip._internal.operations.build.metadata_editable.generate_editable_metadata`, `pip._internal.operations.build.metadata_legacy.generate_metadata`, `pip._internal.operations.install.editable_legacy.install_editable`, `pip._internal.operations.install.wheel.install_wheel`, `pip._internal.pyproject.load_pyproject_toml`, `pip._internal.pyproject.make_pyproject_path`, `pip._internal.req.req_uninstall.UninstallPathSet`, `pip._internal.utils.deprecation.deprecated`, `pip._internal.utils.hashes.Hashes`, `pip._internal.utils.misc.ConfiguredBuildBackendHookCaller`, `pip._internal.utils.misc.ask_path_exists`, `pip._internal.utils.misc.backup_dir`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.misc.hide_url`, `pip._internal.utils.misc.is_installable_dir`, `pip._internal.utils.misc.redact_auth_from_requirement`, `pip._internal.utils.misc.redact_auth_from_url`, `pip._internal.utils.packaging.get_requirement`, `pip._internal.utils.subprocess.runner_with_spinner_message`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.temp_dir.tempdir_kinds`, `pip._internal.utils.unpacking.unpack_file`, `pip._internal.utils.virtualenv.running_under_virtualenv`, `pip._internal.vcs.vcs`
**Type References**: [[InstallRequirement]], [[Optional]]

### Interface
- `check_invalid_constraint_type`(req: InstallRequirement) -> str
- `_has_option`(options: Values, reqs: [List[InstallRequirement]](#list), option: str) -> bool
- `check_legacy_setup_py_options`(options: Values, reqs: [List[InstallRequirement]](#list)) -> None
- `__init__`(req: [Optional[Requirement]](#optional), comes_from: [Optional[Union[<ast.Tuple object at 0x165d21250>]]](#optional), editable: bool, link: [Optional[Link]](#optional), markers: [Optional[Marker]](#optional), use_pep517: [Optional[bool]](#optional), isolated: bool) -> None
- `__str__`() -> str
- `__repr__`() -> str
- `format_debug`() -> str
- `name`() -> [Optional[str]](#optional)
- `supports_pyproject_editable`() -> bool
- `specifier`() -> SpecifierSet
- `is_direct`() -> bool
- `is_pinned`() -> bool
- `match_markers`(extras_requested: [Optional[Iterable[str]]](#optional)) -> bool
- `has_hash_options`() -> bool
- `hashes`(trust_internet: bool) -> Hashes
- `from_path`() -> [Optional[str]](#optional)
- `ensure_build_location`(build_dir: str, autodelete: bool, parallel_builds: bool) -> str
- `_set_requirement`() -> None
- `warn_on_mismatching_name`() -> None
- `check_if_exists`(use_user_site: bool) -> None
- `is_wheel`() -> bool
- `is_wheel_from_cache`() -> bool
- `unpacked_source_directory`() -> str
- `setup_py_path`() -> str
- `setup_cfg_path`() -> str
- `pyproject_toml_path`() -> str
- `load_pyproject_toml`() -> None
- `isolated_editable_sanity_check`() -> None
- `prepare_metadata`() -> None
- `metadata`() -> Any
- `get_dist`() -> BaseDistribution
- `assert_source_matches_version`() -> None
- `ensure_has_source_dir`(parent_dir: str, autodelete: bool, parallel_builds: bool) -> None
- `needs_unpacked_archive`(archive_source: Path) -> None
- `ensure_pristine_source_checkout`() -> None
- `update_editable`() -> None
- `uninstall`(auto_confirm: bool, verbose: bool) -> [Optional[UninstallPathSet]](#optional)
- `_get_archive_name`(path: str, parentdir: str, rootdir: str) -> str
- `archive`(build_dir: [Optional[str]](#optional)) -> None
- `install`(global_options: [Optional[Sequence[str]]](#optional), root: [Optional[str]](#optional), home: [Optional[str]](#optional), prefix: [Optional[str]](#optional), warn_script_location: bool, use_user_site: bool, pycompile: bool) -> None
- `_clean_zip_name`(name: str, prefix: str) -> str

### Implementation
**InstallRequirement**
  - dir_name: str
  - comes_from: Optional[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/req/req_install.py`  
**Dependencies**: `functools`, `logging`, `os`, `shutil`, `sys`, `uuid`, `zipfile`, `optparse.Values`, `pathlib.Path`, `typing.Any`, `typing.Collection`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Union`, `pip._vendor.packaging.markers.Marker`, `pip._vendor.packaging.requirements.Requirement`, `pip._vendor.packaging.specifiers.SpecifierSet`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.Version`, `pip._vendor.packaging.version.parse`, `pip._vendor.pyproject_hooks.BuildBackendHookCaller`, `pip._internal.build_env.BuildEnvironment`, `pip._internal.build_env.NoOpBuildEnvironment`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.PreviousBuildDirError`, `pip._internal.locations.get_scheme`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.get_default_environment`, `pip._internal.metadata.get_directory_distribution`, `pip._internal.metadata.get_wheel_distribution`, `pip._internal.metadata.base.FilesystemWheel`, `pip._internal.models.direct_url.DirectUrl`, `pip._internal.models.link.Link`, `pip._internal.operations.build.metadata.generate_metadata`, `pip._internal.operations.build.metadata_editable.generate_editable_metadata`, `pip._internal.operations.build.metadata_legacy.generate_metadata`, `pip._internal.operations.install.editable_legacy.install_editable`, `pip._internal.operations.install.wheel.install_wheel`, `pip._internal.pyproject.load_pyproject_toml`, `pip._internal.pyproject.make_pyproject_path`, `pip._internal.req.req_uninstall.UninstallPathSet`, `pip._internal.utils.deprecation.deprecated`, `pip._internal.utils.hashes.Hashes`, `pip._internal.utils.misc.ConfiguredBuildBackendHookCaller`, `pip._internal.utils.misc.ask_path_exists`, `pip._internal.utils.misc.backup_dir`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.misc.hide_url`, `pip._internal.utils.misc.is_installable_dir`, `pip._internal.utils.misc.redact_auth_from_requirement`, `pip._internal.utils.misc.redact_auth_from_url`, `pip._internal.utils.packaging.get_requirement`, `pip._internal.utils.subprocess.runner_with_spinner_message`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.temp_dir.tempdir_kinds`, `pip._internal.utils.unpacking.unpack_file`, `pip._internal.utils.virtualenv.running_under_virtualenv`, `pip._internal.vcs.vcs`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.req.req_set

**Imports**: `logging`, `collections.OrderedDict`, `typing.Dict`, `typing.List`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.req.req_install.InstallRequirement`
**Type References**: [[RequirementSet]]

### Interface
- `__init__`(check_supported_wheels: bool) -> None
- `__str__`() -> str
- `__repr__`() -> str
- `add_unnamed_requirement`(install_req: InstallRequirement) -> None
- `add_named_requirement`(install_req: InstallRequirement) -> None
- `has_requirement`(name: str) -> bool
- `get_requirement`(name: str) -> InstallRequirement
- `all_requirements`() -> [List[InstallRequirement]](#list)
- `requirements_to_install`() -> [List[InstallRequirement]](#list)

### Implementation
**RequirementSet**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/req/req_set.py`  
**Dependencies**: `logging`, `collections.OrderedDict`, `typing.Dict`, `typing.List`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.req.req_install.InstallRequirement`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.req.req_uninstall
:::{doc} _script_names:21
Create the fully qualified name of the files created by
{console,gui}_scripts for the given ``dist``.
Returns the list of file names
:::
:::{doc} uninstallation_paths:55
Yield all the uninstallation paths for dist based on RECORD-without-.py[co]

Yield paths to all the files in RECORD. For each .py file in RECORD, add
the .pyc and .pyo in the same directory.

UninstallPathSet.add() takes care of the __pycache__ .py[co].

If RECORD is not found, raises an error,
with possible information from the INSTALLER file.

https://packaging.python.org/specifications/recording-installed-packages/
:::
:::{doc} compact:88
Compact a path set to contain the minimal number of paths
necessary to contain all paths in the set. If /a/path/ and
/a/path/to/a/file.txt are both in the set, leave only the
shorter path.
:::
:::{doc} compress_for_rename:107
Returns a set containing the paths that need to be renamed.

This set may include directories when the original sequence of paths
included every file on disk.
:::
:::{doc} compress_for_output_listing:141
Returns a tuple of 2 sets of which paths to display to user

The first set contains paths that would be deleted. Files of a package
are not added and the top-level directory of the package has a '*' added
at the end - to signify that all it's contents are removed.

The second set contains files that would have been skipped in the above
folders.
:::
:::{doc} StashedUninstallPathSet:190
A set of file rename operations to stash files while
tentatively uninstalling them.
:::
:::{doc} UninstallPathSet:295
A set of file paths to be removed in the uninstallation of a
requirement.
:::
**Imports**: `functools`, `os`, `sys`, `sysconfig`, `importlib.util.cache_from_source`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Generator`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `pip._internal.exceptions.LegacyDistutilsInstall`, `pip._internal.exceptions.UninstallMissingRecord`, `pip._internal.locations.get_bin_prefix`, `pip._internal.locations.get_bin_user`, `pip._internal.metadata.BaseDistribution`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.egg_link.egg_link_path_from_location`, `pip._internal.utils.logging.getLogger`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.ask`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.misc.renames`, `pip._internal.utils.misc.rmtree`, `pip._internal.utils.temp_dir.AdjacentTempDirectory`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.virtualenv.running_under_virtualenv`
**Type References**: [[Set]], [[StashedUninstallPathSet]], [[TempDirectory]], [[UninstallPathSet]], [[UninstallPthEntries]]

### Interface
- `_script_names`(bin_dir: str, script_name: str, is_gui: bool) -> Generator[<ast.Tuple object at 0x165e1ef90>]
- `_unique`(fn: Callable[<ast.Tuple object at 0x165e1e0d0>]) -> Callable[<ast.Tuple object at 0x165e0bd90>]
- `uninstallation_paths`(dist: BaseDistribution) -> Generator[<ast.Tuple object at 0x165e03cd0>]
- `compact`(paths: Iterable[str]) -> Set[str]
- `compress_for_rename`(paths: Iterable[str]) -> Set[str]
- `compress_for_output_listing`(paths: Iterable[str]) -> Tuple[<ast.Tuple object at 0x165e1a890>]
- `unique`() -> Generator[<ast.Tuple object at 0x165e1c290>]
- `norm_join`() -> str
- `__init__`(pth_file: str) -> None
- `_get_directory_stash`(path: str) -> str
- `_get_file_stash`(path: str) -> str
- `stash`(path: str) -> str
- `commit`() -> None
- `rollback`() -> bool
- `can_rollback`() -> bool
- `_permitted`(path: str) -> bool
- `add`(entry: str) -> None
- `add_pth`(pth_file: str, entry: str) -> None
- `remove`() -> None
- `_allowed_to_proceed`(verbose: bool) -> bool
- `from_dist`(dist: BaseDistribution) -> UninstallPathSet
- `_display`(msg: str, paths: Iterable[str]) -> None
- `iter_scripts_to_remove`(dist: BaseDistribution, bin_dir: str) -> Generator[<ast.Tuple object at 0x165eb6dd0>]

### Implementation
**StashedUninstallPathSet**
  - save_dir: TempDirectory
**UninstallPathSet**

**UninstallPthEntries**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/req/req_uninstall.py`  
**Dependencies**: `functools`, `os`, `sys`, `sysconfig`, `importlib.util.cache_from_source`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Generator`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `pip._internal.exceptions.LegacyDistutilsInstall`, `pip._internal.exceptions.UninstallMissingRecord`, `pip._internal.locations.get_bin_prefix`, `pip._internal.locations.get_bin_user`, `pip._internal.metadata.BaseDistribution`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.egg_link.egg_link_path_from_location`, `pip._internal.utils.logging.getLogger`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.ask`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.misc.renames`, `pip._internal.utils.misc.rmtree`, `pip._internal.utils.temp_dir.AdjacentTempDirectory`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.virtualenv.running_under_virtualenv`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.req
:::{doc} install_given_reqs:35
Install everything in the given list.

(to be called after having downloaded and unpacked the packages)
:::
**Imports**: `collections`, `logging`, `dataclasses.dataclass`, `typing.Generator`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `pip._internal.utils.logging.indent_log`, `req_file.parse_requirements`, `req_install.InstallRequirement`, `req_set.RequirementSet`
**Type References**: [[InstallationResult]]

### Interface
- `_validate_requirements`(requirements: [List[InstallRequirement]](#list)) -> Generator[<ast.Tuple object at 0x165edd950>]
- `install_given_reqs`(requirements: [List[InstallRequirement]](#list), global_options: Sequence[str], root: [Optional[str]](#optional), home: [Optional[str]](#optional), prefix: [Optional[str]](#optional), warn_script_location: bool, use_user_site: bool, pycompile: bool) -> [List[InstallationResult]](#list)

### Implementation
**InstallationResult**
  - name: str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/req/__init__.py`  
**Dependencies**: `collections`, `logging`, `dataclasses.dataclass`, `typing.Generator`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `pip._internal.utils.logging.indent_log`, `req_file.parse_requirements`, `req_install.InstallRequirement`, `req_set.RequirementSet`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.req.req_file
:::{doc} parse_requirements:132
Parse a requirements file and yield ParsedRequirement instances.

:param filename:    Path or url of requirements file.
:param session:     PipSession instance.
:param finder:      Instance of pip.index.PackageFinder.
:param options:     cli options.
:param constraint:  If true, parsing a constraint file rather than
    requirements file.
:::
:::{doc} preprocess:159
Split, filter, and join lines, and return a line iterator

:param content: the content of the requirements file
:::
:::{doc} handle_line:275
Handle a single parsed requirements line; This can result in
creating/yielding requirements, or updating the finder.

:param line:        The parsed line to be processed.
:param options:     CLI options.
:param finder:      The finder - updated by non-requirement lines.
:param session:     The session - updated by non-requirement lines.

Returns a ParsedRequirement object if the line is a requirement line,
otherwise returns None.

For lines that contain requirements, the only options that have an effect
are from SUPPORTED_OPTIONS_REQ, and they are scoped to the
requirement. Other options from SUPPORTED_OPTIONS may be present, but are
ignored.

For lines that do not contain requirements, the only options that have an
effect are from SUPPORTED_OPTIONS. Options from SUPPORTED_OPTIONS_REQ may
be present, but are ignored. These lines may contain multiple options
(although our docs imply only one is supported), and all our parsed and
affect the finder.
:::
:::{doc} break_args_options:436
Break up the line into an args and options string.  We only want to shlex
(and then optparse) the options, not the args.  args can contain markers
which are corrupted by shlex.
:::
:::{doc} build_parser:458
Return a parser for parsing requirement lines
:::
:::{doc} join_lines:481
Joins a line ending in '' with the previous line (except when following
comments).  The joined line takes on the index of the first line.
:::
:::{doc} ignore_comments:512
Strips comments and filter empty lines.
:::
:::{doc} expand_env_variables:523
Replace all environment variables that can be retrieved via `os.getenv`.

The only allowed format for environment variables defined in the
requirement file is `${MY_VARIABLE_1}` to ensure two things:

1. Strings that contain a `$` aren't accidentally (partially) expanded.
2. Ensure consistency across platforms for requirement files.

These points are the result of a discussion on the `github pull
request #3514 <https://github.com/pypa/pip/pull/3514>`_.

Valid characters in variable names follow the `POSIX standard
<http://pubs.opengroup.org/onlinepubs/9699919799/>`_ and are limited
to uppercase letter, digits and the `_` (underscore).
:::
:::{doc} get_file_content:550
Gets the content of a file; it may be a filename, file: URL, or
http: URL.  Returns (location, content).  Content is unicode.
Respects # -*- coding: declarations on the retrieved files.

:param url:         File path or url.
:param session:     PipSession instance.
:::
**Imports**: `logging`, `optparse`, `os`, `re`, `shlex`, `urllib.parse`, `optparse.Values`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Generator`, `typing.Iterable`, `typing.List`, `typing.NoReturn`, `typing.Optional`, `typing.Tuple`, `pip._internal.cli.cmdoptions`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.RequirementsFileParseError`, `pip._internal.models.search_scope.SearchScope`, `pip._internal.utils.encoding.auto_decode`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.network.session.PipSession`, `pip._internal.network.utils.raise_for_status`
**Type References**: [[List]], [[OptionParsingError]], [[ParsedLine]], [[ParsedRequirement]], [[ReqFileLines]], [[RequirementsFileParser]]

### Interface
- `parse_requirements`(filename: str, session: PipSession, finder: [Optional[PackageFinder]](#optional), options: [Optional[optparse.Values]](#optional), constraint: bool) -> Generator[<ast.Tuple object at 0x165ef0e50>]
- `preprocess`(content: str) -> ReqFileLines
- `handle_requirement_line`(line: ParsedLine, options: [Optional[optparse.Values]](#optional)) -> ParsedRequirement
- `handle_option_line`(opts: Values, filename: str, lineno: int, finder: [Optional[PackageFinder]](#optional), options: [Optional[optparse.Values]](#optional), session: [Optional[PipSession]](#optional)) -> None
- `handle_line`(line: ParsedLine, options: [Optional[optparse.Values]](#optional), finder: [Optional[PackageFinder]](#optional), session: [Optional[PipSession]](#optional)) -> [Optional[ParsedRequirement]](#optional)
- `get_line_parser`(finder: [Optional[PackageFinder]](#optional)) -> LineParser
- `break_args_options`(line: str) -> Tuple[<ast.Tuple object at 0x165f57a90>]
- `build_parser`() -> optparse.OptionParser
- `join_lines`(lines_enum: ReqFileLines) -> ReqFileLines
- `ignore_comments`(lines_enum: ReqFileLines) -> ReqFileLines
- `expand_env_variables`(lines_enum: ReqFileLines) -> ReqFileLines
- `get_file_content`(url: str, session: PipSession) -> Tuple[<ast.Tuple object at 0x165f80090>]
- `__init__`(msg: str) -> None
- `parse`(filename: str, constraint: bool) -> Generator[<ast.Tuple object at 0x165f397d0>]
- `_parse_and_recurse`(filename: str, constraint: bool, parsed_files_stack: [List[Dict[<ast.Tuple object at 0x165f3a0d0>]]](#list)) -> Generator[<ast.Tuple object at 0x165f43850>]
- `_parse_file`(filename: str, constraint: bool) -> Generator[<ast.Tuple object at 0x165f4e210>]
- `parse_line`(line: str) -> Tuple[<ast.Tuple object at 0x165f552d0>]
- `parser_exit`(self: Any, msg: str) -> NoReturn

### Implementation
**ParsedRequirement**

**ParsedLine**

**RequirementsFileParser**

**OptionParsingError**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/req/req_file.py`  
**Dependencies**: `logging`, `optparse`, `os`, `re`, `shlex`, `urllib.parse`, `optparse.Values`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Dict`, `typing.Generator`, `typing.Iterable`, `typing.List`, `typing.NoReturn`, `typing.Optional`, `typing.Tuple`, `pip._internal.cli.cmdoptions`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.RequirementsFileParseError`, `pip._internal.models.search_scope.SearchScope`, `pip._internal.utils.encoding.auto_decode`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.network.session.PipSession`, `pip._internal.network.utils.raise_for_status`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.req.constructors
:::{doc} _set_requirement_extras:62
Returns a new requirement based on the given one, with the supplied extras. If the
given requirement already has extras those are replaced (or dropped if no new extras
are given).
:::
:::{doc} parse_editable:87
Parses an editable requirement into:
    - a requirement name
    - an URL
    - extras
    - editable options
Accepted requirements:
    svn+http://blahblah@rev#egg=Foobar[baz]&subdirectory=version_subdir
    .[some_extra]
:::
:::{doc} check_first_requirement_in_file:142
Check if file is parsable as a requirements file.

This is heavily based on ``pkg_resources.parse_requirements``, but
simplified to just check the first meaningful line.

:raises InvalidRequirement: If the first meaningful line cannot be parsed
    as an requirement.
:::
:::{doc} deduce_helpful_msg:170
Returns helpful msg in case requirements file does not exist,
or cannot be parsed.

:params req: Requirements file path
:::
:::{doc} _looks_like_path:254
Checks whether the string "looks like" a path on the filesystem.

This does not check whether the target actually exists, only judge from the
appearance.

Returns true if any of the following conditions is true:
* a path separator is found (either os.path.sep or os.path.altsep);
* a dot is found (which represents the current directory).
:::
:::{doc} _get_url_from_path:273
First, it checks whether a provided path is an installable directory. If it
is, returns the path.

If false, check if the path is an archive file (such as a .whl).
The function checks if the path is a file. If false, if the path has
an @, it will treat it as a PEP 440 URL requirement and return the path.
:::
:::{doc} install_req_from_line:386
Creates an InstallRequirement from a name, which might be a
requirement, directory containing 'setup.py', filename, or URL.

:param line_source: An optional string describing where the line is from,
    for logging purposes in case of an error.
:::
:::{doc} install_req_drop_extras:519
Creates a new InstallationRequirement using the given template but without
any extras. Sets the original requirement as the new one's parent
(comes_from).
:::
:::{doc} install_req_extend_extras:545
Returns a copy of an installation requirement with some additional extras.
Makes a shallow copy of the ireq object.
:::
**Imports**: `copy`, `logging`, `os`, `re`, `dataclasses.dataclass`, `typing.Collection`, `typing.Dict`, `typing.List`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `typing.Union`, `pip._vendor.packaging.markers.Marker`, `pip._vendor.packaging.requirements.InvalidRequirement`, `pip._vendor.packaging.requirements.Requirement`, `pip._vendor.packaging.specifiers.Specifier`, `pip._internal.exceptions.InstallationError`, `pip._internal.models.index.PyPI`, `pip._internal.models.index.TestPyPI`, `pip._internal.models.link.Link`, `pip._internal.models.wheel.Wheel`, `pip._internal.req.req_file.ParsedRequirement`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.utils.filetypes.is_archive_file`, `pip._internal.utils.misc.is_installable_dir`, `pip._internal.utils.packaging.get_requirement`, `pip._internal.utils.urls.path_to_url`, `pip._internal.vcs.is_url`, `pip._internal.vcs.vcs`
**Type References**: [[Optional]], [[RequirementParts]], [[Set]]

### Interface
- `_strip_extras`(path: str) -> Tuple[<ast.Tuple object at 0x165f97090>]
- `convert_extras`(extras: [Optional[str]](#optional)) -> Set[str]
- `_set_requirement_extras`(req: Requirement, new_extras: Set[str]) -> Requirement
- `parse_editable`(editable_req: str) -> Tuple[<ast.Tuple object at 0x165f889d0>]
- `check_first_requirement_in_file`(filename: str) -> None
- `deduce_helpful_msg`(req: str) -> str
- `parse_req_from_editable`(editable_req: str) -> RequirementParts
- `install_req_from_editable`(editable_req: str, comes_from: [Optional[Union[<ast.Tuple object at 0x165fa3010>]]](#optional)) -> InstallRequirement
- `_looks_like_path`(name: str) -> bool
- `_get_url_from_path`(path: str, name: str) -> [Optional[str]](#optional)
- `parse_req_from_line`(name: str, line_source: [Optional[str]](#optional)) -> RequirementParts
- `install_req_from_line`(name: str, comes_from: [Optional[Union[<ast.Tuple object at 0x165ff0b10>]]](#optional)) -> InstallRequirement
- `install_req_from_req_string`(req_string: str, comes_from: [Optional[InstallRequirement]](#optional), isolated: bool, use_pep517: [Optional[bool]](#optional), user_supplied: bool) -> InstallRequirement
- `install_req_from_parsed_requirement`(parsed_req: ParsedRequirement, isolated: bool, use_pep517: [Optional[bool]](#optional), user_supplied: bool, config_settings: [Optional[Dict[<ast.Tuple object at 0x165fff7d0>]]](#optional)) -> InstallRequirement
- `install_req_from_link_and_ireq`(link: Link, ireq: InstallRequirement) -> InstallRequirement
- `install_req_drop_extras`(ireq: InstallRequirement) -> InstallRequirement
- `install_req_extend_extras`(ireq: InstallRequirement, extras: Collection[str]) -> InstallRequirement
- `with_source`(text: str) -> str
- `_parse_req_string`(req_as_string: str) -> Requirement

### Implementation
**RequirementParts**
  - requirement: Optional[Requirement]
  - link: Optional[Link]
  - markers: Optional[Marker]
  - extras: Set[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/req/constructors.py`  
**Dependencies**: `copy`, `logging`, `os`, `re`, `dataclasses.dataclass`, `typing.Collection`, `typing.Dict`, `typing.List`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `typing.Union`, `pip._vendor.packaging.markers.Marker`, `pip._vendor.packaging.requirements.InvalidRequirement`, `pip._vendor.packaging.requirements.Requirement`, `pip._vendor.packaging.specifiers.Specifier`, `pip._internal.exceptions.InstallationError`, `pip._internal.models.index.PyPI`, `pip._internal.models.index.TestPyPI`, `pip._internal.models.link.Link`, `pip._internal.models.wheel.Wheel`, `pip._internal.req.req_file.ParsedRequirement`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.utils.filetypes.is_archive_file`, `pip._internal.utils.misc.is_installable_dir`, `pip._internal.utils.packaging.get_requirement`, `pip._internal.utils.urls.path_to_url`, `pip._internal.vcs.is_url`, `pip._internal.vcs.vcs`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.resolution



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/resolution/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.resolution.base

**Imports**: `typing.Callable`, `typing.List`, `typing.Optional`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.req.req_set.RequirementSet`
**Type References**: [[BaseResolver]]

### Interface
- `resolve`(root_reqs: [List[InstallRequirement]](#list), check_supported_wheels: bool) -> RequirementSet
- `get_installation_order`(req_set: RequirementSet) -> [List[InstallRequirement]](#list)

### Implementation
**BaseResolver**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/resolution/base.py`  
**Dependencies**: `typing.Callable`, `typing.List`, `typing.Optional`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.req.req_set.RequirementSet`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.vcs.git

**Imports**: `logging`, `os.path`, `pathlib`, `re`, `urllib.parse`, `urllib.request`, `dataclasses.replace`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._internal.exceptions.BadCommand`, `pip._internal.exceptions.InstallationError`, `pip._internal.utils.misc.HiddenText`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.misc.hide_url`, `pip._internal.utils.subprocess.make_command`, `pip._internal.vcs.versioncontrol.AuthInfo`, `pip._internal.vcs.versioncontrol.RemoteNotFoundError`, `pip._internal.vcs.versioncontrol.RemoteNotValidError`, `pip._internal.vcs.versioncontrol.RevOptions`, `pip._internal.vcs.versioncontrol.VersionControl`, `pip._internal.vcs.versioncontrol.find_path_to_project_root_from_repo_root`, `pip._internal.vcs.versioncontrol.vcs`
**Type References**: [[Git]], [[Tuple]]

### Interface
- `looks_like_hash`(sha: str) -> bool
- `get_base_rev_args`(rev: str) -> [List[str]](#list)
- `is_immutable_rev_checkout`(url: str, dest: str) -> bool
- `get_git_version`() -> Tuple[<ast.Tuple object at 0x16603e090>]
- `get_current_branch`(location: str) -> [Optional[str]](#optional)
- `get_revision_sha`(dest: str, rev: str) -> Tuple[<ast.Tuple object at 0x166033590>]
- `_should_fetch`(dest: str, rev: str) -> bool
- `resolve_revision`(dest: str, url: HiddenText, rev_options: RevOptions) -> RevOptions
- `is_commit_id_equal`(dest: str, name: [Optional[str]](#optional)) -> bool
- `fetch_new`(dest: str, url: HiddenText, rev_options: RevOptions, verbosity: int) -> None
- `switch`(dest: str, url: HiddenText, rev_options: RevOptions) -> None
- `update`(dest: str, url: HiddenText, rev_options: RevOptions) -> None
- `get_remote_url`(location: str) -> str
- `_git_remote_to_pip_url`(url: str) -> str
- `has_commit`(location: str, rev: str) -> bool
- `get_revision`(location: str, rev: [Optional[str]](#optional)) -> str
- `get_subdirectory`(location: str) -> [Optional[str]](#optional)
- `get_url_rev_and_auth`(url: str) -> Tuple[<ast.Tuple object at 0x16609b890>]
- `update_submodules`(location: str) -> None
- `get_repository_root`(location: str) -> [Optional[str]](#optional)
- `should_add_vcs_url_prefix`(repo_url: str) -> bool

### Implementation
**Git**
  - flags: Tuple[<ast.Tuple object at 0x166072ad0>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/vcs/git.py`  
**Dependencies**: `logging`, `os.path`, `pathlib`, `re`, `urllib.parse`, `urllib.request`, `dataclasses.replace`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._internal.exceptions.BadCommand`, `pip._internal.exceptions.InstallationError`, `pip._internal.utils.misc.HiddenText`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.misc.hide_url`, `pip._internal.utils.subprocess.make_command`, `pip._internal.vcs.versioncontrol.AuthInfo`, `pip._internal.vcs.versioncontrol.RemoteNotFoundError`, `pip._internal.vcs.versioncontrol.RemoteNotValidError`, `pip._internal.vcs.versioncontrol.RevOptions`, `pip._internal.vcs.versioncontrol.VersionControl`, `pip._internal.vcs.versioncontrol.find_path_to_project_root_from_repo_root`, `pip._internal.vcs.versioncontrol.vcs`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.vcs

**Imports**: `pip._internal.vcs.bazaar`, `pip._internal.vcs.git`, `pip._internal.vcs.mercurial`, `pip._internal.vcs.subversion`, `pip._internal.vcs.versioncontrol.RemoteNotFoundError`, `pip._internal.vcs.versioncontrol.RemoteNotValidError`, `pip._internal.vcs.versioncontrol.is_url`, `pip._internal.vcs.versioncontrol.make_vcs_requirement_url`, `pip._internal.vcs.versioncontrol.vcs`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/vcs/__init__.py`  
**Dependencies**: `pip._internal.vcs.bazaar`, `pip._internal.vcs.git`, `pip._internal.vcs.mercurial`, `pip._internal.vcs.subversion`, `pip._internal.vcs.versioncontrol.RemoteNotFoundError`, `pip._internal.vcs.versioncontrol.RemoteNotValidError`, `pip._internal.vcs.versioncontrol.is_url`, `pip._internal.vcs.versioncontrol.make_vcs_requirement_url`, `pip._internal.vcs.versioncontrol.vcs`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.vcs.mercurial

**Imports**: `configparser`, `logging`, `os`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._internal.exceptions.BadCommand`, `pip._internal.exceptions.InstallationError`, `pip._internal.utils.misc.HiddenText`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.subprocess.make_command`, `pip._internal.utils.urls.path_to_url`, `pip._internal.vcs.versioncontrol.RevOptions`, `pip._internal.vcs.versioncontrol.VersionControl`, `pip._internal.vcs.versioncontrol.find_path_to_project_root_from_repo_root`, `pip._internal.vcs.versioncontrol.vcs`
**Type References**: [[Mercurial]], [[Tuple]]

### Interface
- `get_base_rev_args`(rev: str) -> [List[str]](#list)
- `fetch_new`(dest: str, url: HiddenText, rev_options: RevOptions, verbosity: int) -> None
- `switch`(dest: str, url: HiddenText, rev_options: RevOptions) -> None
- `update`(dest: str, url: HiddenText, rev_options: RevOptions) -> None
- `get_remote_url`(location: str) -> str
- `get_revision`(location: str) -> str
- `get_requirement_revision`(location: str) -> str
- `is_commit_id_equal`(dest: str, name: [Optional[str]](#optional)) -> bool
- `get_subdirectory`(location: str) -> [Optional[str]](#optional)
- `get_repository_root`(location: str) -> [Optional[str]](#optional)

### Implementation
**Mercurial**
  - flags: Tuple[<ast.Tuple object at 0x1660c02d0>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/vcs/mercurial.py`  
**Dependencies**: `configparser`, `logging`, `os`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._internal.exceptions.BadCommand`, `pip._internal.exceptions.InstallationError`, `pip._internal.utils.misc.HiddenText`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.subprocess.make_command`, `pip._internal.utils.urls.path_to_url`, `pip._internal.vcs.versioncontrol.RevOptions`, `pip._internal.vcs.versioncontrol.VersionControl`, `pip._internal.vcs.versioncontrol.find_path_to_project_root_from_repo_root`, `pip._internal.vcs.versioncontrol.vcs`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.vcs.bazaar

**Imports**: `logging`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._internal.utils.misc.HiddenText`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.subprocess.make_command`, `pip._internal.utils.urls.path_to_url`, `pip._internal.vcs.versioncontrol.AuthInfo`, `pip._internal.vcs.versioncontrol.RemoteNotFoundError`, `pip._internal.vcs.versioncontrol.RevOptions`, `pip._internal.vcs.versioncontrol.VersionControl`, `pip._internal.vcs.versioncontrol.vcs`
**Type References**: [[Bazaar]]

### Interface
- `get_base_rev_args`(rev: str) -> [List[str]](#list)
- `fetch_new`(dest: str, url: HiddenText, rev_options: RevOptions, verbosity: int) -> None
- `switch`(dest: str, url: HiddenText, rev_options: RevOptions) -> None
- `update`(dest: str, url: HiddenText, rev_options: RevOptions) -> None
- `get_url_rev_and_auth`(url: str) -> Tuple[<ast.Tuple object at 0x1660e2710>]
- `get_remote_url`(location: str) -> str
- `get_revision`(location: str) -> str
- `is_commit_id_equal`(dest: str, name: [Optional[str]](#optional)) -> bool

### Implementation
**Bazaar**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/vcs/bazaar.py`  
**Dependencies**: `logging`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._internal.utils.misc.HiddenText`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.subprocess.make_command`, `pip._internal.utils.urls.path_to_url`, `pip._internal.vcs.versioncontrol.AuthInfo`, `pip._internal.vcs.versioncontrol.RemoteNotFoundError`, `pip._internal.vcs.versioncontrol.RevOptions`, `pip._internal.vcs.versioncontrol.VersionControl`, `pip._internal.vcs.versioncontrol.vcs`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.vcs.versioncontrol
:::{doc} is_url:50
Return true if the name looks like a URL.
:::
:::{doc} make_vcs_requirement_url:60
Return the URL for a VCS requirement.

Args:
  repo_url: the remote VCS url, with any needed VCS prefix (e.g. "git+").
  project_name: the (unescaped) project name.
:::
:::{doc} find_path_to_project_root_from_repo_root:78
Find the the Python project's root by searching up the filesystem from
`location`. Return the path to project root relative to `repo_root`.
Return None if the project root is `repo_root`, or cannot be found.
:::
:::{doc} RevOptions:118
Encapsulates a VCS-specific revision to install, along with any VCS
install options.

Args:
    vc_class: a VersionControl subclass.
    rev: the name of the revision to install.
    extra_args: a list of extra options.
:::
**Imports**: `logging`, `os`, `shutil`, `sys`, `urllib.parse`, `dataclasses.dataclass`, `dataclasses.field`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Literal`, `typing.Mapping`, `typing.Optional`, `typing.Tuple`, `typing.Type`, `typing.Union`, `pip._internal.cli.spinners.SpinnerInterface`, `pip._internal.exceptions.BadCommand`, `pip._internal.exceptions.InstallationError`, `pip._internal.utils.misc.HiddenText`, `pip._internal.utils.misc.ask_path_exists`, `pip._internal.utils.misc.backup_dir`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.misc.hide_url`, `pip._internal.utils.misc.hide_value`, `pip._internal.utils.misc.is_installable_dir`, `pip._internal.utils.misc.rmtree`, `pip._internal.utils.subprocess.CommandArgs`, `pip._internal.utils.subprocess.call_subprocess`, `pip._internal.utils.subprocess.format_command_args`, `pip._internal.utils.subprocess.make_command`
**Type References**: [[CommandArgs]], [[Dict]], [[List]], [[Optional]], [[RemoteNotFoundError]], [[RemoteNotValidError]], [[RevOptions]], [[Tuple]], [[Type]], [[VcsSupport]], [[VersionControl]]

### Interface
- `is_url`(name: str) -> bool
- `make_vcs_requirement_url`(repo_url: str, rev: str, project_name: str, subdir: [Optional[str]](#optional)) -> str
- `find_path_to_project_root_from_repo_root`(location: str, repo_root: str) -> [Optional[str]](#optional)
- `__init__`() -> None
- `__repr__`() -> str
- `arg_rev`() -> [Optional[str]](#optional)
- `to_args`() -> CommandArgs
- `to_display`() -> str
- `make_new`(rev: str) -> RevOptions
- `__iter__`() -> Iterator[str]
- `backends`() -> [List[VersionControl]](#list)
- `dirnames`() -> [List[str]](#list)
- `all_schemes`() -> [List[str]](#list)
- `register`(cls: Type[VersionControl]) -> None
- `unregister`(name: str) -> None
- `get_backend_for_dir`(location: str) -> [Optional[VersionControl]](#optional)
- `get_backend_for_scheme`(scheme: str) -> [Optional[VersionControl]](#optional)
- `get_backend`(name: str) -> [Optional[VersionControl]](#optional)
- `should_add_vcs_url_prefix`(remote_url: str) -> bool
- `get_subdirectory`(location: str) -> [Optional[str]](#optional)
- `get_requirement_revision`(repo_dir: str) -> str
- `get_src_requirement`(repo_dir: str, project_name: str) -> str
- `get_base_rev_args`(rev: str) -> [List[str]](#list)
- `is_immutable_rev_checkout`(url: str, dest: str) -> bool
- `make_rev_options`(rev: [Optional[str]](#optional), extra_args: [Optional[CommandArgs]](#optional)) -> RevOptions
- `_is_local_repository`(repo: str) -> bool
- `get_netloc_and_auth`(netloc: str, scheme: str) -> Tuple[<ast.Tuple object at 0x16615ba50>]
- `get_url_rev_and_auth`(url: str) -> Tuple[<ast.Tuple object at 0x166163bd0>]
- `make_rev_args`(username: [Optional[str]](#optional), password: [Optional[HiddenText]](#optional)) -> CommandArgs
- `get_url_rev_options`(url: HiddenText) -> Tuple[<ast.Tuple object at 0x16616ef50>]
- `normalize_url`(url: str) -> str
- `compare_urls`(url1: str, url2: str) -> bool
- `fetch_new`(dest: str, url: HiddenText, rev_options: RevOptions, verbosity: int) -> None
- `switch`(dest: str, url: HiddenText, rev_options: RevOptions) -> None
- `update`(dest: str, url: HiddenText, rev_options: RevOptions) -> None
- `is_commit_id_equal`(dest: str, name: [Optional[str]](#optional)) -> bool
- `obtain`(dest: str, url: HiddenText, verbosity: int) -> None
- `unpack`(location: str, url: HiddenText, verbosity: int) -> None
- `get_remote_url`(location: str) -> str
- `get_revision`(location: str) -> str
- `run_command`(cmd: [Union[<ast.Tuple object at 0x16619b490>]](#union), show_stdout: bool, cwd: [Optional[str]](#optional), on_returncode: Literal["raise", "warn", "ignore"], extra_ok_returncodes: [Optional[Iterable[int]]](#optional), command_desc: [Optional[str]](#optional), extra_environ: [Optional[Mapping[<ast.Tuple object at 0x1661a0310>]]](#optional), spinner: [Optional[SpinnerInterface]](#optional), log_failed_cmd: bool, stdout_only: bool) -> str
- `is_repository_directory`(path: str) -> bool
- `get_repository_root`(location: str) -> [Optional[str]](#optional)

### Implementation
**RemoteNotFoundError**

**RemoteNotValidError**

**RevOptions**
  - vc_class: Type[VersionControl]
  - rev: Optional[str]
  - extra_args: CommandArgs
  - branch_name: Optional[str]
  - args: CommandArgs
**VcsSupport**
  - _registry: Dict[<ast.Tuple object at 0x16610cf10>]
  - schemes: List[str]
**VersionControl**
  - schemes: Tuple[<ast.Tuple object at 0x166120fd0>]
  - unset_environ: Tuple[<ast.Tuple object at 0x166120b50>]
  - default_arg_rev: Optional[str]
  - password: Optional[HiddenText]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/vcs/versioncontrol.py`  
**Dependencies**: `logging`, `os`, `shutil`, `sys`, `urllib.parse`, `dataclasses.dataclass`, `dataclasses.field`, `typing.Any`, `typing.Dict`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Literal`, `typing.Mapping`, `typing.Optional`, `typing.Tuple`, `typing.Type`, `typing.Union`, `pip._internal.cli.spinners.SpinnerInterface`, `pip._internal.exceptions.BadCommand`, `pip._internal.exceptions.InstallationError`, `pip._internal.utils.misc.HiddenText`, `pip._internal.utils.misc.ask_path_exists`, `pip._internal.utils.misc.backup_dir`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.misc.hide_url`, `pip._internal.utils.misc.hide_value`, `pip._internal.utils.misc.is_installable_dir`, `pip._internal.utils.misc.rmtree`, `pip._internal.utils.subprocess.CommandArgs`, `pip._internal.utils.subprocess.call_subprocess`, `pip._internal.utils.subprocess.format_command_args`, `pip._internal.utils.subprocess.make_command`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.vcs.subversion

**Imports**: `logging`, `os`, `re`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._internal.utils.misc.HiddenText`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.misc.is_console_interactive`, `pip._internal.utils.misc.is_installable_dir`, `pip._internal.utils.misc.split_auth_from_netloc`, `pip._internal.utils.subprocess.CommandArgs`, `pip._internal.utils.subprocess.make_command`, `pip._internal.vcs.versioncontrol.AuthInfo`, `pip._internal.vcs.versioncontrol.RemoteNotFoundError`, `pip._internal.vcs.versioncontrol.RevOptions`, `pip._internal.vcs.versioncontrol.VersionControl`, `pip._internal.vcs.versioncontrol.vcs`, `pip._internal.exceptions.InstallationError`
**Type References**: [[CommandArgs]], [[Subversion]]

### Interface
- `should_add_vcs_url_prefix`(remote_url: str) -> bool
- `get_base_rev_args`(rev: str) -> [List[str]](#list)
- `get_revision`(location: str) -> str
- `get_netloc_and_auth`(netloc: str, scheme: str) -> Tuple[<ast.Tuple object at 0x1661baa90>]
- `get_url_rev_and_auth`(url: str) -> Tuple[<ast.Tuple object at 0x1661b8b90>]
- `make_rev_args`(username: [Optional[str]](#optional), password: [Optional[HiddenText]](#optional)) -> CommandArgs
- `get_remote_url`(location: str) -> str
- `_get_svn_url_rev`(location: str) -> Tuple[<ast.Tuple object at 0x1661e7210>]
- `is_commit_id_equal`(dest: str, name: [Optional[str]](#optional)) -> bool
- `__init__`(use_interactive: [Optional[bool]](#optional)) -> None
- `call_vcs_version`() -> Tuple[<ast.Tuple object at 0x1661fc210>]
- `get_vcs_version`() -> Tuple[<ast.Tuple object at 0x1661fd4d0>]
- `get_remote_call_options`() -> CommandArgs
- `fetch_new`(dest: str, url: HiddenText, rev_options: RevOptions, verbosity: int) -> None
- `switch`(dest: str, url: HiddenText, rev_options: RevOptions) -> None
- `update`(dest: str, url: HiddenText, rev_options: RevOptions) -> None

### Implementation
**Subversion**
  - extra_args: CommandArgs
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/vcs/subversion.py`  
**Dependencies**: `logging`, `os`, `re`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._internal.utils.misc.HiddenText`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.misc.is_console_interactive`, `pip._internal.utils.misc.is_installable_dir`, `pip._internal.utils.misc.split_auth_from_netloc`, `pip._internal.utils.subprocess.CommandArgs`, `pip._internal.utils.subprocess.make_command`, `pip._internal.vcs.versioncontrol.AuthInfo`, `pip._internal.vcs.versioncontrol.RemoteNotFoundError`, `pip._internal.vcs.versioncontrol.RevOptions`, `pip._internal.vcs.versioncontrol.VersionControl`, `pip._internal.vcs.versioncontrol.vcs`, `pip._internal.exceptions.InstallationError`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.locations
:::{doc} _should_use_sysconfig:46
This function determines the value of _USE_SYSCONFIG.

By default, pip uses sysconfig on Python 3.10+.
But Python distributors can override this decision by setting:
    sysconfig._PIP_USE_SYSCONFIG = True / False
Rationale in https://github.com/pypa/pip/issues/10647

This is a function for testability, but should be constant during any one
run.
:::
:::{doc} _looks_like_bpo_44860:76
The resolution to bpo-44860 will change this incorrect platlib.

See <https://bugs.python.org/issue44860>.
:::
:::{doc} _looks_like_red_hat_lib:101
Red Hat patches platlib in unix_prefix and unix_home, but not purelib.

This is the only way I can see to tell a Red Hat-patched Python.
:::
:::{doc} _looks_like_debian_scheme:116
Debian adds two additional schemes.
:::
:::{doc} _looks_like_red_hat_scheme:124
Red Hat patches ``sys.prefix`` and ``sys.exec_prefix``.

Red Hat's ``00251-change-user-install-location.patch`` changes the install
command's ``prefix`` and ``exec_prefix`` to append ``"/local"``. This is
(fortunately?) done quite unconditionally, so we create a default command
object without any configuration to detect this.
:::
:::{doc} _looks_like_slackware_scheme:144
Slackware patches sysconfig but fails to patch distutils and site.

Slackware changes sysconfig's user scheme to use ``"lib64"`` for the lib
path, but does not do the same to the site module.
:::
:::{doc} _looks_like_msys2_mingw_scheme:160
MSYS2 patches distutils and sysconfig to use a UNIX-like scheme.

However, MSYS2 incorrectly patches sysconfig ``nt`` scheme. The fix is
likely going to be included in their 3.10 release, so we ignore the warning.
See msys2/MINGW-packages#9319.

MSYS2 MINGW's patch uses lowercase ``"lib"`` instead of the usual uppercase,
and is missing the final ``"site-packages"``.
:::
:::{doc} _looks_like_deb_system_dist_packages:412
Check if the value is Debian's APT-controlled dist-packages.

Debian's ``distutils.sysconfig.get_python_lib()`` implementation returns the
default package path controlled by APT, but does not patch ``sysconfig`` to
do the same. This is similar to the bug worked around in ``get_scheme()``,
but here the default is ``deb_system`` instead of ``unix_local``. Ultimately
we can't do anything about this Debian bug, and this detection allows us to
skip the warning when needed.
:::
:::{doc} get_purelib:429
Return the default pure-Python lib location.
:::
:::{doc} get_platlib:443
Return the default platform-shared lib location.
:::
**Imports**: `functools`, `logging`, `os`, `pathlib`, `sys`, `sysconfig`, `typing.Any`, `typing.Dict`, `typing.Generator`, `typing.Optional`, `typing.Tuple`, `pip._internal.models.scheme.SCHEME_KEYS`, `pip._internal.models.scheme.Scheme`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.deprecation.deprecated`, `pip._internal.utils.virtualenv.running_under_virtualenv`, `_sysconfig`, `base.USER_CACHE_DIR`, `base.get_major_minor_version`, `base.get_src_prefix`, `base.is_osx_framework`, `base.site_packages`, `base.user_site`, `_distutils`, `distutils.command.install.INSTALL_SCHEMES`, `distutils.command.install.INSTALL_SCHEMES`, `distutils.command.install.INSTALL_SCHEMES`, `distutils.command.install.install`, `distutils.dist.Distribution`, `_distutils`
**Type References**: [[Any]]

### Interface
- `_should_use_sysconfig`() -> bool
- `_looks_like_bpo_44860`() -> bool
- `_looks_like_red_hat_patched_platlib_purelib`(scheme: [Dict[<ast.Tuple object at 0x166222610>]](#dict)) -> bool
- `_looks_like_red_hat_lib`() -> bool
- `_looks_like_debian_scheme`() -> bool
- `_looks_like_red_hat_scheme`() -> bool
- `_looks_like_slackware_scheme`() -> bool
- `_looks_like_msys2_mingw_scheme`() -> bool
- `_fix_abiflags`(parts: Tuple[str]) -> Generator[<ast.Tuple object at 0x16623a990>]
- `_warn_mismatched`(old: pathlib.Path, new: pathlib.Path) -> None
- `_warn_if_mismatch`(old: pathlib.Path, new: pathlib.Path) -> bool
- `_log_context`() -> None
- `get_scheme`(dist_name: str, user: bool, home: [Optional[str]](#optional), root: [Optional[str]](#optional), isolated: bool, prefix: [Optional[str]](#optional)) -> Scheme
- `get_bin_prefix`() -> str
- `get_bin_user`() -> str
- `_looks_like_deb_system_dist_packages`(value: str) -> bool
- `get_purelib`() -> str
- `get_platlib`() -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/locations/__init__.py`  
**Dependencies**: `functools`, `logging`, `os`, `pathlib`, `sys`, `sysconfig`, `typing.Any`, `typing.Dict`, `typing.Generator`, `typing.Optional`, `typing.Tuple`, `pip._internal.models.scheme.SCHEME_KEYS`, `pip._internal.models.scheme.Scheme`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.deprecation.deprecated`, `pip._internal.utils.virtualenv.running_under_virtualenv`, `_sysconfig`, `base.USER_CACHE_DIR`, `base.get_major_minor_version`, `base.get_src_prefix`, `base.is_osx_framework`, `base.site_packages`, `base.user_site`, `_distutils`, `distutils.command.install.INSTALL_SCHEMES`, `distutils.command.install.INSTALL_SCHEMES`, `distutils.command.install.INSTALL_SCHEMES`, `distutils.command.install.install`, `distutils.dist.Distribution`, `_distutils`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.locations._sysconfig
:::{doc} _should_use_osx_framework_prefix:29
Check for Apple's ``osx_framework_library`` scheme.

Python distributed by Apple's Command Line Tools has this special scheme
that's used when:

* This is a framework build.
* We are installing into the system prefix.

This does not account for ``pip install --prefix`` (also means we're not
installing to the system prefix), which should use ``posix_prefix``, but
logic here means ``_infer_prefix()`` outputs ``osx_framework_library``. But
since ``prefix`` is not available for ``sysconfig.get_default_scheme()``,
which is the stdlib replacement for ``_infer_prefix()``, presumably Apple
wouldn't be able to magically switch between ``osx_framework_library`` and
``posix_prefix``. ``_infer_prefix()`` returning ``osx_framework_library``
means its behavior is consistent whether we use the stdlib implementation
or our own, and we deal with this special case in ``get_scheme()`` instead.
:::
:::{doc} _infer_prefix:55
Try to find a prefix scheme for the current platform.

This tries:

* A special ``osx_framework_library`` for Python distributed by Apple's
  Command Line Tools, when not running in a virtual environment.
* Implementation + OS, used by PyPy on Windows (``pypy_nt``).
* Implementation without OS, used by PyPy on POSIX (``pypy``).
* OS + "prefix", used by CPython on POSIX (``posix_prefix``).
* Just the OS name, used by CPython on Windows (``nt``).

If none of the above works, fall back to ``posix_prefix``.
:::
:::{doc} _infer_user:86
Try to find a user scheme for the current platform.
:::
:::{doc} _infer_home:101
Try to find a home for the current platform.
:::
:::{doc} get_scheme:124
Get the "scheme" corresponding to the input parameters.

:param dist_name: the name of the package to retrieve the scheme for, used
    in the headers scheme path
:param user: indicates to use the "user" scheme
:param home: indicates to use the "home" scheme
:param root: root under which other directories are re-based
:param isolated: ignored, but kept for distutils compatibility (where
    this controls whether the user-site pydistutils.cfg is honored)
:param prefix: indicates to use the "prefix" scheme and provides the
    base directory for the same
:::
**Imports**: `logging`, `os`, `sys`, `sysconfig`, `typing`, `pip._internal.exceptions.InvalidSchemeCombination`, `pip._internal.exceptions.UserInstallationInvalid`, `pip._internal.models.scheme.SCHEME_KEYS`, `pip._internal.models.scheme.Scheme`, `pip._internal.utils.virtualenv.running_under_virtualenv`, `base.change_root`, `base.get_major_minor_version`, `base.is_osx_framework`
### Interface
- `_should_use_osx_framework_prefix`() -> bool
- `_infer_prefix`() -> str
- `_infer_user`() -> str
- `_infer_home`() -> str
- `get_scheme`(dist_name: str, user: bool, home: typing.Optional[str], root: typing.Optional[str], isolated: bool, prefix: typing.Optional[str]) -> Scheme
- `get_bin_prefix`() -> str
- `get_purelib`() -> str
- `get_platlib`() -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/locations/_sysconfig.py`  
**Dependencies**: `logging`, `os`, `sys`, `sysconfig`, `typing`, `pip._internal.exceptions.InvalidSchemeCombination`, `pip._internal.exceptions.UserInstallationInvalid`, `pip._internal.models.scheme.SCHEME_KEYS`, `pip._internal.models.scheme.Scheme`, `pip._internal.utils.virtualenv.running_under_virtualenv`, `base.change_root`, `base.get_major_minor_version`, `base.is_osx_framework`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.locations._distutils
:::{doc} distutils_scheme:35
Return a distutils install scheme
:::
:::{doc} get_scheme:115
Get the "scheme" corresponding to the input parameters. The distutils
documentation provides the context for the available schemes:
https://docs.python.org/3/install/index.html#alternate-installation

:param dist_name: the name of the package to retrieve the scheme for, used
    in the headers scheme path
:param user: indicates to use the "user" scheme
:param home: indicates to use the "home" scheme and provides the base
    directory for the same
:param root: root under which other directories are re-based
:param isolated: equivalent to --no-user-cfg, i.e. do not consider
    ~/.pydistutils.cfg (posix) or ~/pydistutils.cfg (non-posix) for
    scheme paths
:param prefix: indicates to use the "prefix" scheme and provides the
    base directory for the same
:::
**Imports**: `logging`, `os`, `sys`, `distutils.cmd.Command`, `distutils.command.install.SCHEME_KEYS`, `distutils.command.install.install`, `distutils.sysconfig.get_python_lib`, `typing.Dict`, `typing.List`, `typing.Optional`, `typing.Union`, `pip._internal.models.scheme.Scheme`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.virtualenv.running_under_virtualenv`, `base.get_major_minor_version`, `distutils.dist.Distribution`
**Type References**: [[Dict]], [[Optional]]

### Interface
- `distutils_scheme`(dist_name: str, user: bool, home: [Optional[str]](#optional), root: [Optional[str]](#optional), isolated: bool, prefix: [Optional[str]](#optional)) -> [Dict[<ast.Tuple object at 0x1662c9090>]](#dict)
- `get_scheme`(dist_name: str, user: bool, home: [Optional[str]](#optional), root: [Optional[str]](#optional), isolated: bool, prefix: [Optional[str]](#optional)) -> Scheme
- `get_bin_prefix`() -> str
- `get_purelib`() -> str
- `get_platlib`() -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/locations/_distutils.py`  
**Dependencies**: `logging`, `os`, `sys`, `distutils.cmd.Command`, `distutils.command.install.SCHEME_KEYS`, `distutils.command.install.install`, `distutils.sysconfig.get_python_lib`, `typing.Dict`, `typing.List`, `typing.Optional`, `typing.Union`, `pip._internal.models.scheme.Scheme`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.virtualenv.running_under_virtualenv`, `base.get_major_minor_version`, `distutils.dist.Distribution`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.locations.base
:::{doc} get_major_minor_version:19
Return the major-minor version of the current Python as a string, e.g.
"3.7" or "3.10".
:::
:::{doc} change_root:27
Return 'pathname' with 'new_root' prepended.

If 'pathname' is relative, this is equivalent to os.path.join(new_root, pathname).
Otherwise, it requires making 'pathname' relative and then joining the
two, which is tricky on DOS/Windows and Mac OS.

This is borrowed from Python's standard library's distutils module.
:::
**Imports**: `functools`, `os`, `site`, `sys`, `sysconfig`, `typing`, `pip._internal.exceptions.InstallationError`, `pip._internal.utils.appdirs`, `pip._internal.utils.virtualenv.running_under_virtualenv`
**Type References**: [[Optional]], [[typing.Optional]]

### Interface
- `get_major_minor_version`() -> str
- `change_root`(new_root: str, pathname: str) -> str
- `get_src_prefix`() -> str
- `is_osx_framework`() -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/locations/base.py`  
**Dependencies**: `functools`, `os`, `site`, `sys`, `sysconfig`, `typing`, `pip._internal.exceptions.InstallationError`, `pip._internal.utils.appdirs`, `pip._internal.utils.virtualenv.running_under_virtualenv`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.index.collector
:::{doc} _match_vcs_scheme:51
Look for VCS schemes in the URL.

Returns the matched VCS scheme, or None if there's no match.
:::
:::{doc} _ensure_api_header:69
Check the Content-Type header to ensure the response contains a Simple
API Response.

Raises `_NotAPIContent` if the content type is not a valid content-type.
:::
:::{doc} _ensure_api_response:95
Send a HEAD request to the URL, and ensure the response contains a simple
API Response.

Raises `_NotHTTP` if the URL is not available for a HEAD request, or
`_NotAPIContent` if the content type is not a valid content type.
:::
:::{doc} _get_simple_response:113
Access an Simple API response with GET, and return the response.

This consists of three parts:

1. If the URL looks suspiciously like an archive, send a HEAD first to
   check the Content-Type is HTML or Simple API, to avoid downloading a
   large file. Raise `_NotHTTP` if the content type cannot be determined, or
   `_NotAPIContent` if it is not HTML or a Simple API.
2. Actually perform the request. Raise HTTP exceptions on network failures.
3. Check the Content-Type header to make sure we got a Simple API response,
   and raise `_NotAPIContent` otherwise.
:::
:::{doc} _get_encoding_from_headers:176
Determine if we have any encoding information in our headers.
:::
:::{doc} with_cached_index_content:203
Given a function that parses an Iterable[Link] from an IndexContent, cache the
function's result (keyed by CacheablePageContent), unless the IndexContent
`page` has `page.cache_link_parsing == False`.
:::
:::{doc} parse_links:224
Parse a Simple API's Index Content, and yield its anchor elements as Link objects.
:::
:::{doc} IndexContent:253
Represents one response (or page), along with its URL.

:param encoding: the encoding to decode the given content.
:param url: the URL from which the HTML was downloaded.
:param cache_link_parsing: whether links parsed from this page's url
                           should be cached. PyPI index urls should
                           have this set to False, for example.
:::
:::{doc} HTMLLinkParser:273
HTMLParser that keeps the first base HREF and a list of all anchor
elements' attributes.
:::
:::{doc} LinkCollector:390
Responsible for collecting Link objects from all configured locations,
making network requests as needed.

The class's main method is its collect_sources() method.
:::
**Imports**: `collections`, `email.message`, `functools`, `itertools`, `json`, `logging`, `os`, `urllib.parse`, `urllib.request`, `dataclasses.dataclass`, `html.parser.HTMLParser`, `optparse.Values`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.MutableMapping`, `typing.NamedTuple`, `typing.Optional`, `typing.Protocol`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `pip._vendor.requests`, `pip._vendor.requests.Response`, `pip._vendor.requests.exceptions.RetryError`, `pip._vendor.requests.exceptions.SSLError`, `pip._internal.exceptions.NetworkConnectionError`, `pip._internal.models.link.Link`, `pip._internal.models.search_scope.SearchScope`, `pip._internal.network.session.PipSession`, `pip._internal.network.utils.raise_for_status`, `pip._internal.utils.filetypes.is_archive_file`, `pip._internal.utils.misc.redact_auth_from_url`, `pip._internal.vcs.vcs`, `sources.CandidatesFromPage`, `sources.LinkSource`, `sources.build_source`
**Type References**: [[CacheablePageContent]], [[CollectedSources]], [[HTMLLinkParser]], [[IndexContent]], [[LinkCollector]], [[Optional]], [[ParseLinks]], [[Sequence]], [[_NotAPIContent]], [[_NotHTTP]]

### Interface
- `_match_vcs_scheme`(url: str) -> [Optional[str]](#optional)
- `_ensure_api_header`(response: Response) -> None
- `_ensure_api_response`(url: str, session: PipSession) -> None
- `_get_simple_response`(url: str, session: PipSession) -> Response
- `_get_encoding_from_headers`(headers: ResponseHeaders) -> [Optional[str]](#optional)
- `with_cached_index_content`(fn: ParseLinks) -> ParseLinks
- `parse_links`(page: IndexContent) -> Iterable[Link]
- `_handle_get_simple_fail`(link: Link, reason: [Union[<ast.Tuple object at 0x16630a050>]](#union), meth: [Optional[Callable[<ast.Tuple object at 0x166309c10>]]](#optional)) -> None
- `_make_index_content`(response: Response, cache_link_parsing: bool) -> IndexContent
- `_get_index_content`(link: Link) -> [Optional[IndexContent]](#optional)
- `__init__`(session: PipSession, search_scope: SearchScope) -> None
- `__eq__`(other: object) -> bool
- `__hash__`() -> int
- `__call__`(page: IndexContent) -> Iterable[Link]
- `wrapper`(cacheable_page: CacheablePageContent) -> [List[Link]](#list)
- `wrapper_wrapper`(page: IndexContent) -> [List[Link]](#list)
- `__str__`() -> str
- `handle_starttag`(tag: str, attrs: [List[Tuple[<ast.Tuple object at 0x16631d390>]]](#list)) -> None
- `get_href`(attrs: [List[Tuple[<ast.Tuple object at 0x16630b2d0>]]](#list)) -> [Optional[str]](#optional)
- `create`(session: PipSession, options: Values, suppress_no_index: bool) -> LinkCollector
- `find_links`() -> [List[str]](#list)
- `fetch_response`(location: Link) -> [Optional[IndexContent]](#optional)
- `collect_sources`(project_name: str, candidates_from_page: CandidatesFromPage) -> CollectedSources

### Implementation
**_NotAPIContent**

**_NotHTTP**

**CacheablePageContent**

**ParseLinks**

**IndexContent**
  - content: bytes
  - content_type: str
  - encoding: Optional[str]
  - url: str
  - cache_link_parsing: bool
**HTMLLinkParser**

**CollectedSources**
  - find_links: Sequence[Optional[LinkSource]]
  - index_urls: Sequence[Optional[LinkSource]]
**LinkCollector**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/index/collector.py`  
**Dependencies**: `collections`, `email.message`, `functools`, `itertools`, `json`, `logging`, `os`, `urllib.parse`, `urllib.request`, `dataclasses.dataclass`, `html.parser.HTMLParser`, `optparse.Values`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.MutableMapping`, `typing.NamedTuple`, `typing.Optional`, `typing.Protocol`, `typing.Sequence`, `typing.Tuple`, `typing.Union`, `pip._vendor.requests`, `pip._vendor.requests.Response`, `pip._vendor.requests.exceptions.RetryError`, `pip._vendor.requests.exceptions.SSLError`, `pip._internal.exceptions.NetworkConnectionError`, `pip._internal.models.link.Link`, `pip._internal.models.search_scope.SearchScope`, `pip._internal.network.session.PipSession`, `pip._internal.network.utils.raise_for_status`, `pip._internal.utils.filetypes.is_archive_file`, `pip._internal.utils.misc.redact_auth_from_url`, `pip._internal.vcs.vcs`, `sources.CandidatesFromPage`, `sources.LinkSource`, `sources.build_source`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.index



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/index/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.index.sources
:::{doc} _FlatDirectoryToUrls:47
Scans directory and caches results
:::
:::{doc} _FlatDirectorySource:94
Link source specified by ``--find-links=<path-to-dir>``.

This looks the content of the directory, and returns:

* ``page_candidates``: Links listed on each HTML file in the directory.
* ``file_candidates``: Archives in the directory.
:::
:::{doc} _LocalFileSource:134
``--find-links=<path-or-url>`` or ``--[extra-]index-url=<path-or-url>``.

If a URL is supplied, it must be a ``file:`` URL. If a path is supplied to
the option, it is converted to a URL first. This returns:

* ``page_candidates``: Links listed on an HTML file.
* ``file_candidates``: The non-HTML file.
:::
:::{doc} _RemoteFileSource:167
``--find-links=<url>`` or ``--[extra-]index-url=<url>``.

This returns:

* ``page_candidates``: Links listed on an HTML file.
* ``file_candidates``: The non-HTML file.
:::
:::{doc} _IndexDirectorySource:199
``--[extra-]index-url=<path-to-directory>``.

This is treated like a remote URL; ``candidates_from_page`` contains logic
for this by appending ``index.html`` to the link.
:::
**Imports**: `logging`, `mimetypes`, `os`, `collections.defaultdict`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._vendor.packaging.utils.InvalidSdistFilename`, `pip._vendor.packaging.utils.InvalidWheelFilename`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.utils.parse_sdist_filename`, `pip._vendor.packaging.utils.parse_wheel_filename`, `pip._internal.models.candidate.InstallationCandidate`, `pip._internal.models.link.Link`, `pip._internal.utils.urls.path_to_url`, `pip._internal.utils.urls.url_to_path`, `pip._internal.vcs.is_url`
**Type References**: [[Dict]], [[LinkSource]], [[Optional]], [[_FlatDirectorySource]], [[_FlatDirectoryToUrls]], [[_IndexDirectorySource]], [[_LocalFileSource]], [[_RemoteFileSource]]

### Interface
- `_is_html_file`(file_url: str) -> bool
- `build_source`(location: str) -> Tuple[<ast.Tuple object at 0x1663b0090>]
- `link`() -> [Optional[Link]](#optional)
- `page_candidates`() -> FoundCandidates
- `file_links`() -> FoundLinks
- `__init__`(candidates_from_page: CandidatesFromPage, link: Link) -> None
- `_scan_directory`() -> None
- `project_name_to_urls`() -> [Dict[<ast.Tuple object at 0x166370d10>]](#dict)

### Implementation
**LinkSource**

**_FlatDirectoryToUrls**

**_FlatDirectorySource**
  - _paths_to_urls: Dict[<ast.Tuple object at 0x1663704d0>]
**_LocalFileSource**

**_RemoteFileSource**

**_IndexDirectorySource**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/index/sources.py`  
**Dependencies**: `logging`, `mimetypes`, `os`, `collections.defaultdict`, `typing.Callable`, `typing.Dict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Tuple`, `pip._vendor.packaging.utils.InvalidSdistFilename`, `pip._vendor.packaging.utils.InvalidWheelFilename`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.utils.parse_sdist_filename`, `pip._vendor.packaging.utils.parse_wheel_filename`, `pip._internal.models.candidate.InstallationCandidate`, `pip._internal.models.link.Link`, `pip._internal.utils.urls.path_to_url`, `pip._internal.utils.urls.url_to_path`, `pip._internal.vcs.is_url`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.index.package_finder
:::{doc} _check_link_requires_python:52
Return whether the given Python version is compatible with a link's
"Requires-Python" value.

:param version_info: A 3-tuple of ints representing the Python
    major-minor-micro version to check.
:param ignore_requires_python: Whether to ignore the "Requires-Python"
    value if the given Python version isn't compatible.
:::
:::{doc} LinkEvaluator:109
Responsible for evaluating links for a particular project.
:::
:::{doc} filter_unallowed_hashes:252
Filter out candidates whose hashes aren't allowed, and return a new
list of candidates.

If at least one candidate has an allowed hash, then all candidates with
either an allowed hash or no hash specified are returned.  Otherwise,
the given candidates are returned.

Including the candidates with no hash specified when there is a match
allows a warning to be logged if there is a more preferred candidate
with no hash specified.  Returning all candidates in the case of no
matches lets pip report the hash of the candidate that would otherwise
have been installed (e.g. permitting the user to more easily update
their requirements file with the desired hash).
:::
:::{doc} CandidatePreferences:327
Encapsulates some of the preferences for filtering and sorting
InstallationCandidate objects.
:::
:::{doc} BestCandidateResult:337
A collection of candidates, returned by `PackageFinder.find_best_candidate`.

This class is only intended to be instantiated by CandidateEvaluator's
`compute_best_candidate()` method.
:::
:::{doc} CandidateEvaluator:377
Responsible for filtering and sorting candidates for installation based
on what tags are valid.
:::
:::{doc} PackageFinder:580
This finds packages.

This is meant to match easy_install's technique for looking for
packages, by reading pages and looking for appropriate links.
:::
:::{doc} _find_name_version_sep:979
Find the separator's index based on the package's canonical name.

:param fragment: A <package>+<version> filename "fragment" (stem) or
    egg fragment.
:param canonical_name: The package's canonical name.

This function is needed since the canonicalized name does not necessarily
have the same length as the egg info's name part. An example::

>>> fragment = 'foo__bar-1.0'
>>> canonical_name = 'foo-bar'
>>> _find_name_version_sep(fragment, canonical_name)
8
:::
:::{doc} _extract_version_from_fragment:1005
Parse the version string from a <package>+<version> filename
"fragment" (stem) or egg fragment.

:param fragment: The string to parse. E.g. foo-2.1
:param canonical_name: The canonicalized name of the package this
    belongs to.
:::
**Imports**: `enum`, `functools`, `itertools`, `logging`, `re`, `dataclasses.dataclass`, `typing.TYPE_CHECKING`, `typing.FrozenSet`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `typing.Union`, `pip._vendor.packaging.specifiers`, `pip._vendor.packaging.tags.Tag`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.InvalidVersion`, `pip._vendor.packaging.version._BaseVersion`, `pip._vendor.packaging.version.parse`, `pip._internal.exceptions.BestVersionAlreadyInstalled`, `pip._internal.exceptions.DistributionNotFound`, `pip._internal.exceptions.InvalidWheelFilename`, `pip._internal.exceptions.UnsupportedWheel`, `pip._internal.index.collector.LinkCollector`, `pip._internal.index.collector.parse_links`, `pip._internal.models.candidate.InstallationCandidate`, `pip._internal.models.format_control.FormatControl`, `pip._internal.models.link.Link`, `pip._internal.models.search_scope.SearchScope`, `pip._internal.models.selection_prefs.SelectionPreferences`, `pip._internal.models.target_python.TargetPython`, `pip._internal.models.wheel.Wheel`, `pip._internal.req.InstallRequirement`, `pip._internal.utils._log.getLogger`, `pip._internal.utils.filetypes.WHEEL_EXTENSION`, `pip._internal.utils.hashes.Hashes`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.build_netloc`, `pip._internal.utils.packaging.check_requires_python`, `pip._internal.utils.unpacking.SUPPORTED_EXTENSIONS`, `pip._vendor.typing_extensions.TypeGuard`
**Type References**: [[BestCandidateResult]], [[BuildTag]], [[CandidateEvaluator]], [[CandidatePreferences]], [[LinkEvaluator]], [[LinkType]], [[Optional]], [[PackageFinder]], [[Set]]

### Interface
- `_check_link_requires_python`(link: Link, version_info: Tuple[<ast.Tuple object at 0x1663f1150>], ignore_requires_python: bool) -> bool
- `filter_unallowed_hashes`(candidates: [List[InstallationCandidate]](#list), hashes: [Optional[Hashes]](#optional), project_name: str) -> [List[InstallationCandidate]](#list)
- `_find_name_version_sep`(fragment: str, canonical_name: str) -> int
- `_extract_version_from_fragment`(fragment: str, canonical_name: str) -> [Optional[str]](#optional)
- `__init__`(link_collector: LinkCollector, target_python: TargetPython, allow_yanked: bool, format_control: [Optional[FormatControl]](#optional), candidate_prefs: [Optional[CandidatePreferences]](#optional), ignore_requires_python: [Optional[bool]](#optional)) -> None
- `evaluate_link`(link: Link) -> Tuple[<ast.Tuple object at 0x1663b0610>]
- `iter_all`() -> Iterable[InstallationCandidate]
- `iter_applicable`() -> Iterable[InstallationCandidate]
- `create`(link_collector: LinkCollector, selection_prefs: SelectionPreferences, target_python: [Optional[TargetPython]](#optional)) -> PackageFinder
- `get_applicable_candidates`(candidates: [List[InstallationCandidate]](#list)) -> [List[InstallationCandidate]](#list)
- `_sort_key`(candidate: InstallationCandidate) -> CandidateSortingKey
- `sort_best_candidate`(candidates: [List[InstallationCandidate]](#list)) -> [Optional[InstallationCandidate]](#optional)
- `compute_best_candidate`(candidates: [List[InstallationCandidate]](#list)) -> BestCandidateResult
- `target_python`() -> TargetPython
- `search_scope`(search_scope: SearchScope) -> None
- `find_links`() -> [List[str]](#list)
- `index_urls`() -> [List[str]](#list)
- `trusted_hosts`() -> Iterable[str]
- `allow_all_prereleases`() -> bool
- `set_allow_all_prereleases`() -> None
- `prefer_binary`() -> bool
- `set_prefer_binary`() -> None
- `requires_python_skipped_reasons`() -> [List[str]](#list)
- `make_link_evaluator`(project_name: str) -> LinkEvaluator
- `_sort_links`(links: Iterable[Link]) -> [List[Link]](#list)
- `_log_skipped_link`(link: Link, result: LinkType, detail: str) -> None
- `get_install_candidate`(link_evaluator: LinkEvaluator, link: Link) -> [Optional[InstallationCandidate]](#optional)
- `evaluate_links`(link_evaluator: LinkEvaluator, links: Iterable[Link]) -> [List[InstallationCandidate]](#list)
- `process_project_url`(project_url: Link, link_evaluator: LinkEvaluator) -> [List[InstallationCandidate]](#list)
- `find_all_candidates`(project_name: str) -> [List[InstallationCandidate]](#list)
- `make_candidate_evaluator`(project_name: str, specifier: [Optional[specifiers.BaseSpecifier]](#optional), hashes: [Optional[Hashes]](#optional)) -> CandidateEvaluator
- `find_best_candidate`(project_name: str, specifier: [Optional[specifiers.BaseSpecifier]](#optional), hashes: [Optional[Hashes]](#optional)) -> BestCandidateResult
- `find_requirement`(req: InstallRequirement, upgrade: bool) -> [Optional[InstallationCandidate]](#optional)
- `_format_versions`(cand_iter: Iterable[InstallationCandidate]) -> str
- `_should_install_candidate`(candidate: [Optional[InstallationCandidate]](#optional)) -> TypeGuard[InstallationCandidate]

### Implementation
**LinkType**

**LinkEvaluator**

**CandidatePreferences**
  - prefer_binary: bool
  - allow_all_prereleases: bool
**BestCandidateResult**

**CandidateEvaluator**
  - build_tag: BuildTag
**PackageFinder**
  - seen: Set[Link]
  - installed_version: Optional[_BaseVersion]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/index/package_finder.py`  
**Dependencies**: `enum`, `functools`, `itertools`, `logging`, `re`, `dataclasses.dataclass`, `typing.TYPE_CHECKING`, `typing.FrozenSet`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `typing.Union`, `pip._vendor.packaging.specifiers`, `pip._vendor.packaging.tags.Tag`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.InvalidVersion`, `pip._vendor.packaging.version._BaseVersion`, `pip._vendor.packaging.version.parse`, `pip._internal.exceptions.BestVersionAlreadyInstalled`, `pip._internal.exceptions.DistributionNotFound`, `pip._internal.exceptions.InvalidWheelFilename`, `pip._internal.exceptions.UnsupportedWheel`, `pip._internal.index.collector.LinkCollector`, `pip._internal.index.collector.parse_links`, `pip._internal.models.candidate.InstallationCandidate`, `pip._internal.models.format_control.FormatControl`, `pip._internal.models.link.Link`, `pip._internal.models.search_scope.SearchScope`, `pip._internal.models.selection_prefs.SelectionPreferences`, `pip._internal.models.target_python.TargetPython`, `pip._internal.models.wheel.Wheel`, `pip._internal.req.InstallRequirement`, `pip._internal.utils._log.getLogger`, `pip._internal.utils.filetypes.WHEEL_EXTENSION`, `pip._internal.utils.hashes.Hashes`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.build_netloc`, `pip._internal.utils.packaging.check_requires_python`, `pip._internal.utils.unpacking.SUPPORTED_EXTENSIONS`, `pip._vendor.typing_extensions.TypeGuard`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.configuration
:::{doc} ConfigurationCommand:22
Manage local and global configuration.

Subcommands:

- list: List the active configuration (or from the file specified)
- edit: Edit the configuration file in an editor
- get: Get the value associated with command.option
- set: Set the command.option=value
- unset: Unset the value associated with command.option
- debug: List the configuration files and values defined under them

Configuration keys should be dot separated command and option name,
with the special prefix "global" affecting any command. For example,
"pip config set global.index-url https://example.org/" would configure
the index url for all commands, but "pip config set download.timeout 10"
would configure a 10 second timeout only for "pip download" commands.

If none of --user, --global and --site are passed, a virtual
environment configuration file is used if one is active and the file
exists. Otherwise, all modifications happen to the user file by
default.
:::
**Imports**: `logging`, `os`, `subprocess`, `optparse.Values`, `typing.Any`, `typing.List`, `typing.Optional`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.configuration.Configuration`, `pip._internal.configuration.Kind`, `pip._internal.configuration.get_configuration_files`, `pip._internal.configuration.kinds`, `pip._internal.exceptions.PipError`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.get_prog`, `pip._internal.utils.misc.write_output`
**Type References**: [[ConfigurationCommand]]

### Interface
- `add_options`() -> None
- `run`(options: Values, args: [List[str]](#list)) -> int
- `_determine_file`(options: Values, need_value: bool) -> [Optional[Kind]](#optional)
- `list_values`(options: Values, args: [List[str]](#list)) -> None
- `get_name`(options: Values, args: [List[str]](#list)) -> None
- `set_name_value`(options: Values, args: [List[str]](#list)) -> None
- `unset_name`(options: Values, args: [List[str]](#list)) -> None
- `list_config_values`(options: Values, args: [List[str]](#list)) -> None
- `print_config_file_values`(variant: Kind) -> None
- `print_env_var_values`() -> None
- `open_in_editor`(options: Values, args: [List[str]](#list)) -> None
- `_get_n_args`(args: [List[str]](#list), example: str, n: int) -> Any
- `_save_configuration`() -> None
- `_determine_editor`(options: Values) -> str

### Implementation
**ConfigurationCommand**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/configuration.py`  
**Dependencies**: `logging`, `os`, `subprocess`, `optparse.Values`, `typing.Any`, `typing.List`, `typing.Optional`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.configuration.Configuration`, `pip._internal.configuration.Kind`, `pip._internal.configuration.get_configuration_files`, `pip._internal.configuration.kinds`, `pip._internal.exceptions.PipError`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.get_prog`, `pip._internal.utils.misc.write_output`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.show
:::{doc} ShowCommand:16
Show information about one or more installed packages.

The output is in RFC-compliant mail header format.
:::
:::{doc} search_packages_info:73
Gather details from installed distributions. Print distribution name,
version, location, and installed files. Installed files requires a
pip generated 'installed-files.txt' in the distributions '.egg-info'
directory.
:::
:::{doc} print_results:169
Print the information from installed distributions found.
:::
**Imports**: `logging`, `optparse.Values`, `typing.Generator`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `pip._vendor.packaging.requirements.InvalidRequirement`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.get_default_environment`, `pip._internal.utils.misc.write_output`
**Type References**: [[List]], [[Optional]], [[ShowCommand]], [[_PackageInfo]]

### Interface
- `search_packages_info`(query: [List[str]](#list)) -> Generator[<ast.Tuple object at 0x166512d10>]
- `print_results`(distributions: Iterable[_PackageInfo], list_files: bool, verbose: bool) -> bool
- `add_options`() -> None
- `run`(options: Values, args: [List[str]](#list)) -> int
- `_get_requiring_packages`(current_dist: BaseDistribution) -> Iterator[str]

### Implementation
**ShowCommand**

**_PackageInfo**
  - name: str
  - version: str
  - location: str
  - editable_project_location: Optional[str]
  - requires: List[str]
  - required_by: List[str]
  - installer: str
  - metadata_version: str
  - classifiers: List[str]
  - summary: str
  - homepage: str
  - project_urls: List[str]
  - author: str
  - author_email: str
  - license: str
  - entry_points: List[str]
  - files: Optional[List[str]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/show.py`  
**Dependencies**: `logging`, `optparse.Values`, `typing.Generator`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `pip._vendor.packaging.requirements.InvalidRequirement`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.get_default_environment`, `pip._internal.utils.misc.write_output`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.list
:::{doc} ListCommand:38
List installed packages, including editables.

Packages are listed in a case-insensitive sorted order.
:::
:::{doc} format_for_columns:313
Convert the package data into something usable
by output_package_listing_columns.
:::
**Imports**: `json`, `logging`, `optparse.Values`, `typing.TYPE_CHECKING`, `typing.Generator`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.cast`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.Version`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.index_command.IndexGroupCommand`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.exceptions.CommandError`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.get_environment`, `pip._internal.models.selection_prefs.SelectionPreferences`, `pip._internal.utils.compat.stdlib_pkgs`, `pip._internal.utils.misc.tabulate`, `pip._internal.utils.misc.write_output`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.network.session.PipSession`, `pip._internal.index.collector.LinkCollector`, `pip._internal.index.package_finder.PackageFinder`
**Type References**: [[ListCommand]], [[Version]], [[_DistWithLatestInfo]]

### Interface
- `format_for_columns`(pkgs: _ProcessedDists, options: Values) -> Tuple[<ast.Tuple object at 0x166588750>]
- `format_for_json`(packages: _ProcessedDists, options: Values) -> str
- `add_options`() -> None
- `handle_pip_version_check`(options: Values) -> None
- `_build_package_finder`(options: Values, session: PipSession) -> PackageFinder
- `run`(options: Values, args: [List[str]](#list)) -> int
- `get_outdated`(packages: _ProcessedDists, options: Values) -> _ProcessedDists
- `get_uptodate`(packages: _ProcessedDists, options: Values) -> _ProcessedDists
- `get_not_required`(packages: _ProcessedDists, options: Values) -> _ProcessedDists
- `iter_packages_latest_infos`(packages: _ProcessedDists, options: Values) -> Generator[<ast.Tuple object at 0x16656d010>]
- `output_package_listing`(packages: _ProcessedDists, options: Values) -> None
- `output_package_listing_columns`(data: [List[List[str]]](#list), header: [List[str]](#list)) -> None
- `latest_info`(dist: _DistWithLatestInfo) -> [Optional[_DistWithLatestInfo]](#optional)

### Implementation
**ListCommand**
  - packages: _ProcessedDists
**_DistWithLatestInfo**
  - latest_version: Version
  - latest_filetype: str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/list.py`  
**Dependencies**: `json`, `logging`, `optparse.Values`, `typing.TYPE_CHECKING`, `typing.Generator`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Tuple`, `typing.cast`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.Version`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.index_command.IndexGroupCommand`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.exceptions.CommandError`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.get_environment`, `pip._internal.models.selection_prefs.SelectionPreferences`, `pip._internal.utils.compat.stdlib_pkgs`, `pip._internal.utils.misc.tabulate`, `pip._internal.utils.misc.write_output`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.network.session.PipSession`, `pip._internal.index.collector.LinkCollector`, `pip._internal.index.package_finder.PackageFinder`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.check
:::{doc} CheckCommand:19
Verify installed packages have compatible dependencies.
:::
**Imports**: `logging`, `optparse.Values`, `typing.List`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.metadata.get_default_environment`, `pip._internal.operations.check.check_package_set`, `pip._internal.operations.check.check_unsupported`, `pip._internal.operations.check.create_package_set_from_installed`, `pip._internal.utils.compatibility_tags.get_supported`, `pip._internal.utils.misc.write_output`
**Type References**: [[CheckCommand]]

### Interface
- `run`(options: Values, args: [List[str]](#list)) -> int

### Implementation
**CheckCommand**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/check.py`  
**Dependencies**: `logging`, `optparse.Values`, `typing.List`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.metadata.get_default_environment`, `pip._internal.operations.check.check_package_set`, `pip._internal.operations.check.check_unsupported`, `pip._internal.operations.check.create_package_set_from_installed`, `pip._internal.utils.compatibility_tags.get_supported`, `pip._internal.utils.misc.write_output`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.index
:::{doc} IndexCommand:22
Inspect information available from package indexes.
:::
**Imports**: `logging`, `optparse.Values`, `typing.Any`, `typing.Iterable`, `typing.List`, `typing.Optional`, `pip._vendor.packaging.version.Version`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.req_command.IndexGroupCommand`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.commands.search.print_dist_installation_info`, `pip._internal.exceptions.CommandError`, `pip._internal.exceptions.DistributionNotFound`, `pip._internal.exceptions.PipError`, `pip._internal.index.collector.LinkCollector`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.models.selection_prefs.SelectionPreferences`, `pip._internal.models.target_python.TargetPython`, `pip._internal.network.session.PipSession`, `pip._internal.utils.misc.write_output`
**Type References**: [[IndexCommand]], [[Iterable]]

### Interface
- `add_options`() -> None
- `run`(options: Values, args: [List[str]](#list)) -> int
- `_build_package_finder`(options: Values, session: PipSession, target_python: [Optional[TargetPython]](#optional), ignore_requires_python: [Optional[bool]](#optional)) -> PackageFinder
- `get_available_package_versions`(options: Values, args: [List[Any]](#list)) -> None

### Implementation
**IndexCommand**
  - versions: Iterable[Version]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/index.py`  
**Dependencies**: `logging`, `optparse.Values`, `typing.Any`, `typing.Iterable`, `typing.List`, `typing.Optional`, `pip._vendor.packaging.version.Version`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.req_command.IndexGroupCommand`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.commands.search.print_dist_installation_info`, `pip._internal.exceptions.CommandError`, `pip._internal.exceptions.DistributionNotFound`, `pip._internal.exceptions.PipError`, `pip._internal.index.collector.LinkCollector`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.models.selection_prefs.SelectionPreferences`, `pip._internal.models.target_python.TargetPython`, `pip._internal.network.session.PipSession`, `pip._internal.utils.misc.write_output`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.completion
:::{doc} CompletionCommand:75
A helper command to be used for command completion.
:::
**Imports**: `sys`, `textwrap`, `optparse.Values`, `typing.List`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.utils.misc.get_prog`
**Type References**: [[CompletionCommand]]

### Interface
- `add_options`() -> None
- `run`(options: Values, args: [List[str]](#list)) -> int

### Implementation
**CompletionCommand**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/completion.py`  
**Dependencies**: `sys`, `textwrap`, `optparse.Values`, `typing.List`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.utils.misc.get_prog`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.download
:::{doc} DownloadCommand:18
Download packages from:

- PyPI (and other indexes) using requirement specifiers.
- VCS project urls.
- Local project directories.
- Local or remote source archives.

pip also supports downloading from "requirements files", which provide
an easy way to specify a whole environment to be downloaded.
:::
**Imports**: `logging`, `os`, `optparse.Values`, `typing.List`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.cmdoptions.make_target_python`, `pip._internal.cli.req_command.RequirementCommand`, `pip._internal.cli.req_command.with_cleanup`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.operations.build.build_tracker.get_build_tracker`, `pip._internal.req.req_install.check_legacy_setup_py_options`, `pip._internal.utils.misc.ensure_dir`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.misc.write_output`, `pip._internal.utils.temp_dir.TempDirectory`
**Type References**: [[DownloadCommand]], [[List]]

### Interface
- `add_options`() -> None
- `run`(options: Values, args: [List[str]](#list)) -> int

### Implementation
**DownloadCommand**
  - downloaded: List[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/download.py`  
**Dependencies**: `logging`, `os`, `optparse.Values`, `typing.List`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.cmdoptions.make_target_python`, `pip._internal.cli.req_command.RequirementCommand`, `pip._internal.cli.req_command.with_cleanup`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.operations.build.build_tracker.get_build_tracker`, `pip._internal.req.req_install.check_legacy_setup_py_options`, `pip._internal.utils.misc.ensure_dir`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.misc.write_output`, `pip._internal.utils.temp_dir.TempDirectory`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.cache
:::{doc} CacheCommand:15
Inspect and manage pip's wheel cache.

Subcommands:

- dir: Show the cache directory.
- info: Show information about the cache.
- list: List filenames of packages stored in the cache.
- remove: Remove one or more package from the cache.
- purge: Remove all items from the cache.

``<pattern>`` can be a glob expression or a package name.
:::
**Imports**: `os`, `textwrap`, `optparse.Values`, `typing.Any`, `typing.List`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.exceptions.CommandError`, `pip._internal.exceptions.PipError`, `pip._internal.utils.filesystem`, `pip._internal.utils.logging.getLogger`
**Type References**: [[CacheCommand]]

### Interface
- `add_options`() -> None
- `run`(options: Values, args: [List[str]](#list)) -> int
- `get_cache_dir`(options: Values, args: [List[Any]](#list)) -> None
- `get_cache_info`(options: Values, args: [List[Any]](#list)) -> None
- `list_cache_items`(options: Values, args: [List[Any]](#list)) -> None
- `format_for_human`(files: [List[str]](#list)) -> None
- `format_for_abspath`(files: [List[str]](#list)) -> None
- `remove_cache_items`(options: Values, args: [List[Any]](#list)) -> None
- `purge_cache`(options: Values, args: [List[Any]](#list)) -> None
- `_cache_dir`(options: Values, subdir: str) -> str
- `_find_http_files`(options: Values) -> [List[str]](#list)
- `_find_wheels`(options: Values, pattern: str) -> [List[str]](#list)

### Implementation
**CacheCommand**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/cache.py`  
**Dependencies**: `os`, `textwrap`, `optparse.Values`, `typing.Any`, `typing.List`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.exceptions.CommandError`, `pip._internal.exceptions.PipError`, `pip._internal.utils.filesystem`, `pip._internal.utils.logging.getLogger`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands
:::{doc} create_command:109
Create an instance of the Command class with the given name.
:::
:::{doc} get_similar_commands:121
Command name auto-correct.
:::
**Imports**: `importlib`, `collections.namedtuple`, `typing.Any`, `typing.Dict`, `typing.Optional`, `pip._internal.cli.base_command.Command`, `difflib.get_close_matches`
**Type References**: [[Dict]]

### Interface
- `create_command`(name: str) -> Command
- `get_similar_commands`(name: str) -> [Optional[str]](#optional)
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/__init__.py`  
**Dependencies**: `importlib`, `collections.namedtuple`, `typing.Any`, `typing.Dict`, `typing.Optional`, `pip._internal.cli.base_command.Command`, `difflib.get_close_matches`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.hash
:::{doc} HashCommand:15
Compute a hash of a local package archive.

These can be used with --hash in a requirements file to do repeatable
installs.
:::
:::{doc} _hash_of_file:53
Return the hash digest of a file.
:::
**Imports**: `hashlib`, `logging`, `sys`, `optparse.Values`, `typing.List`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.utils.hashes.FAVORITE_HASH`, `pip._internal.utils.hashes.STRONG_HASHES`, `pip._internal.utils.misc.read_chunks`, `pip._internal.utils.misc.write_output`
**Type References**: [[HashCommand]]

### Interface
- `_hash_of_file`(path: str, algorithm: str) -> str
- `add_options`() -> None
- `run`(options: Values, args: [List[str]](#list)) -> int

### Implementation
**HashCommand**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/hash.py`  
**Dependencies**: `hashlib`, `logging`, `sys`, `optparse.Values`, `typing.List`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.utils.hashes.FAVORITE_HASH`, `pip._internal.utils.hashes.STRONG_HASHES`, `pip._internal.utils.misc.read_chunks`, `pip._internal.utils.misc.write_output`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.inspect
:::{doc} InspectCommand:19
Inspect the content of a Python environment and produce a report in JSON format.
:::
**Imports**: `logging`, `optparse.Values`, `typing.Any`, `typing.Dict`, `typing.List`, `pip._vendor.packaging.markers.default_environment`, `pip._vendor.rich.print_json`, `pip.__version__`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.get_environment`, `pip._internal.utils.compat.stdlib_pkgs`, `pip._internal.utils.urls.path_to_url`
**Type References**: [[Dict]], [[InspectCommand]]

### Interface
- `add_options`() -> None
- `run`(options: Values, args: [List[str]](#list)) -> int
- `_dist_to_dict`(dist: BaseDistribution) -> [Dict[<ast.Tuple object at 0x1666664d0>]](#dict)

### Implementation
**InspectCommand**
  - res: Dict[<ast.Tuple object at 0x16665dcd0>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/inspect.py`  
**Dependencies**: `logging`, `optparse.Values`, `typing.Any`, `typing.Dict`, `typing.List`, `pip._vendor.packaging.markers.default_environment`, `pip._vendor.rich.print_json`, `pip.__version__`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.get_environment`, `pip._internal.utils.compat.stdlib_pkgs`, `pip._internal.utils.urls.path_to_url`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.debug
:::{doc} show_actual_vendor_versions:82
Log the actual version and print extra info if there is
a conflict or if the actual version could not be imported.
:::
:::{doc} DebugCommand:158
Display debug information.
:::
**Imports**: `locale`, `logging`, `os`, `sys`, `optparse.Values`, `types.ModuleType`, `typing.Any`, `typing.Dict`, `typing.List`, `typing.Optional`, `pip._vendor`, `pip._vendor.certifi.where`, `pip._vendor.packaging.version.parse`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.cmdoptions.make_target_python`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.configuration.Configuration`, `pip._internal.metadata.get_environment`, `pip._internal.utils.compat.open_text_resource`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.get_pip_version`
**Type References**: [[DebugCommand]]

### Interface
- `show_value`(name: str, value: Any) -> None
- `show_sys_implementation`() -> None
- `create_vendor_txt_map`() -> [Dict[<ast.Tuple object at 0x166679f10>]](#dict)
- `get_module_from_module_name`(module_name: str) -> [Optional[ModuleType]](#optional)
- `get_vendor_version_from_module`(module_name: str) -> [Optional[str]](#optional)
- `show_actual_vendor_versions`(vendor_txt_versions: [Dict[<ast.Tuple object at 0x166674a90>]](#dict)) -> None
- `show_vendor_versions`() -> None
- `show_tags`(options: Values) -> None
- `ca_bundle_info`(config: Configuration) -> str
- `add_options`() -> None
- `run`(options: Values, args: [List[str]](#list)) -> int

### Implementation
**DebugCommand**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/debug.py`  
**Dependencies**: `locale`, `logging`, `os`, `sys`, `optparse.Values`, `types.ModuleType`, `typing.Any`, `typing.Dict`, `typing.List`, `typing.Optional`, `pip._vendor`, `pip._vendor.certifi.where`, `pip._vendor.packaging.version.parse`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.cmdoptions.make_target_python`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.configuration.Configuration`, `pip._internal.metadata.get_environment`, `pip._internal.utils.compat.open_text_resource`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.get_pip_version`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.uninstall
:::{doc} UninstallCommand:26
Uninstall packages.

pip is able to uninstall most installed packages. Known exceptions are:

- Pure distutils packages installed with ``python setup.py install``, which
  leave behind no metadata to determine what files were installed.
- Script wrappers installed by ``python setup.py develop``.
:::
**Imports**: `logging`, `optparse.Values`, `typing.List`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.index_command.SessionCommandMixin`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.exceptions.InstallationError`, `pip._internal.req.parse_requirements`, `pip._internal.req.constructors.install_req_from_line`, `pip._internal.req.constructors.install_req_from_parsed_requirement`, `pip._internal.utils.misc.check_externally_managed`, `pip._internal.utils.misc.protect_pip_from_modification_on_windows`, `pip._internal.utils.misc.warn_if_run_as_root`
**Type References**: [[UninstallCommand]]

### Interface
- `add_options`() -> None
- `run`(options: Values, args: [List[str]](#list)) -> int

### Implementation
**UninstallCommand**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/uninstall.py`  
**Dependencies**: `logging`, `optparse.Values`, `typing.List`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.index_command.SessionCommandMixin`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.exceptions.InstallationError`, `pip._internal.req.parse_requirements`, `pip._internal.req.constructors.install_req_from_line`, `pip._internal.req.constructors.install_req_from_parsed_requirement`, `pip._internal.utils.misc.check_externally_managed`, `pip._internal.utils.misc.protect_pip_from_modification_on_windows`, `pip._internal.utils.misc.warn_if_run_as_root`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.freeze
:::{doc} FreezeCommand:25
Output installed packages in requirements format.

packages are listed in a case-insensitive sorted order.
:::
**Imports**: `sys`, `optparse.Values`, `typing.AbstractSet`, `typing.List`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.operations.freeze.freeze`, `pip._internal.utils.compat.stdlib_pkgs`
**Type References**: [[FreezeCommand]]

### Interface
- `_should_suppress_build_backends`() -> bool
- `_dev_pkgs`() -> AbstractSet[str]
- `add_options`() -> None
- `run`(options: Values, args: [List[str]](#list)) -> int

### Implementation
**FreezeCommand**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/freeze.py`  
**Dependencies**: `sys`, `optparse.Values`, `typing.AbstractSet`, `typing.List`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.operations.freeze.freeze`, `pip._internal.utils.compat.stdlib_pkgs`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.search
:::{doc} SearchCommand:33
Search for PyPI packages whose name or summary contains <query>.
:::
:::{doc} transform_hits:86
The list from pypi is really a list of versions. We want a list of
packages with the list of versions stored inline. This converts the
list from pypi into one we can use.
:::
**Imports**: `logging`, `shutil`, `sys`, `textwrap`, `xmlrpc.client`, `collections.OrderedDict`, `optparse.Values`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.List`, `typing.Optional`, `typing.TypedDict`, `pip._vendor.packaging.version.parse`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.req_command.SessionCommandMixin`, `pip._internal.cli.status_codes.NO_MATCHES_FOUND`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.exceptions.CommandError`, `pip._internal.metadata.get_default_environment`, `pip._internal.models.index.PyPI`, `pip._internal.network.xmlrpc.PipXmlrpcTransport`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.write_output`
**Type References**: [[Dict]], [[List]], [[SearchCommand]], [[TransformedHit]]

### Interface
- `transform_hits`(hits: [List[Dict[<ast.Tuple object at 0x1666e1e90>]]](#list)) -> [List[TransformedHit]](#list)
- `print_dist_installation_info`(name: str, latest: str) -> None
- `print_results`(hits: [List[TransformedHit]](#list), name_column_width: [Optional[int]](#optional), terminal_width: [Optional[int]](#optional)) -> None
- `highest_version`(versions: [List[str]](#list)) -> str
- `add_options`() -> None
- `run`(options: Values, args: [List[str]](#list)) -> int
- `search`(query: [List[str]](#list), options: Values) -> [List[Dict[<ast.Tuple object at 0x1666e2510>]]](#list)

### Implementation
**SearchCommand**

**TransformedHit**
  - name: str
  - summary: str
  - versions: List[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/search.py`  
**Dependencies**: `logging`, `shutil`, `sys`, `textwrap`, `xmlrpc.client`, `collections.OrderedDict`, `optparse.Values`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.List`, `typing.Optional`, `typing.TypedDict`, `pip._vendor.packaging.version.parse`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.req_command.SessionCommandMixin`, `pip._internal.cli.status_codes.NO_MATCHES_FOUND`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.exceptions.CommandError`, `pip._internal.metadata.get_default_environment`, `pip._internal.models.index.PyPI`, `pip._internal.network.xmlrpc.PipXmlrpcTransport`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.write_output`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.install
:::{doc} InstallCommand:53
Install packages from:

- PyPI (and other indexes) using requirement specifiers.
- VCS project urls.
- Local project directories.
- Local or remote source archives.

pip also supports installing from "requirements files", which provide
an easy way to specify a whole environment to be installed.
:::
:::{doc} decide_user_install:668
Determine whether to do a user install based on the input options.

If use_user_site is False, no additional checks are done.
If use_user_site is True, it is checked for compatibility with other
options.
If use_user_site is None, the default behaviour depends on the environment,
which is provided by the other arguments.
:::
:::{doc} create_os_error_message:729
Format an error message for an OSError

It may occur anytime during the execution of the install command.
:::
**Imports**: `errno`, `json`, `operator`, `os`, `shutil`, `site`, `optparse.SUPPRESS_HELP`, `optparse.Values`, `typing.List`, `typing.Optional`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.rich.print_json`, `pip._internal.cache.WheelCache`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.cmdoptions.make_target_python`, `pip._internal.cli.req_command.RequirementCommand`, `pip._internal.cli.req_command.with_cleanup`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.exceptions.CommandError`, `pip._internal.exceptions.InstallationError`, `pip._internal.locations.get_scheme`, `pip._internal.metadata.get_environment`, `pip._internal.models.installation_report.InstallationReport`, `pip._internal.operations.build.build_tracker.get_build_tracker`, `pip._internal.operations.check.ConflictDetails`, `pip._internal.operations.check.check_install_conflicts`, `pip._internal.req.install_given_reqs`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.req.req_install.check_legacy_setup_py_options`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.filesystem.test_writable_dir`, `pip._internal.utils.logging.getLogger`, `pip._internal.utils.misc.check_externally_managed`, `pip._internal.utils.misc.ensure_dir`, `pip._internal.utils.misc.get_pip_version`, `pip._internal.utils.misc.protect_pip_from_modification_on_windows`, `pip._internal.utils.misc.warn_if_run_as_root`, `pip._internal.utils.misc.write_output`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.virtualenv.running_under_virtualenv`, `pip._internal.utils.virtualenv.virtualenv_no_global`, `pip._internal.wheel_builder.build`, `pip._internal.wheel_builder.should_build_for_install_command`, `pip._internal.self_outdated_check`
**Type References**: [[InstallCommand]], [[List]], [[Optional]]

### Interface
- `get_lib_location_guesses`(user: bool, home: [Optional[str]](#optional), root: [Optional[str]](#optional), isolated: bool, prefix: [Optional[str]](#optional)) -> [List[str]](#list)
- `site_packages_writable`(root: [Optional[str]](#optional), isolated: bool) -> bool
- `decide_user_install`(use_user_site: [Optional[bool]](#optional), prefix_path: [Optional[str]](#optional), target_dir: [Optional[str]](#optional), root_path: [Optional[str]](#optional), isolated_mode: bool) -> bool
- `create_os_error_message`(error: OSError, show_traceback: bool, using_user_site: bool) -> str
- `add_options`() -> None
- `run`(options: Values, args: [List[str]](#list)) -> int
- `_handle_target_dir`(target_dir: str, target_temp_dir: TempDirectory, upgrade: bool) -> None
- `_determine_conflicts`(to_install: [List[InstallRequirement]](#list)) -> [Optional[ConflictDetails]](#optional)
- `_warn_about_conflicts`(conflict_details: ConflictDetails, resolver_variant: str) -> None

### Implementation
**InstallCommand**
  - target_temp_dir: Optional[TempDirectory]
  - target_temp_dir_path: Optional[str]
  - parts: List[str]
  - conflicts: Optional[ConflictDetails]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/install.py`  
**Dependencies**: `errno`, `json`, `operator`, `os`, `shutil`, `site`, `optparse.SUPPRESS_HELP`, `optparse.Values`, `typing.List`, `typing.Optional`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.rich.print_json`, `pip._internal.cache.WheelCache`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.cmdoptions.make_target_python`, `pip._internal.cli.req_command.RequirementCommand`, `pip._internal.cli.req_command.with_cleanup`, `pip._internal.cli.status_codes.ERROR`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.exceptions.CommandError`, `pip._internal.exceptions.InstallationError`, `pip._internal.locations.get_scheme`, `pip._internal.metadata.get_environment`, `pip._internal.models.installation_report.InstallationReport`, `pip._internal.operations.build.build_tracker.get_build_tracker`, `pip._internal.operations.check.ConflictDetails`, `pip._internal.operations.check.check_install_conflicts`, `pip._internal.req.install_given_reqs`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.req.req_install.check_legacy_setup_py_options`, `pip._internal.utils.compat.WINDOWS`, `pip._internal.utils.filesystem.test_writable_dir`, `pip._internal.utils.logging.getLogger`, `pip._internal.utils.misc.check_externally_managed`, `pip._internal.utils.misc.ensure_dir`, `pip._internal.utils.misc.get_pip_version`, `pip._internal.utils.misc.protect_pip_from_modification_on_windows`, `pip._internal.utils.misc.warn_if_run_as_root`, `pip._internal.utils.misc.write_output`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.virtualenv.running_under_virtualenv`, `pip._internal.utils.virtualenv.virtualenv_no_global`, `pip._internal.wheel_builder.build`, `pip._internal.wheel_builder.should_build_for_install_command`, `pip._internal.self_outdated_check`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.help
:::{doc} HelpCommand:9
Show help for commands
:::
**Imports**: `optparse.Values`, `typing.List`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.exceptions.CommandError`, `pip._internal.commands.commands_dict`, `pip._internal.commands.create_command`, `pip._internal.commands.get_similar_commands`
**Type References**: [[HelpCommand]]

### Interface
- `run`(options: Values, args: [List[str]](#list)) -> int

### Implementation
**HelpCommand**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/help.py`  
**Dependencies**: `optparse.Values`, `typing.List`, `pip._internal.cli.base_command.Command`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.exceptions.CommandError`, `pip._internal.commands.commands_dict`, `pip._internal.commands.create_command`, `pip._internal.commands.get_similar_commands`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.commands.wheel
:::{doc} WheelCommand:24
Build Wheel archives for your requirements and dependencies.

Wheel is a built-package format, and offers the advantage of not
recompiling your software during every install. For more details, see the
wheel docs: https://wheel.readthedocs.io/en/latest/

'pip wheel' uses the build system interface as described here:
https://pip.pypa.io/en/stable/reference/build-system/
:::
**Imports**: `logging`, `os`, `shutil`, `optparse.Values`, `typing.List`, `pip._internal.cache.WheelCache`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.req_command.RequirementCommand`, `pip._internal.cli.req_command.with_cleanup`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.exceptions.CommandError`, `pip._internal.operations.build.build_tracker.get_build_tracker`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.req.req_install.check_legacy_setup_py_options`, `pip._internal.utils.misc.ensure_dir`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.wheel_builder.build`, `pip._internal.wheel_builder.should_build_for_wheel_command`
**Type References**: [[List]], [[WheelCommand]]

### Interface
- `add_options`() -> None
- `run`(options: Values, args: [List[str]](#list)) -> int

### Implementation
**WheelCommand**
  - reqs_to_build: List[InstallRequirement]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/commands/wheel.py`  
**Dependencies**: `logging`, `os`, `shutil`, `optparse.Values`, `typing.List`, `pip._internal.cache.WheelCache`, `pip._internal.cli.cmdoptions`, `pip._internal.cli.req_command.RequirementCommand`, `pip._internal.cli.req_command.with_cleanup`, `pip._internal.cli.status_codes.SUCCESS`, `pip._internal.exceptions.CommandError`, `pip._internal.operations.build.build_tracker.get_build_tracker`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.req.req_install.check_legacy_setup_py_options`, `pip._internal.utils.misc.ensure_dir`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.wheel_builder.build`, `pip._internal.wheel_builder.should_build_for_wheel_command`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.metadata._json
:::{doc} msg_to_json:41
Convert a Message object into a JSON-compatible dictionary.
:::
**Imports**: `email.header.Header`, `email.header.decode_header`, `email.header.make_header`, `email.message.Message`, `typing.Any`, `typing.Dict`, `typing.List`, `typing.Union`, `typing.cast`
**Type References**: [[Union]]

### Interface
- `json_name`(field: str) -> str
- `msg_to_json`(msg: Message) -> [Dict[<ast.Tuple object at 0x16681c050>]](#dict)
- `sanitise_header`(h: [Union[<ast.Tuple object at 0x16680a7d0>]](#union)) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/metadata/_json.py`  
**Dependencies**: `email.header.Header`, `email.header.decode_header`, `email.header.make_header`, `email.message.Message`, `typing.Any`, `typing.Dict`, `typing.List`, `typing.Union`, `typing.cast`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.metadata
:::{doc} _should_use_importlib_metadata:29
Whether to use the ``importlib.metadata`` or ``pkg_resources`` backend.

By default, pip uses ``importlib.metadata`` on Python 3.11+, and
``pkg_resourcess`` otherwise. This can be overridden by a couple of ways:

* If environment variable ``_PIP_USE_IMPORTLIB_METADATA`` is set, it
  dictates whether ``importlib.metadata`` is used, regardless of Python
  version.
* On Python 3.11+, Python distributors can patch ``importlib.metadata``
  to add a global constant ``_PIP_USE_IMPORTLIB_METADATA = False``. This
  makes pip use ``pkg_resources`` (unless the user set the aforementioned
  environment variable to *True*).
:::
:::{doc} get_default_environment:69
Get the default representation for the current environment.

This returns an Environment instance from the chosen backend. The default
Environment instance should be built from ``sys.path`` and may use caching
to share instance state accorss calls.
:::
:::{doc} get_environment:79
Get a representation of the environment specified by ``paths``.

This returns an Environment instance from the chosen backend based on the
given import paths. The backend must build a fresh instance representing
the state of installed distributions when this function is called.
:::
:::{doc} get_directory_distribution:89
Get the distribution metadata representation in the specified directory.

This returns a Distribution instance from the chosen backend based on
the given on-disk ``.dist-info`` directory.
:::
:::{doc} get_wheel_distribution:98
Get the representation of the specified wheel's distribution metadata.

This returns a Distribution instance from the chosen backend based on
the given wheel's ``.dist-info`` directory.

:param canonical_name: Normalized project name of the given wheel.
:::
:::{doc} get_metadata_distribution:109
Get the dist representation of the specified METADATA file contents.

This returns a Distribution instance from the chosen backend sourced from the data
in `metadata_contents`.

:param metadata_contents: Contents of a METADATA file within a dist, or one served
                          via PEP 658.
:param filename: Filename for the dist this metadata represents.
:param canonical_name: Normalized project name of the given dist.
:::
**Imports**: `contextlib`, `functools`, `os`, `sys`, `typing.TYPE_CHECKING`, `typing.List`, `typing.Optional`, `typing.Type`, `typing.cast`, `pip._internal.utils.misc.strtobool`, `base.BaseDistribution`, `base.BaseEnvironment`, `base.FilesystemWheel`, `base.MemoryWheel`, `base.Wheel`, `typing.Literal`, `typing.Protocol`, `importlib.metadata`, `pkg_resources`, `importlib`
**Type References**: [[Backend]], [[Literal]], [[Type]]

### Interface
- `_should_use_importlib_metadata`() -> bool
- `select_backend`() -> Backend
- `get_default_environment`() -> BaseEnvironment
- `get_environment`(paths: [Optional[List[str]]](#optional)) -> BaseEnvironment
- `get_directory_distribution`(directory: str) -> BaseDistribution
- `get_wheel_distribution`(wheel: Wheel, canonical_name: str) -> BaseDistribution
- `get_metadata_distribution`(metadata_contents: bytes, filename: str, canonical_name: str) -> BaseDistribution

### Implementation
**Backend**
  - NAME: Literal["importlib", "pkg_resources"]
  - Distribution: Type[BaseDistribution]
  - Environment: Type[BaseEnvironment]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/metadata/__init__.py`  
**Dependencies**: `contextlib`, `functools`, `os`, `sys`, `typing.TYPE_CHECKING`, `typing.List`, `typing.Optional`, `typing.Type`, `typing.cast`, `pip._internal.utils.misc.strtobool`, `base.BaseDistribution`, `base.BaseEnvironment`, `base.FilesystemWheel`, `base.MemoryWheel`, `base.Wheel`, `typing.Literal`, `typing.Protocol`, `importlib.metadata`, `pkg_resources`, `importlib`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.metadata.pkg_resources
:::{doc} InMemoryMetadata:48
IMetadataProvider that reads metadata files from a dictionary.

This also maps metadata decoding exceptions to our internal exception type.
:::
**Imports**: `email.message`, `email.parser`, `logging`, `os`, `zipfile`, `typing.Collection`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Mapping`, `typing.NamedTuple`, `typing.Optional`, `pip._vendor.pkg_resources`, `pip._vendor.packaging.requirements.Requirement`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.Version`, `pip._vendor.packaging.version.parse`, `pip._internal.exceptions.InvalidWheel`, `pip._internal.exceptions.NoneMetadataError`, `pip._internal.exceptions.UnsupportedWheel`, `pip._internal.utils.egg_link.egg_link_path_from_location`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.wheel.parse_wheel`, `pip._internal.utils.wheel.read_wheel_metadata_file`, `base.BaseDistribution`, `base.BaseEntryPoint`, `base.BaseEnvironment`, `base.InfoPath`, `base.Wheel`
**Type References**: [[Distribution]], [[EntryPoint]], [[Environment]], [[InMemoryMetadata]]

### Interface
- `__init__`(ws: pkg_resources.WorkingSet) -> None
- `has_metadata`(name: str) -> bool
- `get_metadata`(name: str) -> str
- `get_metadata_lines`(name: str) -> Iterable[str]
- `metadata_isdir`(name: str) -> bool
- `metadata_listdir`(name: str) -> [List[str]](#list)
- `run_script`(script_name: str, namespace: str) -> None
- `_extra_mapping`() -> Mapping[<ast.Tuple object at 0x166836090>]
- `from_directory`(directory: str) -> BaseDistribution
- `from_metadata_file_contents`(metadata_contents: bytes, filename: str, project_name: str) -> BaseDistribution
- `from_wheel`(wheel: Wheel, name: str) -> BaseDistribution
- `location`() -> [Optional[str]](#optional)
- `installed_location`() -> [Optional[str]](#optional)
- `info_location`() -> [Optional[str]](#optional)
- `installed_by_distutils`() -> bool
- `canonical_name`() -> NormalizedName
- `version`() -> Version
- `raw_version`() -> str
- `is_file`(path: InfoPath) -> bool
- `iter_distutils_script_names`() -> Iterator[str]
- `read_text`(path: InfoPath) -> str
- `iter_entry_points`() -> Iterable[BaseEntryPoint]
- `_metadata_impl`() -> email.message.Message
- `iter_dependencies`(extras: Collection[str]) -> Iterable[Requirement]
- `iter_provided_extras`() -> Iterable[NormalizedName]
- `default`() -> BaseEnvironment
- `from_paths`(paths: [Optional[List[str]]](#optional)) -> BaseEnvironment
- `_iter_distributions`() -> Iterator[BaseDistribution]
- `_search_distribution`(name: str) -> [Optional[BaseDistribution]](#optional)
- `get_distribution`(name: str) -> [Optional[BaseDistribution]](#optional)

### Implementation
**EntryPoint**
  - name: str
  - value: str
  - group: str
**InMemoryMetadata**

**Distribution**

**Environment**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/metadata/pkg_resources.py`  
**Dependencies**: `email.message`, `email.parser`, `logging`, `os`, `zipfile`, `typing.Collection`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Mapping`, `typing.NamedTuple`, `typing.Optional`, `pip._vendor.pkg_resources`, `pip._vendor.packaging.requirements.Requirement`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.Version`, `pip._vendor.packaging.version.parse`, `pip._internal.exceptions.InvalidWheel`, `pip._internal.exceptions.NoneMetadataError`, `pip._internal.exceptions.UnsupportedWheel`, `pip._internal.utils.egg_link.egg_link_path_from_location`, `pip._internal.utils.misc.display_path`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.wheel.parse_wheel`, `pip._internal.utils.wheel.read_wheel_metadata_file`, `base.BaseDistribution`, `base.BaseEntryPoint`, `base.BaseEnvironment`, `base.InfoPath`, `base.Wheel`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.metadata.base
:::{doc} _convert_installed_files_path:63
Convert a legacy installed-files.txt path into modern RECORD path.

The legacy format stores paths relative to the info directory, while the
modern format stores paths relative to the package root, e.g. the
site-packages directory.

:param entry: Path parts of the installed-files.txt entry.
:param info: Path parts of the egg-info directory relative to package root.
:returns: The converted entry.

For best compatibility with symlinks, this does not use ``abspath()`` or
``Path.resolve()``, but tries to work with path parts:

1. While ``entry`` starts with ``..``, remove the equal amounts of parts
   from ``info``; if ``info`` is empty, start appending ``..`` instead.
2. Join the two directly.
:::
:::{doc} BaseEnvironment:582
An environment containing distributions to introspect.
:::
**Imports**: `csv`, `email.message`, `functools`, `json`, `logging`, `pathlib`, `re`, `zipfile`, `typing.IO`, `typing.Any`, `typing.Collection`, `typing.Container`, `typing.Dict`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Protocol`, `typing.Tuple`, `typing.Union`, `pip._vendor.packaging.requirements.Requirement`, `pip._vendor.packaging.specifiers.InvalidSpecifier`, `pip._vendor.packaging.specifiers.SpecifierSet`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.Version`, `pip._internal.exceptions.NoneMetadataError`, `pip._internal.locations.site_packages`, `pip._internal.locations.user_site`, `pip._internal.models.direct_url.DIRECT_URL_METADATA_NAME`, `pip._internal.models.direct_url.DirectUrl`, `pip._internal.models.direct_url.DirectUrlValidationError`, `pip._internal.utils.compat.stdlib_pkgs`, `pip._internal.utils.egg_link.egg_link_path_from_sys_path`, `pip._internal.utils.misc.is_local`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.urls.url_to_path`, `_json.msg_to_json`
**Type References**: [[BaseDistribution]], [[BaseEntryPoint]], [[BaseEnvironment]], [[FilesystemWheel]], [[MemoryWheel]], [[RequiresEntry]], [[Wheel]]

### Interface
- `_convert_installed_files_path`(entry: Tuple[<ast.Tuple object at 0x1668a2ed0>], info: Tuple[<ast.Tuple object at 0x1668a2b90>]) -> str
- `name`() -> str
- `value`() -> str
- `group`() -> str
- `from_directory`(directory: str) -> BaseDistribution
- `from_metadata_file_contents`(metadata_contents: bytes, filename: str, project_name: str) -> BaseDistribution
- `from_wheel`(wheel: Wheel, name: str) -> BaseDistribution
- `__repr__`() -> str
- `__str__`() -> str
- `location`() -> [Optional[str]](#optional)
- `editable_project_location`() -> [Optional[str]](#optional)
- `installed_location`() -> [Optional[str]](#optional)
- `info_location`() -> [Optional[str]](#optional)
- `installed_by_distutils`() -> bool
- `installed_as_egg`() -> bool
- `installed_with_setuptools_egg_info`() -> bool
- `installed_with_dist_info`() -> bool
- `canonical_name`() -> NormalizedName
- `version`() -> Version
- `raw_version`() -> str
- `setuptools_filename`() -> str
- `direct_url`() -> [Optional[DirectUrl]](#optional)
- `installer`() -> str
- `requested`() -> bool
- `editable`() -> bool
- `local`() -> bool
- `in_usersite`() -> bool
- `in_site_packages`() -> bool
- `is_file`(path: InfoPath) -> bool
- `iter_distutils_script_names`() -> Iterator[str]
- `read_text`(path: InfoPath) -> str
- `iter_entry_points`() -> Iterable[BaseEntryPoint]
- `_metadata_impl`() -> email.message.Message
- `metadata`() -> email.message.Message
- `metadata_dict`() -> [Dict[<ast.Tuple object at 0x1668d95d0>]](#dict)
- `metadata_version`() -> [Optional[str]](#optional)
- `raw_name`() -> str
- `requires_python`() -> SpecifierSet
- `iter_dependencies`(extras: Collection[str]) -> Iterable[Requirement]
- `iter_raw_dependencies`() -> Iterable[str]
- `iter_provided_extras`() -> Iterable[NormalizedName]
- `_iter_declared_entries_from_record`() -> [Optional[Iterator[str]]](#optional)
- `_iter_declared_entries_from_legacy`() -> [Optional[Iterator[str]]](#optional)
- `iter_declared_entries`() -> [Optional[Iterator[str]]](#optional)
- `_iter_requires_txt_entries`() -> Iterator[RequiresEntry]
- `_iter_egg_info_extras`() -> Iterable[str]
- `_iter_egg_info_dependencies`() -> Iterable[str]
- `_add_egg_info_requires`(metadata: email.message.Message) -> None
- `default`() -> BaseEnvironment
- `from_paths`(paths: [Optional[List[str]]](#optional)) -> BaseEnvironment
- `get_distribution`(name: str) -> [Optional[BaseDistribution]](#optional)
- `_iter_distributions`() -> Iterator[BaseDistribution]
- `iter_all_distributions`() -> Iterator[BaseDistribution]
- `iter_installed_distributions`(local_only: bool, skip: Container[str], include_editables: bool, editables_only: bool, user_only: bool) -> Iterator[BaseDistribution]
- `as_zipfile`() -> zipfile.ZipFile
- `__init__`(location: str, stream: IO[bytes]) -> None

### Implementation
**BaseEntryPoint**

**RequiresEntry**
  - requirement: str
  - extra: str
  - marker: str
**BaseDistribution**

**BaseEnvironment**

**Wheel**
  - location: str
**FilesystemWheel**

**MemoryWheel**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/metadata/base.py`  
**Dependencies**: `csv`, `email.message`, `functools`, `json`, `logging`, `pathlib`, `re`, `zipfile`, `typing.IO`, `typing.Any`, `typing.Collection`, `typing.Container`, `typing.Dict`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.NamedTuple`, `typing.Optional`, `typing.Protocol`, `typing.Tuple`, `typing.Union`, `pip._vendor.packaging.requirements.Requirement`, `pip._vendor.packaging.specifiers.InvalidSpecifier`, `pip._vendor.packaging.specifiers.SpecifierSet`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.Version`, `pip._internal.exceptions.NoneMetadataError`, `pip._internal.locations.site_packages`, `pip._internal.locations.user_site`, `pip._internal.models.direct_url.DIRECT_URL_METADATA_NAME`, `pip._internal.models.direct_url.DirectUrl`, `pip._internal.models.direct_url.DirectUrlValidationError`, `pip._internal.utils.compat.stdlib_pkgs`, `pip._internal.utils.egg_link.egg_link_path_from_sys_path`, `pip._internal.utils.misc.is_local`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.urls.url_to_path`, `_json.msg_to_json`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.distributions
:::{doc} make_distribution_for_install_requirement:7
Returns a Distribution for the given InstallRequirement
:::
**Imports**: `pip._internal.distributions.base.AbstractDistribution`, `pip._internal.distributions.sdist.SourceDistribution`, `pip._internal.distributions.wheel.WheelDistribution`, `pip._internal.req.req_install.InstallRequirement`
### Interface
- `make_distribution_for_install_requirement`(install_req: InstallRequirement) -> AbstractDistribution
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/distributions/__init__.py`  
**Dependencies**: `pip._internal.distributions.base.AbstractDistribution`, `pip._internal.distributions.sdist.SourceDistribution`, `pip._internal.distributions.wheel.WheelDistribution`, `pip._internal.req.req_install.InstallRequirement`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.distributions.sdist
:::{doc} SourceDistribution:16
Represents a source distribution.

The preparation step for these needs metadata for the packages to be
generated, either using PEP 517 or using the legacy `setup.py egg_info`.
:::
**Imports**: `logging`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `pip._internal.build_env.BuildEnvironment`, `pip._internal.distributions.base.AbstractDistribution`, `pip._internal.exceptions.InstallationError`, `pip._internal.metadata.BaseDistribution`, `pip._internal.utils.subprocess.runner_with_spinner_message`, `pip._internal.index.package_finder.PackageFinder`
**Type References**: [[SourceDistribution]]

### Interface
- `build_tracker_id`() -> [Optional[str]](#optional)
- `get_metadata_distribution`() -> BaseDistribution
- `prepare_distribution_metadata`(finder: PackageFinder, build_isolation: bool, check_build_deps: bool) -> None
- `_prepare_build_backend`(finder: PackageFinder) -> None
- `_get_build_requires_wheel`() -> Iterable[str]
- `_get_build_requires_editable`() -> Iterable[str]
- `_install_build_reqs`(finder: PackageFinder) -> None
- `_raise_conflicts`(conflicting_with: str, conflicting_reqs: Set[Tuple[<ast.Tuple object at 0x166959950>]]) -> None
- `_raise_missing_reqs`(missing: Set[str]) -> None

### Implementation
**SourceDistribution**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/distributions/sdist.py`  
**Dependencies**: `logging`, `typing.TYPE_CHECKING`, `typing.Iterable`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `pip._internal.build_env.BuildEnvironment`, `pip._internal.distributions.base.AbstractDistribution`, `pip._internal.exceptions.InstallationError`, `pip._internal.metadata.BaseDistribution`, `pip._internal.utils.subprocess.runner_with_spinner_message`, `pip._internal.index.package_finder.PackageFinder`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.distributions.installed
:::{doc} InstalledDistribution:8
Represents an installed package.

This does not need any preparation as the required information has already
been computed.
:::
**Imports**: `typing.Optional`, `pip._internal.distributions.base.AbstractDistribution`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.metadata.BaseDistribution`
**Type References**: [[InstalledDistribution]]

### Interface
- `build_tracker_id`() -> [Optional[str]](#optional)
- `get_metadata_distribution`() -> BaseDistribution
- `prepare_distribution_metadata`(finder: PackageFinder, build_isolation: bool, check_build_deps: bool) -> None

### Implementation
**InstalledDistribution**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/distributions/installed.py`  
**Dependencies**: `typing.Optional`, `pip._internal.distributions.base.AbstractDistribution`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.metadata.BaseDistribution`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.distributions.base
:::{doc} AbstractDistribution:11
A base class for handling installable artifacts.

The requirements for anything installable are as follows:

 - we must be able to determine the requirement name
   (or we can't correctly handle the non-upgrade case).

 - for packages with setup requirements, we must also be able
   to determine their requirements without installing additional
   packages (for the same reason as run-time dependencies)

 - we must be able to create a Distribution object exposing the
   above metadata.

 - if we need to do work in the build tracker, we must be able to generate a unique
   string to identify the requirement in the build tracker.
:::
**Imports**: `abc`, `typing.TYPE_CHECKING`, `typing.Optional`, `pip._internal.metadata.base.BaseDistribution`, `pip._internal.req.InstallRequirement`, `pip._internal.index.package_finder.PackageFinder`
**Type References**: [[AbstractDistribution]]

### Interface
- `__init__`(req: InstallRequirement) -> None
- `build_tracker_id`() -> [Optional[str]](#optional)
- `get_metadata_distribution`() -> BaseDistribution
- `prepare_distribution_metadata`(finder: PackageFinder, build_isolation: bool, check_build_deps: bool) -> None

### Implementation
**AbstractDistribution**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/distributions/base.py`  
**Dependencies**: `abc`, `typing.TYPE_CHECKING`, `typing.Optional`, `pip._internal.metadata.base.BaseDistribution`, `pip._internal.req.InstallRequirement`, `pip._internal.index.package_finder.PackageFinder`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.distributions.wheel
:::{doc} WheelDistribution:16
Represents a wheel distribution.

This does not need any preparation as wheels can be directly unpacked.
:::
**Imports**: `typing.TYPE_CHECKING`, `typing.Optional`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.distributions.base.AbstractDistribution`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.FilesystemWheel`, `pip._internal.metadata.get_wheel_distribution`, `pip._internal.index.package_finder.PackageFinder`
**Type References**: [[WheelDistribution]]

### Interface
- `build_tracker_id`() -> [Optional[str]](#optional)
- `get_metadata_distribution`() -> BaseDistribution
- `prepare_distribution_metadata`(finder: PackageFinder, build_isolation: bool, check_build_deps: bool) -> None

### Implementation
**WheelDistribution**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/distributions/wheel.py`  
**Dependencies**: `typing.TYPE_CHECKING`, `typing.Optional`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.distributions.base.AbstractDistribution`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.FilesystemWheel`, `pip._internal.metadata.get_wheel_distribution`, `pip._internal.index.package_finder.PackageFinder`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.metadata.importlib._dists
:::{doc} WheelDistribution:40
An ``importlib.metadata.Distribution`` read from a wheel.

Although ``importlib.metadata.PathDistribution`` accepts ``zipfile.Path``,
its implementation is too "lazy" for pip's needs (we can't keep the ZipFile
handle open for the entire lifetime of the distribution object).

This implementation eagerly reads the entire metadata directory into the
memory instead, and operates from that.
:::
**Imports**: `email.message`, `importlib.metadata`, `pathlib`, `zipfile`, `typing.Collection`, `typing.Dict`, `typing.Iterable`, `typing.Iterator`, `typing.Mapping`, `typing.Optional`, `typing.Sequence`, `typing.cast`, `pip._vendor.packaging.requirements.Requirement`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.Version`, `pip._vendor.packaging.version.parse`, `pip._internal.exceptions.InvalidWheel`, `pip._internal.exceptions.UnsupportedWheel`, `pip._internal.metadata.base.BaseDistribution`, `pip._internal.metadata.base.BaseEntryPoint`, `pip._internal.metadata.base.InfoPath`, `pip._internal.metadata.base.Wheel`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.packaging.get_requirement`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.wheel.parse_wheel`, `pip._internal.utils.wheel.read_wheel_metadata_file`, `_compat.BasePath`, `_compat.get_dist_canonical_name`, `_compat.parse_name_and_version_from_info_directory`
**Type References**: [[Distribution]], [[Sequence]], [[WheelDistribution]]

### Interface
- `__init__`(dist: importlib.metadata.Distribution, info_location: [Optional[BasePath]](#optional), installed_location: [Optional[BasePath]](#optional)) -> None
- `from_zipfile`(zf: zipfile.ZipFile, name: str, location: str) -> WheelDistribution
- `iterdir`(path: InfoPath) -> Iterator[pathlib.PurePosixPath]
- `read_text`(path: InfoPath) -> str
- `from_directory`(directory: str) -> BaseDistribution
- `from_metadata_file_contents`(metadata_contents: bytes, filename: str, project_name: str) -> BaseDistribution
- `from_wheel`(wheel: Wheel, name: str) -> BaseDistribution
- `location`() -> [Optional[str]](#optional)
- `info_location`() -> [Optional[str]](#optional)
- `installed_location`() -> [Optional[str]](#optional)
- `canonical_name`() -> NormalizedName
- `version`() -> Version
- `raw_version`() -> str
- `is_file`(path: InfoPath) -> bool
- `iter_distutils_script_names`() -> Iterator[str]
- `iter_entry_points`() -> Iterable[BaseEntryPoint]
- `_metadata_impl`() -> email.message.Message
- `iter_provided_extras`() -> Iterable[NormalizedName]
- `iter_dependencies`(extras: Collection[str]) -> Iterable[Requirement]

### Implementation
**WheelDistribution**

**Distribution**
  - contexts: Sequence[Dict[<ast.Tuple object at 0x1669aabd0>]]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/metadata/importlib/_dists.py`  
**Dependencies**: `email.message`, `importlib.metadata`, `pathlib`, `zipfile`, `typing.Collection`, `typing.Dict`, `typing.Iterable`, `typing.Iterator`, `typing.Mapping`, `typing.Optional`, `typing.Sequence`, `typing.cast`, `pip._vendor.packaging.requirements.Requirement`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.Version`, `pip._vendor.packaging.version.parse`, `pip._internal.exceptions.InvalidWheel`, `pip._internal.exceptions.UnsupportedWheel`, `pip._internal.metadata.base.BaseDistribution`, `pip._internal.metadata.base.BaseEntryPoint`, `pip._internal.metadata.base.InfoPath`, `pip._internal.metadata.base.Wheel`, `pip._internal.utils.misc.normalize_path`, `pip._internal.utils.packaging.get_requirement`, `pip._internal.utils.temp_dir.TempDirectory`, `pip._internal.utils.wheel.parse_wheel`, `pip._internal.utils.wheel.read_wheel_metadata_file`, `_compat.BasePath`, `_compat.get_dist_canonical_name`, `_compat.parse_name_and_version_from_info_directory`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.metadata.importlib

**Imports**: `_dists.Distribution`, `_envs.Environment`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/metadata/importlib/__init__.py`  
**Dependencies**: `_dists.Distribution`, `_envs.Environment`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.metadata.importlib._compat
:::{doc} BasePath:17
A protocol that various path objects conform.

This exists because importlib.metadata uses both ``pathlib.Path`` and
``zipfile.Path``, and we need a common base for type hints (Union does not
work well since ``zipfile.Path`` is too new for our linter setup).

This does not mean to be exhaustive, but only contains things that present
in both classes *that we need*.
:::
:::{doc} get_info_location:37
Find the path to the distribution's metadata directory.

HACK: This relies on importlib.metadata's private ``_path`` attribute. Not
all distributions exist on disk, so importlib.metadata is correct to not
expose the attribute as public. But pip's code base is old and not as clean,
so we do this to avoid having to rewrite too many things. Hopefully we can
eliminate this some day.
:::
:::{doc} parse_name_and_version_from_info_directory:49
Get a name and version from the metadata directory name.

This is much faster than reading distribution metadata.
:::
:::{doc} get_dist_canonical_name:73
Get the distribution's normalized name.

The ``name`` attribute is only available in Python 3.10 or later. We are
targeting exactly that, but Mypy does not know this.
:::
**Imports**: `importlib.metadata`, `os`, `typing.Any`, `typing.Optional`, `typing.Protocol`, `typing.Tuple`, `typing.cast`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`
**Type References**: [[BadMetadata]], [[BasePath]]

### Interface
- `get_info_location`(d: importlib.metadata.Distribution) -> [Optional[BasePath]](#optional)
- `parse_name_and_version_from_info_directory`(dist: importlib.metadata.Distribution) -> Tuple[<ast.Tuple object at 0x1669bd810>]
- `get_dist_canonical_name`(dist: importlib.metadata.Distribution) -> NormalizedName
- `__init__`(dist: importlib.metadata.Distribution) -> None
- `__str__`() -> str
- `name`() -> str
- `parent`() -> BasePath

### Implementation
**BadMetadata**

**BasePath**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/metadata/importlib/_compat.py`  
**Dependencies**: `importlib.metadata`, `os`, `typing.Any`, `typing.Optional`, `typing.Protocol`, `typing.Tuple`, `typing.cast`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.metadata.importlib._envs
:::{doc} _DistributionFinder:34
Finder to locate distributions.

The main purpose of this class is to memoize found distributions' names, so
only one distribution is returned for each package name. At lot of pip code
assumes this (because it is setuptools's behavior), and not doing the same
can potentially cause a distribution in lower precedence path to override a
higher precedence one if the caller is not careful.

Eventually we probably want to make it possible to see lower precedence
installations as well. It's useful feature, after all.
:::
**Imports**: `functools`, `importlib.metadata`, `logging`, `os`, `pathlib`, `sys`, `zipfile`, `zipimport`, `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.metadata.base.BaseDistribution`, `pip._internal.metadata.base.BaseEnvironment`, `pip._internal.models.wheel.Wheel`, `pip._internal.utils.deprecation.deprecated`, `pip._internal.utils.filetypes.WHEEL_EXTENSION`, `_compat.BadMetadata`, `_compat.BasePath`, `_compat.get_dist_canonical_name`, `_compat.get_info_location`, `_dists.Distribution`, `pip._vendor.pkg_resources.find_distributions`, `pip._internal.metadata.pkg_resources`, `pip._vendor.pkg_resources.find_eggs_in_zip`, `pip._internal.metadata.pkg_resources`
**Type References**: [[Environment]], [[Optional]], [[_DistributionFinder]]

### Interface
- `_looks_like_wheel`(location: str) -> bool
- `_emit_egg_deprecation`(location: [Optional[str]](#optional)) -> None
- `__init__`(paths: Sequence[str]) -> None
- `_find_impl`(location: str) -> Iterator[FoundResult]
- `find`(location: str) -> Iterator[BaseDistribution]
- `find_linked`(location: str) -> Iterator[BaseDistribution]
- `_find_eggs_in_dir`(location: str) -> Iterator[BaseDistribution]
- `_find_eggs_in_zip`(location: str) -> Iterator[BaseDistribution]
- `find_eggs`(location: str) -> Iterator[BaseDistribution]
- `default`() -> BaseEnvironment
- `from_paths`(paths: [Optional[List[str]]](#optional)) -> BaseEnvironment
- `_iter_distributions`() -> Iterator[BaseDistribution]
- `get_distribution`(name: str) -> [Optional[BaseDistribution]](#optional)

### Implementation
**_DistributionFinder**
  - installed_location: Optional[BasePath]
**Environment**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/metadata/importlib/_envs.py`  
**Dependencies**: `functools`, `importlib.metadata`, `logging`, `os`, `pathlib`, `sys`, `zipfile`, `zipimport`, `typing.Iterator`, `typing.List`, `typing.Optional`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.metadata.base.BaseDistribution`, `pip._internal.metadata.base.BaseEnvironment`, `pip._internal.models.wheel.Wheel`, `pip._internal.utils.deprecation.deprecated`, `pip._internal.utils.filetypes.WHEEL_EXTENSION`, `_compat.BadMetadata`, `_compat.BasePath`, `_compat.get_dist_canonical_name`, `_compat.get_info_location`, `_dists.Distribution`, `pip._vendor.pkg_resources.find_distributions`, `pip._internal.metadata.pkg_resources`, `pip._vendor.pkg_resources.find_eggs_in_zip`, `pip._internal.metadata.pkg_resources`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.resolution.legacy



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/resolution/legacy/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.resolution.legacy.resolver
:::{doc} _check_dist_requires_python:55
Check whether the given Python version is compatible with a distribution's
"Requires-Python" value.

:param version_info: A 3-tuple of ints representing the Python
    major-minor-micro version to check.
:param ignore_requires_python: Whether to ignore the "Requires-Python"
    value if the given Python version isn't compatible.

:raises UnsupportedPythonVersion: When the given Python version isn't
    compatible.
:::
:::{doc} Resolver:109
Resolves which packages need to be installed/uninstalled to perform     the requested operation without breaking the requirements of any package.
    
:::
**Imports**: `logging`, `sys`, `collections.defaultdict`, `itertools.chain`, `typing.DefaultDict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `pip._vendor.packaging.specifiers`, `pip._vendor.packaging.requirements.Requirement`, `pip._internal.cache.WheelCache`, `pip._internal.exceptions.BestVersionAlreadyInstalled`, `pip._internal.exceptions.DistributionNotFound`, `pip._internal.exceptions.HashError`, `pip._internal.exceptions.HashErrors`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.NoneMetadataError`, `pip._internal.exceptions.UnsupportedPythonVersion`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.metadata.BaseDistribution`, `pip._internal.models.link.Link`, `pip._internal.models.wheel.Wheel`, `pip._internal.operations.prepare.RequirementPreparer`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.req.req_install.check_invalid_constraint_type`, `pip._internal.req.req_set.RequirementSet`, `pip._internal.resolution.base.BaseResolver`, `pip._internal.resolution.base.InstallRequirementProvider`, `pip._internal.utils.compatibility_tags`, `pip._internal.utils.compatibility_tags.get_supported`, `pip._internal.utils.direct_url_helpers.direct_url_from_link`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.normalize_version_info`, `pip._internal.utils.packaging.check_requires_python`
**Type References**: [[List]], [[Optional]], [[Resolver]], [[Set]]

### Interface
- `_check_dist_requires_python`(dist: BaseDistribution, version_info: Tuple[<ast.Tuple object at 0x166a13cd0>], ignore_requires_python: bool) -> None
- `__init__`(preparer: RequirementPreparer, finder: PackageFinder, wheel_cache: [Optional[WheelCache]](#optional), make_install_req: InstallRequirementProvider, use_user_site: bool, ignore_dependencies: bool, ignore_installed: bool, ignore_requires_python: bool, force_reinstall: bool, upgrade_strategy: str, py_version_info: [Optional[Tuple[<ast.Tuple object at 0x166a0a690>]]](#optional)) -> None
- `resolve`(root_reqs: [List[InstallRequirement]](#list), check_supported_wheels: bool) -> RequirementSet
- `_add_requirement_to_set`(requirement_set: RequirementSet, install_req: InstallRequirement, parent_req_name: [Optional[str]](#optional), extras_requested: [Optional[Iterable[str]]](#optional)) -> Tuple[<ast.Tuple object at 0x166a1d750>]
- `_is_upgrade_allowed`(req: InstallRequirement) -> bool
- `_set_req_to_reinstall`(req: InstallRequirement) -> None
- `_check_skip_installed`(req_to_install: InstallRequirement) -> [Optional[str]](#optional)
- `_find_requirement_link`(req: InstallRequirement) -> [Optional[Link]](#optional)
- `_populate_link`(req: InstallRequirement) -> None
- `_get_dist_for`(req: InstallRequirement) -> BaseDistribution
- `_resolve_one`(requirement_set: RequirementSet, req_to_install: InstallRequirement) -> [List[InstallRequirement]](#list)
- `get_installation_order`(req_set: RequirementSet) -> [List[InstallRequirement]](#list)
- `add_req`(subreq: Requirement, extras_requested: Iterable[str]) -> None
- `schedule`(req: InstallRequirement) -> None

### Implementation
**Resolver**
  - discovered_reqs: List[InstallRequirement]
  - more_reqs: List[InstallRequirement]
  - ordered_reqs: Set[InstallRequirement]
  - existing_req: Optional[InstallRequirement]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/resolution/legacy/resolver.py`  
**Dependencies**: `logging`, `sys`, `collections.defaultdict`, `itertools.chain`, `typing.DefaultDict`, `typing.Iterable`, `typing.List`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `pip._vendor.packaging.specifiers`, `pip._vendor.packaging.requirements.Requirement`, `pip._internal.cache.WheelCache`, `pip._internal.exceptions.BestVersionAlreadyInstalled`, `pip._internal.exceptions.DistributionNotFound`, `pip._internal.exceptions.HashError`, `pip._internal.exceptions.HashErrors`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.NoneMetadataError`, `pip._internal.exceptions.UnsupportedPythonVersion`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.metadata.BaseDistribution`, `pip._internal.models.link.Link`, `pip._internal.models.wheel.Wheel`, `pip._internal.operations.prepare.RequirementPreparer`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.req.req_install.check_invalid_constraint_type`, `pip._internal.req.req_set.RequirementSet`, `pip._internal.resolution.base.BaseResolver`, `pip._internal.resolution.base.InstallRequirementProvider`, `pip._internal.utils.compatibility_tags`, `pip._internal.utils.compatibility_tags.get_supported`, `pip._internal.utils.direct_url_helpers.direct_url_from_link`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.misc.normalize_version_info`, `pip._internal.utils.packaging.check_requires_python`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.resolution.resolvelib.provider
:::{doc} _get_with_identifier:54
Get item from a package name lookup mapping with a resolver identifier.

This extra logic is needed when the target mapping is keyed by package
name, which cannot be directly looked up with an identifier (which may
contain requested extras). Additional logic is added to also look up a value
by "cleaning up" the extras from the identifier.
:::
:::{doc} PipProvider:79
Pip's provider implementation for resolvelib.

:params constraints: A mapping of constraints specified by the user. Keys
    are canonicalized project names.
:params ignore_dependencies: Whether the user specified ``--no-deps``.
:params upgrade_strategy: The user-specified upgrade strategy.
:params user_requested: A set of canonicalized package names that the user
    supplied for pip to install/upgrade.
:::
**Imports**: `collections`, `math`, `functools.lru_cache`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterable`, `typing.Iterator`, `typing.Mapping`, `typing.Sequence`, `typing.TypeVar`, `typing.Union`, `pip._vendor.resolvelib.providers.AbstractProvider`, `base.Candidate`, `base.Constraint`, `base.Requirement`, `candidates.REQUIRES_PYTHON_IDENTIFIER`, `factory.Factory`, `pip._vendor.resolvelib.providers.Preference`, `pip._vendor.resolvelib.resolvers.RequirementInformation`
**Type References**: [[PipProvider]], [[Union]]

### Interface
- `_get_with_identifier`(mapping: Mapping[<ast.Tuple object at 0x166a95550>], identifier: str, default: D) -> [Union[<ast.Tuple object at 0x166a8fc50>]](#union)
- `__init__`(factory: Factory, constraints: [Dict[<ast.Tuple object at 0x166a8ee10>]](#dict), ignore_dependencies: bool, upgrade_strategy: str, user_requested: [Dict[<ast.Tuple object at 0x166a8e8d0>]](#dict)) -> None
- `identify`(requirement_or_candidate: [Union[<ast.Tuple object at 0x166a8ccd0>]](#union)) -> str
- `get_preference`(identifier: str, resolutions: Mapping[<ast.Tuple object at 0x166a8c310>], candidates: Mapping[<ast.Tuple object at 0x166a8bf90>], information: Mapping[<ast.Tuple object at 0x166a8bb50>], backtrack_causes: Sequence[PreferenceInformation]) -> Preference
- `find_matches`(identifier: str, requirements: Mapping[<ast.Tuple object at 0x166a987d0>], incompatibilities: Mapping[<ast.Tuple object at 0x166a98390>]) -> Iterable[Candidate]
- `is_satisfied_by`(requirement: Requirement, candidate: Candidate) -> bool
- `get_dependencies`(candidate: Candidate) -> Sequence[Requirement]
- `is_backtrack_cause`(identifier: str, backtrack_causes: Sequence[PreferenceInformation]) -> bool
- `_eligible_for_upgrade`(identifier: str) -> bool

### Implementation
**PipProvider**
  - requested_order: Union[<ast.Tuple object at 0x166a21d10>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/resolution/resolvelib/provider.py`  
**Dependencies**: `collections`, `math`, `functools.lru_cache`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.Iterable`, `typing.Iterator`, `typing.Mapping`, `typing.Sequence`, `typing.TypeVar`, `typing.Union`, `pip._vendor.resolvelib.providers.AbstractProvider`, `base.Candidate`, `base.Constraint`, `base.Requirement`, `candidates.REQUIRES_PYTHON_IDENTIFIER`, `factory.Factory`, `pip._vendor.resolvelib.providers.Preference`, `pip._vendor.resolvelib.resolvers.RequirementInformation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.resolution.resolvelib.found_candidates
:::{doc} _iter_built:42
Iterator for ``FoundCandidates``.

This iterator is used when the package is not already installed. Candidates
from index come later in their normal ordering.
:::
:::{doc} _iter_built_with_prepended:73
Iterator for ``FoundCandidates``.

This iterator is used when the resolver prefers the already-installed
candidate and NOT to upgrade. The installed candidate is therefore
always yielded first, and candidates from index come later in their
normal ordering, except skipped when the version is already installed.
:::
:::{doc} _iter_built_with_inserted:95
Iterator for ``FoundCandidates``.

This iterator is used when the resolver prefers to upgrade an
already-installed package. Candidates from index are returned in their
normal ordering, except replaced when the version is already installed.

The implementation iterates through and yields other candidates, inserting
the installed candidate exactly once before we start yielding older or
equivalent candidates, or after all other candidates if they are all newer.
:::
:::{doc} FoundCandidates:127
A lazy sequence to provide candidates to the resolver.

The intended usage is to return this from `find_matches()` so the resolver
can iterate through the sequence multiple times, but only access the index
page when remote packages are actually needed. This improve performances
when suitable candidates are already installed on disk.
:::
**Imports**: `functools`, `logging`, `collections.abc.Sequence`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Iterator`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `pip._vendor.packaging.version._BaseVersion`, `pip._internal.exceptions.MetadataInvalid`, `base.Candidate`
**Type References**: [[FoundCandidates]], [[Set]]

### Interface
- `_iter_built`(infos: Iterator[IndexCandidateInfo]) -> Iterator[Candidate]
- `_iter_built_with_prepended`(installed: Candidate, infos: Iterator[IndexCandidateInfo]) -> Iterator[Candidate]
- `_iter_built_with_inserted`(installed: Candidate, infos: Iterator[IndexCandidateInfo]) -> Iterator[Candidate]
- `__init__`(get_infos: Callable[<ast.Tuple object at 0x166aca990>], installed: [Optional[Candidate]](#optional), prefers_installed: bool, incompatible_ids: Set[int]) -> Any
- `__getitem__`(index: Any) -> Any
- `__iter__`() -> Iterator[Candidate]
- `__len__`() -> int
- `__bool__`() -> bool

### Implementation
**FoundCandidates**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/resolution/resolvelib/found_candidates.py`  
**Dependencies**: `functools`, `logging`, `collections.abc.Sequence`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Callable`, `typing.Iterator`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `pip._vendor.packaging.version._BaseVersion`, `pip._internal.exceptions.MetadataInvalid`, `base.Candidate`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.resolution.resolvelib.reporter
:::{doc} PipDebuggingReporter:58
A reporter that does an info log for every event it sees.
:::
**Imports**: `collections.defaultdict`, `logging.getLogger`, `typing.Any`, `typing.DefaultDict`, `pip._vendor.resolvelib.reporters.BaseReporter`, `base.Candidate`, `base.Requirement`
**Type References**: [[PipDebuggingReporter]], [[PipReporter]]

### Interface
- `__init__`() -> None
- `rejecting_candidate`(criterion: Any, candidate: Candidate) -> None
- `starting`() -> None
- `starting_round`(index: int) -> None
- `ending_round`(index: int, state: Any) -> None
- `ending`(state: Any) -> None
- `adding_requirement`(requirement: Requirement, parent: Candidate) -> None
- `pinning`(candidate: Candidate) -> None

### Implementation
**PipReporter**

**PipDebuggingReporter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/resolution/resolvelib/reporter.py`  
**Dependencies**: `collections.defaultdict`, `logging.getLogger`, `typing.Any`, `typing.DefaultDict`, `pip._vendor.resolvelib.reporters.BaseReporter`, `base.Candidate`, `base.Requirement`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.resolution.resolvelib



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/resolution/resolvelib/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.resolution.resolvelib.factory

**Imports**: `contextlib`, `functools`, `logging`, `typing.TYPE_CHECKING`, `typing.Callable`, `typing.Dict`, `typing.FrozenSet`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Mapping`, `typing.NamedTuple`, `typing.Optional`, `typing.Protocol`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `typing.TypeVar`, `typing.cast`, `pip._vendor.packaging.requirements.InvalidRequirement`, `pip._vendor.packaging.specifiers.SpecifierSet`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.InvalidVersion`, `pip._vendor.packaging.version.Version`, `pip._vendor.resolvelib.ResolutionImpossible`, `pip._internal.cache.CacheEntry`, `pip._internal.cache.WheelCache`, `pip._internal.exceptions.DistributionNotFound`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.InvalidInstalledPackage`, `pip._internal.exceptions.MetadataInconsistent`, `pip._internal.exceptions.MetadataInvalid`, `pip._internal.exceptions.UnsupportedPythonVersion`, `pip._internal.exceptions.UnsupportedWheel`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.get_default_environment`, `pip._internal.models.link.Link`, `pip._internal.models.wheel.Wheel`, `pip._internal.operations.prepare.RequirementPreparer`, `pip._internal.req.constructors.install_req_drop_extras`, `pip._internal.req.constructors.install_req_from_link_and_ireq`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.req.req_install.check_invalid_constraint_type`, `pip._internal.resolution.base.InstallRequirementProvider`, `pip._internal.utils.compatibility_tags.get_supported`, `pip._internal.utils.hashes.Hashes`, `pip._internal.utils.packaging.get_requirement`, `pip._internal.utils.virtualenv.running_under_virtualenv`, `base.Candidate`, `base.Constraint`, `base.Requirement`, `candidates.AlreadyInstalledCandidate`, `candidates.BaseCandidate`, `candidates.EditableCandidate`, `candidates.ExtrasCandidate`, `candidates.LinkCandidate`, `candidates.RequiresPythonCandidate`, `candidates.as_base_candidate`, `found_candidates.FoundCandidates`, `found_candidates.IndexCandidateInfo`, `requirements.ExplicitRequirement`, `requirements.RequiresPythonRequirement`, `requirements.SpecifierRequirement`, `requirements.SpecifierWithoutExtrasRequirement`, `requirements.UnsatisfiableRequirement`
**Type References**: [[Candidate]], [[CollectedRootRequirements]], [[ConflictCause]], [[Dict]], [[Factory]], [[FrozenSet]], [[List]], [[Optional]], [[RequiresPythonRequirement]], [[Set]]

### Interface
- `__init__`(finder: PackageFinder, preparer: RequirementPreparer, make_install_req: InstallRequirementProvider, wheel_cache: [Optional[WheelCache]](#optional), use_user_site: bool, force_reinstall: bool, ignore_installed: bool, ignore_requires_python: bool, py_version_info: [Optional[Tuple[<ast.Tuple object at 0x166b077d0>]]](#optional)) -> None
- `force_reinstall`() -> bool
- `_fail_if_link_is_unsupported_wheel`(link: Link) -> None
- `_make_extras_candidate`(base: BaseCandidate, extras: FrozenSet[str]) -> ExtrasCandidate
- `_make_candidate_from_dist`(dist: BaseDistribution, extras: FrozenSet[str], template: InstallRequirement) -> Candidate
- `_make_candidate_from_link`(link: Link, extras: FrozenSet[str], template: InstallRequirement, name: [Optional[NormalizedName]](#optional), version: [Optional[Version]](#optional)) -> [Optional[Candidate]](#optional)
- `_make_base_candidate_from_link`(link: Link, template: InstallRequirement, name: [Optional[NormalizedName]](#optional), version: [Optional[Version]](#optional)) -> [Optional[BaseCandidate]](#optional)
- `_iter_found_candidates`(ireqs: Sequence[InstallRequirement], specifier: SpecifierSet, hashes: Hashes, prefers_installed: bool, incompatible_ids: Set[int]) -> Iterable[Candidate]
- `_iter_explicit_candidates_from_base`(base_requirements: Iterable[Requirement], extras: FrozenSet[str]) -> Iterator[Candidate]
- `_iter_candidates_from_constraints`(identifier: str, constraint: Constraint, template: InstallRequirement) -> Iterator[Candidate]
- `find_candidates`(identifier: str, requirements: Mapping[<ast.Tuple object at 0x166b55750>], incompatibilities: Mapping[<ast.Tuple object at 0x166b55b90>], constraint: Constraint, prefers_installed: bool, is_satisfied_by: Callable[<ast.Tuple object at 0x166b561d0>]) -> Iterable[Candidate]
- `_make_requirements_from_install_req`(ireq: InstallRequirement, requested_extras: Iterable[str]) -> Iterator[Requirement]
- `collect_root_requirements`(root_ireqs: [List[InstallRequirement]](#list)) -> CollectedRootRequirements
- `make_requirement_from_candidate`(candidate: Candidate) -> ExplicitRequirement
- `make_requirements_from_spec`(specifier: str, comes_from: [Optional[InstallRequirement]](#optional), requested_extras: Iterable[str]) -> Iterator[Requirement]
- `make_requires_python_requirement`(specifier: SpecifierSet) -> [Optional[Requirement]](#optional)
- `get_wheel_cache_entry`(link: Link, name: [Optional[str]](#optional)) -> [Optional[CacheEntry]](#optional)
- `get_dist_to_uninstall`(candidate: Candidate) -> [Optional[BaseDistribution]](#optional)
- `_report_requires_python_error`(causes: Sequence[ConflictCause]) -> UnsupportedPythonVersion
- `_report_single_requirement_conflict`(req: Requirement, parent: [Optional[Candidate]](#optional)) -> DistributionNotFound
- `get_installation_error`(e: ResolutionImpossible[Requirement, Candidate], constraints: [Dict[<ast.Tuple object at 0x166bafa90>]](#dict)) -> InstallationError
- `_get_installed_candidate`() -> [Optional[Candidate]](#optional)
- `iter_index_candidate_infos`() -> Iterator[IndexCandidateInfo]
- `text_join`(parts: [List[str]](#list)) -> str
- `describe_trigger`(parent: Candidate) -> str
- `is_pinned`(specifier: SpecifierSet) -> bool

### Implementation
**CollectedRootRequirements**
  - requirements: List[Requirement]
  - constraints: Dict[<ast.Tuple object at 0x166b14cd0>]
  - user_requested: Dict[<ast.Tuple object at 0x166b14910>]
**Factory**
  - base: Optional[BaseCandidate]
  - extras: FrozenSet[str]
  - explicit_candidates: Set[Candidate]
  - ireqs: List[InstallRequirement]
  - versions_set: Set[Version]
  - yanked_versions_set: Set[Version]
**ConflictCause**
  - requirement: RequiresPythonRequirement
  - parent: Candidate
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/resolution/resolvelib/factory.py`  
**Dependencies**: `contextlib`, `functools`, `logging`, `typing.TYPE_CHECKING`, `typing.Callable`, `typing.Dict`, `typing.FrozenSet`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.Mapping`, `typing.NamedTuple`, `typing.Optional`, `typing.Protocol`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `typing.TypeVar`, `typing.cast`, `pip._vendor.packaging.requirements.InvalidRequirement`, `pip._vendor.packaging.specifiers.SpecifierSet`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.InvalidVersion`, `pip._vendor.packaging.version.Version`, `pip._vendor.resolvelib.ResolutionImpossible`, `pip._internal.cache.CacheEntry`, `pip._internal.cache.WheelCache`, `pip._internal.exceptions.DistributionNotFound`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.InvalidInstalledPackage`, `pip._internal.exceptions.MetadataInconsistent`, `pip._internal.exceptions.MetadataInvalid`, `pip._internal.exceptions.UnsupportedPythonVersion`, `pip._internal.exceptions.UnsupportedWheel`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.get_default_environment`, `pip._internal.models.link.Link`, `pip._internal.models.wheel.Wheel`, `pip._internal.operations.prepare.RequirementPreparer`, `pip._internal.req.constructors.install_req_drop_extras`, `pip._internal.req.constructors.install_req_from_link_and_ireq`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.req.req_install.check_invalid_constraint_type`, `pip._internal.resolution.base.InstallRequirementProvider`, `pip._internal.utils.compatibility_tags.get_supported`, `pip._internal.utils.hashes.Hashes`, `pip._internal.utils.packaging.get_requirement`, `pip._internal.utils.virtualenv.running_under_virtualenv`, `base.Candidate`, `base.Constraint`, `base.Requirement`, `candidates.AlreadyInstalledCandidate`, `candidates.BaseCandidate`, `candidates.EditableCandidate`, `candidates.ExtrasCandidate`, `candidates.LinkCandidate`, `candidates.RequiresPythonCandidate`, `candidates.as_base_candidate`, `found_candidates.FoundCandidates`, `found_candidates.IndexCandidateInfo`, `requirements.ExplicitRequirement`, `requirements.RequiresPythonRequirement`, `requirements.SpecifierRequirement`, `requirements.SpecifierWithoutExtrasRequirement`, `requirements.UnsatisfiableRequirement`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.resolution.resolvelib.requirements
:::{doc} SpecifierWithoutExtrasRequirement:122
Requirement backed by an install requirement on a base package.
Trims extras from its install requirement if there are any.
:::
:::{doc} RequiresPythonRequirement:156
A requirement representing Requires-Python metadata.
:::
:::{doc} UnsatisfiableRequirement:210
A requirement that cannot be satisfied.
:::
**Imports**: `typing.Any`, `typing.Optional`, `pip._vendor.packaging.specifiers.SpecifierSet`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.req.constructors.install_req_drop_extras`, `pip._internal.req.req_install.InstallRequirement`, `base.Candidate`, `base.CandidateLookup`, `base.Requirement`, `base.format_name`
**Type References**: [[ExplicitRequirement]], [[RequiresPythonRequirement]], [[SpecifierRequirement]], [[SpecifierWithoutExtrasRequirement]], [[UnsatisfiableRequirement]]

### Interface
- `__init__`(name: NormalizedName) -> None
- `__str__`() -> str
- `__repr__`() -> str
- `__hash__`() -> int
- `__eq__`(other: object) -> bool
- `project_name`() -> NormalizedName
- `name`() -> str
- `format_for_error`() -> str
- `get_candidate_lookup`() -> CandidateLookup
- `is_satisfied_by`(candidate: Candidate) -> bool
- `_equal`() -> str

### Implementation
**ExplicitRequirement**

**SpecifierRequirement**

**SpecifierWithoutExtrasRequirement**

**RequiresPythonRequirement**

**UnsatisfiableRequirement**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/resolution/resolvelib/requirements.py`  
**Dependencies**: `typing.Any`, `typing.Optional`, `pip._vendor.packaging.specifiers.SpecifierSet`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.req.constructors.install_req_drop_extras`, `pip._internal.req.req_install.InstallRequirement`, `base.Candidate`, `base.CandidateLookup`, `base.Requirement`, `base.format_name`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.resolution.resolvelib.resolver
:::{doc} get_topological_weights:217
Assign weights to each node based on how "deep" they are.

This implementation may change at any point in the future without prior
notice.

We first simplify the dependency graph by pruning any leaves and giving them
the highest weight: a package without any dependencies should be installed
first. This is done again and again in the same way, giving ever less weight
to the newly found leaves. The loop stops when no leaves are left: all
remaining packages have at least one dependency left in the graph.

Then we continue with the remaining graph, by taking the length for the
longest path to any node from root, ignoring any paths that contain a single
node twice (i.e. cycles). This is done through a depth-first search through
the graph, while keeping track of the path to the node.

Cycles in the graph result would result in node being revisited while also
being on its own path. In this case, take no action. This helps ensure we
don't get stuck in a cycle.

When assigning weight, the longer path (i.e. larger length) is preferred.

We are only interested in the weights of packages that are in the
requirement_keys.
:::
:::{doc} _req_set_item_sorter:306
Key function used to sort install requirements for installation.

Based on the "weight" mapping calculated in ``get_installation_order()``.
The canonical package name is returned as the second member as a tie-
breaker to ensure the result is predictable, which is useful in tests.
:::
**Imports**: `contextlib`, `functools`, `logging`, `os`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.List`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `typing.cast`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.resolvelib.BaseReporter`, `pip._vendor.resolvelib.ResolutionImpossible`, `pip._vendor.resolvelib.Resolver`, `pip._vendor.resolvelib.structs.DirectedGraph`, `pip._internal.cache.WheelCache`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.operations.prepare.RequirementPreparer`, `pip._internal.req.constructors.install_req_extend_extras`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.req.req_set.RequirementSet`, `pip._internal.resolution.base.BaseResolver`, `pip._internal.resolution.base.InstallRequirementProvider`, `pip._internal.resolution.resolvelib.provider.PipProvider`, `pip._internal.resolution.resolvelib.reporter.PipDebuggingReporter`, `pip._internal.resolution.resolvelib.reporter.PipReporter`, `pip._internal.utils.packaging.get_requirement`, `base.Candidate`, `base.Requirement`, `factory.Factory`, `pip._vendor.resolvelib.resolvers.Result`
**Type References**: [[BaseReporter]], [[Dict]], [[RLResolver]], [[Resolver]], [[Set]]

### Interface
- `get_topological_weights`(graph: DirectedGraph[Optional[str]], requirement_keys: Set[str]) -> [Dict[<ast.Tuple object at 0x166c5f810>]](#dict)
- `_req_set_item_sorter`(item: Tuple[<ast.Tuple object at 0x166c5fe10>], weights: [Dict[<ast.Tuple object at 0x166c68190>]](#dict)) -> Tuple[<ast.Tuple object at 0x166c68f10>]
- `__init__`(preparer: RequirementPreparer, finder: PackageFinder, wheel_cache: [Optional[WheelCache]](#optional), make_install_req: InstallRequirementProvider, use_user_site: bool, ignore_dependencies: bool, ignore_installed: bool, ignore_requires_python: bool, force_reinstall: bool, upgrade_strategy: str, py_version_info: [Optional[Tuple[<ast.Tuple object at 0x166c33a10>]]](#optional)) -> Any
- `resolve`(root_reqs: [List[InstallRequirement]](#list), check_supported_wheels: bool) -> RequirementSet
- `get_installation_order`(req_set: RequirementSet) -> [List[InstallRequirement]](#list)
- `visit`(node: [Optional[str]](#optional)) -> None

### Implementation
**Resolver**
  - resolver: RLResolver[<ast.Tuple object at 0x166c2f350>]
  - reporter: BaseReporter
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/resolution/resolvelib/resolver.py`  
**Dependencies**: `contextlib`, `functools`, `logging`, `os`, `typing.TYPE_CHECKING`, `typing.Dict`, `typing.List`, `typing.Optional`, `typing.Set`, `typing.Tuple`, `typing.cast`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.resolvelib.BaseReporter`, `pip._vendor.resolvelib.ResolutionImpossible`, `pip._vendor.resolvelib.Resolver`, `pip._vendor.resolvelib.structs.DirectedGraph`, `pip._internal.cache.WheelCache`, `pip._internal.index.package_finder.PackageFinder`, `pip._internal.operations.prepare.RequirementPreparer`, `pip._internal.req.constructors.install_req_extend_extras`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.req.req_set.RequirementSet`, `pip._internal.resolution.base.BaseResolver`, `pip._internal.resolution.base.InstallRequirementProvider`, `pip._internal.resolution.resolvelib.provider.PipProvider`, `pip._internal.resolution.resolvelib.reporter.PipDebuggingReporter`, `pip._internal.resolution.resolvelib.reporter.PipReporter`, `pip._internal.utils.packaging.get_requirement`, `base.Candidate`, `base.Requirement`, `factory.Factory`, `pip._vendor.resolvelib.resolvers.Result`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.resolution.resolvelib.candidates
:::{doc} as_base_candidate:44
The runtime version of BaseCandidate.
:::
:::{doc} _InstallRequirementBackedCandidate:125
A candidate backed by an ``InstallRequirement``.

This represents a package request with the target not being already
in the environment, and needs to be fetched and installed. The backing
``InstallRequirement`` is responsible for most of the leg work; this
class exposes appropriate information to the resolver.

:param link: The link passed to the ``InstallRequirement``. The backing
    ``InstallRequirement`` will use this link to fetch the distribution.
:param source_link: The link this candidate "originates" from. This is
    different from ``link`` when the link is found in the wheel cache.
    ``link`` would point to the wheel cache, while this points to the
    found remote link (e.g. from pypi.org).
:::
:::{doc} ExtrasCandidate:413
A candidate that has 'extras', indicating additional dependencies.

Requirements can be for a project with dependencies, something like
foo[extra].  The extras don't affect the project/version being installed
directly, but indicate that we need additional dependencies. We model that
by having an artificial ExtrasCandidate that wraps the "base" candidate.

The ExtrasCandidate differs from the base in the following ways:

1. It has a unique name, of the form foo[extra]. This causes the resolver
   to treat it as a separate node in the dependency graph.
2. When we're getting the candidate's dependencies,
   a) We specify that we want the extra dependencies as well.
   b) We add a dependency on the base candidate.
      See below for why this is needed.
3. We return None for the underlying InstallRequirement, as the base
   candidate will provide it, and we don't want to end up with duplicates.

The dependency on the base candidate is needed so that the resolver can't
decide that it should recommend foo[extra1] version 1.0 and foo[extra2]
version 2.0. Having those candidates depend on foo=1.0 and foo=2.0
respectively forces the resolver to recognise that this is a conflict.
:::
**Imports**: `logging`, `sys`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.FrozenSet`, `typing.Iterable`, `typing.Optional`, `typing.Tuple`, `typing.Union`, `typing.cast`, `pip._vendor.packaging.requirements.InvalidRequirement`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.Version`, `pip._internal.exceptions.HashError`, `pip._internal.exceptions.InstallationSubprocessError`, `pip._internal.exceptions.InvalidInstalledPackage`, `pip._internal.exceptions.MetadataInconsistent`, `pip._internal.exceptions.MetadataInvalid`, `pip._internal.metadata.BaseDistribution`, `pip._internal.models.link.Link`, `pip._internal.models.link.links_equivalent`, `pip._internal.models.wheel.Wheel`, `pip._internal.req.constructors.install_req_from_editable`, `pip._internal.req.constructors.install_req_from_line`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.utils.direct_url_helpers.direct_url_from_link`, `pip._internal.utils.misc.normalize_version_info`, `base.Candidate`, `base.Requirement`, `base.format_name`, `factory.Factory`
**Type References**: [[AlreadyInstalledCandidate]], [[BaseDistribution]], [[EditableCandidate]], [[ExtrasCandidate]], [[LinkCandidate]], [[RequiresPythonCandidate]], [[_InstallRequirementBackedCandidate]]

### Interface
- `as_base_candidate`(candidate: Candidate) -> [Optional[BaseCandidate]](#optional)
- `make_install_req_from_link`(link: Link, template: InstallRequirement) -> InstallRequirement
- `make_install_req_from_editable`(link: Link, template: InstallRequirement) -> InstallRequirement
- `_make_install_req_from_dist`(dist: BaseDistribution, template: InstallRequirement) -> InstallRequirement
- `__init__`(py_version_info: [Optional[Tuple[<ast.Tuple object at 0x166cfd990>]]](#optional)) -> None
- `__str__`() -> str
- `__repr__`() -> str
- `__hash__`() -> int
- `__eq__`(other: Any) -> bool
- `source_link`() -> [Optional[Link]](#optional)
- `project_name`() -> NormalizedName
- `name`() -> str
- `version`() -> Version
- `format_for_error`() -> str
- `_prepare_distribution`() -> BaseDistribution
- `_check_metadata_consistency`(dist: BaseDistribution) -> None
- `_prepare`() -> BaseDistribution
- `iter_dependencies`(with_requires: bool) -> Iterable[Optional[Requirement]]
- `get_install_requirement`() -> [Optional[InstallRequirement]](#optional)
- `is_editable`() -> bool
- `is_installed`() -> bool

### Implementation
**_InstallRequirementBackedCandidate**
  - dist: BaseDistribution
**LinkCandidate**

**EditableCandidate**

**AlreadyInstalledCandidate**

**ExtrasCandidate**

**RequiresPythonCandidate**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/resolution/resolvelib/candidates.py`  
**Dependencies**: `logging`, `sys`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.FrozenSet`, `typing.Iterable`, `typing.Optional`, `typing.Tuple`, `typing.Union`, `typing.cast`, `pip._vendor.packaging.requirements.InvalidRequirement`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._vendor.packaging.version.Version`, `pip._internal.exceptions.HashError`, `pip._internal.exceptions.InstallationSubprocessError`, `pip._internal.exceptions.InvalidInstalledPackage`, `pip._internal.exceptions.MetadataInconsistent`, `pip._internal.exceptions.MetadataInvalid`, `pip._internal.metadata.BaseDistribution`, `pip._internal.models.link.Link`, `pip._internal.models.link.links_equivalent`, `pip._internal.models.wheel.Wheel`, `pip._internal.req.constructors.install_req_from_editable`, `pip._internal.req.constructors.install_req_from_line`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.utils.direct_url_helpers.direct_url_from_link`, `pip._internal.utils.misc.normalize_version_info`, `base.Candidate`, `base.Requirement`, `base.format_name`, `factory.Factory`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.resolution.resolvelib.base

**Imports**: `dataclasses.dataclass`, `typing.FrozenSet`, `typing.Iterable`, `typing.Optional`, `typing.Tuple`, `pip._vendor.packaging.specifiers.SpecifierSet`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.version.Version`, `pip._internal.models.link.Link`, `pip._internal.models.link.links_equivalent`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.utils.hashes.Hashes`
**Type References**: [[Candidate]], [[Constraint]], [[FrozenSet]], [[Hashes]], [[Requirement]], [[SpecifierSet]]

### Interface
- `format_name`(project: NormalizedName, extras: FrozenSet[NormalizedName]) -> str
- `_match_link`(link: Link, candidate: Candidate) -> bool
- `empty`() -> Constraint
- `from_ireq`(ireq: InstallRequirement) -> Constraint
- `__bool__`() -> bool
- `__and__`(other: InstallRequirement) -> Constraint
- `is_satisfied_by`(candidate: Candidate) -> bool
- `project_name`() -> NormalizedName
- `name`() -> str
- `get_candidate_lookup`() -> CandidateLookup
- `format_for_error`() -> str
- `version`() -> Version
- `is_installed`() -> bool
- `is_editable`() -> bool
- `source_link`() -> [Optional[Link]](#optional)
- `iter_dependencies`(with_requires: bool) -> Iterable[Optional[Requirement]]
- `get_install_requirement`() -> [Optional[InstallRequirement]](#optional)

### Implementation
**Constraint**
  - specifier: SpecifierSet
  - hashes: Hashes
  - links: FrozenSet[Link]
**Requirement**

**Candidate**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/resolution/resolvelib/base.py`  
**Dependencies**: `dataclasses.dataclass`, `typing.FrozenSet`, `typing.Iterable`, `typing.Optional`, `typing.Tuple`, `pip._vendor.packaging.specifiers.SpecifierSet`, `pip._vendor.packaging.utils.NormalizedName`, `pip._vendor.packaging.version.Version`, `pip._internal.models.link.Link`, `pip._internal.models.link.links_equivalent`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.utils.hashes.Hashes`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations.install.editable_legacy
:::{doc} install_editable:15
Install a package in editable mode. Most arguments are pass-through
to setuptools.
:::
**Imports**: `logging`, `typing.Optional`, `typing.Sequence`, `pip._internal.build_env.BuildEnvironment`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.setuptools_build.make_setuptools_develop_args`, `pip._internal.utils.subprocess.call_subprocess`
### Interface
- `install_editable`() -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/install/editable_legacy.py`  
**Dependencies**: `logging`, `typing.Optional`, `typing.Sequence`, `pip._internal.build_env.BuildEnvironment`, `pip._internal.utils.logging.indent_log`, `pip._internal.utils.setuptools_build.make_setuptools_develop_args`, `pip._internal.utils.subprocess.call_subprocess`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations.install



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/install/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations.install.wheel
:::{doc} rehash:80
Return (encoded_digest, length) for path using hashlib.sha256()
:::
:::{doc} csv_io_kwargs:87
Return keyword arguments to properly open a CSV file
in the given mode.
:::
:::{doc} fix_script:94
Replace #!python with #!/path/to/python
Return True if file was changed.
:::
:::{doc} message_about_scripts_not_on_PATH:129
Determine if any scripts are not on PATH and format a warning.
Returns a warning message if one or more scripts are not on PATH,
otherwise None.
:::
:::{doc} _normalized_outrows:201
Normalize the given rows of a RECORD file.

Items in each row are converted into str. Rows are then sorted to make
the value more predictable for tests.

Each row is a 3-tuple (path, hash, size) and corresponds to a record of
a RECORD file (see PEP 376 and PEP 427 for details).  For the rows
passed to this function, the size can be an integer as an int or string,
or the empty string.
:::
:::{doc} get_csv_rows_for_installed:241
:param installed: A map from archive RECORD path to installation RECORD
    path.
:::
:::{doc} get_console_script_specs:273
Given the mapping from entrypoint name to callable, return the relevant
console script specs.
:::
:::{doc} _install_wheel:422
Install a wheel.

:param name: Name of the project to install
:param wheel_zip: open ZipFile for wheel being installed
:param scheme: Distutils scheme dictating the install directories
:param req_description: String used in place of the requirement, for
    logging
:param pycompile: Whether to byte-compile installed Python files
:param warn_script_location: Whether to check that scripts are installed
    into a directory on PATH
:raises UnsupportedWheel:
    * when the directory holds an unpacked wheel with incompatible
      Wheel-Version
    * when the .dist-info dir does not match the wheel
:::
**Imports**: `collections`, `compileall`, `contextlib`, `csv`, `importlib`, `logging`, `os.path`, `re`, `shutil`, `sys`, `warnings`, `base64.urlsafe_b64encode`, `email.message.Message`, `itertools.chain`, `itertools.filterfalse`, `itertools.starmap`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.BinaryIO`, `typing.Callable`, `typing.Dict`, `typing.Generator`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.NewType`, `typing.Optional`, `typing.Protocol`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `typing.Union`, `typing.cast`, `zipfile.ZipFile`, `zipfile.ZipInfo`, `pip._vendor.distlib.scripts.ScriptMaker`, `pip._vendor.distlib.util.get_export_entry`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.exceptions.InstallationError`, `pip._internal.locations.get_major_minor_version`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.FilesystemWheel`, `pip._internal.metadata.get_wheel_distribution`, `pip._internal.models.direct_url.DIRECT_URL_METADATA_NAME`, `pip._internal.models.direct_url.DirectUrl`, `pip._internal.models.scheme.SCHEME_KEYS`, `pip._internal.models.scheme.Scheme`, `pip._internal.utils.filesystem.adjacent_tmp_file`, `pip._internal.utils.filesystem.replace`, `pip._internal.utils.misc.StreamWrapper`, `pip._internal.utils.misc.ensure_dir`, `pip._internal.utils.misc.hash_file`, `pip._internal.utils.misc.partition`, `pip._internal.utils.unpacking.current_umask`, `pip._internal.utils.unpacking.is_within_directory`, `pip._internal.utils.unpacking.set_extracted_file_to_default_mode_plus_executable`, `pip._internal.utils.unpacking.zip_item_is_executable`, `pip._internal.utils.wheel.parse_wheel`
**Type References**: [[Dict]], [[File]], [[Iterator]], [[List]], [[MissingCallableSuffix]], [[PipScriptMaker]], [[RecordPath]], [[ScriptFile]], [[Set]], [[ZipBackedFile]]

### Interface
- `rehash`(path: str, blocksize: int) -> Tuple[<ast.Tuple object at 0x166d60650>]
- `csv_io_kwargs`(mode: str) -> [Dict[<ast.Tuple object at 0x166d539d0>]](#dict)
- `fix_script`(path: str) -> bool
- `wheel_root_is_purelib`(metadata: Message) -> bool
- `get_entrypoints`(dist: BaseDistribution) -> Tuple[<ast.Tuple object at 0x166d49650>]
- `message_about_scripts_not_on_PATH`(scripts: Sequence[str]) -> [Optional[str]](#optional)
- `_normalized_outrows`(outrows: Iterable[InstalledCSVRow]) -> [List[Tuple[<ast.Tuple object at 0x166d585d0>]]](#list)
- `_record_to_fs_path`(record_path: RecordPath, lib_dir: str) -> str
- `_fs_to_record_path`(path: str, lib_dir: str) -> RecordPath
- `get_csv_rows_for_installed`(old_csv_rows: [List[List[str]]](#list), installed: [Dict[<ast.Tuple object at 0x166d8ac10>]](#dict), changed: Set[RecordPath], generated: [List[str]](#list), lib_dir: str) -> [List[InstalledCSVRow]](#list)
- `get_console_script_specs`(console: [Dict[<ast.Tuple object at 0x166d9c410>]](#dict)) -> [List[str]](#list)
- `_raise_for_invalid_entrypoint`(specification: str) -> None
- `_install_wheel`(name: str, wheel_zip: ZipFile, wheel_path: str, scheme: Scheme, pycompile: bool, warn_script_location: bool, direct_url: [Optional[DirectUrl]](#optional), requested: bool) -> None
- `req_error_context`(req_description: str) -> Generator[<ast.Tuple object at 0x166e27290>]
- `install_wheel`(name: str, wheel_path: str, scheme: Scheme, req_description: str, pycompile: bool, warn_script_location: bool, direct_url: [Optional[DirectUrl]](#optional), requested: bool) -> None
- `__init__`(entry_point: str) -> None
- `_getinfo`() -> ZipInfo
- `save`() -> None
- `make`(specification: str, options: [Optional[Dict[<ast.Tuple object at 0x166dbaf10>]]](#optional)) -> [List[str]](#list)
- `record_installed`(srcfile: RecordPath, destfile: str, modified: bool) -> None
- `is_dir_path`(path: RecordPath) -> bool
- `assert_no_path_traversal`(dest_dir_path: str, target_path: str) -> None
- `root_scheme_file_maker`(zip_file: ZipFile, dest: str) -> Callable[<ast.Tuple object at 0x166dd2990>]
- `data_scheme_file_maker`(zip_file: ZipFile, scheme: Scheme) -> Callable[<ast.Tuple object at 0x166ddf590>]
- `is_data_scheme_path`(path: RecordPath) -> bool
- `is_script_scheme_path`(path: RecordPath) -> bool
- `is_entrypoint_wrapper`(file: File) -> bool
- `pyc_source_file_paths`() -> Generator[<ast.Tuple object at 0x166dffb50>]
- `pyc_output_path`(path: str) -> str
- `_generate_file`(path: str) -> Generator[<ast.Tuple object at 0x166e13dd0>]
- `make_root_scheme_file`(record_path: RecordPath) -> File
- `make_data_scheme_file`(record_path: RecordPath) -> File

### Implementation
**ZipBackedFile**

**ScriptFile**

**MissingCallableSuffix**

**PipScriptMaker**

**File**
  - src_record_path: RecordPath
  - dest_path: str
  - changed: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/install/wheel.py`  
**Dependencies**: `collections`, `compileall`, `contextlib`, `csv`, `importlib`, `logging`, `os.path`, `re`, `shutil`, `sys`, `warnings`, `base64.urlsafe_b64encode`, `email.message.Message`, `itertools.chain`, `itertools.filterfalse`, `itertools.starmap`, `typing.IO`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.BinaryIO`, `typing.Callable`, `typing.Dict`, `typing.Generator`, `typing.Iterable`, `typing.Iterator`, `typing.List`, `typing.NewType`, `typing.Optional`, `typing.Protocol`, `typing.Sequence`, `typing.Set`, `typing.Tuple`, `typing.Union`, `typing.cast`, `zipfile.ZipFile`, `zipfile.ZipInfo`, `pip._vendor.distlib.scripts.ScriptMaker`, `pip._vendor.distlib.util.get_export_entry`, `pip._vendor.packaging.utils.canonicalize_name`, `pip._internal.exceptions.InstallationError`, `pip._internal.locations.get_major_minor_version`, `pip._internal.metadata.BaseDistribution`, `pip._internal.metadata.FilesystemWheel`, `pip._internal.metadata.get_wheel_distribution`, `pip._internal.models.direct_url.DIRECT_URL_METADATA_NAME`, `pip._internal.models.direct_url.DirectUrl`, `pip._internal.models.scheme.SCHEME_KEYS`, `pip._internal.models.scheme.Scheme`, `pip._internal.utils.filesystem.adjacent_tmp_file`, `pip._internal.utils.filesystem.replace`, `pip._internal.utils.misc.StreamWrapper`, `pip._internal.utils.misc.ensure_dir`, `pip._internal.utils.misc.hash_file`, `pip._internal.utils.misc.partition`, `pip._internal.utils.unpacking.current_umask`, `pip._internal.utils.unpacking.is_within_directory`, `pip._internal.utils.unpacking.set_extracted_file_to_default_mode_plus_executable`, `pip._internal.utils.unpacking.zip_item_is_executable`, `pip._internal.utils.wheel.parse_wheel`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations.build.wheel_legacy
:::{doc} format_command_result:12
Format command information for logging.
:::
:::{doc} get_legacy_build_wheel_path:32
Return the path to the wheel in the temporary build directory.
:::
:::{doc} build_wheel_legacy:59
Build one unpacked package using the "legacy" build process.

Returns path to wheel if successfully built. Otherwise, returns None.
:::
**Imports**: `logging`, `os.path`, `typing.List`, `typing.Optional`, `pip._internal.cli.spinners.open_spinner`, `pip._internal.utils.setuptools_build.make_setuptools_bdist_wheel_args`, `pip._internal.utils.subprocess.call_subprocess`, `pip._internal.utils.subprocess.format_command_args`
### Interface
- `format_command_result`(command_args: [List[str]](#list), command_output: str) -> str
- `get_legacy_build_wheel_path`(names: [List[str]](#list), temp_dir: str, name: str, command_args: [List[str]](#list), command_output: str) -> [Optional[str]](#optional)
- `build_wheel_legacy`(name: str, setup_py_path: str, source_dir: str, global_options: [List[str]](#list), build_options: [List[str]](#list), tempd: str) -> [Optional[str]](#optional)
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/build/wheel_legacy.py`  
**Dependencies**: `logging`, `os.path`, `typing.List`, `typing.Optional`, `pip._internal.cli.spinners.open_spinner`, `pip._internal.utils.setuptools_build.make_setuptools_bdist_wheel_args`, `pip._internal.utils.subprocess.call_subprocess`, `pip._internal.utils.subprocess.format_command_args`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations.build.metadata
:::{doc} generate_metadata:17
Generate metadata using mechanisms described in PEP 517.

Returns the generated metadata directory.
:::
**Imports**: `os`, `pip._vendor.pyproject_hooks.BuildBackendHookCaller`, `pip._internal.build_env.BuildEnvironment`, `pip._internal.exceptions.InstallationSubprocessError`, `pip._internal.exceptions.MetadataGenerationFailed`, `pip._internal.utils.subprocess.runner_with_spinner_message`, `pip._internal.utils.temp_dir.TempDirectory`
### Interface
- `generate_metadata`(build_env: BuildEnvironment, backend: BuildBackendHookCaller, details: str) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/build/metadata.py`  
**Dependencies**: `os`, `pip._vendor.pyproject_hooks.BuildBackendHookCaller`, `pip._internal.build_env.BuildEnvironment`, `pip._internal.exceptions.InstallationSubprocessError`, `pip._internal.exceptions.MetadataGenerationFailed`, `pip._internal.utils.subprocess.runner_with_spinner_message`, `pip._internal.utils.temp_dir.TempDirectory`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations.build.metadata_editable
:::{doc} generate_editable_metadata:17
Generate metadata using mechanisms described in PEP 660.

Returns the generated metadata directory.
:::
**Imports**: `os`, `pip._vendor.pyproject_hooks.BuildBackendHookCaller`, `pip._internal.build_env.BuildEnvironment`, `pip._internal.exceptions.InstallationSubprocessError`, `pip._internal.exceptions.MetadataGenerationFailed`, `pip._internal.utils.subprocess.runner_with_spinner_message`, `pip._internal.utils.temp_dir.TempDirectory`
### Interface
- `generate_editable_metadata`(build_env: BuildEnvironment, backend: BuildBackendHookCaller, details: str) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/build/metadata_editable.py`  
**Dependencies**: `os`, `pip._vendor.pyproject_hooks.BuildBackendHookCaller`, `pip._internal.build_env.BuildEnvironment`, `pip._internal.exceptions.InstallationSubprocessError`, `pip._internal.exceptions.MetadataGenerationFailed`, `pip._internal.utils.subprocess.runner_with_spinner_message`, `pip._internal.utils.temp_dir.TempDirectory`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations.build.wheel_editable
:::{doc} build_wheel_editable:12
Build one InstallRequirement using the PEP 660 build process.

Returns path to wheel if successfully built. Otherwise, returns None.
:::
**Imports**: `logging`, `os`, `typing.Optional`, `pip._vendor.pyproject_hooks.BuildBackendHookCaller`, `pip._vendor.pyproject_hooks.HookMissing`, `pip._internal.utils.subprocess.runner_with_spinner_message`
### Interface
- `build_wheel_editable`(name: str, backend: BuildBackendHookCaller, metadata_directory: str, tempd: str) -> [Optional[str]](#optional)
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/build/wheel_editable.py`  
**Dependencies**: `logging`, `os`, `typing.Optional`, `pip._vendor.pyproject_hooks.BuildBackendHookCaller`, `pip._vendor.pyproject_hooks.HookMissing`, `pip._internal.utils.subprocess.runner_with_spinner_message`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations.build



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/build/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations.build.metadata_legacy
:::{doc} _find_egg_info:21
Find an .egg-info subdirectory in `directory`.
:::
:::{doc} generate_metadata:36
Generate metadata using setup.py-based defacto mechanisms.

Returns the generated metadata directory.
:::
**Imports**: `logging`, `os`, `pip._internal.build_env.BuildEnvironment`, `pip._internal.cli.spinners.open_spinner`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.InstallationSubprocessError`, `pip._internal.exceptions.MetadataGenerationFailed`, `pip._internal.utils.setuptools_build.make_setuptools_egg_info_args`, `pip._internal.utils.subprocess.call_subprocess`, `pip._internal.utils.temp_dir.TempDirectory`
### Interface
- `_find_egg_info`(directory: str) -> str
- `generate_metadata`(build_env: BuildEnvironment, setup_py_path: str, source_dir: str, isolated: bool, details: str) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/build/metadata_legacy.py`  
**Dependencies**: `logging`, `os`, `pip._internal.build_env.BuildEnvironment`, `pip._internal.cli.spinners.open_spinner`, `pip._internal.exceptions.InstallationError`, `pip._internal.exceptions.InstallationSubprocessError`, `pip._internal.exceptions.MetadataGenerationFailed`, `pip._internal.utils.setuptools_build.make_setuptools_egg_info_args`, `pip._internal.utils.subprocess.call_subprocess`, `pip._internal.utils.temp_dir.TempDirectory`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations.build.wheel
:::{doc} build_wheel_pep517:12
Build one InstallRequirement using the PEP 517 build process.

Returns path to wheel if successfully built. Otherwise, returns None.
:::
**Imports**: `logging`, `os`, `typing.Optional`, `pip._vendor.pyproject_hooks.BuildBackendHookCaller`, `pip._internal.utils.subprocess.runner_with_spinner_message`
### Interface
- `build_wheel_pep517`(name: str, backend: BuildBackendHookCaller, metadata_directory: str, tempd: str) -> [Optional[str]](#optional)
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/build/wheel.py`  
**Dependencies**: `logging`, `os`, `typing.Optional`, `pip._vendor.pyproject_hooks.BuildBackendHookCaller`, `pip._internal.utils.subprocess.runner_with_spinner_message`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pip._internal.operations.build.build_tracker
:::{doc} TrackerId:53
Uniquely identifying string provided to the build tracker.
:::
:::{doc} BuildTracker:57
Ensure that an sdist cannot request itself as a setup requirement.

When an sdist is prepared, it identifies its setup requirements in the
context of ``BuildTracker.track()``. If a requirement shows up recursively, this
raises an exception.

This stops fork bombs embedded in malicious packages.
:::
**Imports**: `contextlib`, `hashlib`, `logging`, `os`, `types.TracebackType`, `typing.Dict`, `typing.Generator`, `typing.Optional`, `typing.Type`, `typing.Union`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.utils.temp_dir.TempDirectory`
**Type References**: [[BuildTracker]], [[Dict]], [[TrackerId]]

### Interface
- `update_env_context_manager`() -> Generator[<ast.Tuple object at 0x166e7f990>]
- `get_build_tracker`() -> Generator[<ast.Tuple object at 0x166e7d190>]
- `__init__`(root: str) -> None
- `__enter__`() -> BuildTracker
- `__exit__`(exc_type: [Optional[Type[BaseException]]](#optional), exc_val: [Optional[BaseException]](#optional), exc_tb: [Optional[TracebackType]](#optional)) -> None
- `_entry_path`(key: TrackerId) -> str
- `add`(req: InstallRequirement, key: TrackerId) -> None
- `remove`(req: InstallRequirement, key: TrackerId) -> None
- `cleanup`() -> None
- `track`(req: InstallRequirement, key: str) -> Generator[<ast.Tuple object at 0x166ea9990>]

### Implementation
**TrackerId**

**BuildTracker**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pip/_internal/operations/build/build_tracker.py`  
**Dependencies**: `contextlib`, `hashlib`, `logging`, `os`, `types.TracebackType`, `typing.Dict`, `typing.Generator`, `typing.Optional`, `typing.Type`, `typing.Union`, `pip._internal.req.req_install.InstallRequirement`, `pip._internal.utils.temp_dir.TempDirectory`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.charset_normalizer.cli

**Imports**: `__future__.annotations`, `__main__.cli_detect`, `__main__.query_yes_no`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/charset_normalizer/cli/__init__.py`  
**Dependencies**: `__future__.annotations`, `__main__.cli_detect`, `__main__.query_yes_no`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.charset_normalizer.cli.__main__
:::{doc} query_yes_no:16
Ask a yes/no question via input() and return their answer.

"question" is a string that is presented to the user.
"default" is the presumed answer if the user just hits <Enter>.
    It must be "yes" (the default), "no" or None (meaning
    an answer is required of the user).

The "answer" return value is True for "yes" or False for "no".

Credit goes to (c) https://stackoverflow.com/questions/3041986/apt-command-line-interface-like-yes-no-input
:::
:::{doc} cli_detect:49
CLI assistant using ARGV and ArgumentParser
:param argv:
:return: 0 if everything is fine, anything else equal trouble
:::
**Imports**: `__future__.annotations`, `argparse`, `sys`, `json.dumps`, `os.path.abspath`, `os.path.basename`, `os.path.dirname`, `os.path.join`, `os.path.realpath`, `platform.python_version`, `unicodedata.unidata_version`, `charset_normalizer.md`, `charset_normalizer.from_fp`, `charset_normalizer.models.CliDetectionResult`, `charset_normalizer.version.__version__`
### Interface
- `query_yes_no`(question: str, default: str) -> bool
- `cli_detect`(argv: list[str] | None) -> int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/charset_normalizer/cli/__main__.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `sys`, `json.dumps`, `os.path.abspath`, `os.path.basename`, `os.path.dirname`, `os.path.join`, `os.path.realpath`, `platform.python_version`, `unicodedata.unidata_version`, `charset_normalizer.md`, `charset_normalizer.from_fp`, `charset_normalizer.models.CliDetectionResult`, `charset_normalizer.version.__version__`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_block.html_block

**Imports**: `__future__.annotations`, `logging`, `re`, `common.html_blocks.block_names`, `common.html_re.HTML_OPEN_CLOSE_TAG_STR`, `state_block.StateBlock`
**Type References**: [[Pattern]], [[re.Pattern]]

### Interface
- `html_block`(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_block/html_block.py`  
**Dependencies**: `__future__.annotations`, `logging`, `re`, `common.html_blocks.block_names`, `common.html_re.HTML_OPEN_CLOSE_TAG_STR`, `state_block.StateBlock`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_block.list

**Imports**: `logging`, `common.utils.isStrSpace`, `state_block.StateBlock`
### Interface
- `skipBulletListMarker`(state: StateBlock, startLine: int) -> int
- `skipOrderedListMarker`(state: StateBlock, startLine: int) -> int
- `markTightParagraphs`(state: StateBlock, idx: int) -> None
- `list_block`(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_block/list.py`  
**Dependencies**: `logging`, `common.utils.isStrSpace`, `state_block.StateBlock`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_block.fence

**Imports**: `logging`, `state_block.StateBlock`
### Interface
- `fence`(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_block/fence.py`  
**Dependencies**: `logging`, `state_block.StateBlock`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_block.code

**Imports**: `logging`, `state_block.StateBlock`
### Interface
- `code`(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_block/code.py`  
**Dependencies**: `logging`, `state_block.StateBlock`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_block.lheading

**Imports**: `logging`, `state_block.StateBlock`
### Interface
- `lheading`(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_block/lheading.py`  
**Dependencies**: `logging`, `state_block.StateBlock`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_block

**Imports**: `blockquote.blockquote`, `code.code`, `fence.fence`, `heading.heading`, `hr.hr`, `html_block.html_block`, `lheading.lheading`, `list.list_block`, `paragraph.paragraph`, `reference.reference`, `state_block.StateBlock`, `table.table`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_block/__init__.py`  
**Dependencies**: `blockquote.blockquote`, `code.code`, `fence.fence`, `heading.heading`, `hr.hr`, `html_block.html_block`, `lheading.lheading`, `list.list_block`, `paragraph.paragraph`, `reference.reference`, `state_block.StateBlock`, `table.table`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_block.hr

**Imports**: `logging`, `common.utils.isStrSpace`, `state_block.StateBlock`
### Interface
- `hr`(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_block/hr.py`  
**Dependencies**: `logging`, `common.utils.isStrSpace`, `state_block.StateBlock`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_block.heading

**Imports**: `__future__.annotations`, `logging`, `common.utils.isStrSpace`, `state_block.StateBlock`
**Type References**: [[None]]

### Interface
- `heading`(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_block/heading.py`  
**Dependencies**: `__future__.annotations`, `logging`, `common.utils.isStrSpace`, `state_block.StateBlock`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_block.blockquote

**Imports**: `__future__.annotations`, `logging`, `common.utils.isStrSpace`, `state_block.StateBlock`
**Type References**: [[None]]

### Interface
- `blockquote`(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_block/blockquote.py`  
**Dependencies**: `__future__.annotations`, `logging`, `common.utils.isStrSpace`, `state_block.StateBlock`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_block.paragraph

**Imports**: `logging`, `state_block.StateBlock`
### Interface
- `paragraph`(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_block/paragraph.py`  
**Dependencies**: `logging`, `state_block.StateBlock`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_block.reference

**Imports**: `logging`, `common.utils.charCodeAt`, `common.utils.isSpace`, `common.utils.normalizeReference`, `state_block.StateBlock`
### Interface
- `reference`(state: StateBlock, startLine: int, _endLine: int, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_block/reference.py`  
**Dependencies**: `logging`, `common.utils.charCodeAt`, `common.utils.isSpace`, `common.utils.normalizeReference`, `state_block.StateBlock`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_block.table

**Imports**: `__future__.annotations`, `re`, `common.utils.charStrAt`, `common.utils.isStrSpace`, `state_block.StateBlock`
### Interface
- `getLine`(state: StateBlock, line: int) -> str
- `escapedSplit`(string: str) -> list[str]
- `table`(state: StateBlock, startLine: int, endLine: int, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_block/table.py`  
**Dependencies**: `__future__.annotations`, `re`, `common.utils.charStrAt`, `common.utils.isStrSpace`, `state_block.StateBlock`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_block.state_block

**Imports**: `__future__.annotations`, `typing.TYPE_CHECKING`, `typing.Literal`, `common.utils.isStrSpace`, `ruler.StateBase`, `token.Token`, `utils.EnvType`, `markdown_it.main.MarkdownIt`
**Type References**: [[StateBlock]]

### Interface
- `__init__`(src: str, md: MarkdownIt, env: EnvType, tokens: list[Token]) -> None
- `__repr__`() -> str
- `push`(ttype: str, tag: str, nesting: Literal[<ast.Tuple object at 0x1670b8090>]) -> Token
- `isEmpty`(line: int) -> bool
- `skipEmptyLines`(from_pos: int) -> int
- `skipSpaces`(pos: int) -> int
- `skipSpacesBack`(pos: int, minimum: int) -> int
- `skipChars`(pos: int, code: int) -> int
- `skipCharsStr`(pos: int, ch: str) -> int
- `skipCharsBack`(pos: int, code: int, minimum: int) -> int
- `skipCharsStrBack`(pos: int, ch: str, minimum: int) -> int
- `getLines`(begin: int, end: int, indent: int, keepLastLF: bool) -> str
- `is_code_block`(line: int) -> bool

### Implementation
**StateBlock**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_block/state_block.py`  
**Dependencies**: `__future__.annotations`, `typing.TYPE_CHECKING`, `typing.Literal`, `common.utils.isStrSpace`, `ruler.StateBase`, `token.Token`, `utils.EnvType`, `markdown_it.main.MarkdownIt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_core.smartquotes

**Imports**: `__future__.annotations`, `re`, `typing.Any`, `common.utils.charCodeAt`, `common.utils.isMdAsciiPunct`, `common.utils.isPunctChar`, `common.utils.isWhiteSpace`, `token.Token`, `state_core.StateCore`
**Type References**: [[Any]], [[None]]

### Interface
- `replaceAt`(string: str, index: int, ch: str) -> str
- `process_inlines`(tokens: list[Token], state: StateCore) -> None
- `smartquotes`(state: StateCore) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_core/smartquotes.py`  
**Dependencies**: `__future__.annotations`, `re`, `typing.Any`, `common.utils.charCodeAt`, `common.utils.isMdAsciiPunct`, `common.utils.isPunctChar`, `common.utils.isWhiteSpace`, `token.Token`, `state_core.StateCore`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_core.normalize

**Imports**: `re`, `state_core.StateCore`
### Interface
- `normalize`(state: StateCore) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_core/normalize.py`  
**Dependencies**: `re`, `state_core.StateCore`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_core.text_join
:::{doc} text_join:14
Join raw text for escape sequences (`text_special`) tokens with the rest of the text
:::
**Imports**: `__future__.annotations`, `token.Token`, `state_core.StateCore`
**Type References**: [[Token]]

### Interface
- `text_join`(state: StateCore) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_core/text_join.py`  
**Dependencies**: `__future__.annotations`, `token.Token`, `state_core.StateCore`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_core.replacements

**Imports**: `__future__.annotations`, `logging`, `re`, `token.Token`, `state_core.StateCore`
### Interface
- `replaceFn`(match: re.Match[str]) -> str
- `replace_scoped`(inlineTokens: list[Token]) -> None
- `replace_rare`(inlineTokens: list[Token]) -> None
- `replace`(state: StateCore) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_core/replacements.py`  
**Dependencies**: `__future__.annotations`, `logging`, `re`, `token.Token`, `state_core.StateCore`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_core

**Imports**: `block.block`, `inline.inline`, `linkify.linkify`, `normalize.normalize`, `replacements.replace`, `smartquotes.smartquotes`, `state_core.StateCore`, `text_join.text_join`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_core/__init__.py`  
**Dependencies**: `block.block`, `inline.inline`, `linkify.linkify`, `normalize.normalize`, `replacements.replace`, `smartquotes.smartquotes`, `state_core.StateCore`, `text_join.text_join`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_core.state_core

**Imports**: `__future__.annotations`, `typing.TYPE_CHECKING`, `ruler.StateBase`, `token.Token`, `utils.EnvType`, `markdown_it.MarkdownIt`
**Type References**: [[StateCore]]

### Interface
- `__init__`(src: str, md: MarkdownIt, env: EnvType, tokens: list[Token] | None) -> None

### Implementation
**StateCore**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_core/state_core.py`  
**Dependencies**: `__future__.annotations`, `typing.TYPE_CHECKING`, `ruler.StateBase`, `token.Token`, `utils.EnvType`, `markdown_it.MarkdownIt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_core.linkify
:::{doc} linkify:15
Rule for identifying plain-text links.
:::
**Imports**: `__future__.annotations`, `re`, `typing.Protocol`, `common.utils.arrayReplaceAt`, `common.utils.isLinkClose`, `common.utils.isLinkOpen`, `token.Token`, `state_core.StateCore`
**Type References**: [[None]], [[_LinkType]]

### Interface
- `linkify`(state: StateCore) -> None

### Implementation
**_LinkType**
  - url: str
  - text: str
  - index: int
  - last_index: int
  - schema: str | None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_core/linkify.py`  
**Dependencies**: `__future__.annotations`, `re`, `typing.Protocol`, `common.utils.arrayReplaceAt`, `common.utils.isLinkClose`, `common.utils.isLinkOpen`, `token.Token`, `state_core.StateCore`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_core.block

**Imports**: `token.Token`, `state_core.StateCore`
### Interface
- `block`(state: StateCore) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_core/block.py`  
**Dependencies**: `token.Token`, `state_core.StateCore`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_core.inline
:::{doc} inline:4
Parse inlines
:::
**Imports**: `state_core.StateCore`
### Interface
- `inline`(state: StateCore) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_core/inline.py`  
**Dependencies**: `state_core.StateCore`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.cli



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/cli/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.cli.parse
:::{doc} convert_file:33
Parse a Markdown file and dump the output to stdout.
:::
:::{doc} interactive:46
Parse user input, dump to stdout, rinse and repeat.
Python REPL style.
:::
:::{doc} parse_args:67
Parse input CLI arguments.
:::
**Imports**: `__future__.annotations`, `argparse`, `collections.abc.Iterable`, `collections.abc.Sequence`, `sys`, `markdown_it.__version__`, `markdown_it.main.MarkdownIt`
### Interface
- `main`(args: Sequence[str] | None) -> int
- `convert`(filenames: Iterable[str]) -> None
- `convert_file`(filename: str) -> None
- `interactive`() -> None
- `parse_args`(args: Sequence[str] | None) -> argparse.Namespace
- `print_heading`() -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/cli/parse.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `collections.abc.Iterable`, `collections.abc.Sequence`, `sys`, `markdown_it.__version__`, `markdown_it.main.MarkdownIt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.common



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/common/__init__.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.common.html_blocks



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/common/html_blocks.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.common.html_re

**Imports**: `re`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/common/html_re.py`  
**Dependencies**: `re`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.common.utils
:::{doc} charCodeAt:11
Returns the Unicode value of the character at the specified location.

@param - index The zero-based index of the desired character.
If there is no character at the specified index, NaN is returned.

This was added for compatibility with python
:::
:::{doc} charStrAt:26
Returns the Unicode value of the character at the specified location.

@param - index The zero-based index of the desired character.
If there is no character at the specified index, NaN is returned.

This was added for compatibility with python
:::
:::{doc} arrayReplaceAt:44
Remove element from array and put another array at those position.
Useful for some operations with tokens
:::
:::{doc} fromCodePoint:78
Convert ordinal to unicode.

Note, in the original Javascript two string characters were required,
for codepoints larger than `0xFFFF`.
But Python 3 can represent any unicode codepoint in one character.
:::
:::{doc} replaceEntityPattern:98
Convert HTML entity patterns,
see https://spec.commonmark.org/0.30/#entity-references
:::
:::{doc} stripEscape:134
Strip escape \ characters
:::
:::{doc} escapeHtml:139
Replace special characters "&", "<", ">" and '"' to HTML-safe sequences.
:::
:::{doc} isSpace:162
Check if character code is a whitespace.
:::
:::{doc} isStrSpace:167
Check if character is a whitespace.
:::
:::{doc} isWhiteSpace:187
Zs (unicode class) || [\t\f\v\r\n]
:::
:::{doc} isPunctChar:202
Check if character is a punctuation character.
:::
:::{doc} isMdAsciiPunct:243
Markdown ASCII punctuation characters.

::

    !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~

See http://spec.commonmark.org/0.15/#ascii-punctuation-character

Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.
:::
:::{doc} normalizeReference:258
Helper to unify [reference labels].
:::
**Imports**: `__future__.annotations`, `re`, `typing.Match`, `typing.TypeVar`, `entities.entities`
**Type References**: [[None]]

### Interface
- `charCodeAt`(src: str, pos: int) -> int | None
- `charStrAt`(src: str, pos: int) -> str | None
- `arrayReplaceAt`(src: list[_ItemTV], pos: int, newElements: list[_ItemTV]) -> list[_ItemTV]
- `isValidEntityCode`(c: int) -> bool
- `fromCodePoint`(c: int) -> str
- `replaceEntityPattern`(match: str, name: str) -> str
- `unescapeAll`(string: str) -> str
- `stripEscape`(string: str) -> str
- `escapeHtml`(raw: str) -> str
- `escapeRE`(string: str) -> str
- `isSpace`(code: int | None) -> bool
- `isStrSpace`(ch: str | None) -> bool
- `isWhiteSpace`(code: int) -> bool
- `isPunctChar`(ch: str) -> bool
- `isMdAsciiPunct`(ch: int) -> bool
- `normalizeReference`(string: str) -> str
- `isLinkOpen`(string: str) -> bool
- `isLinkClose`(string: str) -> bool
- `replacer_func`(match: Match[str]) -> str
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/common/utils.py`  
**Dependencies**: `__future__.annotations`, `re`, `typing.Match`, `typing.TypeVar`, `entities.entities`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.common.normalize_url
:::{doc} normalizeLink:15
Normalize destination URLs in links

::

    [label]:   destination   'title'
            ^^^^^^^^^^^
:::
:::{doc} normalizeLinkText:40
Normalize autolink content

::

    <destination>
     ~~~~~~~~~~~
:::
:::{doc} validateLink:70
Validate URL link is allowed in output.

This validator can prohibit more than really needed to prevent XSS.
It's a tradeoff to keep code simple and to be secure by default.

Note: url should be normalized at this point, and existing entities decoded.
:::
**Imports**: `__future__.annotations`, `collections.abc.Callable`, `contextlib.suppress`, `re`, `urllib.parse.quote`, `urllib.parse.unquote`, `urllib.parse.urlparse`, `urllib.parse.urlunparse`, `mdurl`, `_punycode`
### Interface
- `normalizeLink`(url: str) -> str
- `normalizeLinkText`(url: str) -> str
- `validateLink`(url: str, validator: Callable[<ast.Tuple object at 0x16721a150>] | None) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/common/normalize_url.py`  
**Dependencies**: `__future__.annotations`, `collections.abc.Callable`, `contextlib.suppress`, `re`, `urllib.parse.quote`, `urllib.parse.unquote`, `urllib.parse.urlparse`, `urllib.parse.urlunparse`, `mdurl`, `_punycode`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.common.entities

**Imports**: `html.entities`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/common/entities.py`  
**Dependencies**: `html.entities`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.link

**Imports**: `common.utils.isStrSpace`, `common.utils.normalizeReference`, `state_inline.StateInline`
### Interface
- `link`(state: StateInline, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/link.py`  
**Dependencies**: `common.utils.isStrSpace`, `common.utils.normalizeReference`, `state_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.escape
:::{doc} escape:8
Process escaped chars and hardbreaks.
:::
**Imports**: `common.utils.isStrSpace`, `state_inline.StateInline`
### Interface
- `escape`(state: StateInline, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/escape.py`  
**Dependencies**: `common.utils.isStrSpace`, `state_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.autolink

**Imports**: `re`, `state_inline.StateInline`
### Interface
- `autolink`(state: StateInline, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/autolink.py`  
**Dependencies**: `re`, `state_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.strikethrough
:::{doc} tokenize:7
Insert each marker as a separate text token, and add it to delimiter list
:::
:::{doc} postProcess:112
Walk through delimiter list and replace text tokens with tags.
:::
**Imports**: `__future__.annotations`, `state_inline.Delimiter`, `state_inline.StateInline`
### Interface
- `tokenize`(state: StateInline, silent: bool) -> bool
- `_postProcess`(state: StateInline, delimiters: list[Delimiter]) -> None
- `postProcess`(state: StateInline) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/strikethrough.py`  
**Dependencies**: `__future__.annotations`, `state_inline.Delimiter`, `state_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.html_inline

**Imports**: `common.html_re.HTML_TAG_RE`, `common.utils.isLinkClose`, `common.utils.isLinkOpen`, `state_inline.StateInline`
### Interface
- `isLetter`(ch: int) -> bool
- `html_inline`(state: StateInline, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/html_inline.py`  
**Dependencies**: `common.html_re.HTML_TAG_RE`, `common.utils.isLinkClose`, `common.utils.isLinkOpen`, `state_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline

**Imports**: `emphasis`, `strikethrough`, `autolink.autolink`, `backticks.backtick`, `balance_pairs.link_pairs`, `entity.entity`, `escape.escape`, `fragments_join.fragments_join`, `html_inline.html_inline`, `image.image`, `link.link`, `linkify.linkify`, `newline.newline`, `state_inline.StateInline`, `text.text`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/__init__.py`  
**Dependencies**: `emphasis`, `strikethrough`, `autolink.autolink`, `backticks.backtick`, `balance_pairs.link_pairs`, `entity.entity`, `escape.escape`, `fragments_join.fragments_join`, `html_inline.html_inline`, `image.image`, `link.link`, `linkify.linkify`, `newline.newline`, `state_inline.StateInline`, `text.text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.state_inline

**Imports**: `__future__.annotations`, `collections.namedtuple`, `dataclasses.dataclass`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Literal`, `_compat.DATACLASS_KWARGS`, `common.utils.isMdAsciiPunct`, `common.utils.isPunctChar`, `common.utils.isWhiteSpace`, `ruler.StateBase`, `token.Token`, `utils.EnvType`, `markdown_it.MarkdownIt`
**Type References**: [[Delimiter]], [[None]], [[StateInline]]

### Interface
- `__init__`(src: str, md: MarkdownIt, env: EnvType, outTokens: list[Token]) -> None
- `__repr__`() -> str
- `pushPending`() -> Token
- `push`(ttype: str, tag: str, nesting: Literal[<ast.Tuple object at 0x1672bab10>]) -> Token
- `scanDelims`(start: int, canSplitWord: bool) -> Scanned

### Implementation
**Delimiter**
  - marker: int
  - length: int
  - token: int
  - end: int
  - open: bool
  - close: bool
  - level: bool | None
**StateInline**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/state_inline.py`  
**Dependencies**: `__future__.annotations`, `collections.namedtuple`, `dataclasses.dataclass`, `typing.TYPE_CHECKING`, `typing.Any`, `typing.Literal`, `_compat.DATACLASS_KWARGS`, `common.utils.isMdAsciiPunct`, `common.utils.isPunctChar`, `common.utils.isWhiteSpace`, `ruler.StateBase`, `token.Token`, `utils.EnvType`, `markdown_it.MarkdownIt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.text

**Imports**: `state_inline.StateInline`
### Interface
- `text`(state: StateInline, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/text.py`  
**Dependencies**: `state_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.backticks

**Imports**: `re`, `state_inline.StateInline`
### Interface
- `backtick`(state: StateInline, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/backticks.py`  
**Dependencies**: `re`, `state_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.linkify
:::{doc} linkify:10
Rule for identifying plain-text links.
:::
**Imports**: `re`, `state_inline.StateInline`
### Interface
- `linkify`(state: StateInline, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/linkify.py`  
**Dependencies**: `re`, `state_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.fragments_join
:::{doc} fragments_join:4
Clean up tokens after emphasis and strikethrough postprocessing:
merge adjacent text nodes into one and re-calculate all token levels

This is necessary because initially emphasis delimiter markers (``*, _, ~``)
are treated as their own separate text tokens. Then emphasis rule either
leaves them as text (needed to merge with adjacent text) or turns them
into opening/closing tags (which messes up levels inside).
:::
**Imports**: `state_inline.StateInline`
### Interface
- `fragments_join`(state: StateInline) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/fragments_join.py`  
**Dependencies**: `state_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.entity

**Imports**: `re`, `common.entities.entities`, `common.utils.fromCodePoint`, `common.utils.isValidEntityCode`, `state_inline.StateInline`
### Interface
- `entity`(state: StateInline, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/entity.py`  
**Dependencies**: `re`, `common.entities.entities`, `common.utils.fromCodePoint`, `common.utils.isValidEntityCode`, `state_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.balance_pairs
:::{doc} processDelimiters:7
For each opening emphasis-like marker find a matching closing one.
:::
**Imports**: `__future__.annotations`, `state_inline.Delimiter`, `state_inline.StateInline`
### Interface
- `processDelimiters`(state: StateInline, delimiters: list[Delimiter]) -> None
- `link_pairs`(state: StateInline) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/balance_pairs.py`  
**Dependencies**: `__future__.annotations`, `state_inline.Delimiter`, `state_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.newline

**Imports**: `common.utils.charStrAt`, `common.utils.isStrSpace`, `state_inline.StateInline`
### Interface
- `newline`(state: StateInline, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/newline.py`  
**Dependencies**: `common.utils.charStrAt`, `common.utils.isStrSpace`, `state_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.emphasis
:::{doc} tokenize:8
Insert each marker as a separate text token, and add it to delimiter list
:::
:::{doc} postProcess:96
Walk through delimiter list and replace text tokens with tags.
:::
**Imports**: `__future__.annotations`, `state_inline.Delimiter`, `state_inline.StateInline`
### Interface
- `tokenize`(state: StateInline, silent: bool) -> bool
- `_postProcess`(state: StateInline, delimiters: list[Delimiter]) -> None
- `postProcess`(state: StateInline) -> None
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/emphasis.py`  
**Dependencies**: `__future__.annotations`, `state_inline.Delimiter`, `state_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.rules_inline.image

**Imports**: `__future__.annotations`, `common.utils.isStrSpace`, `common.utils.normalizeReference`, `token.Token`, `state_inline.StateInline`
**Type References**: [[Token]]

### Interface
- `image`(state: StateInline, silent: bool) -> bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/rules_inline/image.py`  
**Dependencies**: `__future__.annotations`, `common.utils.isStrSpace`, `common.utils.normalizeReference`, `token.Token`, `state_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.presets.commonmark

**Imports**: `utils.PresetType`
### Interface
- `make`() -> PresetType
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/presets/commonmark.py`  
**Dependencies**: `utils.PresetType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.presets
:::{doc} gfm_like:9
GitHub Flavoured Markdown (GFM) like.

This adds the linkify, table and strikethrough components to CommmonMark.

Note, it lacks task-list items and raw HTML filtering,
to meet the the full GFM specification
(see https://github.github.com/gfm/#autolinks-extension-).
:::
**Imports**: `commonmark`, `default`, `zero`, `utils.PresetType`
**Type References**: [[gfm_like]]

### Interface
- `make`() -> PresetType

### Implementation
**gfm_like**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/presets/__init__.py`  
**Dependencies**: `commonmark`, `default`, `zero`, `utils.PresetType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.presets.zero

**Imports**: `utils.PresetType`
### Interface
- `make`() -> PresetType
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/presets/zero.py`  
**Dependencies**: `utils.PresetType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.presets.default

**Imports**: `utils.PresetType`
### Interface
- `make`() -> PresetType
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/presets/default.py`  
**Dependencies**: `utils.PresetType`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.helpers

**Imports**: `parse_link_destination.parseLinkDestination`, `parse_link_label.parseLinkLabel`, `parse_link_title.parseLinkTitle`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/helpers/__init__.py`  
**Dependencies**: `parse_link_destination.parseLinkDestination`, `parse_link_label.parseLinkLabel`, `parse_link_title.parseLinkTitle`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.helpers.parse_link_destination

**Imports**: `common.utils.charCodeAt`, `common.utils.unescapeAll`
**Type References**: [[_Result]]

### Interface
- `parseLinkDestination`(string: str, pos: int, maximum: int) -> _Result
- `__init__`() -> None

### Implementation
**_Result**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/helpers/parse_link_destination.py`  
**Dependencies**: `common.utils.charCodeAt`, `common.utils.unescapeAll`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.helpers.parse_link_label

**Imports**: `markdown_it.rules_inline.StateInline`
### Interface
- `parseLinkLabel`(state: StateInline, start: int, disableNested: bool) -> int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/helpers/parse_link_label.py`  
**Dependencies**: `markdown_it.rules_inline.StateInline`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.markdown_it.helpers.parse_link_title

**Imports**: `common.utils.charCodeAt`, `common.utils.unescapeAll`
**Type References**: [[_Result]]

### Interface
- `parseLinkTitle`(string: str, pos: int, maximum: int) -> _Result
- `__init__`() -> None
- `__str__`() -> str

### Implementation
**_Result**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/markdown_it/helpers/parse_link_title.py`  
**Dependencies**: `common.utils.charCodeAt`, `common.utils.unescapeAll`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pathspec.patterns

**Imports**: `gitwildmatch`, `gitwildmatch.GitWildMatchPattern`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pathspec/patterns/__init__.py`  
**Dependencies**: `gitwildmatch`, `gitwildmatch.GitWildMatchPattern`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pathspec.patterns.gitwildmatch
:::{doc} GitWildMatchPatternError:28
The :class:`GitWildMatchPatternError` indicates an invalid git wild match
pattern.
:::
:::{doc} GitWildMatchPattern:36
The :class:`GitWildMatchPattern` class represents a compiled Git wildmatch
pattern.
:::
:::{doc} GitIgnorePattern:388
The :class:`GitIgnorePattern` class is deprecated by :class:`GitWildMatchPattern`.
This class only exists to maintain compatibility with v0.4.
:::
**Imports**: `re`, `warnings`, `typing.AnyStr`, `typing.Optional`, `typing.Tuple`, `util`, `pattern.RegexPattern`
**Type References**: [[GitIgnorePattern]], [[GitWildMatchPattern]], [[GitWildMatchPatternError]]

### Interface
- `pattern_to_regex`() -> Any
- `_translate_segment_glob`(pattern: str) -> str
- `escape`(s: AnyStr) -> AnyStr
- `__init__`() -> None
- `_deprecated`() -> None

### Implementation
**GitWildMatchPatternError**

**GitWildMatchPattern**

**GitIgnorePattern**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pathspec/patterns/gitwildmatch.py`  
**Dependencies**: `re`, `warnings`, `typing.AnyStr`, `typing.Optional`, `typing.Tuple`, `util`, `pattern.RegexPattern`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.options.config
:::{doc} load_config:56
Load the configuration given the user options.

- in ``isolated`` mode, return an empty configuration
- if a config file is given in ``config`` use that, otherwise attempt to
  discover a configuration using ``tox.ini`` / ``setup.cfg`` / ``.flake8``
- finally, load any ``extra`` configuration files
:::
:::{doc} parse_config:98
Parse and normalize the typed configuration options.
:::
**Imports**: `__future__.annotations`, `configparser`, `logging`, `os.path`, `typing.Any`, `flake8.exceptions`, `flake8.defaults.VALID_CODE_PREFIX`, `flake8.options.manager.OptionManager`
**Type References**: [[Any]]

### Interface
- `_stat_key`(s: str) -> tuple[<ast.Tuple object at 0x1674666d0>]
- `_find_config_file`(path: str) -> str | None
- `load_config`(config: str | None, extra: list[str]) -> tuple[<ast.Tuple object at 0x16745d750>]
- `parse_config`(option_manager: OptionManager, cfg: configparser.RawConfigParser, cfg_dir: str) -> dict[<ast.Tuple object at 0x167481710>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/options/config.py`  
**Dependencies**: `__future__.annotations`, `configparser`, `logging`, `os.path`, `typing.Any`, `flake8.exceptions`, `flake8.defaults.VALID_CODE_PREFIX`, `flake8.options.manager.OptionManager`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.options.aggregator
:::{doc} aggregate_options:19
Aggregate and merge CLI and config file options.
:::
**Imports**: `__future__.annotations`, `argparse`, `configparser`, `logging`, `typing.Sequence`, `flake8.options.config`, `flake8.options.manager.OptionManager`
### Interface
- `aggregate_options`(manager: OptionManager, cfg: configparser.RawConfigParser, cfg_dir: str, argv: Sequence[str] | None) -> argparse.Namespace
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/options/aggregator.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `configparser`, `logging`, `typing.Sequence`, `flake8.options.config`, `flake8.options.manager.OptionManager`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.options

**Imports**: `__future__.annotations`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/options/__init__.py`  
**Dependencies**: `__future__.annotations`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.options.parse_args
:::{doc} parse_args:15
Procedure for parsing args, config, loading plugins.
:::
**Imports**: `__future__.annotations`, `argparse`, `typing.Sequence`, `flake8`, `flake8.main.options`, `flake8.options.aggregator`, `flake8.options.config`, `flake8.options.manager`, `flake8.plugins.finder`
### Interface
- `parse_args`(argv: Sequence[str]) -> tuple[<ast.Tuple object at 0x1674912d0>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/options/parse_args.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `typing.Sequence`, `flake8`, `flake8.main.options`, `flake8.options.aggregator`, `flake8.options.config`, `flake8.options.manager`, `flake8.plugins.finder`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.options.manager
:::{doc} Option:41
Our wrapper around an argparse argument parsers to add features.
:::
:::{doc} OptionManager:207
Manage Options and OptionParser while adding post-processing.
:::
**Imports**: `__future__.annotations`, `argparse`, `enum`, `functools`, `logging`, `typing.Any`, `typing.Callable`, `typing.Sequence`, `flake8.utils`, `flake8.plugins.finder.Plugins`
**Type References**: [[Option]], [[OptionManager]]

### Interface
- `_flake8_normalize`(value: str) -> str | list[str]
- `__init__`() -> None
- `filtered_option_kwargs`() -> dict[<ast.Tuple object at 0x1674bd610>]
- `__repr__`() -> str
- `normalize`(value: Any) -> Any
- `to_argparse`() -> tuple[<ast.Tuple object at 0x1674caf90>]
- `register_plugins`(plugins: Plugins) -> None
- `add_option`() -> None
- `extend_default_ignore`(error_codes: Sequence[str]) -> None
- `extend_default_select`(error_codes: Sequence[str]) -> None
- `parse_args`(args: Sequence[str] | None, values: argparse.Namespace | None) -> argparse.Namespace
- `_set_group`(name: str) -> None

### Implementation
**Option**

**OptionManager**
  - groups: dict[<ast.Tuple object at 0x1674d7b50>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/options/manager.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `enum`, `functools`, `logging`, `typing.Any`, `typing.Callable`, `typing.Sequence`, `flake8.utils`, `flake8.plugins.finder.Plugins`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.plugins.finder
:::{doc} Plugin:30
A plugin before loading.
:::
:::{doc} LoadedPlugin:38
Represents a plugin after being imported.
:::
:::{doc} Checkers:56
Classified plugins needed for checking.
:::
:::{doc} Plugins:64
Classified plugins.
:::
:::{doc} PluginOptions:91
Options related to plugin loading.
:::
:::{doc} parse_plugin_options:127
Parse plugin loading related options.
:::
:::{doc} find_plugins:247
Discovers all plugins (but does not load them).
:::
:::{doc} _parameters_for:262
Return the parameters for the plugin.

This will inspect the plugin and return either the function parameters
if the plugin is a function or the parameters for ``__init__`` after
``self`` if the plugin is a class.

:returns:
    A dictionary mapping the parameter name to whether or not it is
    required (a.k.a., is positional only/does not have a default).
:::
:::{doc} load_plugins:355
Load and classify all flake8 plugins.

- first: extends ``sys.path`` with ``paths`` (to import local plugins)
- next: converts the ``Plugin``s to ``LoadedPlugins``
- finally: classifies plugins into their specific types
:::
**Imports**: `__future__.annotations`, `configparser`, `importlib.metadata`, `inspect`, `itertools`, `logging`, `sys`, `typing.Any`, `typing.Generator`, `typing.Iterable`, `typing.NamedTuple`, `flake8.utils`, `flake8.defaults.VALID_CODE_PREFIX`, `flake8.exceptions.ExecutionError`, `flake8.exceptions.FailedToLoadPlugin`
**Type References**: [[Any]], [[Checkers]], [[EntryPoint]], [[LoadedPlugin]], [[Plugin]], [[PluginOptions]], [[Plugins]], [[importlib.metadata.EntryPoint]]

### Interface
- `_parse_option`(cfg: configparser.RawConfigParser, cfg_opt_name: str, opt: str | None) -> list[str]
- `parse_plugin_options`(cfg: configparser.RawConfigParser, cfg_dir: str) -> PluginOptions
- `_flake8_plugins`(eps: Iterable[importlib.metadata.EntryPoint], name: str, version: str) -> Generator[<ast.Tuple object at 0x167524610>]
- `_find_importlib_plugins`() -> Generator[<ast.Tuple object at 0x167530a50>]
- `_find_local_plugins`(cfg: configparser.RawConfigParser) -> Generator[<ast.Tuple object at 0x167533950>]
- `_check_required_plugins`(plugins: list[Plugin], expected: frozenset[str]) -> None
- `find_plugins`(cfg: configparser.RawConfigParser, opts: PluginOptions) -> list[Plugin]
- `_parameters_for`(func: Any) -> dict[<ast.Tuple object at 0x167541fd0>]
- `_load_plugin`(plugin: Plugin) -> LoadedPlugin
- `_import_plugins`(plugins: list[Plugin], opts: PluginOptions) -> list[LoadedPlugin]
- `_classify_plugins`(plugins: list[LoadedPlugin], opts: PluginOptions) -> Plugins
- `load_plugins`(plugins: list[Plugin], opts: PluginOptions) -> Plugins
- `entry_name`() -> str
- `display_name`() -> str
- `all_plugins`() -> Generator[<ast.Tuple object at 0x1674fcbd0>]
- `versions_str`() -> str
- `blank`() -> PluginOptions

### Implementation
**Plugin**
  - package: str
  - version: str
  - entry_point: importlib.metadata.EntryPoint
**LoadedPlugin**
  - plugin: Plugin
  - obj: Any
  - parameters: dict[<ast.Tuple object at 0x1675089d0>]
**Checkers**
  - tree: list[LoadedPlugin]
  - logical_line: list[LoadedPlugin]
  - physical_line: list[LoadedPlugin]
**Plugins**
  - checkers: Checkers
  - reporters: dict[<ast.Tuple object at 0x1674fe310>]
  - disabled: list[LoadedPlugin]
**PluginOptions**
  - local_plugin_paths: tuple[<ast.Tuple object at 0x1674f2ad0>]
  - enable_extensions: frozenset[str]
  - require_plugins: frozenset[str]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/plugins/finder.py`  
**Dependencies**: `__future__.annotations`, `configparser`, `importlib.metadata`, `inspect`, `itertools`, `logging`, `sys`, `typing.Any`, `typing.Generator`, `typing.Iterable`, `typing.NamedTuple`, `flake8.utils`, `flake8.defaults.VALID_CODE_PREFIX`, `flake8.exceptions.ExecutionError`, `flake8.exceptions.FailedToLoadPlugin`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.plugins.pyflakes
:::{doc} FlakesChecker:65
Subclass the Pyflakes checker to conform with the flake8 API.
:::
**Imports**: `__future__.annotations`, `argparse`, `ast`, `logging`, `typing.Any`, `typing.Generator`, `pyflakes.checker`, `flake8.options.manager.OptionManager`
**Type References**: [[FlakesChecker]]

### Interface
- `__init__`(tree: ast.AST, filename: str) -> None
- `add_options`(parser: OptionManager) -> None
- `parse_options`(options: argparse.Namespace) -> None
- `run`() -> Generator[<ast.Tuple object at 0x16756e050>]

### Implementation
**FlakesChecker**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/plugins/pyflakes.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `ast`, `logging`, `typing.Any`, `typing.Generator`, `pyflakes.checker`, `flake8.options.manager.OptionManager`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.plugins.reporter
:::{doc} make:13
Make the formatter from the requested user options.

- if :option:`flake8 --quiet` is specified, return the ``quiet-filename``
  formatter.
- if :option:`flake8 --quiet` is specified at least twice, return the
  ``quiet-nothing`` formatter.
- otherwise attempt to return the formatter by name.
- failing that, assume it is a format string and return the ``default``
  formatter.
:::
**Imports**: `__future__.annotations`, `argparse`, `logging`, `flake8.formatting.base.BaseFormatter`, `flake8.plugins.finder.LoadedPlugin`
### Interface
- `make`(reporters: dict[<ast.Tuple object at 0x16756f350>], options: argparse.Namespace) -> BaseFormatter
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/plugins/reporter.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `logging`, `flake8.formatting.base.BaseFormatter`, `flake8.plugins.finder.LoadedPlugin`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.plugins

**Imports**: `__future__.annotations`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/plugins/__init__.py`  
**Dependencies**: `__future__.annotations`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.plugins.pycodestyle
:::{doc} pycodestyle_logical:40
Run pycodestyle logical checks.
:::
:::{doc} pycodestyle_physical:87
Run pycodestyle physical checks.
:::
**Imports**: `__future__.annotations`, `typing.Any`, `typing.Generator`, `pycodestyle.ambiguous_identifier`, `pycodestyle.bare_except`, `pycodestyle.blank_lines`, `pycodestyle.break_after_binary_operator`, `pycodestyle.break_before_binary_operator`, `pycodestyle.comparison_negative`, `pycodestyle.comparison_to_singleton`, `pycodestyle.comparison_type`, `pycodestyle.compound_statements`, `pycodestyle.continued_indentation`, `pycodestyle.explicit_line_join`, `pycodestyle.extraneous_whitespace`, `pycodestyle.imports_on_separate_lines`, `pycodestyle.indentation`, `pycodestyle.maximum_doc_length`, `pycodestyle.maximum_line_length`, `pycodestyle.missing_whitespace`, `pycodestyle.missing_whitespace_after_keyword`, `pycodestyle.module_imports_on_top_of_file`, `pycodestyle.python_3000_invalid_escape_sequence`, `pycodestyle.tabs_obsolete`, `pycodestyle.tabs_or_spaces`, `pycodestyle.trailing_blank_lines`, `pycodestyle.trailing_whitespace`, `pycodestyle.whitespace_around_comma`, `pycodestyle.whitespace_around_keywords`, `pycodestyle.whitespace_around_named_parameter_equals`, `pycodestyle.whitespace_around_operator`, `pycodestyle.whitespace_before_comment`, `pycodestyle.whitespace_before_parameters`
### Interface
- `pycodestyle_logical`(blank_before: Any, blank_lines: Any, checker_state: Any, hang_closing: Any, indent_char: Any, indent_level: Any, indent_size: Any, line_number: Any, lines: Any, logical_line: Any, max_doc_length: Any, noqa: Any, previous_indent_level: Any, previous_logical: Any, previous_unindented_logical_line: Any, tokens: Any, verbose: Any) -> Generator[<ast.Tuple object at 0x16759a190>]
- `pycodestyle_physical`(indent_char: Any, line_number: Any, lines: Any, max_line_length: Any, multiline: Any, noqa: Any, physical_line: Any, total_lines: Any) -> Generator[<ast.Tuple object at 0x1675ad310>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/plugins/pycodestyle.py`  
**Dependencies**: `__future__.annotations`, `typing.Any`, `typing.Generator`, `pycodestyle.ambiguous_identifier`, `pycodestyle.bare_except`, `pycodestyle.blank_lines`, `pycodestyle.break_after_binary_operator`, `pycodestyle.break_before_binary_operator`, `pycodestyle.comparison_negative`, `pycodestyle.comparison_to_singleton`, `pycodestyle.comparison_type`, `pycodestyle.compound_statements`, `pycodestyle.continued_indentation`, `pycodestyle.explicit_line_join`, `pycodestyle.extraneous_whitespace`, `pycodestyle.imports_on_separate_lines`, `pycodestyle.indentation`, `pycodestyle.maximum_doc_length`, `pycodestyle.maximum_line_length`, `pycodestyle.missing_whitespace`, `pycodestyle.missing_whitespace_after_keyword`, `pycodestyle.module_imports_on_top_of_file`, `pycodestyle.python_3000_invalid_escape_sequence`, `pycodestyle.tabs_obsolete`, `pycodestyle.tabs_or_spaces`, `pycodestyle.trailing_blank_lines`, `pycodestyle.trailing_whitespace`, `pycodestyle.whitespace_around_comma`, `pycodestyle.whitespace_around_keywords`, `pycodestyle.whitespace_around_named_parameter_equals`, `pycodestyle.whitespace_around_operator`, `pycodestyle.whitespace_before_comment`, `pycodestyle.whitespace_before_parameters`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.formatting

**Imports**: `__future__.annotations`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/formatting/__init__.py`  
**Dependencies**: `__future__.annotations`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.formatting.default
:::{doc} SimpleFormatter:22
Simple abstraction for Default and Pylint formatter commonality.

Sub-classes of this need to define an ``error_format`` attribute in order
to succeed. The ``format`` method relies on that attribute and expects the
``error_format`` string to use the old-style formatting strings with named
parameters:

* code
* text
* path
* row
* col
:::
:::{doc} Default:56
Default formatter for Flake8.

This also handles backwards compatibility for people specifying a custom
format string.
:::
:::{doc} Pylint:75
Pylint formatter for Flake8.
:::
:::{doc} FilenameOnly:81
Only print filenames, e.g., flake8 -q.
:::
:::{doc} Nothing:102
Print absolutely nothing.
:::
**Imports**: `__future__.annotations`, `flake8.formatting.base`, `flake8.violation.Violation`
**Type References**: [[Default]], [[FilenameOnly]], [[Nothing]], [[Pylint]], [[SimpleFormatter]]

### Interface
- `format`(error: Violation) -> str | None
- `after_init`() -> None
- `show_source`(error: Violation) -> str | None

### Implementation
**SimpleFormatter**
  - error_format: str
**Default**

**Pylint**

**FilenameOnly**

**Nothing**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/formatting/default.py`  
**Dependencies**: `__future__.annotations`, `flake8.formatting.base`, `flake8.violation.Violation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.formatting._windows_color

**Imports**: `__future__.annotations`, `sys`, `ctypes.POINTER`, `ctypes.windll`, `ctypes.WinError`, `ctypes.WINFUNCTYPE`, `ctypes.wintypes.BOOL`, `ctypes.wintypes.DWORD`, `ctypes.wintypes.HANDLE`
### Interface
- `_enable`() -> None
- `bool_errcheck`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/formatting/_windows_color.py`  
**Dependencies**: `__future__.annotations`, `sys`, `ctypes.POINTER`, `ctypes.windll`, `ctypes.WinError`, `ctypes.WINFUNCTYPE`, `ctypes.wintypes.BOOL`, `ctypes.wintypes.DWORD`, `ctypes.wintypes.HANDLE`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.formatting.base
:::{doc} BaseFormatter:14
Class defining the formatter interface.

.. attribute:: options

    The options parsed from both configuration files and the command-line.

.. attribute:: filename

    If specified by the user, the path to store the results of the run.

.. attribute:: output_fd

    Initialized when the :meth:`start` is called. This will be a file
    object opened for writing.

.. attribute:: newline

    The string to add to the end of a line. This is only used when the
    output filename has been specified.
:::
**Imports**: `__future__.annotations`, `argparse`, `os`, `sys`, `typing.IO`, `flake8.formatting._windows_color`, `flake8.statistics.Statistics`, `flake8.violation.Violation`
**Type References**: [[BaseFormatter]]

### Interface
- `__init__`(options: argparse.Namespace) -> None
- `after_init`() -> None
- `beginning`(filename: str) -> None
- `finished`(filename: str) -> None
- `start`() -> None
- `handle`(error: Violation) -> None
- `format`(error: Violation) -> str | None
- `show_statistics`(statistics: Statistics) -> None
- `show_benchmarks`(benchmarks: list[tuple[<ast.Tuple object at 0x1675d6410>]]) -> None
- `show_source`(error: Violation) -> str | None
- `_write`(output: str) -> None
- `write`(line: str | None, source: str | None) -> None
- `stop`() -> None

### Implementation
**BaseFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/formatting/base.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `os`, `sys`, `typing.IO`, `flake8.formatting._windows_color`, `flake8.statistics.Statistics`, `flake8.violation.Violation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.api.legacy
:::{doc} Report:24
Public facing object that mimic's Flake8 2.0's API.

.. note::

    There are important changes in how this object behaves compared to
    the object provided in Flake8 2.x.

.. warning::

    This should not be instantiated by users.

.. versionchanged:: 3.0.0
:::
:::{doc} StyleGuide:68
Public facing object that mimic's Flake8 2.0's StyleGuide.

.. note::

    There are important changes in how this object behaves compared to
    the StyleGuide object provided in Flake8 2.x.

.. warning::

    This object should not be instantiated directly by users.

.. versionchanged:: 3.0.0
:::
:::{doc} get_style_guide:193
Provision a StyleGuide for use.

:param \*\*kwargs:
    Keyword arguments that provide some options for the StyleGuide.
:returns:
    An initialized StyleGuide
:::
**Imports**: `__future__.annotations`, `argparse`, `logging`, `os.path`, `typing.Any`, `flake8.discover_files.expand_paths`, `flake8.formatting.base`, `flake8.main.application`, `flake8.options.parse_args.parse_args`
**Type References**: [[Report]], [[StyleGuide]]

### Interface
- `get_style_guide`() -> StyleGuide
- `__init__`(application: app.Application) -> None
- `total_errors`() -> int
- `get_statistics`(violation: str) -> list[str]
- `options`() -> argparse.Namespace
- `paths`() -> list[str]
- `check_files`(paths: list[str] | None) -> Report
- `excluded`(path: str) -> bool
- `init_report`(reporter: type[formatter.BaseFormatter] | None) -> None
- `input_file`(filename: str, lines: Any | None, expected: Any | None, line_offset: Any | None) -> Report

### Implementation
**Report**

**StyleGuide**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/api/legacy.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `logging`, `os.path`, `typing.Any`, `flake8.discover_files.expand_paths`, `flake8.formatting.base`, `flake8.main.application`, `flake8.options.parse_args.parse_args`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.api

**Imports**: `__future__.annotations`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/api/__init__.py`  
**Dependencies**: `__future__.annotations`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.main.options
:::{doc} stage1_arg_parser:10
Register the preliminary options on our OptionManager.

The preliminary options include:

- ``-v``/``--verbose``
- ``--output-file``
- ``--append-config``
- ``--config``
- ``--isolated``
- ``--enable-extensions``
:::
:::{doc} JobsArgument:81
Type callback for the --jobs argument.
:::
:::{doc} register_default_options:109
Register the default options on our OptionManager.

The default options include:

- ``-q``/``--quiet``
- ``--color``
- ``--count``
- ``--exclude``
- ``--extend-exclude``
- ``--filename``
- ``--format``
- ``--hang-closing``
- ``--ignore``
- ``--extend-ignore``
- ``--per-file-ignores``
- ``--max-line-length``
- ``--max-doc-length``
- ``--indent-size``
- ``--select``
- ``--extend-select``
- ``--disable-noqa``
- ``--show-source``
- ``--statistics``
- ``--exit-zero``
- ``-j``/``--jobs``
- ``--tee``
- ``--benchmark``
- ``--bug-report``
:::
**Imports**: `__future__.annotations`, `argparse`, `flake8.defaults`, `flake8.options.manager.OptionManager`
**Type References**: [[JobsArgument]]

### Interface
- `stage1_arg_parser`() -> argparse.ArgumentParser
- `register_default_options`(option_manager: OptionManager) -> None
- `__init__`(arg: str) -> None
- `__repr__`() -> str
- `__str__`() -> str

### Implementation
**JobsArgument**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/main/options.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `flake8.defaults`, `flake8.options.manager.OptionManager`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.main

**Imports**: `__future__.annotations`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/main/__init__.py`  
**Dependencies**: `__future__.annotations`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.main.application
:::{doc} Application:25
Abstract our application into a class.
:::
**Imports**: `__future__.annotations`, `argparse`, `json`, `logging`, `time`, `typing.Sequence`, `flake8`, `flake8.checker`, `flake8.defaults`, `flake8.exceptions`, `flake8.style_guide`, `flake8.formatting.base.BaseFormatter`, `flake8.main.debug`, `flake8.options.parse_args.parse_args`, `flake8.plugins.finder`, `flake8.plugins.reporter`
**Type References**: [[Application]]

### Interface
- `__init__`() -> None
- `exit_code`() -> int
- `make_formatter`() -> None
- `make_guide`() -> None
- `make_file_checker_manager`(argv: Sequence[str]) -> None
- `run_checks`() -> None
- `report_benchmarks`() -> None
- `report_errors`() -> None
- `report_statistics`() -> None
- `initialize`(argv: Sequence[str]) -> None
- `report`() -> None
- `_run`(argv: Sequence[str]) -> None
- `run`(argv: Sequence[str]) -> None

### Implementation
**Application**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/main/application.py`  
**Dependencies**: `__future__.annotations`, `argparse`, `json`, `logging`, `time`, `typing.Sequence`, `flake8`, `flake8.checker`, `flake8.defaults`, `flake8.exceptions`, `flake8.style_guide`, `flake8.formatting.base.BaseFormatter`, `flake8.main.debug`, `flake8.options.parse_args.parse_args`, `flake8.plugins.finder`, `flake8.plugins.reporter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.main.cli
:::{doc} main:10
Execute the main bit of the application.

This handles the creation of an instance of :class:`Application`, runs it,
and then exits the application.

:param argv:
    The arguments to be passed to the application for parsing.
:::
**Imports**: `__future__.annotations`, `sys`, `typing.Sequence`, `flake8.main.application`
### Interface
- `main`(argv: Sequence[str] | None) -> int
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/main/cli.py`  
**Dependencies**: `__future__.annotations`, `sys`, `typing.Sequence`, `flake8.main.application`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.flake8.main.debug
:::{doc} information:10
Generate the information to be printed for the bug report.
:::
**Imports**: `__future__.annotations`, `platform`, `typing.Any`, `flake8.plugins.finder.Plugins`
### Interface
- `information`(version: str, plugins: Plugins) -> dict[<ast.Tuple object at 0x167691090>]
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/flake8/main/debug.py`  
**Dependencies**: `__future__.annotations`, `platform`, `typing.Any`, `flake8.plugins.finder.Plugins`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.filters
:::{doc} find_filter_class:22
Lookup a filter by name. Return None if not found.
:::
:::{doc} get_filter_by_name:32
Return an instantiated filter.

Options are passed to the filter initializer if wanted.
Raise a ClassNotFound if not found.
:::
:::{doc} get_all_filters:45
Return a generator of all filter names.
:::
:::{doc} CodeTagFilter:65
Highlight special code tags in comments and docstrings.

Options accepted:

`codetags` : list of strings
   A list of strings that are flagged as code tags.  The default is to
   highlight ``XXX``, ``TODO``, ``FIXME``, ``BUG`` and ``NOTE``.

.. versionchanged:: 2.13
   Now recognizes ``FIXME`` by default.
:::
:::{doc} SymbolFilter:97
Convert mathematical symbols such as \<longrightarrow> in Isabelle
or \longrightarrow in LaTeX into Unicode characters.

This is mostly useful for HTML or console output when you want to
approximate the source rendering you'd see in an IDE.

Options accepted:

`lang` : string
   The symbol language. Must be one of ``'isabelle'`` or
   ``'latex'``.  The default is ``'isabelle'``.
:::
:::{doc} KeywordCaseFilter:687
Convert keywords to lowercase or uppercase or capitalize them, which
means first letter uppercase, rest lowercase.

This can be useful e.g. if you highlight Pascal code and want to adapt the
code to your styleguide.

Options accepted:

`case` : string
   The casing to convert keywords to. Must be one of ``'lower'``,
   ``'upper'`` or ``'capitalize'``.  The default is ``'lower'``.
:::
:::{doc} NameHighlightFilter:715
Highlight a normal Name (and Name.*) token with a different token type.

Example::

    filter = NameHighlightFilter(
        names=['foo', 'bar', 'baz'],
        tokentype=Name.Function,
    )

This would highlight the names "foo", "bar" and "baz"
as functions. `Name.Function` is the default token type.

Options accepted:

`names` : list of strings
  A list of names that should be given the different token type.
  There is no default.
`tokentype` : TokenType or string
  A token type or a string containing a token type name that is
  used for highlighting the strings in `names`.  The default is
  `Name.Function`.
:::
:::{doc} RaiseOnErrorTokenFilter:760
Raise an exception when the lexer generates an error token.

Options accepted:

`excclass` : Exception class
  The exception class to raise.
  The default is `pygments.filters.ErrorToken`.

.. versionadded:: 0.8
:::
:::{doc} VisibleWhitespaceFilter:789
Convert tabs, newlines and/or spaces to visible characters.

Options accepted:

`spaces` : string or bool
  If this is a one-character string, spaces will be replaces by this string.
  If it is another true value, spaces will be replaced by ``·`` (unicode
  MIDDLE DOT).  If it is a false value, spaces will not be replaced.  The
  default is ``False``.
`tabs` : string or bool
  The same as for `spaces`, but the default replacement character is ``»``
  (unicode RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK).  The default value
  is ``False``.  Note: this will not work if the `tabsize` option for the
  lexer is nonzero, as tabs will already have been expanded then.
`tabsize` : int
  If tabs are to be replaced by this filter (see the `tabs` option), this
  is the total number of characters that a tab should be expanded to.
  The default is ``8``.
`newlines` : string or bool
  The same as for `spaces`, but the default replacement character is ``¶``
  (unicode PILCROW SIGN).  The default value is ``False``.
`wstokentype` : bool
  If true, give whitespace the special `Whitespace` token type.  This allows
  styling the visible whitespace differently (e.g. greyed out), but it can
  disrupt background colors.  The default is ``True``.

.. versionadded:: 0.8
:::
:::{doc} GobbleFilter:868
Gobbles source code lines (eats initial characters).

This filter drops the first ``n`` characters off every line of code.  This
may be useful when the source code fed to the lexer is indented by a fixed
amount of space that isn't desired in the output.

Options accepted:

`n` : int
   The number of characters to gobble.

.. versionadded:: 1.2
:::
:::{doc} TokenMergeFilter:907
Merges consecutive tokens with the same token type in the output
stream of a lexer.

.. versionadded:: 1.2
:::
**Imports**: `re`, `pygments.token.String`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Error`, `pygments.token.Whitespace`, `pygments.token.string_to_tokentype`, `pygments.filter.Filter`, `pygments.util.get_list_opt`, `pygments.util.get_int_opt`, `pygments.util.get_bool_opt`, `pygments.util.get_choice_opt`, `pygments.util.ClassNotFound`, `pygments.util.OptionError`, `pygments.plugin.find_plugin_filters`
**Type References**: [[CodeTagFilter]], [[ErrorToken]], [[GobbleFilter]], [[KeywordCaseFilter]], [[NameHighlightFilter]], [[RaiseOnErrorTokenFilter]], [[SymbolFilter]], [[TokenMergeFilter]], [[VisibleWhitespaceFilter]]

### Interface
- `find_filter_class`() -> Any
- `get_filter_by_name`() -> Any
- `get_all_filters`() -> Any
- `_replace_special`() -> Any
- `__init__`() -> Any
- `filter`() -> Any
- `gobble`() -> Any
- `replacefunc`() -> Any

### Implementation
**CodeTagFilter**

**SymbolFilter**

**KeywordCaseFilter**

**NameHighlightFilter**

**ErrorToken**

**RaiseOnErrorTokenFilter**

**VisibleWhitespaceFilter**

**GobbleFilter**

**TokenMergeFilter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/filters/__init__.py`  
**Dependencies**: `re`, `pygments.token.String`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Error`, `pygments.token.Whitespace`, `pygments.token.string_to_tokentype`, `pygments.filter.Filter`, `pygments.util.get_list_opt`, `pygments.util.get_int_opt`, `pygments.util.get_bool_opt`, `pygments.util.get_choice_opt`, `pygments.util.ClassNotFound`, `pygments.util.OptionError`, `pygments.plugin.find_plugin_filters`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.soong

**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[SoongLexer]]


### Implementation
**SoongLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/soong.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.c_like
:::{doc} PikeLexer:26
For `Pike <http://pike.lysator.liu.se/>`_ source code.
:::
:::{doc} NesCLexer:66
For `nesC <https://github.com/tinyos/nesc>`_ source code with preprocessor
directives.
:::
:::{doc} ClayLexer:94
For Clay source.
:::
:::{doc} ECLexer:146
For eC source code with preprocessor directives.
:::
:::{doc} ValaLexer:179
For Vala source code with preprocessor directives.
:::
:::{doc} CudaLexer:277
For NVIDIA CUDA™ source.
:::
:::{doc} SwigLexer:324
For `SWIG <http://www.swig.org/>`_ source code.
:::
:::{doc} MqlLexer:389
For `MQL4 <http://docs.mql4.com/>`_ and
`MQL5 <http://www.mql5.com/en/docs>`_ source code.
:::
:::{doc} ArduinoLexer:413
For `Arduino(tm) <https://arduino.cc/>`_ source.

This is an extension of the CppLexer, as the Arduino® Language is a superset
of C++
:::
:::{doc} CharmciLexer:540
For `Charm++ <https://charm.cs.illinois.edu>`_ interface files (.ci).
:::
:::{doc} OmgIdlLexer:569
Lexer for Object Management Group Interface Definition Language.
:::
:::{doc} PromelaLexer:662
For the Promela language used with SPIN.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.inherit`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.lexers.c_cpp.CLexer`, `pygments.lexers.c_cpp.CppLexer`, `pygments.lexers._mql_builtins`
**Type References**: [[ArduinoLexer]], [[CharmciLexer]], [[ClayLexer]], [[CudaLexer]], [[ECLexer]], [[MqlLexer]], [[NesCLexer]], [[OmgIdlLexer]], [[PikeLexer]], [[PromelaLexer]], [[SwigLexer]], [[ValaLexer]]

### Interface
- `get_tokens_unprocessed`() -> Any
- `analyse_text`() -> Any

### Implementation
**PikeLexer**

**NesCLexer**

**ClayLexer**

**ECLexer**

**ValaLexer**

**CudaLexer**

**SwigLexer**

**MqlLexer**

**ArduinoLexer**

**CharmciLexer**

**OmgIdlLexer**

**PromelaLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/c_like.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.inherit`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.lexers.c_cpp.CLexer`, `pygments.lexers.c_cpp.CppLexer`, `pygments.lexers._mql_builtins`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.ampl
:::{doc} AmplLexer:18
For AMPL source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[AmplLexer]]


### Implementation
**AmplLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/ampl.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.agile

**Imports**: `pygments.lexers.lisp.SchemeLexer`, `pygments.lexers.jvm.IokeLexer`, `pygments.lexers.jvm.ClojureLexer`, `pygments.lexers.python.PythonLexer`, `pygments.lexers.python.PythonConsoleLexer`, `pygments.lexers.python.PythonTracebackLexer`, `pygments.lexers.python.Python3Lexer`, `pygments.lexers.python.Python3TracebackLexer`, `pygments.lexers.python.DgLexer`, `pygments.lexers.ruby.RubyLexer`, `pygments.lexers.ruby.RubyConsoleLexer`, `pygments.lexers.ruby.FancyLexer`, `pygments.lexers.perl.PerlLexer`, `pygments.lexers.perl.Perl6Lexer`, `pygments.lexers.d.CrocLexer`, `pygments.lexers.d.MiniDLexer`, `pygments.lexers.iolang.IoLexer`, `pygments.lexers.tcl.TclLexer`, `pygments.lexers.factor.FactorLexer`, `pygments.lexers.scripting.LuaLexer`, `pygments.lexers.scripting.MoonScriptLexer`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/agile.py`  
**Dependencies**: `pygments.lexers.lisp.SchemeLexer`, `pygments.lexers.jvm.IokeLexer`, `pygments.lexers.jvm.ClojureLexer`, `pygments.lexers.python.PythonLexer`, `pygments.lexers.python.PythonConsoleLexer`, `pygments.lexers.python.PythonTracebackLexer`, `pygments.lexers.python.Python3Lexer`, `pygments.lexers.python.Python3TracebackLexer`, `pygments.lexers.python.DgLexer`, `pygments.lexers.ruby.RubyLexer`, `pygments.lexers.ruby.RubyConsoleLexer`, `pygments.lexers.ruby.FancyLexer`, `pygments.lexers.perl.PerlLexer`, `pygments.lexers.perl.Perl6Lexer`, `pygments.lexers.d.CrocLexer`, `pygments.lexers.d.MiniDLexer`, `pygments.lexers.iolang.IoLexer`, `pygments.lexers.tcl.TclLexer`, `pygments.lexers.factor.FactorLexer`, `pygments.lexers.scripting.LuaLexer`, `pygments.lexers.scripting.MoonScriptLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.graphics
:::{doc} GLShaderLexer:20
GLSL (OpenGL Shader) lexer.
:::
:::{doc} HLSLShaderLexer:151
HLSL (Microsoft Direct3D Shader) lexer.
:::
:::{doc} PostScriptLexer:305
Lexer for PostScript files.
:::
:::{doc} AsymptoteLexer:399
For Asymptote source code.
:::
:::{doc} GnuplotLexer:526
For Gnuplot plotting scripts.
:::
:::{doc} PovrayLexer:686
For Persistence of Vision Raytracer files.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`, `pygments.lexers._asy_builtins.ASYFUNCNAME`, `pygments.lexers._asy_builtins.ASYVARNAME`
**Type References**: [[AsymptoteLexer]], [[GLShaderLexer]], [[GnuplotLexer]], [[HLSLShaderLexer]], [[PostScriptLexer]], [[PovrayLexer]]

### Interface
- `_shortened`() -> Any
- `_shortened_many`() -> Any
- `get_tokens_unprocessed`() -> Any
- `analyse_text`() -> Any

### Implementation
**GLShaderLexer**

**HLSLShaderLexer**

**PostScriptLexer**

**AsymptoteLexer**

**GnuplotLexer**

**PovrayLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/graphics.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`, `pygments.lexers._asy_builtins.ASYFUNCNAME`, `pygments.lexers._asy_builtins.ASYVARNAME`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.hdl
:::{doc} VerilogLexer:20
For verilog source code with preprocessor directives.
:::
:::{doc} SystemVerilogLexer:146
Extends verilog lexer to recognise all SystemVerilog keywords from IEEE
1800-2009 standard.
:::
:::{doc} VhdlLexer:373
For VHDL source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[SystemVerilogLexer]], [[VerilogLexer]], [[VhdlLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**VerilogLexer**

**SystemVerilogLexer**

**VhdlLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/hdl.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.ecl
:::{doc} ECLLexer:20
Lexer for the declarative big-data ECL language.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[ECLLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**ECLLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/ecl.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.futhark
:::{doc} FutharkLexer:19
A Futhark lexer
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.unistring`
**Type References**: [[FutharkLexer]]


### Implementation
**FutharkLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/futhark.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.unistring`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.ada
:::{doc} AdaLexer:22
For Ada source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.lexers._ada_builtins.KEYWORD_LIST`, `pygments.lexers._ada_builtins.BUILTIN_LIST`
**Type References**: [[AdaLexer]]


### Implementation
**AdaLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/ada.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.lexers._ada_builtins.KEYWORD_LIST`, `pygments.lexers._ada_builtins.BUILTIN_LIST`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._postgres_builtins

**Imports**: `re`, `urllib.request.urlopen`, `pygments.util.format_lines`
### Interface
- `update_myself`() -> Any
- `parse_keywords`() -> Any
- `parse_datatypes`() -> Any
- `parse_pseudos`() -> Any
- `update_consts`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_postgres_builtins.py`  
**Dependencies**: `re`, `urllib.request.urlopen`, `pygments.util.format_lines`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.console
:::{doc} VCTreeStatusLexer:18
For colorizing output of version control status commands, like "hg
status" or "svn status".
:::
:::{doc} PyPyLogLexer:45
Lexer for PyPy log files.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Generic`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Punctuation`, `pygments.token.Number`, `pygments.token.Whitespace`
**Type References**: [[PyPyLogLexer]], [[VCTreeStatusLexer]]


### Implementation
**VCTreeStatusLexer**

**PyPyLogLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/console.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Generic`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Punctuation`, `pygments.token.Number`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.mime
:::{doc} MIMELexer:21
Lexer for Multipurpose Internet Mail Extensions (MIME) data. This lexer is
designed to process nested multipart data.

It assumes that the given data contains both header and body (and is
split at an empty line). If no valid header is found, then the entire data
will be treated as body.

Additional options accepted:

`MIME-max-level`
    Max recursion level for nested MIME structure. Any negative number
    would treated as unlimited. (default: -1)

`Content-Type`
    Treat the data as a specific content type. Useful when header is
    missing, or this lexer would try to parse from header. (default:
    `text/plain`)

`Multipart-Boundary`
    Set the default multipart boundary delimiter. This option is only used
    when `Content-Type` is `multipart` and header is missing. This lexer
    would try to parse from header by default. (default: None)

`Content-Transfer-Encoding`
    Treat the data as a specific encoding. Or this lexer would try to parse
    from header by default. (default: None)
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexers.get_lexer_for_mimetype`, `pygments.token.Text`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Operator`, `pygments.token.Comment`, `pygments.token.Other`, `pygments.util.get_int_opt`, `pygments.util.ClassNotFound`
**Type References**: [[MIMELexer]]

### Interface
- `__init__`() -> Any
- `get_header_tokens`() -> Any
- `get_body_tokens`() -> Any
- `get_bodypart_tokens`() -> Any
- `store_content_type`() -> Any
- `get_content_type_subtokens`() -> Any
- `store_content_transfer_encoding`() -> Any

### Implementation
**MIMELexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/mime.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexers.get_lexer_for_mimetype`, `pygments.token.Text`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Operator`, `pygments.token.Comment`, `pygments.token.Other`, `pygments.util.get_int_opt`, `pygments.util.ClassNotFound`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._lua_builtins

**Imports**: `re`, `urllib.request.urlopen`, `pprint`
### Interface
- `module_callbacks`() -> Any
- `get_newest_version`() -> Any
- `get_lua_functions`() -> Any
- `get_function_module`() -> Any
- `regenerate`() -> Any
- `run`() -> Any
- `is_in_coroutine_module`() -> Any
- `is_in_modules_module`() -> Any
- `is_in_string_module`() -> Any
- `is_in_table_module`() -> Any
- `is_in_math_module`() -> Any
- `is_in_io_module`() -> Any
- `is_in_os_module`() -> Any
- `is_in_debug_module`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_lua_builtins.py`  
**Dependencies**: `re`, `urllib.request.urlopen`, `pprint`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.capnproto
:::{doc} CapnProtoLexer:17
For Cap'n Proto source.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Literal`, `pygments.token.Whitespace`
**Type References**: [[CapnProtoLexer]]


### Implementation
**CapnProtoLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/capnproto.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Literal`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.nimrod
:::{doc} NimrodLexer:20
For Nim source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.default`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`
**Type References**: [[NimrodLexer]]

### Interface
- `underscorize`() -> Any

### Implementation
**NimrodLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/nimrod.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.default`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.rebol
:::{doc} RebolLexer:20
A REBOL lexer.
:::
:::{doc} RedLexer:241
A Red-language lexer.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[RebolLexer]], [[RedLexer]]

### Interface
- `word_callback`() -> Any
- `analyse_text`() -> Any

### Implementation
**RebolLexer**

**RedLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/rebol.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.objective
:::{doc} objective:23
Generate a subclass of baselexer that accepts the Objective-C syntax
extensions.
:::
:::{doc} ObjectiveCLexer:194
For Objective-C source code with preprocessor directives.
:::
:::{doc} ObjectiveCppLexer:208
For Objective-C++ source code with preprocessor directives.
:::
:::{doc} LogosLexer:221
For Logos + Objective-C source code with preprocessor directives.
:::
:::{doc} SwiftLexer:284
For Swift source.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.words`, `pygments.lexer.inherit`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Operator`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Literal`, `pygments.token.Comment`, `pygments.token.Whitespace`, `pygments.lexers.c_cpp.CLexer`, `pygments.lexers.c_cpp.CppLexer`, `pygments.lexers._cocoa_builtins.COCOA_INTERFACES`, `pygments.lexers._cocoa_builtins.COCOA_PROTOCOLS`, `pygments.lexers._cocoa_builtins.COCOA_PRIMITIVES`, `pygments.lexers._cocoa_builtins.COCOA_INTERFACES`, `pygments.lexers._cocoa_builtins.COCOA_PROTOCOLS`, `pygments.lexers._cocoa_builtins.COCOA_PRIMITIVES`
**Type References**: [[GeneratedObjectiveCVariant]], [[LogosLexer]], [[ObjectiveCLexer]], [[ObjectiveCppLexer]], [[SwiftLexer]]

### Interface
- `objective`() -> Any
- `analyse_text`() -> Any
- `get_tokens_unprocessed`() -> Any

### Implementation
**ObjectiveCLexer**

**ObjectiveCppLexer**

**LogosLexer**

**SwiftLexer**

**GeneratedObjectiveCVariant**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/objective.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.words`, `pygments.lexer.inherit`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Operator`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Literal`, `pygments.token.Comment`, `pygments.token.Whitespace`, `pygments.lexers.c_cpp.CLexer`, `pygments.lexers.c_cpp.CppLexer`, `pygments.lexers._cocoa_builtins.COCOA_INTERFACES`, `pygments.lexers._cocoa_builtins.COCOA_PROTOCOLS`, `pygments.lexers._cocoa_builtins.COCOA_PRIMITIVES`, `pygments.lexers._cocoa_builtins.COCOA_INTERFACES`, `pygments.lexers._cocoa_builtins.COCOA_PROTOCOLS`, `pygments.lexers._cocoa_builtins.COCOA_PRIMITIVES`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.sas
:::{doc} SASLexer:19
For SAS files.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Other`, `pygments.token.Generic`
**Type References**: [[SASLexer]]


### Implementation
**SASLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/sas.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Other`, `pygments.token.Generic`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._qlik_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_qlik_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.phix
:::{doc} PhixLexer:20
Pygments Lexer for Phix files (.exw).
See http://phix.x10.mx
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[PhixLexer]]


### Implementation
**PhixLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/phix.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.graphql
:::{doc} GraphQLLexer:57
Lexer for GraphQL syntax
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[GraphQLLexer]]


### Implementation
**GraphQLLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/graphql.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.usd
:::{doc} UsdLexer:30
A lexer that parses Pixar's Universal Scene Description file format.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexers._usd_builtins.COMMON_ATTRIBUTES`, `pygments.lexers._usd_builtins.KEYWORDS`, `pygments.lexers._usd_builtins.OPERATORS`, `pygments.lexers._usd_builtins.SPECIAL_NAMES`, `pygments.lexers._usd_builtins.TYPES`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`
**Type References**: [[UsdLexer]]

### Interface
- `_keywords`() -> Any

### Implementation
**UsdLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/usd.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexers._usd_builtins.COMMON_ATTRIBUTES`, `pygments.lexers._usd_builtins.KEYWORDS`, `pygments.lexers._usd_builtins.OPERATORS`, `pygments.lexers._usd_builtins.SPECIAL_NAMES`, `pygments.lexers._usd_builtins.TYPES`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.crystal
:::{doc} CrystalLexer:27
For Crystal source code.
:::
**Imports**: `re`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.line_re`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`, `pygments.token.Whitespace`
**Type References**: [[CrystalLexer]]

### Interface
- `heredoc_callback`() -> Any
- `gen_crystalstrings_rules`() -> Any

### Implementation
**CrystalLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/crystal.py`  
**Dependencies**: `re`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.line_re`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.verifpal
:::{doc} VerifpalLexer:18
For Verifpal code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[VerifpalLexer]]


### Implementation
**VerifpalLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/verifpal.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._sourcemod_builtins

**Imports**: `re`, `urllib.request.FancyURLopener`, `pygments.util.format_lines`
**Type References**: [[Opener]]

### Interface
- `get_version`() -> Any
- `get_sm_functions`() -> Any
- `regenerate`() -> Any
- `run`() -> Any

### Implementation
**Opener**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_sourcemod_builtins.py`  
**Dependencies**: `re`, `urllib.request.FancyURLopener`, `pygments.util.format_lines`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.web

**Imports**: `pygments.lexers.html.HtmlLexer`, `pygments.lexers.html.DtdLexer`, `pygments.lexers.html.XmlLexer`, `pygments.lexers.html.XsltLexer`, `pygments.lexers.html.HamlLexer`, `pygments.lexers.html.ScamlLexer`, `pygments.lexers.html.JadeLexer`, `pygments.lexers.css.CssLexer`, `pygments.lexers.css.SassLexer`, `pygments.lexers.css.ScssLexer`, `pygments.lexers.javascript.JavascriptLexer`, `pygments.lexers.javascript.LiveScriptLexer`, `pygments.lexers.javascript.DartLexer`, `pygments.lexers.javascript.TypeScriptLexer`, `pygments.lexers.javascript.LassoLexer`, `pygments.lexers.javascript.ObjectiveJLexer`, `pygments.lexers.javascript.CoffeeScriptLexer`, `pygments.lexers.actionscript.ActionScriptLexer`, `pygments.lexers.actionscript.ActionScript3Lexer`, `pygments.lexers.actionscript.MxmlLexer`, `pygments.lexers.php.PhpLexer`, `pygments.lexers.webmisc.DuelLexer`, `pygments.lexers.webmisc.XQueryLexer`, `pygments.lexers.webmisc.SlimLexer`, `pygments.lexers.webmisc.QmlLexer`, `pygments.lexers.data.JsonLexer`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/web.py`  
**Dependencies**: `pygments.lexers.html.HtmlLexer`, `pygments.lexers.html.DtdLexer`, `pygments.lexers.html.XmlLexer`, `pygments.lexers.html.XsltLexer`, `pygments.lexers.html.HamlLexer`, `pygments.lexers.html.ScamlLexer`, `pygments.lexers.html.JadeLexer`, `pygments.lexers.css.CssLexer`, `pygments.lexers.css.SassLexer`, `pygments.lexers.css.ScssLexer`, `pygments.lexers.javascript.JavascriptLexer`, `pygments.lexers.javascript.LiveScriptLexer`, `pygments.lexers.javascript.DartLexer`, `pygments.lexers.javascript.TypeScriptLexer`, `pygments.lexers.javascript.LassoLexer`, `pygments.lexers.javascript.ObjectiveJLexer`, `pygments.lexers.javascript.CoffeeScriptLexer`, `pygments.lexers.actionscript.ActionScriptLexer`, `pygments.lexers.actionscript.ActionScript3Lexer`, `pygments.lexers.actionscript.MxmlLexer`, `pygments.lexers.php.PhpLexer`, `pygments.lexers.webmisc.DuelLexer`, `pygments.lexers.webmisc.XQueryLexer`, `pygments.lexers.webmisc.SlimLexer`, `pygments.lexers.webmisc.QmlLexer`, `pygments.lexers.data.JsonLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.ldap
:::{doc} LdifLexer:21
Lexer for LDIF
:::
:::{doc} LdaprcLexer:105
Lexer for OpenLDAP configuration files.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Operator`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Escape`
**Type References**: [[LdaprcLexer]], [[LdifLexer]]


### Implementation
**LdifLexer**

**LdaprcLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/ldap.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Operator`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Escape`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.verification
:::{doc} BoogieLexer:18
For Boogie source code.
:::
:::{doc} SilverLexer:65
For Silver source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Text`, `pygments.token.Generic`
**Type References**: [[BoogieLexer]], [[SilverLexer]]


### Implementation
**BoogieLexer**

**SilverLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/verification.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Text`, `pygments.token.Generic`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.erlang
:::{doc} ErlangLexer:22
For the Erlang functional programming language.
:::
:::{doc} ErlangShellLexer:149
Shell sessions in erl (for Erlang code).
:::
:::{doc} ElixirLexer:219
For the Elixir language.
:::
:::{doc} ElixirConsoleLexer:469
For Elixir interactive console (iex) output like:

.. sourcecode:: iex

    iex> [head | tail] = [1,2,3]
    [1,2,3]
    iex> head
    1
    iex> tail
    [2,3]
    iex> [head | tail]
    [1,2,3]
    iex> length [head | tail]
    3
:::
**Imports**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.do_insertions`, `pygments.lexer.include`, `pygments.lexer.default`, `pygments.lexer.line_re`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[ElixirConsoleLexer]], [[ElixirLexer]], [[ErlangLexer]], [[ErlangShellLexer]]

### Interface
- `gen_elixir_string_rules`() -> Any
- `gen_elixir_sigstr_rules`() -> Any
- `get_tokens_unprocessed`() -> Any
- `gen_elixir_sigil_rules`() -> Any

### Implementation
**ErlangLexer**

**ErlangShellLexer**

**ElixirLexer**

**ElixirConsoleLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/erlang.py`  
**Dependencies**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.do_insertions`, `pygments.lexer.include`, `pygments.lexer.default`, `pygments.lexer.line_re`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.apdlexer
:::{doc} apdlexer:20
For APDL source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Generic`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Escape`
**Type References**: [[apdlexer]]


### Implementation
**apdlexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/apdlexer.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Generic`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Escape`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.slash
:::{doc} SlashLexer:170
Lexer for the Slash programming language.
:::
**Imports**: `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.DelegatingLexer`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Comment`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Keyword`, `pygments.token.Operator`, `pygments.token.Whitespace`, `pygments.lexers.web.HtmlLexer`
**Type References**: [[SlashLanguageLexer]], [[SlashLexer]]

### Interface
- `move_state`() -> Any
- `right_angle_bracket`() -> Any
- `__init__`() -> Any

### Implementation
**SlashLanguageLexer**

**SlashLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/slash.py`  
**Dependencies**: `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.DelegatingLexer`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Comment`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Keyword`, `pygments.token.Operator`, `pygments.token.Whitespace`, `pygments.lexers.web.HtmlLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.boa
:::{doc} BoaLexer:18
Lexer for the Boa language.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.String`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[BoaLexer]]


### Implementation
**BoaLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/boa.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.String`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.elpi
:::{doc} ElpiLexer:19
Lexer for the Elpi programming language.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.using`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.lexers.theorem.CoqLexer`
**Type References**: [[ElpiLexer]]


### Implementation
**ElpiLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/elpi.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.using`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.lexers.theorem.CoqLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.maxima
:::{doc} MaximaLexer:21
A Maxima lexer.
Derived from pygments.lexers.MuPADLexer.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`
**Type References**: [[MaximaLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**MaximaLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/maxima.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.chapel
:::{doc} ChapelLexer:18
For Chapel source.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[ChapelLexer]]


### Implementation
**ChapelLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/chapel.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.configs
:::{doc} IniLexer:28
Lexer for configuration files in INI style.
:::
:::{doc} DesktopLexer:82
Lexer for .desktop files.
:::
:::{doc} SystemdLexer:112
Lexer for systemd unit files.
:::
:::{doc} RegeditLexer:156
Lexer for Windows Registry files produced by regedit.
:::
:::{doc} PropertiesLexer:198
Lexer for configuration files in Java's properties format.

Note: trailing whitespace counts as part of the value as per spec
:::
:::{doc} KconfigLexer:274
For Linux-style Kconfig files.
:::
:::{doc} Cfengine3Lexer:352
Lexer for CFEngine3 policy files.
:::
:::{doc} ApacheConfLexer:413
Lexer for configuration files following the Apache config file
format.
:::
:::{doc} SquidConfLexer:456
Lexer for squid configuration files.
:::
:::{doc} NginxConfLexer:585
Lexer for Nginx configuration files.
:::
:::{doc} LighttpdConfLexer:631
Lexer for Lighttpd configuration files.
:::
:::{doc} DockerLexer:659
Lexer for Docker configuration files.
:::
:::{doc} TerraformLexer:694
Lexer for terraformi ``.tf`` files.
:::
:::{doc} TermcapLexer:863
Lexer for termcap database source.

This is very simple and minimal.
:::
:::{doc} TerminfoLexer:910
Lexer for terminfo database source.

This is very simple and minimal.
:::
:::{doc} PkgConfigLexer:957
Lexer for pkg-config
(see also `manual page <http://linux.die.net/man/1/pkg-config>`_).
:::
:::{doc} PacmanConfLexer:1014
Lexer for pacman.conf.

Actually, IniLexer works almost fine for this format,
but it yield error token. It is because pacman.conf has
a form without assignment like:

    UseSyslog
    Color
    TotalDownload
    CheckSpace
    VerbosePkgLists

These are flags to switch on.
:::
:::{doc} AugeasLexer:1071
Lexer for Augeas.
:::
:::{doc} TOMLLexer:1115
Lexer for TOML, a simple language for config files.
:::
:::{doc} NestedTextLexer:1283
Lexer for *NextedText*, a human-friendly data format.

.. versionchanged:: 2.16
    Added support for *NextedText* v3.0.
:::
:::{doc} SingularityLexer:1365
Lexer for Singularity definition files.
:::
:::{doc} UnixConfigLexer:1409
Lexer for Unix/Linux config files using colon-separated values, e.g.

* ``/etc/group``
* ``/etc/passwd``
* ``/etc/shadow``
:::
**Imports**: `re`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.using`, `pygments.lexer.line_re`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Literal`, `pygments.token.Error`, `pygments.token.Generic`, `pygments.lexers.shell.BashLexer`, `pygments.lexers.data.JsonLexer`
**Type References**: [[ApacheConfLexer]], [[AugeasLexer]], [[Cfengine3Lexer]], [[DesktopLexer]], [[DockerLexer]], [[IniLexer]], [[KconfigLexer]], [[LighttpdConfLexer]], [[NestedTextLexer]], [[NginxConfLexer]], [[PacmanConfLexer]], [[PkgConfigLexer]], [[PropertiesLexer]], [[RegeditLexer]], [[SingularityLexer]], [[SquidConfLexer]], [[SystemdLexer]], [[TOMLLexer]], [[TermcapLexer]], [[TerminfoLexer]], [[TerraformLexer]], [[UnixConfigLexer]]

### Interface
- `_rx_indent`() -> Any
- `analyse_text`() -> Any
- `call_indent`() -> Any
- `do_indent`() -> Any
- `heredoc_callback`() -> Any

### Implementation
**IniLexer**

**DesktopLexer**

**SystemdLexer**

**RegeditLexer**

**PropertiesLexer**

**KconfigLexer**

**Cfengine3Lexer**

**ApacheConfLexer**

**SquidConfLexer**

**NginxConfLexer**

**LighttpdConfLexer**

**DockerLexer**

**TerraformLexer**

**TermcapLexer**

**TerminfoLexer**

**PkgConfigLexer**

**PacmanConfLexer**

**AugeasLexer**

**TOMLLexer**

**NestedTextLexer**

**SingularityLexer**

**UnixConfigLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/configs.py`  
**Dependencies**: `re`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.using`, `pygments.lexer.line_re`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Literal`, `pygments.token.Error`, `pygments.token.Generic`, `pygments.lexers.shell.BashLexer`, `pygments.lexers.data.JsonLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.clean
:::{doc} CleanLexer:18
Lexer for the general purpose, state-of-the-art, pure and lazy functional
programming language Clean.

.. versionadded: 2.2
:::
**Imports**: `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[CleanLexer]]


### Implementation
**CleanLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/clean.py`  
**Dependencies**: `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.mojo
:::{doc} MojoLexer:41
For Mojo source code (version 24.2.1).
:::
**Imports**: `keyword`, `pygments.unistring`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.combined`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.this`, `pygments.lexer.using`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`, `pygments.util.shebang_matches`
**Type References**: [[MojoLexer]]

### Interface
- `innerstring_rules`() -> Any
- `fstring_rules`() -> Any
- `analyse_text`() -> Any

### Implementation
**MojoLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/mojo.py`  
**Dependencies**: `keyword`, `pygments.unistring`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.combined`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.this`, `pygments.lexer.using`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`, `pygments.util.shebang_matches`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.jslt
:::{doc} JSLTLexer:22
For JSLT source.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.combined`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[JSLTLexer]]


### Implementation
**JSLTLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/jslt.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.combined`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.ul4
:::{doc} UL4Lexer:23
Generic lexer for UL4.
:::
:::{doc} HTMLUL4Lexer:237
Lexer for UL4 embedded in HTML.
:::
:::{doc} XMLUL4Lexer:252
Lexer for UL4 embedded in XML.
:::
:::{doc} CSSUL4Lexer:267
Lexer for UL4 embedded in CSS.
:::
:::{doc} JavascriptUL4Lexer:282
Lexer for UL4 embedded in Javascript.
:::
:::{doc} PythonUL4Lexer:297
Lexer for UL4 embedded in Python.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Other`, `pygments.token.Operator`, `pygments.lexers.web.HtmlLexer`, `pygments.lexers.web.XmlLexer`, `pygments.lexers.web.CssLexer`, `pygments.lexers.web.JavascriptLexer`, `pygments.lexers.python.PythonLexer`
**Type References**: [[CSSUL4Lexer]], [[HTMLUL4Lexer]], [[JavascriptUL4Lexer]], [[PythonUL4Lexer]], [[UL4Lexer]], [[XMLUL4Lexer]]

### Interface
- `__init__`() -> Any

### Implementation
**UL4Lexer**

**HTMLUL4Lexer**

**XMLUL4Lexer**

**CSSUL4Lexer**

**JavascriptUL4Lexer**

**PythonUL4Lexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/ul4.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Other`, `pygments.token.Operator`, `pygments.lexers.web.HtmlLexer`, `pygments.lexers.web.XmlLexer`, `pygments.lexers.web.CssLexer`, `pygments.lexers.web.JavascriptLexer`, `pygments.lexers.python.PythonLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.numbair
:::{doc} NumbaIRLexer:17
Lexer for Numba IR
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Whitespace`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Keyword`, `pygments.token.Operator`, `pygments.token.Number`
**Type References**: [[NumbaIRLexer]]


### Implementation
**NumbaIRLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/numbair.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Whitespace`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Keyword`, `pygments.token.Operator`, `pygments.token.Number`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.qvt
:::{doc} QVToLexer:19
For the QVT Operational Mapping language.

Reference for implementing this: «Meta Object Facility (MOF) 2.0
Query/View/Transformation Specification», Version 1.1 - January 2011
(https://www.omg.org/spec/QVT/1.1/), see §8.4, «Concrete Syntax» in
particular.

Notable tokens assignments:

- Name.Class is assigned to the identifier following any of the following
  keywords: metamodel, class, exception, primitive, enum, transformation
  or library

- Name.Function is assigned to the names of mappings and queries

- Name.Builtin.Pseudo is assigned to the pre-defined variables 'this',
  'self' and 'result'.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.combined`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Punctuation`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`
**Type References**: [[QVToLexer]]


### Implementation
**QVToLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/qvt.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.combined`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Punctuation`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.tablegen
:::{doc} TableGenLexer:104
Lexer for TableGen
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.using`, `pygments.lexers.c_cpp.CppLexer`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`, `pygments.token.Error`
**Type References**: [[TableGenLexer]]


### Implementation
**TableGenLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/tablegen.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.using`, `pygments.lexers.c_cpp.CppLexer`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`, `pygments.token.Error`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.inferno
:::{doc} LimboLexer:20
Lexer for Limbo programming language

TODO:
    - maybe implement better var declaration highlighting
    - some simple syntax error highlighting
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Punctuation`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`
**Type References**: [[LimboLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**LimboLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/inferno.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Punctuation`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.tlb
:::{doc} TlbLexer:18
For TL-b source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Operator`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.token.Punctuation`, `pygments.token.Comment`
**Type References**: [[TlbLexer]]


### Implementation
**TlbLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/tlb.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Operator`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.token.Punctuation`, `pygments.token.Comment`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.nix
:::{doc} NixLexer:20
For the Nix language.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Literal`
**Type References**: [[NixLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**NixLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/nix.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Literal`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.wren
:::{doc} WrenLexer:19
For Wren source code, version 0.4.0.
:::
**Imports**: `re`, `pygments.lexer.include`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Whitespace`, `pygments.token.Punctuation`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Number`, `pygments.token.String`
**Type References**: [[WrenLexer]]


### Implementation
**WrenLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/wren.py`  
**Dependencies**: `re`, `pygments.lexer.include`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Whitespace`, `pygments.token.Punctuation`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Number`, `pygments.token.String`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.parasail
:::{doc} ParaSailLexer:20
For ParaSail source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Literal`
**Type References**: [[ParaSailLexer]]


### Implementation
**ParaSailLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/parasail.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Literal`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.smithy
:::{doc} SmithyLexer:18
For Smithy IDL
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.token.Punctuation`
**Type References**: [[SmithyLexer]]


### Implementation
**SmithyLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/smithy.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._css_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_css_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.graphviz
:::{doc} GraphvizLexer:19
For graphviz DOT graph description language.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Operator`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[GraphvizLexer]]


### Implementation
**GraphvizLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/graphviz.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Operator`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.r
:::{doc} RConsoleLexer:23
For R console transcripts or R CMD BATCH output files.
:::
:::{doc} SLexer:70
For S, S-plus, and R source code.
:::
:::{doc} RdLexer:160
Pygments Lexer for R documentation (Rd) files

This is a very minimal implementation, highlighting little more
than the macros. A description of Rd syntax is found in `Writing R
Extensions <http://cran.r-project.org/doc/manuals/R-exts.html>`_
and `Parsing Rd files <http://developer.r-project.org/parseRd.pdf>`_.
:::
**Imports**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.do_insertions`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[RConsoleLexer]], [[RdLexer]], [[SLexer]]

### Interface
- `get_tokens_unprocessed`() -> Any
- `analyse_text`() -> Any

### Implementation
**RConsoleLexer**

**SLexer**

**RdLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/r.py`  
**Dependencies**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.do_insertions`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.pawn
:::{doc} SourcePawnLexer:19
For SourcePawn source code with preprocessor directives.
:::
:::{doc} PawnLexer:129
For Pawn source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.util.get_bool_opt`, `pygments.lexers._sourcemod_builtins.FUNCTIONS`
**Type References**: [[PawnLexer]], [[SourcePawnLexer]]

### Interface
- `__init__`() -> Any
- `get_tokens_unprocessed`() -> Any
- `analyse_text`() -> Any

### Implementation
**SourcePawnLexer**

**PawnLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/pawn.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.util.get_bool_opt`, `pygments.lexers._sourcemod_builtins.FUNCTIONS`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.dns
:::{doc} DnsZoneLexer:30
Lexer for DNS zone file
:::
**Imports**: `re`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Literal`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`
**Type References**: [[DnsZoneLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**DnsZoneLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/dns.py`  
**Dependencies**: `re`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Literal`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.maple
:::{doc} MapleLexer:17
Lexer for Maple.
:::
**Imports**: `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.lexer.ExtendedRegexLexer`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Whitespace`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.Number`, `pygments.token.Keyword`
**Type References**: [[MapleLexer]]

### Interface
- `delayed_callback`() -> Any
- `analyse_text`() -> Any

### Implementation
**MapleLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/maple.py`  
**Dependencies**: `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.lexer.ExtendedRegexLexer`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Whitespace`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.Number`, `pygments.token.Keyword`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.idl
:::{doc} IDLLexer:20
Pygments Lexer for IDL (Interactive Data Language).
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[IDLLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**IDLLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/idl.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.iolang
:::{doc} IoLexer:18
For Io (a small, prototype-based programming language) source.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`
**Type References**: [[IoLexer]]


### Implementation
**IoLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/iolang.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.amdgpu
:::{doc} AMDGPULexer:19
For AMD GPU assembly.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Name`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.Whitespace`, `pygments.token.Number`, `pygments.token.Comment`, `re`
**Type References**: [[AMDGPULexer]]


### Implementation
**AMDGPULexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/amdgpu.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Name`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.Whitespace`, `pygments.token.Number`, `pygments.token.Comment`, `re`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.dsls
:::{doc} ProtoBufLexer:23
Lexer for Protocol Buffer definition files.
:::
:::{doc} ThriftLexer:84
For Thrift interface definitions.
:::
:::{doc} ZeekLexer:189
For Zeek scripts.
:::
:::{doc} PuppetLexer:350
For Puppet configuration DSL.
:::
:::{doc} RslLexer:437
RSL is the formal specification
language used in RAISE (Rigorous Approach to Industrial Software Engineering)
method.
:::
:::{doc} MscgenLexer:500
For Mscgen files.
:::
:::{doc} VGLLexer:549
For SampleManager VGL source code.
:::
:::{doc} AlloyLexer:582
For Alloy source code.
:::
:::{doc} PanLexer:650
Lexer for pan source files.

Based on tcsh lexer.
:::
:::{doc} CrmshLexer:718
Lexer for crmsh configuration files for Pacemaker clusters.
:::
:::{doc} FlatlineLexer:787
Lexer for Flatline expressions.
:::
:::{doc} SnowballLexer:863
Lexer for Snowball source code.
:::
**Imports**: `re`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.default`, `pygments.lexer.this`, `pygments.lexer.using`, `pygments.lexer.combined`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[AlloyLexer]], [[CrmshLexer]], [[FlatlineLexer]], [[MscgenLexer]], [[PanLexer]], [[ProtoBufLexer]], [[PuppetLexer]], [[RslLexer]], [[SnowballLexer]], [[ThriftLexer]], [[VGLLexer]], [[ZeekLexer]]

### Interface
- `analyse_text`() -> Any
- `__init__`() -> Any
- `_reset_stringescapes`() -> Any
- `_string`() -> Any
- `_stringescapes`() -> Any
- `get_tokens_unprocessed`() -> Any
- `callback`() -> Any

### Implementation
**ProtoBufLexer**

**ThriftLexer**

**ZeekLexer**

**PuppetLexer**

**RslLexer**

**MscgenLexer**

**VGLLexer**

**AlloyLexer**

**PanLexer**

**CrmshLexer**

**FlatlineLexer**

**SnowballLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/dsls.py`  
**Dependencies**: `re`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.default`, `pygments.lexer.this`, `pygments.lexer.using`, `pygments.lexer.combined`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.supercollider
:::{doc} SuperColliderLexer:20
For SuperCollider source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`
**Type References**: [[SuperColliderLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**SuperColliderLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/supercollider.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.comal
:::{doc} Comal80Lexer:20
For COMAL-80 source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Whitespace`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Name`, `pygments.token.Punctuation`
**Type References**: [[Comal80Lexer]]


### Implementation
**Comal80Lexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/comal.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Whitespace`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Name`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.solidity
:::{doc} SolidityLexer:18
For Solidity source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[SolidityLexer]]


### Implementation
**SolidityLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/solidity.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._scilab_builtins

**Imports**: `subprocess`, `pygments.util.format_lines`, `pygments.util.duplicates_removed`
### Interface
- `extract_completion`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_scilab_builtins.py`  
**Dependencies**: `subprocess`, `pygments.util.format_lines`, `pygments.util.duplicates_removed`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._lilypond_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_lilypond_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.hare
:::{doc} HareLexer:17
Lexer for the Hare programming language.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[HareLexer]]


### Implementation
**HareLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/hare.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.lisp
:::{doc} SchemeLexer:26
A Scheme lexer.

This parser is checked with pastes from the LISP pastebin
at http://paste.lisp.org/ to cover as much syntax as possible.

It supports the full Scheme syntax as defined in R5RS.
:::
:::{doc} CommonLispLexer:295
A Common Lisp lexer.
:::
:::{doc} HyLexer:483
Lexer for Hy source code.
:::
:::{doc} RacketLexer:596
Lexer for Racket source code (formerly
known as PLT Scheme).
:::
:::{doc} NewLispLexer:1529
For newLISP source code (version 10.3.0).
:::
:::{doc} EmacsLispLexer:1660
An ELisp lexer, parsing a stream and outputting the tokens
needed to highlight elisp code.
:::
:::{doc} ShenLexer:2305
Lexer for Shen source code.
:::
:::{doc} CPSALexer:2469
A CPSA lexer based on the CPSA language as of version 2.2.12
:::
:::{doc} XtlangLexer:2547
An xtlang lexer for the Extempore programming environment.

This is a mixture of Scheme and xtlang, really. Keyword lists are
taken from the Extempore Emacs mode
(https://github.com/extemporelang/extempore-emacs-mode)
:::
:::{doc} FennelLexer:2750
A lexer for the Fennel programming language.

Fennel compiles to Lua, so all the Lua builtins are recognized as well
as the special forms that are particular to the Fennel compiler.
:::
:::{doc} JanetLexer:2833
A lexer for the Janet programming language.
    
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Literal`, `pygments.token.Error`, `pygments.token.Whitespace`, `pygments.lexers.python.PythonLexer`, `pygments.lexers._scheme_builtins.scheme_keywords`, `pygments.lexers._scheme_builtins.scheme_builtins`, `pygments.lexers._cl_builtins.BUILTIN_FUNCTIONS`, `pygments.lexers._cl_builtins.SPECIAL_FORMS`, `pygments.lexers._cl_builtins.MACROS`, `pygments.lexers._cl_builtins.LAMBDA_LIST_KEYWORDS`, `pygments.lexers._cl_builtins.DECLARATIONS`, `pygments.lexers._cl_builtins.BUILTIN_TYPES`, `pygments.lexers._cl_builtins.BUILTIN_CLASSES`
**Type References**: [[CPSALexer]], [[CommonLispLexer]], [[EmacsLispLexer]], [[FennelLexer]], [[HyLexer]], [[JanetLexer]], [[NewLispLexer]], [[RacketLexer]], [[SchemeLexer]], [[ShenLexer]], [[XtlangLexer]]

### Interface
- `get_tokens_unprocessed`() -> Any
- `decimal_cb`() -> Any
- `__init__`() -> Any
- `analyse_text`() -> Any
- `_multi_escape`() -> Any
- `_relevant`() -> Any
- `_process_declarations`() -> Any
- `_process_symbols`() -> Any
- `_process_declaration`() -> Any
- `_process_signature`() -> Any

### Implementation
**SchemeLexer**

**CommonLispLexer**

**HyLexer**

**RacketLexer**

**NewLispLexer**

**EmacsLispLexer**

**ShenLexer**

**CPSALexer**

**XtlangLexer**

**FennelLexer**

**JanetLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/lisp.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Literal`, `pygments.token.Error`, `pygments.token.Whitespace`, `pygments.lexers.python.PythonLexer`, `pygments.lexers._scheme_builtins.scheme_keywords`, `pygments.lexers._scheme_builtins.scheme_builtins`, `pygments.lexers._cl_builtins.BUILTIN_FUNCTIONS`, `pygments.lexers._cl_builtins.SPECIAL_FORMS`, `pygments.lexers._cl_builtins.MACROS`, `pygments.lexers._cl_builtins.LAMBDA_LIST_KEYWORDS`, `pygments.lexers._cl_builtins.DECLARATIONS`, `pygments.lexers._cl_builtins.BUILTIN_TYPES`, `pygments.lexers._cl_builtins.BUILTIN_CLASSES`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.j
:::{doc} JLexer:18
For J source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[JLexer]]


### Implementation
**JLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/j.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.blueprint
:::{doc} BlueprintLexer:28
For Blueprint UI markup.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[BlueprintLexer]]


### Implementation
**BlueprintLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/blueprint.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.mosel
:::{doc} MoselLexer:391
For the Mosel optimization language.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`
**Type References**: [[MoselLexer]]


### Implementation
**MoselLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/mosel.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._googlesql_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_googlesql_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._vbscript_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_vbscript_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._openedge_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_openedge_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.smalltalk
:::{doc} SmalltalkLexer:18
For Smalltalk syntax.
Contributed by Stefan Matthias Aust.
Rewritten by Nils Winter.
:::
:::{doc} NewspeakLexer:139
For Newspeak syntax.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`
**Type References**: [[NewspeakLexer]], [[SmalltalkLexer]]


### Implementation
**SmalltalkLexer**

**NewspeakLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/smalltalk.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.spice
:::{doc} SpiceLexer:18
For Spice source.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[SpiceLexer]]


### Implementation
**SpiceLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/spice.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.monte
:::{doc} MonteLexer:78
Lexer for the Monte programming language.
:::
**Imports**: `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`
**Type References**: [[MonteLexer]]


### Implementation
**MonteLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/monte.py`  
**Dependencies**: `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._luau_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_luau_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.webmisc
:::{doc} DuelLexer:26
Lexer for Duel Views Engine (formerly JBST) markup with JavaScript code blocks.
:::
:::{doc} XQueryLexer:57
An XQuery lexer, parsing a stream and outputting the tokens needed to
highlight xquery code.
:::
:::{doc} QmlLexer:811
For QML files.
:::
:::{doc} CirruLexer:884
* using ``()`` for expressions, but restricted in a same line
* using ``""`` for strings, with ``\`` for escaping chars
* using ``$`` as folding operator
* using ``,`` as unfolding operator
* using indentations for nested blocks
:::
:::{doc} SlimLexer:936
For Slim markup.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.using`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Literal`, `pygments.token.Whitespace`, `pygments.lexers.css._indentation`, `pygments.lexers.css._starts_block`, `pygments.lexers.html.HtmlLexer`, `pygments.lexers.javascript.JavascriptLexer`, `pygments.lexers.ruby.RubyLexer`
**Type References**: [[CirruLexer]], [[DuelLexer]], [[QmlLexer]], [[SlimLexer]], [[XQueryLexer]]

### Interface
- `punctuation_root_callback`() -> Any
- `operator_root_callback`() -> Any
- `popstate_tag_callback`() -> Any
- `popstate_xmlcomment_callback`() -> Any
- `popstate_kindtest_callback`() -> Any
- `popstate_callback`() -> Any
- `pushstate_element_content_starttag_callback`() -> Any
- `pushstate_cdata_section_callback`() -> Any
- `pushstate_starttag_callback`() -> Any
- `pushstate_operator_order_callback`() -> Any
- `pushstate_operator_map_callback`() -> Any
- `pushstate_operator_root_validate`() -> Any
- `pushstate_operator_root_validate_withmode`() -> Any
- `pushstate_operator_processing_instruction_callback`() -> Any
- `pushstate_element_content_processing_instruction_callback`() -> Any
- `pushstate_element_content_cdata_section_callback`() -> Any
- `pushstate_operator_cdata_section_callback`() -> Any
- `pushstate_element_content_xmlcomment_callback`() -> Any
- `pushstate_operator_xmlcomment_callback`() -> Any
- `pushstate_kindtest_callback`() -> Any
- `pushstate_operator_kindtestforpi_callback`() -> Any
- `pushstate_operator_kindtest_callback`() -> Any
- `pushstate_occurrenceindicator_kindtest_callback`() -> Any
- `pushstate_operator_starttag_callback`() -> Any
- `pushstate_operator_root_callback`() -> Any
- `pushstate_operator_root_construct_callback`() -> Any
- `pushstate_root_callback`() -> Any
- `pushstate_operator_attribute_callback`() -> Any

### Implementation
**DuelLexer**

**XQueryLexer**

**QmlLexer**

**CirruLexer**

**SlimLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/webmisc.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.using`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Literal`, `pygments.token.Whitespace`, `pygments.lexers.css._indentation`, `pygments.lexers.css._starts_block`, `pygments.lexers.html.HtmlLexer`, `pygments.lexers.javascript.JavascriptLexer`, `pygments.lexers.ruby.RubyLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.teal
:::{doc} TealLexer:18
For the Transaction Execution Approval Language (TEAL)

For more information about the grammar, see:
https://github.com/algorand/go-algorand/blob/master/data/transactions/logic/assembler.go
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.Whitespace`
**Type References**: [[TealLexer]]


### Implementation
**TealLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/teal.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.c_cpp
:::{doc} CFamilyLexer:22
For C family source code.  This is used as a base class to avoid repetitious
definitions.
:::
:::{doc} CLexer:270
For C source code with preprocessor directives.

Additional options accepted:

`stdlibhighlighting`
    Highlight common types found in the C/C++ standard library (e.g. `size_t`).
    (default: ``True``).

`c99highlighting`
    Highlight common types found in the C99 standard library (e.g. `int8_t`).
    Actually, this includes all fixed-width integer types.
    (default: ``True``).

`c11highlighting`
    Highlight atomic types found in the C11 standard library (e.g. `atomic_bool`).
    (default: ``True``).

`platformhighlighting`
    Highlight common types found in the platform SDK headers (e.g. `clockid_t` on Linux).
    (default: ``True``).
:::
:::{doc} CppLexer:322
For C++ source code with preprocessor directives.

Additional options accepted:

`stdlibhighlighting`
    Highlight common types found in the C/C++ standard library (e.g. `size_t`).
    (default: ``True``).

`c99highlighting`
    Highlight common types found in the C99 standard library (e.g. `int8_t`).
    Actually, this includes all fixed-width integer types.
    (default: ``True``).

`c11highlighting`
    Highlight atomic types found in the C11 standard library (e.g. `atomic_bool`).
    (default: ``True``).

`platformhighlighting`
    Highlight common types found in the platform SDK headers (e.g. `clockid_t` on Linux).
    (default: ``True``).
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.inherit`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.util.get_bool_opt`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[CFamilyLexer]], [[CLexer]], [[CppLexer]]

### Interface
- `__init__`() -> Any
- `get_tokens_unprocessed`() -> Any
- `analyse_text`() -> Any

### Implementation
**CFamilyLexer**

**CLexer**

**CppLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/c_cpp.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.inherit`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.util.get_bool_opt`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.perl
:::{doc} PerlLexer:22
For Perl source code.
:::
:::{doc} Perl6Lexer:226
For Raku (a.k.a. Perl 6) source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.util.shebang_matches`
**Type References**: [[Perl6Lexer]], [[PerlLexer]]

### Interface
- `analyse_text`() -> Any
- `_build_word_match`() -> Any
- `brackets_callback`() -> Any
- `opening_brace_callback`() -> Any
- `closing_brace_callback`() -> Any
- `embedded_perl6_callback`() -> Any
- `__init__`() -> Any
- `callback`() -> Any
- `strip_pod`() -> Any

### Implementation
**PerlLexer**

**Perl6Lexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/perl.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.util.shebang_matches`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.robotframework
:::{doc} RobotFrameworkLexer:55
For Robot Framework test data.

Supports both space and pipe separated plain text formats.
:::
**Imports**: `re`, `pygments.lexer.Lexer`, `pygments.token.Token`
**Type References**: [[Comment]], [[ForLoop]], [[GherkinTokenizer]], [[ImportSetting]], [[KeywordCall]], [[KeywordSetting]], [[KeywordTable]], [[RobotFrameworkLexer]], [[RowSplitter]], [[RowTokenizer]], [[Setting]], [[SettingTable]], [[TemplatedKeywordCall]], [[TestCaseSetting]], [[TestCaseTable]], [[Tokenizer]], [[UnknownTable]], [[Variable]], [[VariableSplitter]], [[VariableTable]], [[VariableTokenizer]], [[_Table]]

### Interface
- `normalize`() -> Any
- `__init__`() -> Any
- `get_tokens_unprocessed`() -> Any
- `tokenize`() -> Any
- `_tokenize`() -> Any
- `_start_table`() -> Any
- `split`() -> Any
- `_split_from_spaces`() -> Any
- `_split_from_pipes`() -> Any
- `_is_assign`() -> Any
- `_continues`() -> Any
- `_is_empty`() -> Any
- `end_row`() -> Any
- `_tokenizer_class`() -> Any
- `_is_setting`() -> Any
- `_is_template`() -> Any
- `_is_for_loop`() -> Any
- `set_test_template`() -> Any
- `set_default_template`() -> Any
- `_is_template_set`() -> Any
- `get_replaced_base`() -> Any
- `_finalize`() -> Any
- `_has_list_or_dict_variable_index`() -> Any
- `_split`() -> Any
- `_scanning_list_variable_index`() -> Any
- `_find_variable`() -> Any
- `_find_start_index`() -> Any
- `_start_index_is_ok`() -> Any
- `_is_escaped`() -> Any
- `_variable_state`() -> Any
- `_is_list_or_dict_variable`() -> Any
- `_internal_variable_start_state`() -> Any
- `_waiting_list_variable_index_state`() -> Any
- `_list_variable_index_state`() -> Any

### Implementation
**RobotFrameworkLexer**

**VariableTokenizer**

**RowTokenizer**

**RowSplitter**

**Tokenizer**

**Comment**

**Setting**

**ImportSetting**

**TestCaseSetting**

**KeywordSetting**

**Variable**

**KeywordCall**

**GherkinTokenizer**

**TemplatedKeywordCall**

**ForLoop**

**_Table**

**UnknownTable**

**VariableTable**

**SettingTable**

**TestCaseTable**

**KeywordTable**

**VariableSplitter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/robotframework.py`  
**Dependencies**: `re`, `pygments.lexer.Lexer`, `pygments.token.Token`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.textfmts
:::{doc} IrcLogsLexer:23
Lexer for IRC logs in *irssi*, *xchat* or *weechat* style.
:::
:::{doc} GettextLexer:88
Lexer for Gettext catalog files.
:::
:::{doc} HttpLexer:116
Lexer for HTTP sessions.
:::
:::{doc} TodotxtLexer:208
Lexer for Todo.txt todo list format.
:::
:::{doc} NotmuchLexer:308
For Notmuch email text format.

Additional options accepted:

`body_lexer`
    If given, highlight the contents of the message body with the specified
    lexer, else guess it according to the body content (default: ``None``).
:::
:::{doc} KernelLogLexer:390
For Linux Kernel log ("dmesg") output.
:::
**Imports**: `re`, `pygments.lexers.guess_lexer`, `pygments.lexers.get_lexer_by_name`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Generic`, `pygments.token.Literal`, `pygments.token.Punctuation`, `pygments.util.ClassNotFound`, `pygments.lexers.get_lexer_for_mimetype`
**Type References**: [[GettextLexer]], [[HttpLexer]], [[IrcLogsLexer]], [[KernelLogLexer]], [[NotmuchLexer]], [[TodotxtLexer]]

### Interface
- `get_tokens_unprocessed`() -> Any
- `header_callback`() -> Any
- `continuous_header_callback`() -> Any
- `content_callback`() -> Any
- `analyse_text`() -> Any
- `_highlight_code`() -> Any
- `__init__`() -> Any

### Implementation
**IrcLogsLexer**

**GettextLexer**

**HttpLexer**

**TodotxtLexer**

**NotmuchLexer**

**KernelLogLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/textfmts.py`  
**Dependencies**: `re`, `pygments.lexers.guess_lexer`, `pygments.lexers.get_lexer_by_name`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Generic`, `pygments.token.Literal`, `pygments.token.Punctuation`, `pygments.util.ClassNotFound`, `pygments.lexers.get_lexer_for_mimetype`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.jsonnet
:::{doc} JsonnetLexer:36
Lexer for Jsonnet source code.
:::
**Imports**: `pygments.lexer.include`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`
**Type References**: [[JsonnetLexer]]

### Interface
- `string_rules`() -> Any
- `quoted_field_name`() -> Any

### Implementation
**JsonnetLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/jsonnet.py`  
**Dependencies**: `pygments.lexer.include`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.cplint
:::{doc} CplintLexer:18
Lexer for cplint files, including CP-logic, Logic Programs with Annotated
Disjunctions, Distributional Clauses syntax, ProbLog, DTProbLog.
:::
**Imports**: `pygments.lexer.bygroups`, `pygments.lexer.inherit`, `pygments.lexer.words`, `pygments.lexers.PrologLexer`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`
**Type References**: [[CplintLexer]]


### Implementation
**CplintLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/cplint.py`  
**Dependencies**: `pygments.lexer.bygroups`, `pygments.lexer.inherit`, `pygments.lexer.words`, `pygments.lexers.PrologLexer`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.jsx
:::{doc} JsxLexer:59
For JavaScript Syntax Extension (JSX).
    
:::
:::{doc} TsxLexer:81
For TypeScript with embedded JSX
    
:::
**Imports**: `re`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.inherit`, `pygments.lexers.javascript.JavascriptLexer`, `pygments.lexers.javascript.TypeScriptLexer`, `pygments.token.Name`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`
**Type References**: [[JsxLexer]], [[TsxLexer]]


### Implementation
**JsxLexer**

**TsxLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/jsx.py`  
**Dependencies**: `re`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.inherit`, `pygments.lexers.javascript.JavascriptLexer`, `pygments.lexers.javascript.TypeScriptLexer`, `pygments.token.Name`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.prolog
:::{doc} PrologLexer:20
Lexer for Prolog files.
:::
:::{doc} LogtalkLexer:91
For Logtalk source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`
**Type References**: [[LogtalkLexer]], [[PrologLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**PrologLexer**

**LogtalkLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/prolog.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.rnc
:::{doc} RNCCompactLexer:18
For RelaxNG-compact syntax.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`
**Type References**: [[RNCCompactLexer]]


### Implementation
**RNCCompactLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/rnc.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.wowtoc
:::{doc} WoWTocLexer:46
Lexer for World of Warcraft TOC files.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Text`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Keyword`
**Type References**: [[WoWTocLexer]]

### Interface
- `_create_tag_line_pattern`() -> Any
- `_create_tag_line_token`() -> Any
- `analyse_text`() -> Any

### Implementation
**WoWTocLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/wowtoc.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Text`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Keyword`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._julia_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_julia_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.algebra
:::{doc} GAPLexer:21
For GAP source code.
:::
:::{doc} GAPConsoleLexer:91
For GAP console sessions. Modeled after JuliaConsoleLexer.
:::
:::{doc} MathematicaLexer:149
Lexer for Mathematica source code.
:::
:::{doc} MuPADLexer:196
A MuPAD lexer.
Contributed by Christopher Creutzig <christopher@creutzig.de>.
:::
:::{doc} BCLexer:268
A BC lexer.
:::
**Imports**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.do_insertions`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[BCLexer]], [[GAPConsoleLexer]], [[GAPLexer]], [[MathematicaLexer]], [[MuPADLexer]]

### Interface
- `analyse_text`() -> Any
- `get_tokens_unprocessed`() -> Any
- `_multi_escape`() -> Any

### Implementation
**GAPLexer**

**GAPConsoleLexer**

**MathematicaLexer**

**MuPADLexer**

**BCLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/algebra.py`  
**Dependencies**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.do_insertions`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.typoscript
:::{doc} TypoScriptCssDataLexer:29
Lexer that highlights markers, constants and registers within css blocks.
:::
:::{doc} TypoScriptHtmlDataLexer:64
Lexer that highlights markers, constants and registers within html tags.
:::
:::{doc} TypoScriptLexer:99
Lexer for TypoScript code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`
**Type References**: [[TypoScriptCssDataLexer]], [[TypoScriptHtmlDataLexer]], [[TypoScriptLexer]]


### Implementation
**TypoScriptCssDataLexer**

**TypoScriptHtmlDataLexer**

**TypoScriptLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/typoscript.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.automation
:::{doc} AutohotkeyLexer:18
For autohotkey source code.
:::
:::{doc} AutoItLexer:195
For AutoIt files.

AutoIt is a freeware BASIC-like scripting language
designed for automating the Windows GUI and general scripting
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.combined`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`
**Type References**: [[AutoItLexer]], [[AutohotkeyLexer]]


### Implementation
**AutohotkeyLexer**

**AutoItLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/automation.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.combined`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.sieve
:::{doc} SieveLexer:27
Lexer for sieve format.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Literal`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Punctuation`, `pygments.token.Keyword`
**Type References**: [[SieveLexer]]


### Implementation
**SieveLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/sieve.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Literal`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Punctuation`, `pygments.token.Keyword`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.esoteric
:::{doc} BrainfuckLexer:19
Lexer for the esoteric BrainFuck language.
:::
:::{doc} BefungeLexer:77
Lexer for the esoteric Befunge language.
:::
:::{doc} CAmkESLexer:106
Basic lexer for the input language for the CAmkES component platform.
:::
:::{doc} CapDLLexer:173
Basic lexer for CapDL.

The source of the primary tool that reads such specifications is available
at https://github.com/seL4/capdl/tree/master/capDL-tool. Note that this
lexer only supports a subset of the grammar. For example, identifiers can
shadow type names, but these instances are currently incorrectly
highlighted as types. Supporting this would need a stateful lexer that is
considered unnecessarily complex for now.
:::
:::{doc} RedcodeLexer:232
A simple Redcode lexer based on ICWS'94.
Contributed by Adam Blinkinsop <blinks@acm.org>.
:::
:::{doc} AheuiLexer:268
Aheui is esoteric language based on Korean alphabets.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`, `pygments.token.Whitespace`
**Type References**: [[AheuiLexer]], [[BefungeLexer]], [[BrainfuckLexer]], [[CAmkESLexer]], [[CapDLLexer]], [[RedcodeLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**BrainfuckLexer**

**BefungeLexer**

**CAmkESLexer**

**CapDLLexer**

**RedcodeLexer**

**AheuiLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/esoteric.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.graph
:::{doc} CypherLexer:21
For Cypher Query Language

For the Cypher version in Neo4j 3.3
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.words`, `pygments.token.Keyword`, `pygments.token.Punctuation`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`
**Type References**: [[CypherLexer]]


### Implementation
**CypherLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/graph.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.words`, `pygments.token.Keyword`, `pygments.token.Punctuation`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.html
:::{doc} HtmlLexer:28
For HTML 4 and XHTML 1 markup. Nested JavaScript and CSS is highlighted
by the appropriate lexer.
:::
:::{doc} DtdLexer:107
A lexer for DTDs (Document Type Definitions).
:::
:::{doc} XmlLexer:195
Generic lexer for XML (eXtensible Markup Language).
:::
:::{doc} XsltLexer:241
A lexer for XSLT.
:::
:::{doc} HamlLexer:278
For Haml markup.
:::
:::{doc} ScamlLexer:389
For Scaml markup.  Scaml is Haml for Scala.
:::
:::{doc} PugLexer:501
For Pug markup.
Pug is a variant of Scaml, see:
http://scalate.fusesource.org/documentation/scaml-reference.html
:::
:::{doc} UrlEncodedLexer:611
Lexer for urlencoded data
:::
:::{doc} VueLexer:629
For Vue Single-File Component.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.using`, `pygments.lexer.inherit`, `pygments.lexer.this`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.util.looks_like_xml`, `pygments.util.html_doctype_matches`, `pygments.lexers.javascript.JavascriptLexer`, `pygments.lexers.jvm.ScalaLexer`, `pygments.lexers.css.CssLexer`, `pygments.lexers.css._indentation`, `pygments.lexers.css._starts_block`, `pygments.lexers.ruby.RubyLexer`
**Type References**: [[DtdLexer]], [[HamlLexer]], [[HtmlLexer]], [[PugLexer]], [[ScamlLexer]], [[UrlEncodedLexer]], [[VueLexer]], [[XmlLexer]], [[XsltLexer]]

### Interface
- `analyse_text`() -> Any
- `get_tokens_unprocessed`() -> Any

### Implementation
**HtmlLexer**

**DtdLexer**

**XmlLexer**

**XsltLexer**

**HamlLexer**

**ScamlLexer**

**PugLexer**

**UrlEncodedLexer**

**VueLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/html.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.using`, `pygments.lexer.inherit`, `pygments.lexer.this`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.util.looks_like_xml`, `pygments.util.html_doctype_matches`, `pygments.lexers.javascript.JavascriptLexer`, `pygments.lexers.jvm.ScalaLexer`, `pygments.lexers.css.CssLexer`, `pygments.lexers.css._indentation`, `pygments.lexers.css._starts_block`, `pygments.lexers.ruby.RubyLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._php_builtins

**Imports**: `glob`, `os`, `pprint`, `re`, `shutil`, `tarfile`, `urllib.request.urlretrieve`
### Interface
- `get_php_functions`() -> Any
- `get_php_references`() -> Any
- `regenerate`() -> Any
- `run`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_php_builtins.py`  
**Dependencies**: `glob`, `os`, `pprint`, `re`, `shutil`, `tarfile`, `urllib.request.urlretrieve`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.shell
:::{doc} BashLexer:25
Lexer for (ba|k|z|)sh shell scripts.
:::
:::{doc} SlurmBashLexer:129
Lexer for (ba|k|z|)sh Slurm scripts.
:::
:::{doc} ShellSessionBaseLexer:151
Base lexer for shell sessions.

.. versionadded:: 2.1
:::
:::{doc} BashSessionLexer:223
Lexer for Bash shell sessions, i.e. command lines, including a
prompt, interspersed with output.
:::
:::{doc} BatchLexer:244
Lexer for the DOS/Windows Batch file format.
:::
:::{doc} MSDOSSessionLexer:534
Lexer for MS DOS shell sessions, i.e. command lines, including a
prompt, interspersed with output.
:::
:::{doc} TcshLexer:553
Lexer for tcsh scripts.
:::
:::{doc} TcshSessionLexer:621
Lexer for Tcsh sessions, i.e. command lines, including a
prompt, interspersed with output.
:::
:::{doc} PowerShellLexer:640
For Windows PowerShell code.
:::
:::{doc} PowerShellSessionLexer:754
Lexer for PowerShell sessions, i.e. command lines, including a
prompt, interspersed with output.
:::
:::{doc} FishShellLexer:774
Lexer for Fish shell scripts.
:::
:::{doc} ExeclineLexer:846
Lexer for Laurent Bercot's execline language.
:::
**Imports**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.do_insertions`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.default`, `pygments.lexer.this`, `pygments.lexer.using`, `pygments.lexer.words`, `pygments.lexer.line_re`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Generic`, `pygments.util.shebang_matches`
**Type References**: [[BashLexer]], [[BashSessionLexer]], [[BatchLexer]], [[ExeclineLexer]], [[FishShellLexer]], [[MSDOSSessionLexer]], [[PowerShellLexer]], [[PowerShellSessionLexer]], [[ShellSessionBaseLexer]], [[SlurmBashLexer]], [[TcshLexer]], [[TcshSessionLexer]]

### Interface
- `analyse_text`() -> Any
- `get_tokens_unprocessed`() -> Any
- `_make_begin_state`() -> Any
- `_make_follow_state`() -> Any
- `_make_arithmetic_state`() -> Any
- `_make_call_state`() -> Any
- `_make_label_state`() -> Any
- `_make_redirect_state`() -> Any

### Implementation
**BashLexer**

**SlurmBashLexer**

**ShellSessionBaseLexer**

**BashSessionLexer**

**BatchLexer**

**MSDOSSessionLexer**

**TcshLexer**

**TcshSessionLexer**

**PowerShellLexer**

**PowerShellSessionLexer**

**FishShellLexer**

**ExeclineLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/shell.py`  
**Dependencies**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.do_insertions`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.default`, `pygments.lexer.this`, `pygments.lexer.using`, `pygments.lexer.words`, `pygments.lexer.line_re`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Generic`, `pygments.util.shebang_matches`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.scripting
:::{doc} LuaLexer:28
For Lua source code.

Additional options accepted:

`func_name_highlighting`
    If given and ``True``, highlight builtin function names
    (default: ``True``).
`disabled_modules`
    If given, must be a list of module names whose function names
    should not be highlighted. By default all modules are highlighted.

    To get a list of allowed modules have a look into the
    `_lua_builtins` module:

    .. sourcecode:: pycon

        >>> from pygments.lexers._lua_builtins import MODULES
        >>> MODULES.keys()
        ['string', 'coroutine', 'modules', 'io', 'basic', ...]
:::
:::{doc} LuauLexer:218
For Luau source code.

Additional options accepted:

`include_luau_builtins`
    If given and ``True``, automatically highlight Luau builtins
    (default: ``True``).
`include_roblox_builtins`
    If given and ``True``, automatically highlight Roblox-specific builtins
    (default: ``False``).
`additional_builtins`
    If given, must be a list of additional builtins to highlight.
`disabled_builtins`
    If given, must be a list of builtins that will not be highlighted.
:::
:::{doc} MoonScriptLexer:496
For MoonScript source code.
:::
:::{doc} ChaiscriptLexer:565
For ChaiScript source code.
:::
:::{doc} LSLLexer:631
For Second Life's Linden Scripting Language source code.
:::
:::{doc} AppleScriptLexer:715
For AppleScript source code,
including `AppleScript Studio
<http://developer.apple.com/documentation/AppleScript/
Reference/StudioReference>`_.
Contributed by Andreas Amann <aamann@mac.com>.
:::
:::{doc} RexxLexer:1036
Rexx is a scripting language available for
a wide range of different platforms with its roots found on mainframe
systems. It is popular for I/O- and data based tasks and can act as glue
language to bind different applications together.
:::
:::{doc} MOOCodeLexer:1150
For MOOCode (the MOO scripting language).
:::
:::{doc} HybrisLexer:1192
For Hybris source code.
:::
:::{doc} EasytrieveLexer:1287
Easytrieve Plus is a programming language for extracting, filtering and
converting sequential data. Furthermore it can layout data for reports.
It is mainly used on mainframe platforms and can access several of the
mainframe's native file formats. It is somewhat comparable to awk.
:::
:::{doc} JclLexer:1479
Job Control Language (JCL)
is a scripting language used on mainframe platforms to instruct the system
on how to run a batch job or start a subsystem. It is somewhat
comparable to MS DOS batch and Unix shell scripts.
:::
:::{doc} MiniScriptLexer:1563
For MiniScript source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.combined`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`, `pygments.token.Whitespace`, `pygments.token.Other`, `pygments.util.get_bool_opt`, `pygments.util.get_list_opt`, `pygments.lexers._lua_builtins.MODULES`, `pygments.lexers._lua_builtins.MODULES`, `pygments.lexers._luau_builtins.LUAU_BUILTINS`, `pygments.lexers._luau_builtins.ROBLOX_BUILTINS`
**Type References**: [[AppleScriptLexer]], [[ChaiscriptLexer]], [[EasytrieveLexer]], [[HybrisLexer]], [[JclLexer]], [[LSLLexer]], [[LuaLexer]], [[LuauLexer]], [[MOOCodeLexer]], [[MiniScriptLexer]], [[MoonScriptLexer]], [[RexxLexer]]

### Interface
- `all_lua_builtins`() -> Any
- `_luau_make_expression`() -> Any
- `_luau_make_expression_special`() -> Any
- `__init__`() -> Any
- `get_tokens_unprocessed`() -> Any
- `_c`() -> Any
- `analyse_text`() -> Any
- `isCommentLine`() -> Any
- `isEmptyLine`() -> Any

### Implementation
**LuaLexer**

**LuauLexer**

**MoonScriptLexer**

**ChaiscriptLexer**

**LSLLexer**

**AppleScriptLexer**

**RexxLexer**

**MOOCodeLexer**

**HybrisLexer**

**EasytrieveLexer**

**JclLexer**

**MiniScriptLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/scripting.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.combined`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`, `pygments.token.Whitespace`, `pygments.token.Other`, `pygments.util.get_bool_opt`, `pygments.util.get_list_opt`, `pygments.lexers._lua_builtins.MODULES`, `pygments.lexers._lua_builtins.MODULES`, `pygments.lexers._luau_builtins.LUAU_BUILTINS`, `pygments.lexers._luau_builtins.ROBLOX_BUILTINS`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.gsql
:::{doc} GSQLLexer:20
For GSQL queries (version 3.x).
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.words`, `pygments.token.Keyword`, `pygments.token.Punctuation`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`
**Type References**: [[GSQLLexer]]


### Implementation
**GSQLLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/gsql.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.words`, `pygments.token.Keyword`, `pygments.token.Punctuation`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.gdscript
:::{doc} GDScriptLexer:24
For GDScript source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.combined`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[GDScriptLexer]]

### Interface
- `innerstring_rules`() -> Any
- `analyse_text`() -> Any

### Implementation
**GDScriptLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/gdscript.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.combined`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.ambient
:::{doc} AmbientTalkLexer:20
Lexer for AmbientTalk source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[AmbientTalkLexer]]


### Implementation
**AmbientTalkLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/ambient.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.arrow
:::{doc} ArrowLexer:22
Lexer for Arrow
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Punctuation`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`
**Type References**: [[ArrowLexer]]


### Implementation
**ArrowLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/arrow.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Punctuation`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.oberon
:::{doc} ComponentPascalLexer:20
For Component Pascal source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`
**Type References**: [[ComponentPascalLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**ComponentPascalLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/oberon.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._stata_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_stata_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.floscript
:::{doc} FloScriptLexer:18
For FloScript configuration language source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[FloScriptLexer]]

### Interface
- `innerstring_rules`() -> Any

### Implementation
**FloScriptLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/floscript.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.resource
:::{doc} ResourceLexer:20
Lexer for ICU Resource bundles.
    
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.Name`
**Type References**: [[ResourceLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**ResourceLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/resource.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.Name`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers
:::{doc} _fn_matches:35
Return whether the supplied file name fn matches pattern filename.
:::
:::{doc} _load_lexers:43
Load a lexer (and all others in the module too).
:::
:::{doc} get_all_lexers:51
Return a generator of tuples in the form ``(name, aliases,
filenames, mimetypes)`` of all know lexers.

If *plugins* is true (the default), plugin lexers supplied by entrypoints
are also returned.  Otherwise, only builtin ones are considered.
:::
:::{doc} find_lexer_class:65
Return the `Lexer` subclass that with the *name* attribute as given by
the *name* argument.
:::
:::{doc} find_lexer_class_by_name:83
Return the `Lexer` subclass that has `alias` in its aliases list, without
instantiating it.

Like `get_lexer_by_name`, but does not instantiate the class.

Will raise :exc:`pygments.util.ClassNotFound` if no lexer with that alias is
found.

.. versionadded:: 2.2
:::
:::{doc} get_lexer_by_name:110
Return an instance of a `Lexer` subclass that has `alias` in its
aliases list. The lexer is given the `options` at its
instantiation.

Will raise :exc:`pygments.util.ClassNotFound` if no lexer with that alias is
found.
:::
:::{doc} load_lexer_from_file:135
Load a lexer from a file.

This method expects a file located relative to the current working
directory, which contains a Lexer class. By default, it expects the
Lexer to be name CustomLexer; you can specify your own class name
as the second argument to this function.

Users should be very careful with the input, because this method
is equivalent to running eval on the input file.

Raises ClassNotFound if there are any problems importing the Lexer.

.. versionadded:: 2.2
:::
:::{doc} find_lexer_class_for_filename:169
Get a lexer for a filename.

If multiple lexers match the filename pattern, use ``analyse_text()`` to
figure out which one is more appropriate.

Returns None if not found.
:::
:::{doc} get_lexer_for_filename:212
Get a lexer for a filename.

Return a `Lexer` subclass instance that has a filename pattern
matching `fn`. The lexer is given the `options` at its
instantiation.

Raise :exc:`pygments.util.ClassNotFound` if no lexer for that filename
is found.

If multiple lexers match the filename pattern, use their ``analyse_text()``
methods to figure out which one is more appropriate.
:::
:::{doc} get_lexer_for_mimetype:231
Return a `Lexer` subclass instance that has `mime` in its mimetype
list. The lexer is given the `options` at its instantiation.

Will raise :exc:`pygments.util.ClassNotFound` if not lexer for that mimetype
is found.
:::
:::{doc} _iter_lexerclasses:250
Return an iterator over all lexer classes.
:::
:::{doc} guess_lexer_for_filename:261
As :func:`guess_lexer()`, but only lexers which have a pattern in `filenames`
or `alias_filenames` that matches `filename` are taken into consideration.

:exc:`pygments.util.ClassNotFound` is raised if no lexer thinks it can
handle the content.
:::
:::{doc} guess_lexer:304
Return a `Lexer` subclass instance that's guessed from the text in
`text`. For that, the :meth:`.analyse_text()` method of every known lexer
class is called with the text as argument, and the lexer which returned the
highest value will be instantiated and returned.

:exc:`pygments.util.ClassNotFound` is raised if no lexer thinks it can
handle the content.
:::
:::{doc} _automodule:343
Automatically import lexers.
:::
**Imports**: `re`, `sys`, `types`, `fnmatch`, `os.path.basename`, `pygments.lexers._mapping.LEXERS`, `pygments.modeline.get_filetype_from_buffer`, `pygments.plugin.find_plugin_lexers`, `pygments.util.ClassNotFound`, `pygments.util.guess_decode`
**Type References**: [[_automodule]]

### Interface
- `_fn_matches`() -> Any
- `_load_lexers`() -> Any
- `get_all_lexers`() -> Any
- `find_lexer_class`() -> Any
- `find_lexer_class_by_name`() -> Any
- `get_lexer_by_name`() -> Any
- `load_lexer_from_file`() -> Any
- `find_lexer_class_for_filename`() -> Any
- `get_lexer_for_filename`() -> Any
- `get_lexer_for_mimetype`() -> Any
- `_iter_lexerclasses`() -> Any
- `guess_lexer_for_filename`() -> Any
- `guess_lexer`() -> Any
- `get_rating`() -> Any
- `type_sort`() -> Any
- `__getattr__`() -> Any

### Implementation
**_automodule**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/__init__.py`  
**Dependencies**: `re`, `sys`, `types`, `fnmatch`, `os.path.basename`, `pygments.lexers._mapping.LEXERS`, `pygments.modeline.get_filetype_from_buffer`, `pygments.plugin.find_plugin_lexers`, `pygments.util.ClassNotFound`, `pygments.util.guess_decode`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.d
:::{doc} DLexer:18
For D source.
:::
:::{doc} CrocLexer:187
For Croc source.
:::
:::{doc} MiniDLexer:251
For MiniD source. MiniD is now known as Croc.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[CrocLexer]], [[DLexer]], [[MiniDLexer]]


### Implementation
**DLexer**

**CrocLexer**

**MiniDLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/d.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.ruby
:::{doc} RubyLexer:28
For Ruby source code.
:::
:::{doc} RubyConsoleLexer:396
For Ruby interactive console (**irb**) output.
:::
:::{doc} FancyLexer:435
Pygments Lexer For Fancy.

Fancy is a self-hosted, pure object-oriented, dynamic,
class-based, concurrent general-purpose programming language
running on Rubinius, the Ruby VM.
:::
**Imports**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.LexerContext`, `pygments.lexer.do_insertions`, `pygments.lexer.words`, `pygments.lexer.line_re`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.util.shebang_matches`
**Type References**: [[FancyLexer]], [[RubyConsoleLexer]], [[RubyLexer]]

### Interface
- `heredoc_callback`() -> Any
- `gen_rubystrings_rules`() -> Any
- `analyse_text`() -> Any
- `get_tokens_unprocessed`() -> Any
- `intp_regex_callback`() -> Any
- `intp_string_callback`() -> Any

### Implementation
**RubyLexer**

**RubyConsoleLexer**

**FancyLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/ruby.py`  
**Dependencies**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.LexerContext`, `pygments.lexer.do_insertions`, `pygments.lexer.words`, `pygments.lexer.line_re`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.util.shebang_matches`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.other

**Imports**: `pygments.lexers.sql.SqlLexer`, `pygments.lexers.sql.MySqlLexer`, `pygments.lexers.sql.SqliteConsoleLexer`, `pygments.lexers.shell.BashLexer`, `pygments.lexers.shell.BashSessionLexer`, `pygments.lexers.shell.BatchLexer`, `pygments.lexers.shell.TcshLexer`, `pygments.lexers.robotframework.RobotFrameworkLexer`, `pygments.lexers.testing.GherkinLexer`, `pygments.lexers.esoteric.BrainfuckLexer`, `pygments.lexers.esoteric.BefungeLexer`, `pygments.lexers.esoteric.RedcodeLexer`, `pygments.lexers.prolog.LogtalkLexer`, `pygments.lexers.snobol.SnobolLexer`, `pygments.lexers.rebol.RebolLexer`, `pygments.lexers.configs.KconfigLexer`, `pygments.lexers.configs.Cfengine3Lexer`, `pygments.lexers.modeling.ModelicaLexer`, `pygments.lexers.scripting.AppleScriptLexer`, `pygments.lexers.scripting.MOOCodeLexer`, `pygments.lexers.scripting.HybrisLexer`, `pygments.lexers.graphics.PostScriptLexer`, `pygments.lexers.graphics.GnuplotLexer`, `pygments.lexers.graphics.AsymptoteLexer`, `pygments.lexers.graphics.PovrayLexer`, `pygments.lexers.business.ABAPLexer`, `pygments.lexers.business.OpenEdgeLexer`, `pygments.lexers.business.GoodDataCLLexer`, `pygments.lexers.business.MaqlLexer`, `pygments.lexers.automation.AutoItLexer`, `pygments.lexers.automation.AutohotkeyLexer`, `pygments.lexers.dsls.ProtoBufLexer`, `pygments.lexers.dsls.BroLexer`, `pygments.lexers.dsls.PuppetLexer`, `pygments.lexers.dsls.MscgenLexer`, `pygments.lexers.dsls.VGLLexer`, `pygments.lexers.basic.CbmBasicV2Lexer`, `pygments.lexers.pawn.SourcePawnLexer`, `pygments.lexers.pawn.PawnLexer`, `pygments.lexers.ecl.ECLLexer`, `pygments.lexers.urbi.UrbiscriptLexer`, `pygments.lexers.smalltalk.SmalltalkLexer`, `pygments.lexers.smalltalk.NewspeakLexer`, `pygments.lexers.installers.NSISLexer`, `pygments.lexers.installers.RPMSpecLexer`, `pygments.lexers.textedit.AwkLexer`, `pygments.lexers.smv.NuSMVLexer`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/other.py`  
**Dependencies**: `pygments.lexers.sql.SqlLexer`, `pygments.lexers.sql.MySqlLexer`, `pygments.lexers.sql.SqliteConsoleLexer`, `pygments.lexers.shell.BashLexer`, `pygments.lexers.shell.BashSessionLexer`, `pygments.lexers.shell.BatchLexer`, `pygments.lexers.shell.TcshLexer`, `pygments.lexers.robotframework.RobotFrameworkLexer`, `pygments.lexers.testing.GherkinLexer`, `pygments.lexers.esoteric.BrainfuckLexer`, `pygments.lexers.esoteric.BefungeLexer`, `pygments.lexers.esoteric.RedcodeLexer`, `pygments.lexers.prolog.LogtalkLexer`, `pygments.lexers.snobol.SnobolLexer`, `pygments.lexers.rebol.RebolLexer`, `pygments.lexers.configs.KconfigLexer`, `pygments.lexers.configs.Cfengine3Lexer`, `pygments.lexers.modeling.ModelicaLexer`, `pygments.lexers.scripting.AppleScriptLexer`, `pygments.lexers.scripting.MOOCodeLexer`, `pygments.lexers.scripting.HybrisLexer`, `pygments.lexers.graphics.PostScriptLexer`, `pygments.lexers.graphics.GnuplotLexer`, `pygments.lexers.graphics.AsymptoteLexer`, `pygments.lexers.graphics.PovrayLexer`, `pygments.lexers.business.ABAPLexer`, `pygments.lexers.business.OpenEdgeLexer`, `pygments.lexers.business.GoodDataCLLexer`, `pygments.lexers.business.MaqlLexer`, `pygments.lexers.automation.AutoItLexer`, `pygments.lexers.automation.AutohotkeyLexer`, `pygments.lexers.dsls.ProtoBufLexer`, `pygments.lexers.dsls.BroLexer`, `pygments.lexers.dsls.PuppetLexer`, `pygments.lexers.dsls.MscgenLexer`, `pygments.lexers.dsls.VGLLexer`, `pygments.lexers.basic.CbmBasicV2Lexer`, `pygments.lexers.pawn.SourcePawnLexer`, `pygments.lexers.pawn.PawnLexer`, `pygments.lexers.ecl.ECLLexer`, `pygments.lexers.urbi.UrbiscriptLexer`, `pygments.lexers.smalltalk.SmalltalkLexer`, `pygments.lexers.smalltalk.NewspeakLexer`, `pygments.lexers.installers.NSISLexer`, `pygments.lexers.installers.RPMSpecLexer`, `pygments.lexers.textedit.AwkLexer`, `pygments.lexers.smv.NuSMVLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.pony
:::{doc} PonyLexer:18
For Pony source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`
**Type References**: [[PonyLexer]]


### Implementation
**PonyLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/pony.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.matlab
:::{doc} MatlabLexer:23
For Matlab source code.
:::
:::{doc} MatlabSessionLexer:2741
For Matlab sessions.  Modeled after PythonConsoleLexer.
Contributed by Ken Schutte <kschutte@csail.mit.edu>.
:::
:::{doc} OctaveLexer:2812
For GNU Octave source code.
:::
:::{doc} ScilabLexer:3229
For Scilab source code.
:::
**Imports**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.do_insertions`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.lexers._scilab_builtins`
**Type References**: [[MatlabLexer]], [[MatlabSessionLexer]], [[OctaveLexer]], [[ScilabLexer]]

### Interface
- `analyse_text`() -> Any
- `get_tokens_unprocessed`() -> Any

### Implementation
**MatlabLexer**

**MatlabSessionLexer**

**OctaveLexer**

**ScilabLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/matlab.py`  
**Dependencies**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.do_insertions`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.lexers._scilab_builtins`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.felix
:::{doc} FelixLexer:19
For Felix source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.combined`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[FelixLexer]]


### Implementation
**FelixLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/felix.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.combined`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.tnt
:::{doc} TNTLexer:20
Lexer for Typographic Number Theory, as described in the book
Gödel, Escher, Bach, by Douglas R. Hofstadter
:::
**Imports**: `re`, `pygments.lexer.Lexer`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`
**Type References**: [[TNTLexer]]

### Interface
- `__init__`() -> Any
- `whitespace`() -> Any
- `variable`() -> Any
- `term`() -> Any
- `formula`() -> Any
- `rule`() -> Any
- `lineno`() -> Any
- `error_till_line_end`() -> Any
- `get_tokens_unprocessed`() -> Any

### Implementation
**TNTLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/tnt.py`  
**Dependencies**: `re`, `pygments.lexer.Lexer`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._vim_builtins


### Interface
- `_getauto`() -> Any
- `_getcommand`() -> Any
- `_getoption`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_vim_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.freefem
:::{doc} FreeFemLexer:18
For FreeFem++ source.

This is an extension of the CppLexer, as the FreeFem Language is a superset
of C++.
:::
**Imports**: `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.lexers.c_cpp.CppLexer`
**Type References**: [[FreeFemLexer]]

### Interface
- `get_tokens_unprocessed`() -> Any

### Implementation
**FreeFemLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/freefem.py`  
**Dependencies**: `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.lexers.c_cpp.CppLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.thingsdb
:::{doc} ThingsDBLexer:18
Lexer for the ThingsDB programming language.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[ThingsDBLexer]]


### Implementation
**ThingsDBLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/thingsdb.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.teraterm
:::{doc} TeraTermLexer:20
For Tera Term macro source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Keyword`, `pygments.token.Error`
**Type References**: [[TeraTermLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**TeraTermLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/teraterm.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Keyword`, `pygments.token.Error`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.parsers
:::{doc} RagelLexer:35
A pure `Ragel <www.colm.net/open-source/ragel>`_ lexer.  Use this
for fragments of Ragel.  For ``.rl`` files, use
:class:`RagelEmbeddedLexer` instead (or one of the
language-specific subclasses).
:::
:::{doc} RagelEmbeddedLexer:129
A lexer for Ragel embedded in a host language file.

This will only highlight Ragel statements. If you want host language
highlighting then call the language-specific Ragel lexer.
:::
:::{doc} RagelRubyLexer:212
A lexer for Ragel in a Ruby host file.
:::
:::{doc} RagelCLexer:230
A lexer for Ragel in a C host file.
:::
:::{doc} RagelDLexer:248
A lexer for Ragel in a D host file.
:::
:::{doc} RagelCppLexer:266
A lexer for Ragel in a C++ host file.
:::
:::{doc} RagelObjectiveCLexer:284
A lexer for Ragel in an Objective C host file.
:::
:::{doc} RagelJavaLexer:302
A lexer for Ragel in a Java host file.
:::
:::{doc} AntlrLexer:320
Generic ANTLR Lexer.
Should not be called directly, instead
use DelegatingLexer for your target language.
:::
:::{doc} AntlrCppLexer:513
ANTLR with C++ Target
:::
:::{doc} AntlrObjectiveCLexer:532
ANTLR with Objective-C Target
:::
:::{doc} AntlrCSharpLexer:551
ANTLR with C# Target
:::
:::{doc} AntlrPythonLexer:570
ANTLR with Python Target
:::
:::{doc} AntlrJavaLexer:589
ANTLR with Java Target
:::
:::{doc} AntlrRubyLexer:608
ANTLR with Ruby Target
:::
:::{doc} AntlrPerlLexer:627
ANTLR with Perl Target
:::
:::{doc} AntlrActionScriptLexer:646
ANTLR with ActionScript Target
:::
:::{doc} TreetopBaseLexer:666
A base lexer for `Treetop <http://treetop.rubyforge.org/>`_ grammars.
Not for direct use; use :class:`TreetopLexer` instead.

.. versionadded:: 1.6
:::
:::{doc} TreetopLexer:735
A lexer for Treetop grammars.
:::
:::{doc} EbnfLexer:750
Lexer for `ISO/IEC 14977 EBNF
<https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form>`_
grammars.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.lexers.jvm.JavaLexer`, `pygments.lexers.c_cpp.CLexer`, `pygments.lexers.c_cpp.CppLexer`, `pygments.lexers.objective.ObjectiveCLexer`, `pygments.lexers.d.DLexer`, `pygments.lexers.dotnet.CSharpLexer`, `pygments.lexers.ruby.RubyLexer`, `pygments.lexers.python.PythonLexer`, `pygments.lexers.perl.PerlLexer`, `pygments.lexers.actionscript.ActionScriptLexer`
**Type References**: [[AntlrActionScriptLexer]], [[AntlrCSharpLexer]], [[AntlrCppLexer]], [[AntlrJavaLexer]], [[AntlrLexer]], [[AntlrObjectiveCLexer]], [[AntlrPerlLexer]], [[AntlrPythonLexer]], [[AntlrRubyLexer]], [[EbnfLexer]], [[RagelCLexer]], [[RagelCppLexer]], [[RagelDLexer]], [[RagelEmbeddedLexer]], [[RagelJavaLexer]], [[RagelLexer]], [[RagelObjectiveCLexer]], [[RagelRubyLexer]], [[TreetopBaseLexer]], [[TreetopLexer]]

### Interface
- `analyse_text`() -> Any
- `__init__`() -> Any

### Implementation
**RagelLexer**

**RagelEmbeddedLexer**

**RagelRubyLexer**

**RagelCLexer**

**RagelDLexer**

**RagelCppLexer**

**RagelObjectiveCLexer**

**RagelJavaLexer**

**AntlrLexer**

**AntlrCppLexer**

**AntlrObjectiveCLexer**

**AntlrCSharpLexer**

**AntlrPythonLexer**

**AntlrJavaLexer**

**AntlrRubyLexer**

**AntlrPerlLexer**

**AntlrActionScriptLexer**

**TreetopBaseLexer**

**TreetopLexer**

**EbnfLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/parsers.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.lexers.jvm.JavaLexer`, `pygments.lexers.c_cpp.CLexer`, `pygments.lexers.c_cpp.CppLexer`, `pygments.lexers.objective.ObjectiveCLexer`, `pygments.lexers.d.DLexer`, `pygments.lexers.dotnet.CSharpLexer`, `pygments.lexers.ruby.RubyLexer`, `pygments.lexers.python.PythonLexer`, `pygments.lexers.perl.PerlLexer`, `pygments.lexers.actionscript.ActionScriptLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.jmespath
:::{doc} JMESPathLexer:18
For JMESPath queries.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Name`, `pygments.token.Operator`, `pygments.token.Number`, `pygments.token.Literal`, `pygments.token.Keyword`
**Type References**: [[JMESPathLexer]]


### Implementation
**JMESPathLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/jmespath.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Name`, `pygments.token.Operator`, `pygments.token.Number`, `pygments.token.Literal`, `pygments.token.Keyword`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.carbon
:::{doc} CarbonLexer:19
For Carbon source.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[CarbonLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**CarbonLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/carbon.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.theorem
:::{doc} CoqLexer:22
For the Coq theorem prover.
:::
:::{doc} IsabelleLexer:195
For the Isabelle proof assistant.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.lexers.lean.LeanLexer`
**Type References**: [[CoqLexer]], [[IsabelleLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**CoqLexer**

**IsabelleLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/theorem.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.lexers.lean.LeanLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.compiled

**Imports**: `pygments.lexers.jvm.JavaLexer`, `pygments.lexers.jvm.ScalaLexer`, `pygments.lexers.c_cpp.CLexer`, `pygments.lexers.c_cpp.CppLexer`, `pygments.lexers.d.DLexer`, `pygments.lexers.objective.ObjectiveCLexer`, `pygments.lexers.objective.ObjectiveCppLexer`, `pygments.lexers.objective.LogosLexer`, `pygments.lexers.go.GoLexer`, `pygments.lexers.rust.RustLexer`, `pygments.lexers.c_like.ECLexer`, `pygments.lexers.c_like.ValaLexer`, `pygments.lexers.c_like.CudaLexer`, `pygments.lexers.pascal.DelphiLexer`, `pygments.lexers.pascal.PortugolLexer`, `pygments.lexers.pascal.Modula2Lexer`, `pygments.lexers.ada.AdaLexer`, `pygments.lexers.business.CobolLexer`, `pygments.lexers.business.CobolFreeformatLexer`, `pygments.lexers.fortran.FortranLexer`, `pygments.lexers.prolog.PrologLexer`, `pygments.lexers.python.CythonLexer`, `pygments.lexers.graphics.GLShaderLexer`, `pygments.lexers.ml.OcamlLexer`, `pygments.lexers.basic.BlitzBasicLexer`, `pygments.lexers.basic.BlitzMaxLexer`, `pygments.lexers.basic.MonkeyLexer`, `pygments.lexers.dylan.DylanLexer`, `pygments.lexers.dylan.DylanLidLexer`, `pygments.lexers.dylan.DylanConsoleLexer`, `pygments.lexers.ooc.OocLexer`, `pygments.lexers.felix.FelixLexer`, `pygments.lexers.nimrod.NimrodLexer`, `pygments.lexers.crystal.CrystalLexer`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/compiled.py`  
**Dependencies**: `pygments.lexers.jvm.JavaLexer`, `pygments.lexers.jvm.ScalaLexer`, `pygments.lexers.c_cpp.CLexer`, `pygments.lexers.c_cpp.CppLexer`, `pygments.lexers.d.DLexer`, `pygments.lexers.objective.ObjectiveCLexer`, `pygments.lexers.objective.ObjectiveCppLexer`, `pygments.lexers.objective.LogosLexer`, `pygments.lexers.go.GoLexer`, `pygments.lexers.rust.RustLexer`, `pygments.lexers.c_like.ECLexer`, `pygments.lexers.c_like.ValaLexer`, `pygments.lexers.c_like.CudaLexer`, `pygments.lexers.pascal.DelphiLexer`, `pygments.lexers.pascal.PortugolLexer`, `pygments.lexers.pascal.Modula2Lexer`, `pygments.lexers.ada.AdaLexer`, `pygments.lexers.business.CobolLexer`, `pygments.lexers.business.CobolFreeformatLexer`, `pygments.lexers.fortran.FortranLexer`, `pygments.lexers.prolog.PrologLexer`, `pygments.lexers.python.CythonLexer`, `pygments.lexers.graphics.GLShaderLexer`, `pygments.lexers.ml.OcamlLexer`, `pygments.lexers.basic.BlitzBasicLexer`, `pygments.lexers.basic.BlitzMaxLexer`, `pygments.lexers.basic.MonkeyLexer`, `pygments.lexers.dylan.DylanLexer`, `pygments.lexers.dylan.DylanLidLexer`, `pygments.lexers.dylan.DylanConsoleLexer`, `pygments.lexers.ooc.OocLexer`, `pygments.lexers.felix.FelixLexer`, `pygments.lexers.nimrod.NimrodLexer`, `pygments.lexers.crystal.CrystalLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.int_fiction
:::{doc} Inform6Lexer:22
For Inform 6 source code.
:::
:::{doc} Inform7Lexer:542
For Inform 7 source code.
:::
:::{doc} Inform6TemplateLexer:743
For Inform 6 template code.
:::
:::{doc} Tads3Lexer:757
For TADS 3 source code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`, `pygments.token.Generic`
**Type References**: [[Inform6Lexer]], [[Inform6TemplateLexer]], [[Inform7Lexer]], [[Tads3Lexer]]

### Interface
- `get_tokens_unprocessed`() -> Any
- `analyse_text`() -> Any
- `__init__`() -> Any
- `_make_string_state`() -> Any
- `_make_tag_state`() -> Any
- `_make_attribute_value_state`() -> Any

### Implementation
**Inform6Lexer**

**Inform7Lexer**

**Inform6TemplateLexer**

**Tads3Lexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/int_fiction.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`, `pygments.token.Generic`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._cocoa_builtins

**Imports**: `os`, `re`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_cocoa_builtins.py`  
**Dependencies**: `os`, `re`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.ncl
:::{doc} NCLLexer:20
Lexer for NCL code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`
**Type References**: [[NCLLexer]]


### Implementation
**NCLLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/ncl.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.vyper
:::{doc} VyperLexer:18
For the Vyper smart contract language.
    
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Name`, `pygments.token.Keyword`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.Text`, `pygments.token.Whitespace`
**Type References**: [[VyperLexer]]


### Implementation
**VyperLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/vyper.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Name`, `pygments.token.Keyword`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.Text`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.lilypond
:::{doc} LilyPondLexer:47
Lexer for input to LilyPond, a text-based music typesetter.

.. important::

   This lexer is meant to be used in conjunction with the ``lilypond`` style.
:::
**Imports**: `re`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.inherit`, `pygments.lexer.words`, `pygments.lexers.lisp.SchemeLexer`, `pygments.lexers._lilypond_builtins.keywords`, `pygments.lexers._lilypond_builtins.pitch_language_names`, `pygments.lexers._lilypond_builtins.clefs`, `pygments.lexers._lilypond_builtins.scales`, `pygments.lexers._lilypond_builtins.repeat_types`, `pygments.lexers._lilypond_builtins.units`, `pygments.lexers._lilypond_builtins.chord_modifiers`, `pygments.lexers._lilypond_builtins.pitches`, `pygments.lexers._lilypond_builtins.music_functions`, `pygments.lexers._lilypond_builtins.dynamics`, `pygments.lexers._lilypond_builtins.articulations`, `pygments.lexers._lilypond_builtins.music_commands`, `pygments.lexers._lilypond_builtins.markup_commands`, `pygments.lexers._lilypond_builtins.grobs`, `pygments.lexers._lilypond_builtins.translators`, `pygments.lexers._lilypond_builtins.contexts`, `pygments.lexers._lilypond_builtins.context_properties`, `pygments.lexers._lilypond_builtins.grob_properties`, `pygments.lexers._lilypond_builtins.scheme_functions`, `pygments.lexers._lilypond_builtins.paper_variables`, `pygments.lexers._lilypond_builtins.header_variables`, `pygments.token.Token`
**Type References**: [[LilyPondLexer]]

### Interface
- `builtin_words`() -> Any
- `get_tokens_unprocessed`() -> Any

### Implementation
**LilyPondLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/lilypond.py`  
**Dependencies**: `re`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.inherit`, `pygments.lexer.words`, `pygments.lexers.lisp.SchemeLexer`, `pygments.lexers._lilypond_builtins.keywords`, `pygments.lexers._lilypond_builtins.pitch_language_names`, `pygments.lexers._lilypond_builtins.clefs`, `pygments.lexers._lilypond_builtins.scales`, `pygments.lexers._lilypond_builtins.repeat_types`, `pygments.lexers._lilypond_builtins.units`, `pygments.lexers._lilypond_builtins.chord_modifiers`, `pygments.lexers._lilypond_builtins.pitches`, `pygments.lexers._lilypond_builtins.music_functions`, `pygments.lexers._lilypond_builtins.dynamics`, `pygments.lexers._lilypond_builtins.articulations`, `pygments.lexers._lilypond_builtins.music_commands`, `pygments.lexers._lilypond_builtins.markup_commands`, `pygments.lexers._lilypond_builtins.grobs`, `pygments.lexers._lilypond_builtins.translators`, `pygments.lexers._lilypond_builtins.contexts`, `pygments.lexers._lilypond_builtins.context_properties`, `pygments.lexers._lilypond_builtins.grob_properties`, `pygments.lexers._lilypond_builtins.scheme_functions`, `pygments.lexers._lilypond_builtins.paper_variables`, `pygments.lexers._lilypond_builtins.header_variables`, `pygments.token.Token`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.markup
:::{doc} BBCodeLexer:32
A lexer that highlights BBCode(-like) syntax.
:::
:::{doc} MoinWikiLexer:65
For MoinMoin (and Trac) Wiki markup.
:::
:::{doc} RstLexer:111
For reStructuredText markup.

Additional options accepted:

`handlecodeblocks`
    Highlight the contents of ``.. sourcecode:: language``,
    ``.. code:: language`` and ``.. code-block:: language``
    directives with a lexer for the given language (default:
    ``True``).

    .. versionadded:: 0.8
:::
:::{doc} TexLexer:276
Lexer for the TeX and LaTeX typesetting languages.
:::
:::{doc} GroffLexer:336
Lexer for the (g)roff typesetting language, supporting groff
extensions. Mainly useful for highlighting manpage sources.
:::
:::{doc} MozPreprocHashLexer:392
Lexer for Mozilla Preprocessor files (with '#' as the marker).

Other data is left untouched.
:::
:::{doc} MozPreprocPercentLexer:433
Lexer for Mozilla Preprocessor files (with '%' as the marker).

Other data is left untouched.
:::
:::{doc} MozPreprocXulLexer:454
Subclass of the `MozPreprocHashLexer` that highlights unlexed data with the
`XmlLexer`.
:::
:::{doc} MozPreprocJavascriptLexer:470
Subclass of the `MozPreprocHashLexer` that highlights unlexed data with the
`JavascriptLexer`.
:::
:::{doc} MozPreprocCssLexer:486
Subclass of the `MozPreprocHashLexer` that highlights unlexed data with the
`CssLexer`.
:::
:::{doc} MarkdownLexer:502
For Markdown markup.
:::
:::{doc} OrgLexer:621
For Org Mode markup.
:::
:::{doc} TiddlyWiki5Lexer:730
For TiddlyWiki5 markup.
:::
:::{doc} WikitextLexer:888
For MediaWiki Wikitext.

Parsing Wikitext is tricky, and results vary between different MediaWiki
installations, so we only highlight common syntaxes (built-in or from
popular extensions), and also assume templates produce no unbalanced
syntaxes.
:::
**Imports**: `re`, `pygments.lexers.html.XmlLexer`, `pygments.lexers.javascript.JavascriptLexer`, `pygments.lexers.css.CssLexer`, `pygments.lexers.lilypond.LilyPondLexer`, `pygments.lexers.data.JsonLexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.do_insertions`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Other`, `pygments.token.Whitespace`, `pygments.token.Literal`, `pygments.util.get_bool_opt`, `pygments.util.ClassNotFound`, `pygments.lexers.get_lexer_by_name`, `pygments.lexers.get_lexer_by_name`, `pygments.lexers.get_lexer_by_name`, `pygments.lexers.get_lexer_by_name`, `pygments.lexers.get_lexer_by_name`
**Type References**: [[BBCodeLexer]], [[GroffLexer]], [[MarkdownLexer]], [[MoinWikiLexer]], [[MozPreprocCssLexer]], [[MozPreprocHashLexer]], [[MozPreprocJavascriptLexer]], [[MozPreprocPercentLexer]], [[MozPreprocXulLexer]], [[OrgLexer]], [[RstLexer]], [[TexLexer]], [[TiddlyWiki5Lexer]], [[WikitextLexer]]

### Interface
- `_handle_sourcecode`() -> Any
- `__init__`() -> Any
- `analyse_text`() -> Any
- `_handle_codeblock`() -> Any
- `_inline`() -> Any
- `_handle_cssblock`() -> Any
- `nowiki_tag_rules`() -> Any
- `plaintext_tag_rules`() -> Any
- `delegate_tag_rules`() -> Any
- `text_rules`() -> Any
- `handle_syntaxhighlight`() -> Any
- `handle_score`() -> Any

### Implementation
**BBCodeLexer**

**MoinWikiLexer**

**RstLexer**

**TexLexer**

**GroffLexer**

**MozPreprocHashLexer**

**MozPreprocPercentLexer**

**MozPreprocXulLexer**

**MozPreprocJavascriptLexer**

**MozPreprocCssLexer**

**MarkdownLexer**

**OrgLexer**

**TiddlyWiki5Lexer**

**WikitextLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/markup.py`  
**Dependencies**: `re`, `pygments.lexers.html.XmlLexer`, `pygments.lexers.javascript.JavascriptLexer`, `pygments.lexers.css.CssLexer`, `pygments.lexers.lilypond.LilyPondLexer`, `pygments.lexers.data.JsonLexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.do_insertions`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Other`, `pygments.token.Whitespace`, `pygments.token.Literal`, `pygments.util.get_bool_opt`, `pygments.util.ClassNotFound`, `pygments.lexers.get_lexer_by_name`, `pygments.lexers.get_lexer_by_name`, `pygments.lexers.get_lexer_by_name`, `pygments.lexers.get_lexer_by_name`, `pygments.lexers.get_lexer_by_name`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.pddl
:::{doc} PddlLexer:20
A PDDL lexer.

It should support up to PDDL 3.1.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Punctuation`, `pygments.token.Keyword`, `pygments.token.Whitespace`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Number`
**Type References**: [[PddlLexer]]


### Implementation
**PddlLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/pddl.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Punctuation`, `pygments.token.Keyword`, `pygments.token.Whitespace`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Number`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._asy_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_asy_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.igor
:::{doc} IgorLexer:19
Pygments Lexer for Igor Pro procedure files (.ipf).
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[IgorLexer]]


### Implementation
**IgorLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/igor.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.ml
:::{doc} SMLLexer:20
For the Standard ML language.
:::
:::{doc} OcamlLexer:355
For the OCaml language.
:::
:::{doc} OpaLexer:447
Lexer for the Opa language.
:::
:::{doc} ReasonLexer:770
For the ReasonML language.
:::
:::{doc} FStarLexer:862
For the F* language.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`
**Type References**: [[FStarLexer]], [[OcamlLexer]], [[OpaLexer]], [[ReasonLexer]], [[SMLLexer]]

### Interface
- `stringy`() -> Any
- `long_id_callback`() -> Any
- `end_id_callback`() -> Any
- `id_callback`() -> Any

### Implementation
**SMLLexer**

**OcamlLexer**

**OpaLexer**

**ReasonLexer**

**FStarLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/ml.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.savi
:::{doc} SaviLexer:32
For Savi source code.

.. versionadded: 2.10
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.token.Whitespace`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.Comment`, `pygments.token.Generic`, `pygments.token.Error`
**Type References**: [[SaviLexer]]


### Implementation
**SaviLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/savi.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.token.Whitespace`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.Comment`, `pygments.token.Generic`, `pygments.token.Error`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.bqn
:::{doc} BQNLexer:18
A simple BQN lexer.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[BQNLexer]]


### Implementation
**BQNLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/bqn.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.tal
:::{doc} TalLexer:20
For Uxntal source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Literal`
**Type References**: [[TalLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**TalLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/tal.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Literal`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.tls
:::{doc} TlsLexer:19
The TLS presentation language, described in RFC 8446.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[TlsLexer]]


### Implementation
**TlsLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/tls.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.templates
:::{doc} ErbLexer:51
Generic ERB (Ruby Templating) lexer.

Just highlights ruby code between the preprocessor directives, other data
is left untouched by the lexer.

All options are also forwarded to the `RubyLexer`.
:::
:::{doc} SmartyLexer:147
Generic Smarty template lexer.

Just highlights smarty code between the preprocessor directives, other
data is left untouched by the lexer.
:::
:::{doc} VelocityLexer:205
Generic Velocity template lexer.

Just highlights velocity directives and variable references, other
data is left untouched by the lexer.
:::
:::{doc} VelocityHtmlLexer:289
Subclass of the `VelocityLexer` that highlights unlexed data
with the `HtmlLexer`.
:::
:::{doc} VelocityXmlLexer:307
Subclass of the `VelocityLexer` that highlights unlexed data
with the `XmlLexer`.
:::
:::{doc} DjangoLexer:331
Generic `Django <https://www.djangoproject.com/documentation/templates/>`_
and `Jinja <https://jinja.palletsprojects.com>`_ template lexer.

It just highlights django/jinja code between the preprocessor directives,
other data is left untouched by the lexer.
:::
:::{doc} MyghtyLexer:416
Generic myghty templates lexer. Code that isn't Myghty
markup is yielded as `Token.Other`.
:::
:::{doc} MyghtyHtmlLexer:462
Subclass of the `MyghtyLexer` that highlights unlexed data
with the `HtmlLexer`.
:::
:::{doc} MyghtyXmlLexer:478
Subclass of the `MyghtyLexer` that highlights unlexed data
with the `XmlLexer`.
:::
:::{doc} MyghtyJavascriptLexer:494
Subclass of the `MyghtyLexer` that highlights unlexed data
with the `JavascriptLexer`.
:::
:::{doc} MyghtyCssLexer:512
Subclass of the `MyghtyLexer` that highlights unlexed data
with the `CssLexer`.
:::
:::{doc} MasonLexer:528
Generic mason templates lexer. Stolen from Myghty lexer. Code that isn't
Mason markup is HTML.
:::
:::{doc} MakoLexer:582
Generic mako templates lexer. Code that isn't Mako
markup is yielded as `Token.Other`.
:::
:::{doc} MakoHtmlLexer:648
Subclass of the `MakoLexer` that highlights unlexed data
with the `HtmlLexer`.
:::
:::{doc} MakoXmlLexer:664
Subclass of the `MakoLexer` that highlights unlexed data
with the `XmlLexer`.
:::
:::{doc} MakoJavascriptLexer:680
Subclass of the `MakoLexer` that highlights unlexed data
with the `JavascriptLexer`.
:::
:::{doc} MakoCssLexer:698
Subclass of the `MakoLexer` that highlights unlexed data
with the `CssLexer`.
:::
:::{doc} CheetahPythonLexer:716
Lexer for handling Cheetah's special $ tokens in Python syntax.
:::
:::{doc} CheetahLexer:729
Generic cheetah templates lexer. Code that isn't Cheetah
markup is yielded as `Token.Other`.  This also works for
`spitfire templates`_ which use the same syntax.

.. _spitfire templates: http://code.google.com/p/spitfire/
:::
:::{doc} CheetahHtmlLexer:774
Subclass of the `CheetahLexer` that highlights unlexed data
with the `HtmlLexer`.
:::
:::{doc} CheetahXmlLexer:790
Subclass of the `CheetahLexer` that highlights unlexed data
with the `XmlLexer`.
:::
:::{doc} CheetahJavascriptLexer:806
Subclass of the `CheetahLexer` that highlights unlexed data
with the `JavascriptLexer`.
:::
:::{doc} GenshiTextLexer:828
A lexer that highlights genshi text templates.
:::
:::{doc} GenshiMarkupLexer:864
Base lexer for Genshi markup, used by `HtmlGenshiLexer` and
`GenshiLexer`.
:::
:::{doc} HtmlGenshiLexer:928
A lexer that highlights `genshi <https://genshi.edgewall.org/>`_ and
`kid <http://kid-templating.org/>`_ kid HTML templates.
:::
:::{doc} GenshiLexer:953
A lexer that highlights `genshi <https://genshi.edgewall.org/>`_ and
`kid <http://kid-templating.org/>`_ kid XML templates.
:::
:::{doc} JavascriptGenshiLexer:979
A lexer that highlights javascript code in genshi text templates.
:::
:::{doc} CssGenshiLexer:1001
A lexer that highlights CSS definitions in genshi text templates.
:::
:::{doc} RhtmlLexer:1020
Subclass of the ERB lexer that highlights the unlexed data with the
html lexer.

Nested Javascript and CSS is highlighted too.
:::
:::{doc} XmlErbLexer:1048
Subclass of `ErbLexer` which highlights data outside preprocessor
directives with the `XmlLexer`.
:::
:::{doc} CssErbLexer:1071
Subclass of `ErbLexer` which highlights unlexed data with the `CssLexer`.
:::
:::{doc} JavascriptErbLexer:1090
Subclass of `ErbLexer` which highlights unlexed data with the
`JavascriptLexer`.
:::
:::{doc} HtmlPhpLexer:1112
Subclass of `PhpLexer` that highlights unhandled data with the `HtmlLexer`.

Nested Javascript and CSS is highlighted too.
:::
:::{doc} XmlPhpLexer:1141
Subclass of `PhpLexer` that highlights unhandled data with the `XmlLexer`.
:::
:::{doc} CssPhpLexer:1163
Subclass of `PhpLexer` which highlights unmatched data with the `CssLexer`.
:::
:::{doc} JavascriptPhpLexer:1182
Subclass of `PhpLexer` which highlights unmatched data with the
`JavascriptLexer`.
:::
:::{doc} HtmlSmartyLexer:1204
Subclass of the `SmartyLexer` that highlights unlexed data with the
`HtmlLexer`.

Nested Javascript and CSS is highlighted too.
:::
:::{doc} XmlSmartyLexer:1229
Subclass of the `SmartyLexer` that highlights unlexed data with the
`XmlLexer`.
:::
:::{doc} CssSmartyLexer:1252
Subclass of the `SmartyLexer` that highlights unlexed data with the
`CssLexer`.
:::
:::{doc} JavascriptSmartyLexer:1272
Subclass of the `SmartyLexer` that highlights unlexed data with the
`JavascriptLexer`.
:::
:::{doc} HtmlDjangoLexer:1294
Subclass of the `DjangoLexer` that highlights unlexed data with the
`HtmlLexer`.

Nested Javascript and CSS is highlighted too.
:::
:::{doc} XmlDjangoLexer:1320
Subclass of the `DjangoLexer` that highlights unlexed data with the
`XmlLexer`.
:::
:::{doc} CssDjangoLexer:1344
Subclass of the `DjangoLexer` that highlights unlexed data with the
`CssLexer`.
:::
:::{doc} JavascriptDjangoLexer:1365
Subclass of the `DjangoLexer` that highlights unlexed data with the
`JavascriptLexer`.
:::
:::{doc} JspRootLexer:1392
Base for the `JspLexer`. Yields `Token.Other` for area outside of
JSP tags.

.. versionadded:: 0.7
:::
:::{doc} JspLexer:1417
Lexer for Java Server Pages.
:::
:::{doc} EvoqueLexer:1440
For files using the Evoque templating system.
:::
:::{doc} EvoqueHtmlLexer:1497
Subclass of the `EvoqueLexer` that highlights unlexed data with the
`HtmlLexer`.
:::
:::{doc} EvoqueXmlLexer:1516
Subclass of the `EvoqueLexer` that highlights unlexed data with the
`XmlLexer`.
:::
:::{doc} ColdfusionLexer:1535
Coldfusion statements
:::
:::{doc} ColdfusionMarkupLexer:1586
Coldfusion markup only
:::
:::{doc} ColdfusionHtmlLexer:1633
Coldfusion markup in html
:::
:::{doc} ColdfusionCFCLexer:1648
Coldfusion markup/script components
:::
:::{doc} SspLexer:1663
Lexer for Scalate Server Pages.
:::
:::{doc} TeaTemplateRootLexer:1688
Base for the `TeaTemplateLexer`. Yields `Token.Other` for area outside of
code blocks.

.. versionadded:: 1.5
:::
:::{doc} TeaTemplateLexer:1710
Lexer for Tea Templates.
:::
:::{doc} LassoHtmlLexer:1733
Subclass of the `LassoLexer` which highlights unhandled data with the
`HtmlLexer`.

Nested JavaScript and CSS is also highlighted.
:::
:::{doc} LassoXmlLexer:1761
Subclass of the `LassoLexer` which highlights unhandled data with the
`XmlLexer`.
:::
:::{doc} LassoCssLexer:1785
Subclass of the `LassoLexer` which highlights unhandled data with the
`CssLexer`.
:::
:::{doc} LassoJavascriptLexer:1811
Subclass of the `LassoLexer` which highlights unhandled data with the
`JavascriptLexer`.
:::
:::{doc} HandlebarsLexer:1835
Generic handlebars template lexer.

Highlights only the Handlebars template tags (stuff between `{{` and `}}`).
Everything else is left for a delegating lexer.
:::
:::{doc} HandlebarsHtmlLexer:1911
Subclass of the `HandlebarsLexer` that highlights unlexed data with the
`HtmlLexer`.
:::
:::{doc} YamlJinjaLexer:1928
Subclass of the `DjangoLexer` that highlights unlexed data with the
`YamlLexer`.

Commonly used in Saltstack salt states.
:::
:::{doc} LiquidLexer:1947
Lexer for Liquid templates.
:::
:::{doc} TwigLexer:2152
Twig template lexer.

It just highlights Twig code between the preprocessor directives,
other data is left untouched by the lexer.
:::
:::{doc} TwigHtmlLexer:2235
Subclass of the `TwigLexer` that highlights unlexed data with the
`HtmlLexer`.
:::
:::{doc} Angular2Lexer:2252
Generic angular2 template lexer.

Highlights only the Angular template tags (stuff between `{{` and `}}` and
special attributes: '(event)=', '[property]=', '[(twoWayBinding)]=').
Everything else is left for a delegating lexer.
:::
:::{doc} Angular2HtmlLexer:2314
Subclass of the `Angular2Lexer` that highlights unlexed data with the
`HtmlLexer`.
:::
:::{doc} SqlJinjaLexer:2330
Templated SQL lexer.
:::
**Imports**: `re`, `pygments.lexers.html.HtmlLexer`, `pygments.lexers.html.XmlLexer`, `pygments.lexers.javascript.JavascriptLexer`, `pygments.lexers.javascript.LassoLexer`, `pygments.lexers.css.CssLexer`, `pygments.lexers.php.PhpLexer`, `pygments.lexers.python.PythonLexer`, `pygments.lexers.perl.PerlLexer`, `pygments.lexers.jvm.JavaLexer`, `pygments.lexers.jvm.TeaLangLexer`, `pygments.lexers.data.YamlLexer`, `pygments.lexers.sql.SqlLexer`, `pygments.lexer.Lexer`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.lexer.combined`, `pygments.token.Error`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Other`, `pygments.token.Token`, `pygments.util.html_doctype_matches`, `pygments.util.looks_like_xml`, `pygments.lexers.ruby.RubyLexer`
**Type References**: [[Angular2HtmlLexer]], [[Angular2Lexer]], [[CheetahHtmlLexer]], [[CheetahJavascriptLexer]], [[CheetahLexer]], [[CheetahPythonLexer]], [[CheetahXmlLexer]], [[ColdfusionCFCLexer]], [[ColdfusionHtmlLexer]], [[ColdfusionLexer]], [[ColdfusionMarkupLexer]], [[CssDjangoLexer]], [[CssErbLexer]], [[CssGenshiLexer]], [[CssPhpLexer]], [[CssSmartyLexer]], [[DjangoLexer]], [[ErbLexer]], [[EvoqueHtmlLexer]], [[EvoqueLexer]], [[EvoqueXmlLexer]], [[GenshiLexer]], [[GenshiMarkupLexer]], [[GenshiTextLexer]], [[HandlebarsHtmlLexer]], [[HandlebarsLexer]], [[HtmlDjangoLexer]], [[HtmlGenshiLexer]], [[HtmlPhpLexer]], [[HtmlSmartyLexer]], [[JavascriptDjangoLexer]], [[JavascriptErbLexer]], [[JavascriptGenshiLexer]], [[JavascriptPhpLexer]], [[JavascriptSmartyLexer]], [[JspLexer]], [[JspRootLexer]], [[LassoCssLexer]], [[LassoHtmlLexer]], [[LassoJavascriptLexer]], [[LassoXmlLexer]], [[LiquidLexer]], [[MakoCssLexer]], [[MakoHtmlLexer]], [[MakoJavascriptLexer]], [[MakoLexer]], [[MakoXmlLexer]], [[MasonLexer]], [[MyghtyCssLexer]], [[MyghtyHtmlLexer]], [[MyghtyJavascriptLexer]], [[MyghtyLexer]], [[MyghtyXmlLexer]], [[RhtmlLexer]], [[SmartyLexer]], [[SqlJinjaLexer]], [[SspLexer]], [[TeaTemplateLexer]], [[TeaTemplateRootLexer]], [[TwigHtmlLexer]], [[TwigLexer]], [[VelocityHtmlLexer]], [[VelocityLexer]], [[VelocityXmlLexer]], [[XmlDjangoLexer]], [[XmlErbLexer]], [[XmlPhpLexer]], [[XmlSmartyLexer]], [[YamlJinjaLexer]]

### Interface
- `__init__`() -> Any
- `get_tokens_unprocessed`() -> Any
- `analyse_text`() -> Any

### Implementation
**ErbLexer**

**SmartyLexer**

**VelocityLexer**

**VelocityHtmlLexer**

**VelocityXmlLexer**

**DjangoLexer**

**MyghtyLexer**

**MyghtyHtmlLexer**

**MyghtyXmlLexer**

**MyghtyJavascriptLexer**

**MyghtyCssLexer**

**MasonLexer**

**MakoLexer**

**MakoHtmlLexer**

**MakoXmlLexer**

**MakoJavascriptLexer**

**MakoCssLexer**

**CheetahPythonLexer**

**CheetahLexer**

**CheetahHtmlLexer**

**CheetahXmlLexer**

**CheetahJavascriptLexer**

**GenshiTextLexer**

**GenshiMarkupLexer**

**HtmlGenshiLexer**

**GenshiLexer**

**JavascriptGenshiLexer**

**CssGenshiLexer**

**RhtmlLexer**

**XmlErbLexer**

**CssErbLexer**

**JavascriptErbLexer**

**HtmlPhpLexer**

**XmlPhpLexer**

**CssPhpLexer**

**JavascriptPhpLexer**

**HtmlSmartyLexer**

**XmlSmartyLexer**

**CssSmartyLexer**

**JavascriptSmartyLexer**

**HtmlDjangoLexer**

**XmlDjangoLexer**

**CssDjangoLexer**

**JavascriptDjangoLexer**

**JspRootLexer**

**JspLexer**

**EvoqueLexer**

**EvoqueHtmlLexer**

**EvoqueXmlLexer**

**ColdfusionLexer**

**ColdfusionMarkupLexer**

**ColdfusionHtmlLexer**

**ColdfusionCFCLexer**

**SspLexer**

**TeaTemplateRootLexer**

**TeaTemplateLexer**

**LassoHtmlLexer**

**LassoXmlLexer**

**LassoCssLexer**

**LassoJavascriptLexer**

**HandlebarsLexer**

**HandlebarsHtmlLexer**

**YamlJinjaLexer**

**LiquidLexer**

**TwigLexer**

**TwigHtmlLexer**

**Angular2Lexer**

**Angular2HtmlLexer**

**SqlJinjaLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/templates.py`  
**Dependencies**: `re`, `pygments.lexers.html.HtmlLexer`, `pygments.lexers.html.XmlLexer`, `pygments.lexers.javascript.JavascriptLexer`, `pygments.lexers.javascript.LassoLexer`, `pygments.lexers.css.CssLexer`, `pygments.lexers.php.PhpLexer`, `pygments.lexers.python.PythonLexer`, `pygments.lexers.perl.PerlLexer`, `pygments.lexers.jvm.JavaLexer`, `pygments.lexers.jvm.TeaLangLexer`, `pygments.lexers.data.YamlLexer`, `pygments.lexers.sql.SqlLexer`, `pygments.lexer.Lexer`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.lexer.combined`, `pygments.token.Error`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Other`, `pygments.token.Token`, `pygments.util.html_doctype_matches`, `pygments.util.looks_like_xml`, `pygments.lexers.ruby.RubyLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.forth
:::{doc} ForthLexer:21
Lexer for Forth files.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`
**Type References**: [[ForthLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**ForthLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/forth.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.css
:::{doc} CssLexer:171
For CSS (Cascading Style Sheets).
:::
:::{doc} SassLexer:446
For Sass stylesheets.
:::
:::{doc} ScssLexer:528
For SCSS stylesheets.
:::
:::{doc} LessCssLexer:580
For LESS styleshets.
:::
**Imports**: `re`, `copy`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.inherit`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.lexers._css_builtins._css_properties`
**Type References**: [[CssLexer]], [[LessCssLexer]], [[SassLexer]], [[ScssLexer]]

### Interface
- `_indentation`() -> Any
- `_starts_block`() -> Any
- `callback`() -> Any

### Implementation
**CssLexer**

**SassLexer**

**ScssLexer**

**LessCssLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/css.py`  
**Dependencies**: `re`, `copy`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.inherit`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.lexers._css_builtins._css_properties`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.asm
:::{doc} GasLexer:26
For Gas (AT&T) assembly code.
:::
:::{doc} _objdump_lexer_tokens:111
Common objdump lexer tokens to wrap an ASM lexer.
:::
:::{doc} ObjdumpLexer:164
For the output of ``objdump -dr``.
:::
:::{doc} DObjdumpLexer:178
For the output of ``objdump -Sr`` on compiled D files.
:::
:::{doc} CppObjdumpLexer:193
For the output of ``objdump -Sr`` on compiled C++ files.
:::
:::{doc} CObjdumpLexer:208
For the output of ``objdump -Sr`` on compiled C files.
:::
:::{doc} HsailLexer:224
For HSAIL assembly code.
:::
:::{doc} LlvmLexer:359
For LLVM assembly code.
:::
:::{doc} LlvmMirBodyLexer:503
For LLVM MIR examples without the YAML wrapper.
:::
:::{doc} LlvmMirLexer:642
Lexer for the overall LLVM MIR document format.

MIR is a human readable serialization format that's used to represent LLVM's
machine specific intermediate representation. It allows LLVM's developers to
see the state of the compilation process at various points, as well as test
individual pieces of the compiler.
:::
:::{doc} NasmLexer:721
For Nasm (Intel) assembly code.
:::
:::{doc} NasmObjdumpLexer:809
For the output of ``objdump -d -M intel``.
:::
:::{doc} TasmLexer:823
For Tasm (Turbo Assembler) assembly code.
:::
:::{doc} Ca65Lexer:911
For ca65 assembler sources.
:::
:::{doc} Dasm16Lexer:950
For DCPU-16 Assembly.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.words`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.default`, `pygments.lexers.c_cpp.CppLexer`, `pygments.lexers.c_cpp.CLexer`, `pygments.lexers.d.DLexer`, `pygments.token.Text`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Comment`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Keyword`, `pygments.token.Operator`, `pygments.token.Whitespace`
**Type References**: [[CObjdumpLexer]], [[Ca65Lexer]], [[CppObjdumpLexer]], [[DObjdumpLexer]], [[Dasm16Lexer]], [[GasLexer]], [[HsailLexer]], [[LlvmLexer]], [[LlvmMirBodyLexer]], [[LlvmMirLexer]], [[NasmLexer]], [[NasmObjdumpLexer]], [[ObjdumpLexer]], [[TasmLexer]]

### Interface
- `_objdump_lexer_tokens`() -> Any
- `analyse_text`() -> Any
- `__init__`() -> Any
- `guess_identifier`() -> Any

### Implementation
**GasLexer**

**ObjdumpLexer**

**DObjdumpLexer**

**CppObjdumpLexer**

**CObjdumpLexer**

**HsailLexer**

**LlvmLexer**

**LlvmMirBodyLexer**

**LlvmMirLexer**

**NasmLexer**

**NasmObjdumpLexer**

**TasmLexer**

**Ca65Lexer**

**Dasm16Lexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/asm.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.words`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.default`, `pygments.lexers.c_cpp.CppLexer`, `pygments.lexers.c_cpp.CLexer`, `pygments.lexers.d.DLexer`, `pygments.token.Text`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Comment`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Keyword`, `pygments.token.Operator`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.roboconf
:::{doc} RoboconfGraphLexer:17
Lexer for Roboconf graph files.
:::
:::{doc} RoboconfInstancesLexer:52
Lexer for Roboconf instances files.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.re`, `pygments.token.Text`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`
**Type References**: [[RoboconfGraphLexer]], [[RoboconfInstancesLexer]]


### Implementation
**RoboconfGraphLexer**

**RoboconfInstancesLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/roboconf.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.re`, `pygments.token.Text`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._lasso_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_lasso_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.pascal
:::{doc} PortugolLexer:25
For Portugol, a Pascal dialect with keywords in Portuguese.
:::
:::{doc} DelphiLexer:42
For Delphi (Borland Object Pascal),
Turbo Pascal and Free Pascal source code.

Additional options accepted:

`turbopascal`
    Highlight Turbo Pascal specific keywords (default: ``True``).
`delphi`
    Highlight Borland Delphi specific keywords (default: ``True``).
`freepascal`
    Highlight Free Pascal specific keywords (default: ``True``).
`units`
    A list of units that should be considered builtin, supported are
    ``System``, ``SysUtils``, ``Classes`` and ``Math``.
    Default is to consider all of them builtin.
:::
**Imports**: `re`, `pygments.lexer.Lexer`, `pygments.util.get_bool_opt`, `pygments.util.get_list_opt`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`, `pygments.token.Whitespace`, `pygments.scanner.Scanner`, `pygments.lexers.modula2.Modula2Lexer`
**Type References**: [[DelphiLexer]], [[PortugolLexer]]

### Interface
- `__init__`() -> Any
- `get_tokens_unprocessed`() -> Any

### Implementation
**PortugolLexer**

**DelphiLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/pascal.py`  
**Dependencies**: `re`, `pygments.lexer.Lexer`, `pygments.util.get_bool_opt`, `pygments.util.get_list_opt`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`, `pygments.token.Whitespace`, `pygments.scanner.Scanner`, `pygments.lexers.modula2.Modula2Lexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.csound
:::{doc} CsoundScoreLexer:136
For `Csound <https://csound.com>`_ scores.
:::
:::{doc} CsoundOrchestraLexer:201
For `Csound <https://csound.com>`_ orchestras.
:::
:::{doc} CsoundDocumentLexer:410
For Csound documents.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.using`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`, `pygments.lexers._csound_builtins.OPCODES`, `pygments.lexers._csound_builtins.DEPRECATED_OPCODES`, `pygments.lexers._csound_builtins.REMOVED_OPCODES`, `pygments.lexers.html.HtmlLexer`, `pygments.lexers.python.PythonLexer`, `pygments.lexers.scripting.LuaLexer`
**Type References**: [[CsoundDocumentLexer]], [[CsoundLexer]], [[CsoundOrchestraLexer]], [[CsoundScoreLexer]]

### Interface
- `opcode_name_callback`() -> Any
- `name_callback`() -> Any

### Implementation
**CsoundLexer**

**CsoundScoreLexer**

**CsoundOrchestraLexer**

**CsoundDocumentLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/csound.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.using`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`, `pygments.lexers._csound_builtins.OPCODES`, `pygments.lexers._csound_builtins.DEPRECATED_OPCODES`, `pygments.lexers._csound_builtins.REMOVED_OPCODES`, `pygments.lexers.html.HtmlLexer`, `pygments.lexers.python.PythonLexer`, `pygments.lexers.scripting.LuaLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.typst
:::{doc} TypstLexer:19
For Typst code.

Additional options accepted:

`start`
    Specifies the starting state of the lexer (one of 'markup', 'math',
    'code'). The default is 'markup'.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Generic`, `pygments.token.Operator`, `pygments.token.Number`, `pygments.token.Text`, `pygments.util.get_choice_opt`
**Type References**: [[TypstLexer]]

### Interface
- `__init__`() -> Any
- `get_tokens_unprocessed`() -> Any

### Implementation
**TypstLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/typst.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Generic`, `pygments.token.Operator`, `pygments.token.Number`, `pygments.token.Text`, `pygments.util.get_choice_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.ptx
:::{doc} PtxLexer:18
For NVIDIA `PTX <https://docs.nvidia.com/cuda/parallel-thread-execution/>`_
source.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Operator`
**Type References**: [[PtxLexer]]


### Implementation
**PtxLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/ptx.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Operator`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.sgf
:::{doc} SmartGameFormatLexer:17
Lexer for Smart Game Format (sgf) file format.

The format is used to store game records of board games for two players
(mainly Go game).
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Name`, `pygments.token.Literal`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[SmartGameFormatLexer]]


### Implementation
**SmartGameFormatLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/sgf.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Name`, `pygments.token.Literal`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.kusto
:::{doc} KustoLexer:44
For Kusto Query Language source code.
    
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[KustoLexer]]


### Implementation
**KustoLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/kusto.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.webassembly
:::{doc} WatLexer:64
Lexer for the WebAssembly text format.
    
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Name`
**Type References**: [[WatLexer]]


### Implementation
**WatLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/webassembly.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Name`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.procfile
:::{doc} ProcfileLexer:17
Lexer for Procfile file format.

The format is used to run processes on Heroku or is used by Foreman or
Honcho tools.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Punctuation`
**Type References**: [[ProcfileLexer]]


### Implementation
**ProcfileLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/procfile.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.functional

**Imports**: `pygments.lexers.lisp.SchemeLexer`, `pygments.lexers.lisp.CommonLispLexer`, `pygments.lexers.lisp.RacketLexer`, `pygments.lexers.lisp.NewLispLexer`, `pygments.lexers.lisp.ShenLexer`, `pygments.lexers.haskell.HaskellLexer`, `pygments.lexers.haskell.LiterateHaskellLexer`, `pygments.lexers.haskell.KokaLexer`, `pygments.lexers.theorem.CoqLexer`, `pygments.lexers.erlang.ErlangLexer`, `pygments.lexers.erlang.ErlangShellLexer`, `pygments.lexers.erlang.ElixirConsoleLexer`, `pygments.lexers.erlang.ElixirLexer`, `pygments.lexers.ml.SMLLexer`, `pygments.lexers.ml.OcamlLexer`, `pygments.lexers.ml.OpaLexer`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/functional.py`  
**Dependencies**: `pygments.lexers.lisp.SchemeLexer`, `pygments.lexers.lisp.CommonLispLexer`, `pygments.lexers.lisp.RacketLexer`, `pygments.lexers.lisp.NewLispLexer`, `pygments.lexers.lisp.ShenLexer`, `pygments.lexers.haskell.HaskellLexer`, `pygments.lexers.haskell.LiterateHaskellLexer`, `pygments.lexers.haskell.KokaLexer`, `pygments.lexers.theorem.CoqLexer`, `pygments.lexers.erlang.ErlangLexer`, `pygments.lexers.erlang.ErlangShellLexer`, `pygments.lexers.erlang.ElixirConsoleLexer`, `pygments.lexers.erlang.ElixirLexer`, `pygments.lexers.ml.SMLLexer`, `pygments.lexers.ml.OcamlLexer`, `pygments.lexers.ml.OpaLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.codeql

**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[CodeQLLexer]]


### Implementation
**CodeQLLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/codeql.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.textedit
:::{doc} AwkLexer:22
For Awk scripts.
:::
:::{doc} SedLexer:76
Lexer for Sed script files.
:::
:::{doc} VimLexer:113
Lexer for VimL script files.
:::
**Imports**: `re`, `bisect.bisect`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.this`, `pygments.lexer.using`, `pygments.lexers.python.PythonLexer`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`, `pygments.lexers._vim_builtins.auto`, `pygments.lexers._vim_builtins.command`, `pygments.lexers._vim_builtins.option`
**Type References**: [[AwkLexer]], [[SedLexer]], [[VimLexer]]

### Interface
- `__init__`() -> Any
- `is_in`() -> Any
- `get_tokens_unprocessed`() -> Any

### Implementation
**AwkLexer**

**SedLexer**

**VimLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/textedit.py`  
**Dependencies**: `re`, `bisect.bisect`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.this`, `pygments.lexer.using`, `pygments.lexers.python.PythonLexer`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`, `pygments.lexers._vim_builtins.auto`, `pygments.lexers._vim_builtins.command`, `pygments.lexers._vim_builtins.option`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.installers
:::{doc} NSISLexer:22
For NSIS scripts.
:::
:::{doc} RPMSpecLexer:147
For RPM ``.spec`` files.
:::
:::{doc} DebianSourcesLexer:221
Lexer that highlights debian.sources files.
:::
:::{doc} SourcesListLexer:245
Lexer that highlights debian sources.list files.
:::
:::{doc} DebianControlLexer:293
Lexer for Debian ``control`` files and ``apt-cache show <pkg>`` outputs.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Number`, `pygments.token.Whitespace`
**Type References**: [[DebianControlLexer]], [[DebianSourcesLexer]], [[NSISLexer]], [[RPMSpecLexer]], [[SourcesListLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**NSISLexer**

**RPMSpecLexer**

**DebianSourcesLexer**

**SourcesListLexer**

**DebianControlLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/installers.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Number`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.business
:::{doc} CobolLexer:23
Lexer for OpenCOBOL code.
:::
:::{doc} CobolFreeformatLexer:222
Lexer for Free format OpenCOBOL code.
:::
:::{doc} ABAPLexer:242
Lexer for ABAP, SAP's integrated language.
:::
:::{doc} OpenEdgeLexer:451
Lexer for OpenEdge ABL (formerly Progress) source code.
:::
:::{doc} GoodDataCLLexer:519
Lexer for GoodData-CL script files.
:::
:::{doc} MaqlLexer:566
Lexer for GoodData MAQL scripts.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`, `pygments.token.Whitespace`, `pygments.lexers._openedge_builtins.OPENEDGEKEYWORDS`
**Type References**: [[ABAPLexer]], [[CobolFreeformatLexer]], [[CobolLexer]], [[GoodDataCLLexer]], [[MaqlLexer]], [[OpenEdgeLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**CobolLexer**

**CobolFreeformatLexer**

**ABAPLexer**

**OpenEdgeLexer**

**GoodDataCLLexer**

**MaqlLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/business.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`, `pygments.token.Whitespace`, `pygments.lexers._openedge_builtins.OPENEDGEKEYWORDS`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.tcl
:::{doc} TclLexer:19
For Tcl source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.util.shebang_matches`
**Type References**: [[TclLexer]]

### Interface
- `_gen_command_rules`() -> Any
- `analyse_text`() -> Any

### Implementation
**TclLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/tcl.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.util.shebang_matches`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.minecraft
:::{doc} SNBTLexer:29
Lexer for stringified NBT, a data format used in Minecraft
    
:::
:::{doc} MCFunctionLexer:101
Lexer for the mcfunction scripting language used in Minecraft
Modelled somewhat after the `GitHub mcfunction grammar <https://github.com/Arcensoth/language-mcfunction>`_.
:::
:::{doc} MCSchemaLexer:320
Lexer for Minecraft Add-ons data Schemas, an interface structure standard used in Minecraft
    
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`
**Type References**: [[MCFunctionLexer]], [[MCSchemaLexer]], [[SNBTLexer]]


### Implementation
**SNBTLexer**

**MCFunctionLexer**

**MCSchemaLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/minecraft.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.vip
:::{doc} VisualPrologLexer:86
Lexer for VisualProlog
    
:::
:::{doc} VisualPrologGrammarLexer:121
Lexer for VisualProlog grammar
    
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.inherit`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[VisualPrologBaseLexer]], [[VisualPrologGrammarLexer]], [[VisualPrologLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**VisualPrologBaseLexer**

**VisualPrologLexer**

**VisualPrologGrammarLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/vip.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.inherit`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.mips
:::{doc} MIPSLexer:17
A MIPS Assembly Lexer.

Based on the Emacs major mode by hlissner:
https://github.com/hlissner/emacs-mips-mode
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Whitespace`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Text`
**Type References**: [[MIPSLexer]]


### Implementation
**MIPSLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/mips.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Whitespace`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.meson
:::{doc} MesonLexer:18
Meson language lexer.

The grammar definition use to transcribe the syntax was retrieved from
https://mesonbuild.com/Syntax.html#grammar for version 0.58.
Some of those definitions are improperly transcribed, so the Meson++
implementation was also checked: https://github.com/dcbaker/meson-plus-plus.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[MesonLexer]]


### Implementation
**MesonLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/meson.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.basic
:::{doc} BlitzMaxLexer:23
For BlitzMax source code.
:::
:::{doc} BlitzBasicLexer:111
For BlitzBasic source code.
:::
:::{doc} MonkeyLexer:189
For Monkey source code.
:::
:::{doc} CbmBasicV2Lexer:317
For CBM BASIC V2 sources.
:::
:::{doc} QBasicLexer:355
For QBasic source code.
:::
:::{doc} VBScriptLexer:496
VBScript is scripting language that is modeled on Visual Basic.
:::
:::{doc} BBCBasicLexer:563
BBC Basic was supplied on the BBC Micro, and later Acorn RISC OS.
It is also used by BBC Basic For Windows.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`, `pygments.lexers._vbscript_builtins`
**Type References**: [[BBCBasicLexer]], [[BlitzBasicLexer]], [[BlitzMaxLexer]], [[CbmBasicV2Lexer]], [[MonkeyLexer]], [[QBasicLexer]], [[VBScriptLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**BlitzMaxLexer**

**BlitzBasicLexer**

**MonkeyLexer**

**CbmBasicV2Lexer**

**QBasicLexer**

**VBScriptLexer**

**BBCBasicLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/basic.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`, `pygments.lexers._vbscript_builtins`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._stan_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_stan_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.prql
:::{doc} PrqlLexer:18
For PRQL source code.

grammar: https://github.com/PRQL/prql/tree/main/grammars
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.combined`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Literal`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`
**Type References**: [[PrqlLexer]]

### Interface
- `innerstring_rules`() -> Any
- `fstring_rules`() -> Any

### Implementation
**PrqlLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/prql.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.combined`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Literal`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.eiffel
:::{doc} EiffelLexer:18
For Eiffel source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[EiffelLexer]]


### Implementation
**EiffelLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/eiffel.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.scdoc
:::{doc} ScdocLexer:19
`scdoc` is a simple man page generator for POSIX systems written in C99.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.String`, `pygments.token.Generic`
**Type References**: [[ScdocLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**ScdocLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/scdoc.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.String`, `pygments.token.Generic`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.dax
:::{doc} DaxLexer:18
Lexer for Power BI DAX
Referenced from: https://github.com/sql-bi/SyntaxHighlighterBrushDax
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Name`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Text`
**Type References**: [[DaxLexer]]


### Implementation
**DaxLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/dax.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Name`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.rdf
:::{doc} SparqlLexer:20
Lexer for SPARQL query language.
:::
:::{doc} TurtleLexer:178
Lexer for Turtle data language.
:::
:::{doc} ShExCLexer:323
Lexer for ShExC shape expressions language syntax.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Keyword`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Name`, `pygments.token.Literal`, `pygments.token.Comment`, `pygments.token.Text`
**Type References**: [[ShExCLexer]], [[SparqlLexer]], [[TurtleLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**SparqlLexer**

**TurtleLexer**

**ShExCLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/rdf.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Keyword`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Name`, `pygments.token.Literal`, `pygments.token.Comment`, `pygments.token.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.gleam
:::{doc} GleamLexer:18
Lexer for the Gleam programming language (version 1.0.0).
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[GleamLexer]]


### Implementation
**GleamLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/gleam.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.email
:::{doc} EmailHeaderLexer:19
Sub-lexer for raw E-mail. This lexer only process header part of e-mail.

.. versionadded:: 2.5
:::
:::{doc} EmailLexer:113
Lexer for raw E-mail.

Additional options accepted:

`highlight-X-header`
    Highlight the fields of ``X-`` user-defined email header. (default:
    ``False``).
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.bygroups`, `pygments.lexers.mime.MIMELexer`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Comment`, `pygments.util.get_bool_opt`
**Type References**: [[EmailHeaderLexer]], [[EmailLexer]]

### Interface
- `__init__`() -> Any
- `get_x_header_tokens`() -> Any

### Implementation
**EmailHeaderLexer**

**EmailLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/email.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.bygroups`, `pygments.lexers.mime.MIMELexer`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Comment`, `pygments.util.get_bool_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.sophia
:::{doc} SophiaLexer:19
A Sophia lexer.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`
**Type References**: [[SophiaLexer]]


### Implementation
**SophiaLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/sophia.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.modula2
:::{doc} Modula2Lexer:22
For Modula-2 source code.

The Modula-2 lexer supports several dialects.  By default, it operates in
fallback mode, recognising the *combined* literals, punctuation symbols
and operators of all supported dialects, and the *combined* reserved words
and builtins of PIM Modula-2, ISO Modula-2 and Modula-2 R10, while not
differentiating between library defined identifiers.

To select a specific dialect, a dialect option may be passed
or a dialect tag may be embedded into a source file.

Dialect Options:

`m2pim`
    Select PIM Modula-2 dialect.
`m2iso`
    Select ISO Modula-2 dialect.
`m2r10`
    Select Modula-2 R10 dialect.
`objm2`
    Select Objective Modula-2 dialect.

The PIM and ISO dialect options may be qualified with a language extension.

Language Extensions:

`+aglet`
    Select Aglet Modula-2 extensions, available with m2iso.
`+gm2`
    Select GNU Modula-2 extensions, available with m2pim.
`+p1`
    Select p1 Modula-2 extensions, available with m2iso.
`+xds`
    Select XDS Modula-2 extensions, available with m2iso.


Passing a Dialect Option via Unix Commandline Interface

Dialect options may be passed to the lexer using the `dialect` key.
Only one such option should be passed. If multiple dialect options are
passed, the first valid option is used, any subsequent options are ignored.

Examples:

`$ pygmentize -O full,dialect=m2iso -f html -o /path/to/output /path/to/input`
    Use ISO dialect to render input to HTML output
`$ pygmentize -O full,dialect=m2iso+p1 -f rtf -o /path/to/output /path/to/input`
    Use ISO dialect with p1 extensions to render input to RTF output


Embedding a Dialect Option within a source file

A dialect option may be embedded in a source file in form of a dialect
tag, a specially formatted comment that specifies a dialect option.

Dialect Tag EBNF::

   dialectTag :
       OpeningCommentDelim Prefix dialectOption ClosingCommentDelim ;

   dialectOption :
       'm2pim' | 'm2iso' | 'm2r10' | 'objm2' |
       'm2iso+aglet' | 'm2pim+gm2' | 'm2iso+p1' | 'm2iso+xds' ;

   Prefix : '!' ;

   OpeningCommentDelim : '(*' ;

   ClosingCommentDelim : '*)' ;

No whitespace is permitted between the tokens of a dialect tag.

In the event that a source file contains multiple dialect tags, the first
tag that contains a valid dialect option will be used and any subsequent
dialect tags will be ignored.  Ideally, a dialect tag should be placed
at the beginning of a source file.

An embedded dialect tag overrides a dialect option set via command line.

Examples:

``(*!m2r10*) DEFINITION MODULE Foobar; ...``
    Use Modula2 R10 dialect to render this source file.
``(*!m2pim+gm2*) DEFINITION MODULE Bazbam; ...``
    Use PIM dialect with GNU extensions to render this source file.


Algol Publication Mode:

In Algol publication mode, source text is rendered for publication of
algorithms in scientific papers and academic texts, following the format
of the Revised Algol-60 Language Report.  It is activated by passing
one of two corresponding styles as an option:

`algol`
    render reserved words lowercase underline boldface
    and builtins lowercase boldface italic
`algol_nu`
    render reserved words lowercase boldface (no underlining)
    and builtins lowercase boldface italic

The lexer automatically performs the required lowercase conversion when
this mode is activated.

Example:

``$ pygmentize -O full,style=algol -f latex -o /path/to/output /path/to/input``
    Render input file in Algol publication mode to LaTeX output.


Rendering Mode of First Class ADT Identifiers:

The rendering of standard library first class ADT identifiers is controlled
by option flag "treat_stdlib_adts_as_builtins".

When this option is turned on, standard library ADT identifiers are rendered
as builtins.  When it is turned off, they are rendered as ordinary library
identifiers.

`treat_stdlib_adts_as_builtins` (default: On)

The option is useful for dialects that support ADTs as first class objects
and provide ADTs in the standard library that would otherwise be built-in.

At present, only Modula-2 R10 supports library ADTs as first class objects
and therefore, no ADT identifiers are defined for any other dialects.

Example:

``$ pygmentize -O full,dialect=m2r10,treat_stdlib_adts_as_builtins=Off ...``
    Render standard library ADTs as ordinary library types.

.. versionchanged:: 2.1
   Added multi-dialect support.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.util.get_bool_opt`, `pygments.util.get_list_opt`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`
**Type References**: [[Modula2Lexer]]

### Interface
- `__init__`() -> Any
- `set_dialect`() -> Any
- `get_dialect_from_dialect_tag`() -> Any
- `get_tokens_unprocessed`() -> Any
- `analyse_text`() -> Any

### Implementation
**Modula2Lexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/modula2.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.util.get_bool_opt`, `pygments.util.get_list_opt`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Error`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.nit
:::{doc} NitLexer:18
For nit source.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`
**Type References**: [[NitLexer]]


### Implementation
**NitLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/nit.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.actionscript
:::{doc} ActionScriptLexer:20
For ActionScript source code.
:::
:::{doc} ActionScript3Lexer:118
For ActionScript 3 source code.
:::
:::{doc} MxmlLexer:203
For MXML markup.
Nested AS3 in <script> tags is highlighted by the appropriate lexer.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[ActionScript3Lexer]], [[ActionScriptLexer]], [[MxmlLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**ActionScriptLexer**

**ActionScript3Lexer**

**MxmlLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/actionscript.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.qlik
:::{doc} QlikLexer:22
Lexer for qlik code, including .qvs files
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.lexers._qlik_builtins.OPERATORS_LIST`, `pygments.lexers._qlik_builtins.STATEMENT_LIST`, `pygments.lexers._qlik_builtins.SCRIPT_FUNCTIONS`, `pygments.lexers._qlik_builtins.CONSTANT_LIST`
**Type References**: [[QlikLexer]]


### Implementation
**QlikLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/qlik.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.lexers._qlik_builtins.OPERATORS_LIST`, `pygments.lexers._qlik_builtins.STATEMENT_LIST`, `pygments.lexers._qlik_builtins.SCRIPT_FUNCTIONS`, `pygments.lexers._qlik_builtins.CONSTANT_LIST`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.text

**Imports**: `pygments.lexers.configs.ApacheConfLexer`, `pygments.lexers.configs.NginxConfLexer`, `pygments.lexers.configs.SquidConfLexer`, `pygments.lexers.configs.LighttpdConfLexer`, `pygments.lexers.configs.IniLexer`, `pygments.lexers.configs.RegeditLexer`, `pygments.lexers.configs.PropertiesLexer`, `pygments.lexers.configs.UnixConfigLexer`, `pygments.lexers.console.PyPyLogLexer`, `pygments.lexers.textedit.VimLexer`, `pygments.lexers.markup.BBCodeLexer`, `pygments.lexers.markup.MoinWikiLexer`, `pygments.lexers.markup.RstLexer`, `pygments.lexers.markup.TexLexer`, `pygments.lexers.markup.GroffLexer`, `pygments.lexers.installers.DebianControlLexer`, `pygments.lexers.installers.DebianSourcesLexer`, `pygments.lexers.installers.SourcesListLexer`, `pygments.lexers.make.MakefileLexer`, `pygments.lexers.make.BaseMakefileLexer`, `pygments.lexers.make.CMakeLexer`, `pygments.lexers.haxe.HxmlLexer`, `pygments.lexers.sgf.SmartGameFormatLexer`, `pygments.lexers.diff.DiffLexer`, `pygments.lexers.diff.DarcsPatchLexer`, `pygments.lexers.data.YamlLexer`, `pygments.lexers.textfmts.IrcLogsLexer`, `pygments.lexers.textfmts.GettextLexer`, `pygments.lexers.textfmts.HttpLexer`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/text.py`  
**Dependencies**: `pygments.lexers.configs.ApacheConfLexer`, `pygments.lexers.configs.NginxConfLexer`, `pygments.lexers.configs.SquidConfLexer`, `pygments.lexers.configs.LighttpdConfLexer`, `pygments.lexers.configs.IniLexer`, `pygments.lexers.configs.RegeditLexer`, `pygments.lexers.configs.PropertiesLexer`, `pygments.lexers.configs.UnixConfigLexer`, `pygments.lexers.console.PyPyLogLexer`, `pygments.lexers.textedit.VimLexer`, `pygments.lexers.markup.BBCodeLexer`, `pygments.lexers.markup.MoinWikiLexer`, `pygments.lexers.markup.RstLexer`, `pygments.lexers.markup.TexLexer`, `pygments.lexers.markup.GroffLexer`, `pygments.lexers.installers.DebianControlLexer`, `pygments.lexers.installers.DebianSourcesLexer`, `pygments.lexers.installers.SourcesListLexer`, `pygments.lexers.make.MakefileLexer`, `pygments.lexers.make.BaseMakefileLexer`, `pygments.lexers.make.CMakeLexer`, `pygments.lexers.haxe.HxmlLexer`, `pygments.lexers.sgf.SmartGameFormatLexer`, `pygments.lexers.diff.DiffLexer`, `pygments.lexers.diff.DarcsPatchLexer`, `pygments.lexers.data.YamlLexer`, `pygments.lexers.textfmts.IrcLogsLexer`, `pygments.lexers.textfmts.GettextLexer`, `pygments.lexers.textfmts.HttpLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.apl
:::{doc} APLLexer:18
A simple APL lexer.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[APLLexer]]


### Implementation
**APLLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/apl.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._cl_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_cl_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._mql_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_mql_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.srcinfo
:::{doc} SrcinfoLexer:35
Lexer for .SRCINFO files used by Arch Linux Packages.
    
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Operator`, `pygments.token.Whitespace`
**Type References**: [[SrcinfoLexer]]


### Implementation
**SrcinfoLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/srcinfo.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Operator`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.rego
:::{doc} RegoLexer:14
For Rego source.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[RegoLexer]]


### Implementation
**RegoLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/rego.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.archetype
:::{doc} AtomsLexer:23
Lexer for Values used in ADL and ODIN.

.. versionadded:: 2.1
:::
:::{doc} OdinLexer:135
Lexer for ODIN syntax.
:::
:::{doc} CadlLexer:184
Lexer for cADL syntax.
:::
:::{doc} AdlLexer:249
Lexer for ADL syntax.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Literal`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Keyword`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[AdlLexer]], [[AtomsLexer]], [[CadlLexer]], [[OdinLexer]]


### Implementation
**AtomsLexer**

**OdinLexer**

**CadlLexer**

**AdlLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/archetype.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Literal`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Keyword`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.python
:::{doc} PythonLexer:25
For Python source code (version 3.x).

.. versionchanged:: 2.5
   This is now the default ``PythonLexer``.  It is still available as the
   alias ``Python3Lexer``.
:::
:::{doc} Python2Lexer:416
For Python 2.x source code.

.. versionchanged:: 2.5
   This class has been renamed from ``PythonLexer``.  ``PythonLexer`` now
   refers to the Python 3 variant.  File name patterns like ``*.py`` have
   been moved to Python 3 as well.
:::
:::{doc} PythonConsoleLexer:676
For Python console output or doctests, such as:

.. sourcecode:: pycon

    >>> a = 'foo'
    >>> print(a)
    foo
    >>> 1 / 0
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    ZeroDivisionError: integer division or modulo by zero

Additional options:

`python3`
    Use Python 3 lexer for code.  Default is ``True``.

    .. versionadded:: 1.0
    .. versionchanged:: 2.5
       Now defaults to ``True``.
:::
:::{doc} PythonTracebackLexer:725
For Python 3.x tracebacks, with support for chained exceptions.

.. versionchanged:: 2.5
   This is now the default ``PythonTracebackLexer``.  It is still available
   as the alias ``Python3TracebackLexer``.
:::
:::{doc} Python2TracebackLexer:782
For Python tracebacks.

.. versionchanged:: 2.5
   This class has been renamed from ``PythonTracebackLexer``.
   ``PythonTracebackLexer`` now refers to the Python 3 variant.
:::
:::{doc} CythonLexer:830
For Pyrex and Cython source code.
:::
:::{doc} DgLexer:1009
Lexer for dg,
a functional and object-oriented programming language
running on the CPython 3 VM.
:::
:::{doc} NumPyLexer:1108
A Python lexer recognizing Numerical Python builtins.
:::
**Imports**: `keyword`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.combined`, `pygments.lexer.this`, `pygments.util.get_bool_opt`, `pygments.util.shebang_matches`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Other`, `pygments.token.Error`, `pygments.token.Whitespace`, `pygments.unistring`
**Type References**: [[CythonLexer]], [[DgLexer]], [[NumPyLexer]], [[Python2Lexer]], [[Python2TracebackLexer]], [[PythonConsoleLexer]], [[PythonLexer]], [[PythonTracebackLexer]], [[_PythonConsoleLexerBase]], [[_ReplaceInnerCode]]

### Interface
- `innerstring_rules`() -> Any
- `fstring_rules`() -> Any
- `analyse_text`() -> Any
- `__init__`() -> Any
- `get_tokens_unprocessed`() -> Any

### Implementation
**PythonLexer**

**Python2Lexer**

**_PythonConsoleLexerBase**

**PythonConsoleLexer**

**PythonTracebackLexer**

**Python2TracebackLexer**

**CythonLexer**

**DgLexer**

**NumPyLexer**

**_ReplaceInnerCode**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/python.py`  
**Dependencies**: `keyword`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.lexer.combined`, `pygments.lexer.this`, `pygments.util.get_bool_opt`, `pygments.util.shebang_matches`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Other`, `pygments.token.Error`, `pygments.token.Whitespace`, `pygments.unistring`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._csound_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_csound_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.factor
:::{doc} FactorLexer:18
Lexer for the Factor language.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.token.Punctuation`
**Type References**: [[FactorLexer]]


### Implementation
**FactorLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/factor.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.dalvik
:::{doc} SmaliLexer:20
For Smali (Android/Dalvik) assembly
code.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Keyword`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[SmaliLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**SmaliLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/dalvik.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Keyword`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.go
:::{doc} GoLexer:18
For Go source.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[GoLexer]]


### Implementation
**GoLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/go.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.berry
:::{doc} BerryLexer:18
For Berry source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Whitespace`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`
**Type References**: [[BerryLexer]]


### Implementation
**BerryLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/berry.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Whitespace`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.unicon
:::{doc} UniconLexer:20
For Unicon source code.
:::
:::{doc} IconLexer:166
Lexer for Icon.
:::
:::{doc} UcodeLexer:307
Lexer for Icon ucode files.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`
**Type References**: [[IconLexer]], [[UcodeLexer]], [[UniconLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**UniconLexer**

**IconLexer**

**UcodeLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/unicon.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._usd_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_usd_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.cddl
:::{doc} CddlLexer:22
Lexer for CDDL definitions.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[CddlLexer]]


### Implementation
**CddlLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/cddl.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.dylan
:::{doc} DylanLexer:21
For the Dylan language.
:::
:::{doc} DylanLidLexer:213
For Dylan LID (Library Interchange Definition) files.
:::
:::{doc} DylanConsoleLexer:241
For Dylan interactive console output.

This is based on a copy of the ``RubyConsoleLexer``.
:::
**Imports**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.do_insertions`, `pygments.lexer.default`, `pygments.lexer.line_re`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Literal`, `pygments.token.Whitespace`
**Type References**: [[DylanConsoleLexer]], [[DylanLexer]], [[DylanLidLexer]]

### Interface
- `get_tokens_unprocessed`() -> Any

### Implementation
**DylanLexer**

**DylanLidLexer**

**DylanConsoleLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/dylan.py`  
**Dependencies**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.do_insertions`, `pygments.lexer.default`, `pygments.lexer.line_re`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Literal`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.make
:::{doc} MakefileLexer:22
Lexer for BSD and GNU make extensions (lenient enough to handle both in
the same file even).

*Rewritten in Pygments 0.10.*
:::
:::{doc} BaseMakefileLexer:69
Lexer for simple Makefiles (no preprocessing).
:::
:::{doc} CMakeLexer:131
Lexer for CMake files.
:::
**Imports**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.do_insertions`, `pygments.lexer.using`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.lexers.shell.BashLexer`
**Type References**: [[BaseMakefileLexer]], [[CMakeLexer]], [[MakefileLexer]]

### Interface
- `get_tokens_unprocessed`() -> Any
- `analyse_text`() -> Any

### Implementation
**MakefileLexer**

**BaseMakefileLexer**

**CMakeLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/make.py`  
**Dependencies**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.do_insertions`, `pygments.lexer.using`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.lexers.shell.BashLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.diff
:::{doc} DiffLexer:20
Lexer for unified or context-style diffs or patches.
:::
:::{doc} DarcsPatchLexer:57
DarcsPatchLexer is a lexer for the various versions of the darcs patch
format.  Examples of this format are derived by commands such as
``darcs annotate --patch`` and ``darcs send``.
:::
:::{doc} WDiffLexer:115
A wdiff lexer.

Note that:

* It only works with normal output (without options like ``-l``).
* If the target files contain "[-", "-]", "{+", or "+}",
  especially they are unbalanced, the lexer will get confused.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Generic`, `pygments.token.Literal`, `pygments.token.Whitespace`
**Type References**: [[DarcsPatchLexer]], [[DiffLexer]], [[WDiffLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**DiffLexer**

**DarcsPatchLexer**

**WDiffLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/diff.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Generic`, `pygments.token.Literal`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.xorg
:::{doc} XorgLexer:17
Lexer for xorg.conf files.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Name`, `pygments.token.Text`
**Type References**: [[XorgLexer]]


### Implementation
**XorgLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/xorg.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Name`, `pygments.token.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.trafficscript
:::{doc} RtsLexer:17
For Riverbed Stingray Traffic Manager
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Name`, `pygments.token.Keyword`, `pygments.token.Operator`, `pygments.token.Text`, `pygments.token.Comment`
**Type References**: [[RtsLexer]]


### Implementation
**RtsLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/trafficscript.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Name`, `pygments.token.Keyword`, `pygments.token.Operator`, `pygments.token.Text`, `pygments.token.Comment`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.kuin
:::{doc} KuinLexer:18
For Kuin source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[KuinLexer]]


### Implementation
**KuinLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/kuin.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.jvm
:::{doc} JavaLexer:26
For Java source code.
:::
:::{doc} AspectJLexer:119
For AspectJ source code.
:::
:::{doc} ScalaLexer:158
For Scala source code.
:::
:::{doc} GosuLexer:443
For Gosu source code.
:::
:::{doc} GosuTemplateLexer:522
For Gosu templates.
:::
:::{doc} GroovyLexer:540
For Groovy source code.
:::
:::{doc} IokeLexer:617
For Ioke (a strongly typed, dynamic,
prototype based programming language) source.
:::
:::{doc} ClojureLexer:808
Lexer for Clojure source code.
:::
:::{doc} ClojureScriptLexer:948
Lexer for ClojureScript source code.
:::
:::{doc} TeaLangLexer:960
For Tea source code. Only used within a
TeaTemplateLexer.

.. versionadded:: 1.5
:::
:::{doc} CeylonLexer:1007
For Ceylon source code.
:::
:::{doc} KotlinLexer:1086
For Kotlin source code.
:::
:::{doc} XtendLexer:1241
For Xtend source code.
:::
:::{doc} PigLexer:1306
For Pig Latin source code.
:::
:::{doc} GoloLexer:1373
For Golo source code.
:::
:::{doc} JasminLexer:1486
For Jasmin assembly code.
:::
:::{doc} SarlLexer:1746
For SARL source code.
:::
**Imports**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.combined`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.util.shebang_matches`, `pygments.unistring`
**Type References**: [[AspectJLexer]], [[CeylonLexer]], [[ClojureLexer]], [[ClojureScriptLexer]], [[GoloLexer]], [[GosuLexer]], [[GosuTemplateLexer]], [[GroovyLexer]], [[IokeLexer]], [[JasminLexer]], [[JavaLexer]], [[KotlinLexer]], [[PigLexer]], [[SarlLexer]], [[ScalaLexer]], [[TeaLangLexer]], [[XtendLexer]]

### Interface
- `get_tokens_unprocessed`() -> Any
- `analyse_text`() -> Any

### Implementation
**JavaLexer**

**AspectJLexer**

**ScalaLexer**

**GosuLexer**

**GosuTemplateLexer**

**GroovyLexer**

**IokeLexer**

**ClojureLexer**

**ClojureScriptLexer**

**TeaLangLexer**

**CeylonLexer**

**KotlinLexer**

**XtendLexer**

**PigLexer**

**GoloLexer**

**JasminLexer**

**SarlLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/jvm.py`  
**Dependencies**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.combined`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.util.shebang_matches`, `pygments.unistring`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.smv
:::{doc} NuSMVLexer:18
Lexer for the NuSMV language.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.Text`
**Type References**: [[NuSMVLexer]]


### Implementation
**NuSMVLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/smv.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.math

**Imports**: `pygments.lexers.python.NumPyLexer`, `pygments.lexers.matlab.MatlabLexer`, `pygments.lexers.matlab.MatlabSessionLexer`, `pygments.lexers.matlab.OctaveLexer`, `pygments.lexers.matlab.ScilabLexer`, `pygments.lexers.julia.JuliaLexer`, `pygments.lexers.julia.JuliaConsoleLexer`, `pygments.lexers.r.RConsoleLexer`, `pygments.lexers.r.SLexer`, `pygments.lexers.r.RdLexer`, `pygments.lexers.modeling.BugsLexer`, `pygments.lexers.modeling.JagsLexer`, `pygments.lexers.modeling.StanLexer`, `pygments.lexers.idl.IDLLexer`, `pygments.lexers.algebra.MuPADLexer`

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/math.py`  
**Dependencies**: `pygments.lexers.python.NumPyLexer`, `pygments.lexers.matlab.MatlabLexer`, `pygments.lexers.matlab.MatlabSessionLexer`, `pygments.lexers.matlab.OctaveLexer`, `pygments.lexers.matlab.ScilabLexer`, `pygments.lexers.julia.JuliaLexer`, `pygments.lexers.julia.JuliaConsoleLexer`, `pygments.lexers.r.RConsoleLexer`, `pygments.lexers.r.SLexer`, `pygments.lexers.r.RdLexer`, `pygments.lexers.modeling.BugsLexer`, `pygments.lexers.modeling.JagsLexer`, `pygments.lexers.modeling.StanLexer`, `pygments.lexers.idl.IDLLexer`, `pygments.lexers.algebra.MuPADLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.tact
:::{doc} TactLexer:18
For Tact source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.token.Punctuation`
**Type References**: [[TactLexer]]


### Implementation
**TactLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/tact.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.promql
:::{doc} PromQLLexer:18
For PromQL queries.

For details about the grammar see:
https://github.com/prometheus/prometheus/tree/master/promql/parser

.. versionadded: 2.7
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[PromQLLexer]]


### Implementation
**PromQLLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/promql.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.php
:::{doc} ZephirLexer:22
For Zephir language source code.

Zephir is a compiled high level language aimed
to the creation of C-extensions for PHP.
:::
:::{doc} PsyshConsoleLexer:87
For PsySH console output, such as:

.. sourcecode:: psysh

    >>> $greeting = function($name): string {
    ...     return "Hello, {$name}";
    ... };
    => Closure($name): string {#2371 …3}
    >>> $greeting('World')
    => "Hello, World"
:::
:::{doc} PhpLexer:135
For PHP source code.
For PHP embedded in HTML, use the `HtmlPhpLexer`.

Additional options accepted:

`startinline`
    If given and ``True`` the lexer starts highlighting with
    php code (i.e.: no starting ``<?php`` required).  The default
    is ``False``.
`funcnamehighlighting`
    If given and ``True``, highlight builtin function names
    (default: ``True``).
`disabledmodules`
    If given, must be a list of module names whose function names
    should not be highlighted. By default all modules are highlighted
    except the special ``'unknown'`` module that includes functions
    that are known to php but are undocumented.

    To get a list of allowed modules have a look into the
    `_php_builtins` module:

    .. sourcecode:: pycon

        >>> from pygments.lexers._php_builtins import MODULES
        >>> MODULES.keys()
        ['PHP Options/Info', 'Zip', 'dba', ...]

    In fact the names of those modules match the module names from
    the php documentation.
:::
**Imports**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.words`, `pygments.lexer.do_insertions`, `pygments.lexer.line_re`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Generic`, `pygments.util.get_bool_opt`, `pygments.util.get_list_opt`, `pygments.util.shebang_matches`, `pygments.lexers._php_builtins.MODULES`
**Type References**: [[PhpLexer]], [[PsyshConsoleLexer]], [[ZephirLexer]]

### Interface
- `__init__`() -> Any
- `get_tokens_unprocessed`() -> Any
- `analyse_text`() -> Any

### Implementation
**ZephirLexer**

**PsyshConsoleLexer**

**PhpLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/php.py`  
**Dependencies**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.words`, `pygments.lexer.do_insertions`, `pygments.lexer.line_re`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Generic`, `pygments.util.get_bool_opt`, `pygments.util.get_list_opt`, `pygments.util.shebang_matches`, `pygments.lexers._php_builtins.MODULES`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.sql
:::{doc} language_callback:89
Parse the content of a $-string using a lexer

The lexer is chosen looking for a nearby LANGUAGE or assumed as
plpgsql if inside a DO statement and no LANGUAGE has been found.
:::
:::{doc} PostgresBase:125
Base class for Postgres-related lexers.

This is implemented as a mixin to avoid the Lexer metaclass kicking in.
this way the different lexer don't have a common Lexer ancestor. If they
had, _tokens could be created on this ancestor and not updated for the
other classes, resulting e.g. in PL/pgSQL parsed as SQL. This shortcoming
seem to suggest that regexp lexers are not really subclassable.
:::
:::{doc} PostgresLexer:162
Lexer for the PostgreSQL dialect of SQL.
:::
:::{doc} PlPgsqlLexer:218
Handle the extra syntax in Pl/pgSQL language.
:::
:::{doc} PsqlRegexLexer:252
Extend the PostgresLexer adding support specific for psql commands.

This is not a complete psql lexer yet as it lacks prompt support
and output rendering.
:::
:::{doc} lookahead:289
Wrap an iterator and allow pushing back an item.
:::
:::{doc} PostgresConsoleLexer:311
Lexer for psql sessions.
:::
:::{doc} PostgresExplainLexer:384
Handle PostgreSQL EXPLAIN output
:::
:::{doc} SqlLexer:570
Lexer for Structured Query Language. Currently, this lexer does
not recognize any special syntax except ANSI SQL.
:::
:::{doc} TransactSqlLexer:704
Transact-SQL (T-SQL) is Microsoft's and Sybase's proprietary extension to
SQL.

The list of keywords includes ODBC and keywords reserved for future use..
:::
:::{doc} MySqlLexer:790
The Oracle MySQL lexer.

This lexer does not attempt to maintain strict compatibility with
MariaDB syntax or keywords. Although MySQL and MariaDB's common code
history suggests there may be significant overlap between the two,
compatibility between the two is not a target for this lexer.
:::
:::{doc} GoogleSqlLexer:975
GoogleSQL is Google's standard SQL dialect, formerly known as ZetaSQL.

The list of keywords includes reserved words for future use.
:::
:::{doc} SqliteConsoleLexer:1135
Lexer for example sessions using sqlite3.
:::
:::{doc} RqlLexer:1177
Lexer for Relation Query Language.
:::
**Imports**: `collections`, `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.do_insertions`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Generic`, `pygments.token.Literal`, `pygments.lexers.get_lexer_by_name`, `pygments.lexers.ClassNotFound`, `pygments.lexers._postgres_builtins.KEYWORDS`, `pygments.lexers._postgres_builtins.DATATYPES`, `pygments.lexers._postgres_builtins.PSEUDO_TYPES`, `pygments.lexers._postgres_builtins.PLPGSQL_KEYWORDS`, `pygments.lexers._postgres_builtins.EXPLAIN_KEYWORDS`, `pygments.lexers._mysql_builtins.MYSQL_CONSTANTS`, `pygments.lexers._mysql_builtins.MYSQL_DATATYPES`, `pygments.lexers._mysql_builtins.MYSQL_FUNCTIONS`, `pygments.lexers._mysql_builtins.MYSQL_KEYWORDS`, `pygments.lexers._mysql_builtins.MYSQL_OPTIMIZER_HINTS`, `pygments.lexers._googlesql_builtins`, `pygments.lexers._tsql_builtins`
**Type References**: [[GoogleSqlLexer]], [[MySqlLexer]], [[PlPgsqlLexer]], [[PostgresBase]], [[PostgresConsoleLexer]], [[PostgresExplainLexer]], [[PostgresLexer]], [[PsqlRegexLexer]], [[RqlLexer]], [[SqlLexer]], [[SqliteConsoleLexer]], [[TransactSqlLexer]], [[lookahead]]

### Interface
- `language_callback`() -> Any
- `get_tokens_unprocessed`() -> Any
- `_get_lexer`() -> Any
- `__init__`() -> Any
- `__iter__`() -> Any
- `send`() -> Any
- `__next__`() -> Any
- `analyse_text`() -> Any

### Implementation
**PostgresBase**

**PostgresLexer**

**PlPgsqlLexer**

**PsqlRegexLexer**

**lookahead**

**PostgresConsoleLexer**

**PostgresExplainLexer**

**SqlLexer**

**TransactSqlLexer**

**MySqlLexer**

**GoogleSqlLexer**

**SqliteConsoleLexer**

**RqlLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/sql.py`  
**Dependencies**: `collections`, `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.do_insertions`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Generic`, `pygments.token.Literal`, `pygments.lexers.get_lexer_by_name`, `pygments.lexers.ClassNotFound`, `pygments.lexers._postgres_builtins.KEYWORDS`, `pygments.lexers._postgres_builtins.DATATYPES`, `pygments.lexers._postgres_builtins.PSEUDO_TYPES`, `pygments.lexers._postgres_builtins.PLPGSQL_KEYWORDS`, `pygments.lexers._postgres_builtins.EXPLAIN_KEYWORDS`, `pygments.lexers._mysql_builtins.MYSQL_CONSTANTS`, `pygments.lexers._mysql_builtins.MYSQL_DATATYPES`, `pygments.lexers._mysql_builtins.MYSQL_FUNCTIONS`, `pygments.lexers._mysql_builtins.MYSQL_KEYWORDS`, `pygments.lexers._mysql_builtins.MYSQL_OPTIMIZER_HINTS`, `pygments.lexers._googlesql_builtins`, `pygments.lexers._tsql_builtins`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.x10
:::{doc} X10Lexer:17
For the X10 language.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.String`
**Type References**: [[X10Lexer]]


### Implementation
**X10Lexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/x10.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.String`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.json5
:::{doc} Json5Lexer:34
Lexer for JSON5 data structures.
:::
**Imports**: `pygments.lexer.include`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[Json5Lexer]]

### Interface
- `string_rules`() -> Any
- `quoted_field_name`() -> Any

### Implementation
**Json5Lexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/json5.py`  
**Dependencies**: `pygments.lexer.include`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._mapping



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_mapping.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.gcodelexer
:::{doc} GcodeLexer:17
For gcode source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.Number`
**Type References**: [[GcodeLexer]]


### Implementation
**GcodeLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/gcodelexer.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Text`, `pygments.token.Keyword`, `pygments.token.Number`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.praat
:::{doc} PraatLexer:18
For Praat scripts.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.token.Name`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Whitespace`
**Type References**: [[PraatLexer]]


### Implementation
**PraatLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/praat.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.token.Name`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.lean
:::{doc} Lean3Lexer:19
For the Lean 3 theorem prover.
:::
:::{doc} Lean4Lexer:135
For the Lean 4 theorem prover.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[Lean3Lexer]], [[Lean4Lexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**Lean3Lexer**

**Lean4Lexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/lean.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.bibtex
:::{doc} BibTeXLexer:21
A lexer for BibTeX bibliography data format.
:::
:::{doc} BSTLexer:116
A lexer for BibTeX bibliography styles.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.include`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Keyword`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[BSTLexer]], [[BibTeXLexer]]

### Interface
- `open_brace_callback`() -> Any
- `close_brace_callback`() -> Any

### Implementation
**BibTeXLexer**

**BSTLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/bibtex.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.include`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Keyword`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.whiley
:::{doc} WhileyLexer:18
Lexer for the Whiley programming language.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`
**Type References**: [[WhileyLexer]]


### Implementation
**WhileyLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/whiley.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.q
:::{doc} KLexer:18
For K source code.
:::
:::{doc} QLexer:152
For `Q <https://code.kx.com/>`_ source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.inherit`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`, `pygments.token.Literal`, `pygments.token.Generic`
**Type References**: [[KLexer]], [[QLexer]]


### Implementation
**KLexer**

**QLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/q.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.inherit`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`, `pygments.token.Literal`, `pygments.token.Generic`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.snobol
:::{doc} SnobolLexer:18
Lexer for the SNOBOL4 programming language.

Recognizes the common ASCII equivalents of the original SNOBOL4 operators.
Does not require spaces around binary operators.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`
**Type References**: [[SnobolLexer]]


### Implementation
**SnobolLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/snobol.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._mysql_builtins

**Imports**: `re`, `urllib.request.urlopen`, `pygments.util.format_lines`
### Interface
- `update_myself`() -> Any
- `parse_lex_keywords`() -> Any
- `parse_lex_optimizer_hints`() -> Any
- `parse_lex_functions`() -> Any
- `parse_item_create_functions`() -> Any
- `update_content`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_mysql_builtins.py`  
**Dependencies**: `re`, `urllib.request.urlopen`, `pygments.util.format_lines`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.webidl
:::{doc} WebIDLLexer:39
For Web IDL.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`
**Type References**: [[WebIDLLexer]]


### Implementation
**WebIDLLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/webidl.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.rita
:::{doc} RitaLexer:18
Lexer for RITA.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Literal`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[RitaLexer]]


### Implementation
**RitaLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/rita.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Literal`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.haskell
:::{doc} HaskellLexer:24
A Haskell lexer based on the lexemes defined in the Haskell 98 Report.
:::
:::{doc} HspecLexer:156
A Haskell lexer with support for Hspec constructs.
:::
:::{doc} IdrisLexer:177
A lexer for the dependently typed programming language Idris.

Based on the Haskell and Agda Lexer.
:::
:::{doc} AgdaLexer:288
For the Agda dependently typed functional programming language and
proof assistant.
:::
:::{doc} CryptolLexer:361
FIXME: A Cryptol2 lexer based on the lexemes defined in the Haskell 98 Report.
:::
:::{doc} LiterateLexer:498
Base class for lexers of literate file formats based on LaTeX or Bird-style
(prefixing each code line with ">").

Additional options accepted:

`litstyle`
    If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
    is autodetected: if the first non-whitespace character in the source
    is a backslash or percent character, LaTeX is assumed, else Bird.
:::
:::{doc} LiterateHaskellLexer:562
For Literate Haskell (Bird-style or LaTeX) source.

Additional options accepted:

`litstyle`
    If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
    is autodetected: if the first non-whitespace character in the source
    is a backslash or percent character, LaTeX is assumed, else Bird.
:::
:::{doc} LiterateIdrisLexer:585
For Literate Idris (Bird-style or LaTeX) source.

Additional options accepted:

`litstyle`
    If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
    is autodetected: if the first non-whitespace character in the source
    is a backslash or percent character, LaTeX is assumed, else Bird.
:::
:::{doc} LiterateAgdaLexer:608
For Literate Agda source.

Additional options accepted:

`litstyle`
    If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
    is autodetected: if the first non-whitespace character in the source
    is a backslash or percent character, LaTeX is assumed, else Bird.
:::
:::{doc} LiterateCryptolLexer:631
For Literate Cryptol (Bird-style or LaTeX) source.

Additional options accepted:

`litstyle`
    If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
    is autodetected: if the first non-whitespace character in the source
    is a backslash or percent character, LaTeX is assumed, else Bird.
:::
:::{doc} KokaLexer:654
Lexer for the Koka language.
:::
**Imports**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.do_insertions`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.inherit`, `pygments.lexer.line_re`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.unistring`, `pygments.lexers.markup.TexLexer`
**Type References**: [[AgdaLexer]], [[CryptolLexer]], [[HaskellLexer]], [[HspecLexer]], [[IdrisLexer]], [[KokaLexer]], [[LiterateAgdaLexer]], [[LiterateCryptolLexer]], [[LiterateHaskellLexer]], [[LiterateIdrisLexer]], [[LiterateLexer]]

### Interface
- `get_tokens_unprocessed`() -> Any
- `__init__`() -> Any

### Implementation
**HaskellLexer**

**HspecLexer**

**IdrisLexer**

**AgdaLexer**

**CryptolLexer**

**LiterateLexer**

**LiterateHaskellLexer**

**LiterateIdrisLexer**

**LiterateAgdaLexer**

**LiterateCryptolLexer**

**KokaLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/haskell.py`  
**Dependencies**: `re`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.do_insertions`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.inherit`, `pygments.lexer.line_re`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.unistring`, `pygments.lexers.markup.TexLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.testing
:::{doc} GherkinLexer:17
For Gherkin syntax.
:::
:::{doc} TAPLexer:136
For Test Anything Protocol (TAP) output.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Generic`, `pygments.token.Text`
**Type References**: [[GherkinLexer]], [[TAPLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**GherkinLexer**

**TAPLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/testing.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Generic`, `pygments.token.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.fortran
:::{doc} FortranLexer:20
Lexer for FORTRAN 90 code.
:::
:::{doc} FortranFixedLexer:172
Lexer for fixed format Fortran.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.using`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`
**Type References**: [[FortranFixedLexer]], [[FortranLexer]]

### Interface
- `_lex_fortran`() -> Any

### Implementation
**FortranLexer**

**FortranFixedLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/fortran.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.using`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.modeling
:::{doc} ModelicaLexer:23
For Modelica source code.
:::
:::{doc} BugsLexer:98
Pygments Lexer for OpenBugs and WinBugs
models.
:::
:::{doc} JagsLexer:193
Pygments Lexer for JAGS.
:::
:::{doc} StanLexer:281
Pygments Lexer for Stan models.

The Stan modeling language is specified in the *Stan Modeling Language
User's Guide and Reference Manual, v2.17.0*,
`pdf <https://github.com/stan-dev/stan/releases/download/v2.17.0/stan-reference-2.17.0.pdf>`__.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.lexers.html.HtmlLexer`, `pygments.lexers._stan_builtins`
**Type References**: [[BugsLexer]], [[JagsLexer]], [[ModelicaLexer]], [[StanLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**ModelicaLexer**

**BugsLexer**

**JagsLexer**

**StanLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/modeling.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.lexers.html.HtmlLexer`, `pygments.lexers._stan_builtins`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.arturo
:::{doc} ArturoLexer:21
For Arturo source code.

See `Arturo's Github <https://github.com/arturo-lang/arturo>`_
and `Arturo's Website <https://arturo-lang.io/>`_.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.do_insertions`, `pygments.lexer.include`, `pygments.lexer.this`, `pygments.lexer.using`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.util.ClassNotFound`, `pygments.util.get_bool_opt`, `pygments.lexers.get_lexer_by_name`
**Type References**: [[ArturoLexer]]

### Interface
- `__init__`() -> Any
- `handle_annotated_strings`() -> Any

### Implementation
**ArturoLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/arturo.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.do_insertions`, `pygments.lexer.include`, `pygments.lexer.this`, `pygments.lexer.using`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.util.ClassNotFound`, `pygments.util.get_bool_opt`, `pygments.lexers.get_lexer_by_name`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.varnish
:::{doc} VCLLexer:19
For Varnish Configuration Language (VCL).
:::
:::{doc} VCLSnippetLexer:160
For Varnish Configuration Language snippets.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.inherit`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Literal`, `pygments.token.Whitespace`
**Type References**: [[VCLLexer]], [[VCLSnippetLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**VCLLexer**

**VCLSnippetLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/varnish.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.inherit`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Literal`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.elm
:::{doc} ElmLexer:18
For Elm source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[ElmLexer]]


### Implementation
**ElmLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/elm.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.asc
:::{doc} AscLexer:18
Lexer for ASCII armored files, containing `-----BEGIN/END ...-----` wrapped
base64 data.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Generic`, `pygments.token.Name`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[AscLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**AscLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/asc.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Generic`, `pygments.token.Name`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.javascript
:::{doc} JavascriptLexer:33
For JavaScript source code.
:::
:::{doc} TypeScriptLexer:140
For TypeScript source code.
:::
:::{doc} KalLexer:179
For Kal source code.
:::
:::{doc} LiveScriptLexer:312
For LiveScript source code.
:::
:::{doc} DartLexer:424
For Dart source code.
:::
:::{doc} LassoLexer:527
For Lasso source code, covering both Lasso 9
syntax and LassoScript for Lasso 8.6 and earlier. For Lasso embedded in
HTML, use the `LassoHtmlLexer`.

Additional options accepted:

`builtinshighlighting`
    If given and ``True``, highlight builtin types, traits, methods, and
    members (default: ``True``).
`requiredelimiters`
    If given and ``True``, only highlight code between delimiters as Lasso
    (default: ``False``).
:::
:::{doc} ObjectiveJLexer:792
For Objective-J source code with preprocessor directives.
:::
:::{doc} CoffeeScriptLexer:1015
For CoffeeScript source code.
:::
:::{doc} MaskLexer:1128
For Mask markup.
:::
:::{doc} EarlGreyLexer:1247
For Earl-Grey source code.

.. versionadded: 2.1
:::
:::{doc} JuttleLexer:1463
For Juttle source code.
:::
:::{doc} NodeConsoleLexer:1530
For parsing within an interactive Node.js REPL, such as:

.. sourcecode:: nodejsrepl

    > let a = 3
    undefined
    > a
    3
    > let b = '4'
    undefined
    > b
    '4'
    > b == a
    false

.. versionadded: 2.10
:::
**Imports**: `re`, `pygments.lexer.bygroups`, `pygments.lexer.combined`, `pygments.lexer.default`, `pygments.lexer.do_insertions`, `pygments.lexer.include`, `pygments.lexer.inherit`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.this`, `pygments.lexer.using`, `pygments.lexer.words`, `pygments.lexer.line_re`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.util.get_bool_opt`, `pygments.unistring`, `pygments.lexers._lasso_builtins.BUILTINS`, `pygments.lexers._lasso_builtins.MEMBERS`
**Type References**: [[CoffeeScriptLexer]], [[DartLexer]], [[EarlGreyLexer]], [[JavascriptLexer]], [[JuttleLexer]], [[KalLexer]], [[LassoLexer]], [[LiveScriptLexer]], [[MaskLexer]], [[NodeConsoleLexer]], [[ObjectiveJLexer]], [[TypeScriptLexer]]

### Interface
- `__init__`() -> Any
- `get_tokens_unprocessed`() -> Any
- `analyse_text`() -> Any

### Implementation
**JavascriptLexer**

**TypeScriptLexer**

**KalLexer**

**LiveScriptLexer**

**DartLexer**

**LassoLexer**

**ObjectiveJLexer**

**CoffeeScriptLexer**

**MaskLexer**

**EarlGreyLexer**

**JuttleLexer**

**NodeConsoleLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/javascript.py`  
**Dependencies**: `re`, `pygments.lexer.bygroups`, `pygments.lexer.combined`, `pygments.lexer.default`, `pygments.lexer.do_insertions`, `pygments.lexer.include`, `pygments.lexer.inherit`, `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.this`, `pygments.lexer.using`, `pygments.lexer.words`, `pygments.lexer.line_re`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.util.get_bool_opt`, `pygments.unistring`, `pygments.lexers._lasso_builtins.BUILTINS`, `pygments.lexers._lasso_builtins.MEMBERS`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.ooc
:::{doc} OocLexer:18
For Ooc source code
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`
**Type References**: [[OocLexer]]


### Implementation
**OocLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/ooc.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.bdd
:::{doc} BddLexer:17
Lexer for BDD(Behavior-driven development), which highlights not only
keywords, but also comments, punctuations, strings, numbers, and variables.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Text`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[BddLexer]]

### Interface
- `analyse_text`() -> Any

### Implementation
**BddLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/bdd.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Text`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.julia
:::{doc} JuliaLexer:27
For Julia source code.
:::
:::{doc} JuliaConsoleLexer:246
For Julia console sessions. Modeled after MatlabSessionLexer.
:::
**Imports**: `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.do_insertions`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.util.shebang_matches`, `pygments.lexers._julia_builtins.OPERATORS_LIST`, `pygments.lexers._julia_builtins.DOTTED_OPERATORS_LIST`, `pygments.lexers._julia_builtins.KEYWORD_LIST`, `pygments.lexers._julia_builtins.BUILTIN_LIST`, `pygments.lexers._julia_builtins.LITERAL_LIST`
**Type References**: [[JuliaConsoleLexer]], [[JuliaLexer]]

### Interface
- `analyse_text`() -> Any
- `get_tokens_unprocessed`() -> Any

### Implementation
**JuliaLexer**

**JuliaConsoleLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/julia.py`  
**Dependencies**: `pygments.lexer.Lexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.do_insertions`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.util.shebang_matches`, `pygments.lexers._julia_builtins.OPERATORS_LIST`, `pygments.lexers._julia_builtins.DOTTED_OPERATORS_LIST`, `pygments.lexers._julia_builtins.KEYWORD_LIST`, `pygments.lexers._julia_builtins.BUILTIN_LIST`, `pygments.lexers._julia_builtins.LITERAL_LIST`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.hexdump
:::{doc} HexdumpLexer:17
For typical hex dump output formats by the UNIX and GNU/Linux tools ``hexdump``,
``hd``, ``hexcat``, ``od`` and ``xxd``, and the DOS tool ``DEBUG``. For example:

.. sourcecode:: hexdump

    00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
    00000010  02 00 3e 00 01 00 00 00  c5 48 40 00 00 00 00 00  |..>......H@.....|

The specific supported formats are the outputs of:

* ``hexdump FILE``
* ``hexdump -C FILE`` -- the `canonical` format used in the example.
* ``hd FILE`` -- same as ``hexdump -C FILE``.
* ``hexcat FILE``
* ``od -t x1z FILE``
* ``xxd FILE``
* ``DEBUG.EXE FILE.COM`` and entering ``d`` to the prompt.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[HexdumpLexer]]


### Implementation
**HexdumpLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/hexdump.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.foxpro
:::{doc} FoxProLexer:20
Lexer for Microsoft Visual FoxPro language.

FoxPro syntax allows to shorten all keywords and function names
to 4 characters.  Shortened forms are not recognized by this lexer.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.token.Punctuation`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`
**Type References**: [[FoxProLexer]]


### Implementation
**FoxProLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/foxpro.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.token.Punctuation`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.stata
:::{doc} StataLexer:21
For Stata do files.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Operator`, `pygments.lexers._stata_builtins.builtins_base`, `pygments.lexers._stata_builtins.builtins_functions`
**Type References**: [[StataLexer]]


### Implementation
**StataLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/stata.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.default`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Operator`, `pygments.lexers._stata_builtins.builtins_base`, `pygments.lexers._stata_builtins.builtins_functions`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.zig
:::{doc} ZigLexer:18
Lexer for the Zig language.

grammar: https://ziglang.org/documentation/master/#Grammar
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[ZigLexer]]


### Implementation
**ZigLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/zig.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.grammar_notation
:::{doc} BnfLexer:18
This lexer is for grammar notations which are similar to
original BNF.

In order to maximize a number of targets of this lexer,
let's decide some designs:

* We don't distinguish `Terminal Symbol`.

* We do assume that `NonTerminal Symbol` are always enclosed
  with arrow brackets.

* We do assume that `NonTerminal Symbol` may include
  any printable characters except arrow brackets and ASCII 0x20.
  This assumption is for `RBNF <http://www.rfc-base.org/txt/rfc-5511.txt>`_.

* We do assume that target notation doesn't support comment.

* We don't distinguish any operators and punctuation except
  `::=`.

Though these decision making might cause too minimal highlighting
and you might be disappointed, but it is reasonable for us.
:::
:::{doc} AbnfLexer:66
Lexer for IETF 7405 ABNF.

(Updates `5234 <http://www.ietf.org/rfc/rfc5234.txt>`_) grammars.
:::
:::{doc} JsgfLexer:132
For JSpeech Grammar Format grammars.
:::
:::{doc} PegLexer:209
This lexer is for Parsing Expression Grammars (PEG).

Various implementations of PEG have made different decisions
regarding the syntax, so let's try to be accommodating:

* `<-`, `←`, `:`, and `=` are all accepted as rule operators.

* Both `|` and `/` are choice operators.

* `^`, `↑`, and `~` are cut operators.

* A single `a-z` character immediately before a string, or
  multiple `a-z` characters following a string, are part of the
  string (e.g., `r"..."` or `"..."ilmsuxa`).
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.this`, `pygments.lexer.using`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`
**Type References**: [[AbnfLexer]], [[BnfLexer]], [[JsgfLexer]], [[PegLexer]]


### Implementation
**BnfLexer**

**AbnfLexer**

**JsgfLexer**

**PegLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/grammar_notation.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.this`, `pygments.lexer.using`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.bare
:::{doc} BareLexer:17
For BARE schema source.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Literal`, `pygments.token.Whitespace`
**Type References**: [[BareLexer]]


### Implementation
**BareLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/bare.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Literal`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.openscad
:::{doc} OpenScadLexer:17
For openSCAD code.
    
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Punctuation`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.token.Literal`, `pygments.token.String`
**Type References**: [[OpenScadLexer]]


### Implementation
**OpenScadLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/openscad.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Punctuation`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.token.Literal`, `pygments.token.String`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.dotnet
:::{doc} CSharpLexer:25
For C# source code.

Additional options accepted:

`unicodelevel`
  Determines which Unicode characters this lexer allows for identifiers.
  The possible values are:

  * ``none`` -- only the ASCII letters and numbers are allowed. This
    is the fastest selection.
  * ``basic`` -- all Unicode characters from the specification except
    category ``Lo`` are allowed.
  * ``full`` -- all Unicode characters as specified in the C# specs
    are allowed.  Note that this means a considerable slowdown since the
    ``Lo`` category has more than 40,000 characters in it!

  The default value is ``basic``.

  .. versionadded:: 0.8
:::
:::{doc} NemerleLexer:176
For Nemerle source code.

Additional options accepted:

`unicodelevel`
  Determines which Unicode characters this lexer allows for identifiers.
  The possible values are:

  * ``none`` -- only the ASCII letters and numbers are allowed. This
    is the fastest selection.
  * ``basic`` -- all Unicode characters from the specification except
    category ``Lo`` are allowed.
  * ``full`` -- all Unicode characters as specified in the C# specs
    are allowed.  Note that this means a considerable slowdown since the
    ``Lo`` category has more than 40,000 characters in it!

  The default value is ``basic``.
:::
:::{doc} BooLexer:353
For Boo source code.
:::
:::{doc} VbNetLexer:422
For Visual Basic.NET source code.
Also LibreOffice Basic, OpenOffice Basic, and StarOffice Basic.
:::
:::{doc} GenericAspxLexer:534
Lexer for ASP.NET pages.
:::
:::{doc} CSharpAspxLexer:559
Lexer for highlighting C# within ASP.NET pages.
:::
:::{doc} VbNetAspxLexer:581
Lexer for highlighting Visual Basic.net within ASP.NET pages.
:::
:::{doc} FSharpLexer:604
For the F# language (version 3.0).
:::
:::{doc} XppLexer:765
For X++ source code. This is based loosely on the CSharpLexer
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Punctuation`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Literal`, `pygments.token.Other`, `pygments.token.Whitespace`, `pygments.util.get_choice_opt`, `pygments.unistring`, `pygments.lexers.html.XmlLexer`
**Type References**: [[BooLexer]], [[CSharpAspxLexer]], [[CSharpLexer]], [[FSharpLexer]], [[GenericAspxLexer]], [[NemerleLexer]], [[VbNetAspxLexer]], [[VbNetLexer]], [[XppLexer]]

### Interface
- `__init__`() -> Any
- `analyse_text`() -> Any

### Implementation
**CSharpLexer**

**NemerleLexer**

**BooLexer**

**VbNetLexer**

**GenericAspxLexer**

**CSharpAspxLexer**

**VbNetAspxLexer**

**FSharpLexer**

**XppLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/dotnet.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.DelegatingLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Punctuation`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Literal`, `pygments.token.Other`, `pygments.token.Whitespace`, `pygments.util.get_choice_opt`, `pygments.unistring`, `pygments.lexers.html.XmlLexer`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.fantom
:::{doc} FantomLexer:21
For Fantom source code.
:::
**Imports**: `string.Template`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Literal`, `pygments.token.Whitespace`
**Type References**: [[FantomLexer]]

### Interface
- `s`() -> Any

### Implementation
**FantomLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/fantom.py`  
**Dependencies**: `string.Template`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.using`, `pygments.lexer.this`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Literal`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.special
:::{doc} TextLexer:21
"Null" lexer, doesn't highlight anything.
:::
:::{doc} OutputLexer:41
Simple lexer that highlights everything as ``Token.Generic.Output``.
:::
:::{doc} RawTokenLexer:58
Recreate a token stream formatted with the `RawTokenFormatter`.

Additional options accepted:

`compress`
    If set to ``"gz"`` or ``"bz2"``, decompress the token stream with
    the given compression algorithm before lexing (default: ``""``).
:::
**Imports**: `ast`, `pygments.lexer.Lexer`, `pygments.lexer.line_re`, `pygments.token.Token`, `pygments.token.Error`, `pygments.token.Text`, `pygments.token.Generic`, `pygments.util.get_choice_opt`, `gzip`, `bz2`
**Type References**: [[OutputLexer]], [[RawTokenLexer]], [[TextLexer]]

### Interface
- `get_tokens_unprocessed`() -> Any
- `analyse_text`() -> Any
- `__init__`() -> Any
- `get_tokens`() -> Any

### Implementation
**TextLexer**

**OutputLexer**

**RawTokenLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/special.py`  
**Dependencies**: `ast`, `pygments.lexer.Lexer`, `pygments.lexer.line_re`, `pygments.token.Token`, `pygments.token.Error`, `pygments.token.Text`, `pygments.token.Generic`, `pygments.util.get_choice_opt`, `gzip`, `bz2`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.yang
:::{doc} YangLexer:17
Lexer for YANG, based on RFC7950.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Token`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Comment`, `pygments.token.Number`
**Type References**: [[YangLexer]]


### Implementation
**YangLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/yang.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Token`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Comment`, `pygments.token.Number`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.fift
:::{doc} FiftLexer:17
For Fift source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.token.Literal`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`
**Type References**: [[FiftLexer]]


### Implementation
**FiftLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/fift.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.token.Literal`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.ezhil
:::{doc} EzhilLexer:20
Lexer for Ezhil, a Tamil script-based programming language.
:::
**Imports**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Keyword`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Operator`, `pygments.token.Whitespace`
**Type References**: [[EzhilLexer]]

### Interface
- `analyse_text`() -> Any
- `__init__`() -> Any

### Implementation
**EzhilLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/ezhil.py`  
**Dependencies**: `re`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Keyword`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Operator`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.ride
:::{doc} RideLexer:18
For Ride source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`
**Type References**: [[RideLexer]]


### Implementation
**RideLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/ride.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.include`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._scheme_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_scheme_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.devicetree
:::{doc} DevicetreeLexer:18
Lexer for Devicetree files.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`
**Type References**: [[DevicetreeLexer]]


### Implementation
**DevicetreeLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/devicetree.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.bygroups`, `pygments.lexer.include`, `pygments.lexer.default`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.macaulay2
:::{doc} Macaulay2Lexer:1776
Lexer for Macaulay2, a software system for research in algebraic geometry.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Text`
**Type References**: [[Macaulay2Lexer]]


### Implementation
**Macaulay2Lexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/macaulay2.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.urbi
:::{doc} UrbiscriptLexer:20
For UrbiScript source code.
:::
**Imports**: `re`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`
**Type References**: [[UrbiscriptLexer]]

### Interface
- `blob_callback`() -> Any
- `analyse_text`() -> Any

### Implementation
**UrbiscriptLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/urbi.py`  
**Dependencies**: `re`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.haxe
:::{doc} HaxeLexer:21
For Haxe source code.
:::
:::{doc} HxmlLexer:897
Lexer for haXe build files.
:::
**Imports**: `re`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[HaxeLexer]], [[HxmlLexer]]

### Interface
- `preproc_callback`() -> Any
- `analyse_text`() -> Any

### Implementation
**HaxeLexer**

**HxmlLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/haxe.py`  
**Dependencies**: `re`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.func
:::{doc} FuncLexer:18
For FunC source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.token.Punctuation`
**Type References**: [[FuncLexer]]


### Implementation
**FuncLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/func.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Whitespace`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.data
:::{doc} YamlLexerContext:19
Indentation context for the YAML lexer.
:::
:::{doc} YamlLexer:30
Lexer for YAML, a human-friendly data serialization
language.
:::
:::{doc} JsonLexer:436
For JSON data structures.

Javascript-style comments are supported (like ``/* */`` and ``//``),
though comments are not part of the JSON specification.
This allows users to highlight JSON as it is used in the wild.

No validation is performed on the input JSON document.
:::
:::{doc} JsonBareObjectLexer:701
For JSON data structures (with missing object curly braces).

.. deprecated:: 2.8.0

   Behaves the same as `JsonLexer` now.
:::
:::{doc} JsonLdLexer:717
For JSON-LD linked data.
:::
**Imports**: `pygments.lexer.Lexer`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.LexerContext`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[JsonBareObjectLexer]], [[JsonLdLexer]], [[JsonLexer]], [[YamlLexer]], [[YamlLexerContext]]

### Interface
- `__init__`() -> Any
- `something`() -> Any
- `reset_indent`() -> Any
- `save_indent`() -> Any
- `set_indent`() -> Any
- `set_block_scalar_indent`() -> Any
- `parse_block_scalar_empty_line`() -> Any
- `parse_block_scalar_indent`() -> Any
- `parse_plain_scalar_indent`() -> Any
- `get_tokens_unprocessed`() -> Any
- `callback`() -> Any

### Implementation
**YamlLexerContext**

**YamlLexer**

**JsonLexer**

**JsonBareObjectLexer**

**JsonLdLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/data.py`  
**Dependencies**: `pygments.lexer.Lexer`, `pygments.lexer.ExtendedRegexLexer`, `pygments.lexer.LexerContext`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._ada_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_ada_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.yara
:::{doc} YaraLexer:18
For YARA rules
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Name`, `pygments.token.Text`, `pygments.token.Punctuation`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Whitespace`, `pygments.token.Number`
**Type References**: [[YaraLexer]]


### Implementation
**YaraLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/yara.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Name`, `pygments.token.Text`, `pygments.token.Punctuation`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Whitespace`, `pygments.token.Number`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.pointless
:::{doc} PointlessLexer:18
For Pointless source code.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`
**Type References**: [[PointlessLexer]]


### Implementation
**PointlessLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/pointless.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.asn1
:::{doc} Asn1Lexer:117
Lexer for ASN.1 module definition
:::
**Imports**: `re`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`
**Type References**: [[Asn1Lexer]]

### Interface
- `word_sequences`() -> Any

### Implementation
**Asn1Lexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/asn1.py`  
**Dependencies**: `re`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.lexer.RegexLexer`, `pygments.lexer.words`, `pygments.lexer.bygroups`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers._tsql_builtins



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/_tsql_builtins.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.wgsl
:::{doc} WgslLexer:33
Lexer for the WebGPU Shading Language.
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.unistring`
**Type References**: [[WgslLexer]]


### Implementation
**WgslLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/wgsl.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`, `pygments.unistring`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.lexers.rust
:::{doc} RustLexer:18
Lexer for the Rust programming language (version 1.47).
:::
**Imports**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`
**Type References**: [[RustLexer]]


### Implementation
**RustLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/lexers/rust.py`  
**Dependencies**: `pygments.lexer.RegexLexer`, `pygments.lexer.include`, `pygments.lexer.bygroups`, `pygments.lexer.words`, `pygments.lexer.default`, `pygments.token.Text`, `pygments.token.Comment`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Punctuation`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatters.terminal
:::{doc} TerminalFormatter:56
Format tokens with ANSI color sequences, for output in a text console.
Color sequences are terminated at newlines, so that paging the output
works correctly.

The `get_style_defs()` method doesn't do anything special since there is
no support for common styles.

Options accepted:

`bg`
    Set to ``"light"`` or ``"dark"`` depending on the terminal's background
    (default: ``"light"``).

`colorscheme`
    A dictionary mapping token types to (lightbg, darkbg) color names or
    ``None`` (default: ``None`` = use builtin colorscheme).

`linenos`
    Set to ``True`` to have line numbers on the terminal output as well
    (default: ``False`` = no line numbers).
:::
**Imports**: `pygments.formatter.Formatter`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Token`, `pygments.token.Whitespace`, `pygments.console.ansiformat`, `pygments.util.get_choice_opt`
**Type References**: [[TerminalFormatter]]

### Interface
- `__init__`() -> Any
- `format`() -> Any
- `_write_lineno`() -> Any
- `_get_color`() -> Any
- `format_unencoded`() -> Any

### Implementation
**TerminalFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatters/terminal.py`  
**Dependencies**: `pygments.formatter.Formatter`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Token`, `pygments.token.Whitespace`, `pygments.console.ansiformat`, `pygments.util.get_choice_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatters.html
:::{doc} escape_html:38
Escape &, <, > as well as single and double quotes for HTML.
:::
:::{doc} HtmlFormatter:121
Format tokens as HTML 4 ``<span>`` tags. By default, the content is enclosed
in a ``<pre>`` tag, itself wrapped in a ``<div>`` tag (but see the `nowrap` option).
The ``<div>``'s CSS class can be set by the `cssclass` option.

If the `linenos` option is set to ``"table"``, the ``<pre>`` is
additionally wrapped inside a ``<table>`` which has one row and two
cells: one containing the line numbers and one containing the code.
Example:

.. sourcecode:: html

    <div class="highlight" >
    <table><tr>
      <td class="linenos" title="click to toggle"
        onclick="with (this.firstChild.style)
                 { display = (display == '') ? 'none' : '' }">
        <pre>1
        2</pre>
      </td>
      <td class="code">
        <pre><span class="Ke">def </span><span class="NaFu">foo</span>(bar):
          <span class="Ke">pass</span>
        </pre>
      </td>
    </tr></table></div>

(whitespace added to improve clarity).

A list of lines can be specified using the `hl_lines` option to make these
lines highlighted (as of Pygments 0.11).

With the `full` option, a complete HTML 4 document is output, including
the style definitions inside a ``<style>`` tag, or in a separate file if
the `cssfile` option is given.

When `tagsfile` is set to the path of a ctags index file, it is used to
generate hyperlinks from names to their definition.  You must enable
`lineanchors` and run ctags with the `-n` option for this to work.  The
`python-ctags` module from PyPI must be installed to use this feature;
otherwise a `RuntimeError` will be raised.

The `get_style_defs(arg='')` method of a `HtmlFormatter` returns a string
containing CSS rules for the CSS classes used by the formatter. The
argument `arg` can be used to specify additional CSS selectors that
are prepended to the classes. A call `fmter.get_style_defs('td .code')`
would result in the following CSS classes:

.. sourcecode:: css

    td .code .kw { font-weight: bold; color: #00FF00 }
    td .code .cm { color: #999999 }
    ...

If you have Pygments 0.6 or higher, you can also pass a list or tuple to the
`get_style_defs()` method to request multiple prefixes for the tokens:

.. sourcecode:: python

    formatter.get_style_defs(['div.syntax pre', 'pre.syntax'])

The output would then look like this:

.. sourcecode:: css

    div.syntax pre .kw,
    pre.syntax .kw { font-weight: bold; color: #00FF00 }
    div.syntax pre .cm,
    pre.syntax .cm { color: #999999 }
    ...

Additional options accepted:

`nowrap`
    If set to ``True``, don't add a ``<pre>`` and a ``<div>`` tag
    around the tokens. This disables most other options (default: ``False``).

`full`
    Tells the formatter to output a "full" document, i.e. a complete
    self-contained document (default: ``False``).

`title`
    If `full` is true, the title that should be used to caption the
    document (default: ``''``).

`style`
    The style to use, can be a string or a Style subclass (default:
    ``'default'``). This option has no effect if the `cssfile`
    and `noclobber_cssfile` option are given and the file specified in
    `cssfile` exists.

`noclasses`
    If set to true, token ``<span>`` tags (as well as line number elements)
    will not use CSS classes, but inline styles. This is not recommended
    for larger pieces of code since it increases output size by quite a bit
    (default: ``False``).

`classprefix`
    Since the token types use relatively short class names, they may clash
    with some of your own class names. In this case you can use the
    `classprefix` option to give a string to prepend to all Pygments-generated
    CSS class names for token types.
    Note that this option also affects the output of `get_style_defs()`.

`cssclass`
    CSS class for the wrapping ``<div>`` tag (default: ``'highlight'``).
    If you set this option, the default selector for `get_style_defs()`
    will be this class.

    .. versionadded:: 0.9
       If you select the ``'table'`` line numbers, the wrapping table will
       have a CSS class of this string plus ``'table'``, the default is
       accordingly ``'highlighttable'``.

`cssstyles`
    Inline CSS styles for the wrapping ``<div>`` tag (default: ``''``).

`prestyles`
    Inline CSS styles for the ``<pre>`` tag (default: ``''``).

    .. versionadded:: 0.11

`cssfile`
    If the `full` option is true and this option is given, it must be the
    name of an external file. If the filename does not include an absolute
    path, the file's path will be assumed to be relative to the main output
    file's path, if the latter can be found. The stylesheet is then written
    to this file instead of the HTML file.

    .. versionadded:: 0.6

`noclobber_cssfile`
    If `cssfile` is given and the specified file exists, the css file will
    not be overwritten. This allows the use of the `full` option in
    combination with a user specified css file. Default is ``False``.

    .. versionadded:: 1.1

`linenos`
    If set to ``'table'``, output line numbers as a table with two cells,
    one containing the line numbers, the other the whole code.  This is
    copy-and-paste-friendly, but may cause alignment problems with some
    browsers or fonts.  If set to ``'inline'``, the line numbers will be
    integrated in the ``<pre>`` tag that contains the code (that setting
    is *new in Pygments 0.8*).

    For compatibility with Pygments 0.7 and earlier, every true value
    except ``'inline'`` means the same as ``'table'`` (in particular, that
    means also ``True``).

    The default value is ``False``, which means no line numbers at all.

    **Note:** with the default ("table") line number mechanism, the line
    numbers and code can have different line heights in Internet Explorer
    unless you give the enclosing ``<pre>`` tags an explicit ``line-height``
    CSS property (you get the default line spacing with ``line-height:
    125%``).

`hl_lines`
    Specify a list of lines to be highlighted. The line numbers are always
    relative to the input (i.e. the first line is line 1) and are
    independent of `linenostart`.

    .. versionadded:: 0.11

`linenostart`
    The line number for the first line (default: ``1``).

`linenostep`
    If set to a number n > 1, only every nth line number is printed.

`linenospecial`
    If set to a number n > 0, every nth line number is given the CSS
    class ``"special"`` (default: ``0``).

`nobackground`
    If set to ``True``, the formatter won't output the background color
    for the wrapping element (this automatically defaults to ``False``
    when there is no wrapping element [eg: no argument for the
    `get_syntax_defs` method given]) (default: ``False``).

    .. versionadded:: 0.6

`lineseparator`
    This string is output between lines of code. It defaults to ``"\n"``,
    which is enough to break a line inside ``<pre>`` tags, but you can
    e.g. set it to ``"<br>"`` to get HTML line breaks.

    .. versionadded:: 0.7

`lineanchors`
    If set to a nonempty string, e.g. ``foo``, the formatter will wrap each
    output line in an anchor tag with an ``id`` (and `name`) of ``foo-linenumber``.
    This allows easy linking to certain lines.

    .. versionadded:: 0.9

`linespans`
    If set to a nonempty string, e.g. ``foo``, the formatter will wrap each
    output line in a span tag with an ``id`` of ``foo-linenumber``.
    This allows easy access to lines via javascript.

    .. versionadded:: 1.6

`anchorlinenos`
    If set to `True`, will wrap line numbers in <a> tags. Used in
    combination with `linenos` and `lineanchors`.

`tagsfile`
    If set to the path of a ctags file, wrap names in anchor tags that
    link to their definitions. `lineanchors` should be used, and the
    tags file should specify line numbers (see the `-n` option to ctags).
    The tags file is assumed to be encoded in UTF-8.

    .. versionadded:: 1.6

`tagurlformat`
    A string formatting pattern used to generate links to ctags definitions.
    Available variables are `%(path)s`, `%(fname)s` and `%(fext)s`.
    Defaults to an empty string, resulting in just `#prefix-number` links.

    .. versionadded:: 1.6

`filename`
    A string used to generate a filename when rendering ``<pre>`` blocks,
    for example if displaying source code. If `linenos` is set to
    ``'table'`` then the filename will be rendered in an initial row
    containing a single `<th>` which spans both columns.

    .. versionadded:: 2.1

`wrapcode`
    Wrap the code inside ``<pre>`` blocks using ``<code>``, as recommended
    by the HTML5 specification.

    .. versionadded:: 2.4

`debug_token_types`
    Add ``title`` attributes to all token ``<span>`` tags that show the
    name of the token.

    .. versionadded:: 2.10


**Subclassing the HTML formatter**

.. versionadded:: 0.7

The HTML formatter is now built in a way that allows easy subclassing, thus
customizing the output HTML code. The `format()` method calls
`self._format_lines()` which returns a generator that yields tuples of ``(1,
line)``, where the ``1`` indicates that the ``line`` is a line of the
formatted source code.

If the `nowrap` option is set, the generator is the iterated over and the
resulting HTML is output.

Otherwise, `format()` calls `self.wrap()`, which wraps the generator with
other generators. These may add some HTML code to the one generated by
`_format_lines()`, either by modifying the lines generated by the latter,
then yielding them again with ``(1, line)``, and/or by yielding other HTML
code before or after the lines, with ``(0, html)``. The distinction between
source lines and other code makes it possible to wrap the generator multiple
times.

The default `wrap()` implementation adds a ``<div>`` and a ``<pre>`` tag.

A custom `HtmlFormatter` subclass could look like this:

.. sourcecode:: python

    class CodeHtmlFormatter(HtmlFormatter):

        def wrap(self, source, *, include_div):
            return self._wrap_code(source)

        def _wrap_code(self, source):
            yield 0, '<code>'
            for i, t in source:
                if i == 1:
                    # it's a line of formatted code
                    t += '<br>'
                yield i, t
            yield 0, '</code>'

This results in wrapping the formatted lines with a ``<code>`` tag, where the
source lines are broken using ``<br>`` tags.

After calling `wrap()`, the `format()` method also adds the "line numbers"
and/or "full document" wrappers if the respective options are set. Then, all
HTML yielded by the wrapped generator is output.
:::
**Imports**: `functools`, `os`, `sys`, `os.path`, `io.StringIO`, `pygments.formatter.Formatter`, `pygments.token.Token`, `pygments.token.Text`, `pygments.token.STANDARD_TYPES`, `pygments.util.get_bool_opt`, `pygments.util.get_int_opt`, `pygments.util.get_list_opt`, `ctags`
**Type References**: [[HtmlFormatter]]

### Interface
- `escape_html`() -> Any
- `webify`() -> Any
- `_get_ttype_class`() -> Any
- `__init__`() -> Any
- `_get_css_class`() -> Any
- `_get_css_classes`() -> Any
- `_get_css_inline_styles`() -> Any
- `_create_stylesheet`() -> Any
- `get_style_defs`() -> Any
- `get_token_style_defs`() -> Any
- `get_background_style_defs`() -> Any
- `get_linenos_style_defs`() -> Any
- `get_css_prefix`() -> Any
- `_pre_style`() -> Any
- `_linenos_style`() -> Any
- `_linenos_special_style`() -> Any
- `_decodeifneeded`() -> Any
- `_wrap_full`() -> Any
- `_wrap_tablelinenos`() -> Any
- `_wrap_inlinelinenos`() -> Any
- `_wrap_lineanchors`() -> Any
- `_wrap_linespans`() -> Any
- `_wrap_div`() -> Any
- `_wrap_pre`() -> Any
- `_wrap_code`() -> Any
- `_translate_parts`() -> Any
- `_format_lines`() -> Any
- `_lookup_ctag`() -> Any
- `_highlight_lines`() -> Any
- `wrap`() -> Any
- `format_unencoded`() -> Any
- `prefix`() -> Any

### Implementation
**HtmlFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatters/html.py`  
**Dependencies**: `functools`, `os`, `sys`, `os.path`, `io.StringIO`, `pygments.formatter.Formatter`, `pygments.token.Token`, `pygments.token.Text`, `pygments.token.STANDARD_TYPES`, `pygments.util.get_bool_opt`, `pygments.util.get_int_opt`, `pygments.util.get_list_opt`, `ctags`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatters.irc
:::{doc} IRCFormatter:97
Format tokens with IRC color sequences

The `get_style_defs()` method doesn't do anything special since there is
no support for common styles.

Options accepted:

`bg`
    Set to ``"light"`` or ``"dark"`` depending on the terminal's background
    (default: ``"light"``).

`colorscheme`
    A dictionary mapping token types to (lightbg, darkbg) color names or
    ``None`` (default: ``None`` = use builtin colorscheme).

`linenos`
    Set to ``True`` to have line numbers in the output as well
    (default: ``False`` = no line numbers).
:::
**Imports**: `pygments.formatter.Formatter`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Token`, `pygments.token.Whitespace`, `pygments.util.get_choice_opt`
**Type References**: [[IRCFormatter]]

### Interface
- `ircformat`() -> Any
- `__init__`() -> Any
- `_write_lineno`() -> Any
- `format_unencoded`() -> Any

### Implementation
**IRCFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatters/irc.py`  
**Dependencies**: `pygments.formatter.Formatter`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Token`, `pygments.token.Whitespace`, `pygments.util.get_choice_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatters
:::{doc} _fn_matches:28
Return whether the supplied file name fn matches pattern filename.
:::
:::{doc} _load_formatters:36
Load a formatter (and all others in the module too).
:::
:::{doc} get_all_formatters:44
Return a generator for all formatter classes.
:::
:::{doc} find_formatter_class:55
Lookup a formatter by alias.

Returns None if not found.
:::
:::{doc} get_formatter_by_name:70
Return an instance of a :class:`.Formatter` subclass that has `alias` in its
aliases list. The formatter is given the `options` at its instantiation.

Will raise :exc:`pygments.util.ClassNotFound` if no formatter with that
alias is found.
:::
:::{doc} load_formatter_from_file:84
Return a `Formatter` subclass instance loaded from the provided file, relative
to the current directory.

The file is expected to contain a Formatter class named ``formattername``
(by default, CustomFormatter). Users should be very careful with the input, because
this method is equivalent to running ``eval()`` on the input file. The formatter is
given the `options` at its instantiation.

:exc:`pygments.util.ClassNotFound` is raised if there are any errors loading
the formatter.

.. versionadded:: 2.2
:::
:::{doc} get_formatter_for_filename:118
Return a :class:`.Formatter` subclass instance that has a filename pattern
matching `fn`. The formatter is given the `options` at its instantiation.

Will raise :exc:`pygments.util.ClassNotFound` if no formatter for that filename
is found.
:::
:::{doc} _automodule:140
Automatically import formatters.
:::
**Imports**: `re`, `sys`, `types`, `fnmatch`, `os.path.basename`, `pygments.formatters._mapping.FORMATTERS`, `pygments.plugin.find_plugin_formatters`, `pygments.util.ClassNotFound`
**Type References**: [[_automodule]]

### Interface
- `_fn_matches`() -> Any
- `_load_formatters`() -> Any
- `get_all_formatters`() -> Any
- `find_formatter_class`() -> Any
- `get_formatter_by_name`() -> Any
- `load_formatter_from_file`() -> Any
- `get_formatter_for_filename`() -> Any
- `__getattr__`() -> Any

### Implementation
**_automodule**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatters/__init__.py`  
**Dependencies**: `re`, `sys`, `types`, `fnmatch`, `os.path.basename`, `pygments.formatters._mapping.FORMATTERS`, `pygments.plugin.find_plugin_formatters`, `pygments.util.ClassNotFound`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatters.other
:::{doc} NullFormatter:19
Output the text unchanged without any formatting.
:::
:::{doc} RawTokenFormatter:36
Format tokens as a raw representation for storing token streams.

The format is ``tokentype<TAB>repr(tokenstring)\n``. The output can later
be converted to a token stream with the `RawTokenLexer`, described in the
:doc:`lexer list <lexers>`.

Only two options are accepted:

`compress`
    If set to ``'gz'`` or ``'bz2'``, compress the output with the given
    compression algorithm after encoding (default: ``''``).
`error_color`
    If set to a color name, highlight error tokens using that color.  If
    set but with no value, defaults to ``'red'``.

    .. versionadded:: 0.11
:::
:::{doc} TestcaseFormatter:129
Format tokens as appropriate for a new testcase.

.. versionadded:: 2.0
:::
**Imports**: `pygments.formatter.Formatter`, `pygments.util.get_choice_opt`, `pygments.token.Token`, `pygments.console.colorize`, `gzip`, `bz2`
**Type References**: [[NullFormatter]], [[RawTokenFormatter]], [[TestcaseFormatter]]

### Interface
- `format`() -> Any
- `__init__`() -> Any
- `write`() -> Any
- `flush`() -> Any

### Implementation
**NullFormatter**

**RawTokenFormatter**

**TestcaseFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatters/other.py`  
**Dependencies**: `pygments.formatter.Formatter`, `pygments.util.get_choice_opt`, `pygments.token.Token`, `pygments.console.colorize`, `gzip`, `bz2`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatters.img
:::{doc} PilNotAvailable:52
When Python imaging library is not available
:::
:::{doc} FontNotFound:56
When there are no usable fonts specified
:::
:::{doc} FontManager:60
Manages a set of fonts: normal, italic, bold, etc...
:::
:::{doc} ImageFormatter:270
Create a PNG image from source code. This uses the Python Imaging Library to
generate a pixmap from the source code.

.. versionadded:: 0.10

Additional options accepted:

`image_format`
    An image format to output to that is recognised by PIL, these include:

    * "PNG" (default)
    * "JPEG"
    * "BMP"
    * "GIF"

`line_pad`
    The extra spacing (in pixels) between each line of text.

    Default: 2

`font_name`
    The font name to be used as the base font from which others, such as
    bold and italic fonts will be generated.  This really should be a
    monospace font to look sane.
    If a filename or a file-like object is specified, the user must
    provide different styles of the font.

    Default: "Courier New" on Windows, "Menlo" on Mac OS, and
             "DejaVu Sans Mono" on \*nix

`font_size`
    The font size in points to be used.

    Default: 14

`image_pad`
    The padding, in pixels to be used at each edge of the resulting image.

    Default: 10

`line_numbers`
    Whether line numbers should be shown: True/False

    Default: True

`line_number_start`
    The line number of the first line.

    Default: 1

`line_number_step`
    The step used when printing line numbers.

    Default: 1

`line_number_bg`
    The background colour (in "#123456" format) of the line number bar, or
    None to use the style background color.

    Default: "#eed"

`line_number_fg`
    The text color of the line numbers (in "#123456"-like format).

    Default: "#886"

`line_number_chars`
    The number of columns of line numbers allowable in the line number
    margin.

    Default: 2

`line_number_bold`
    Whether line numbers will be bold: True/False

    Default: False

`line_number_italic`
    Whether line numbers will be italicized: True/False

    Default: False

`line_number_separator`
    Whether a line will be drawn between the line number area and the
    source code area: True/False

    Default: True

`line_number_pad`
    The horizontal padding (in pixels) between the line number margin, and
    the source code area.

    Default: 6

`hl_lines`
    Specify a list of lines to be highlighted.

    .. versionadded:: 1.2

    Default: empty list

`hl_color`
    Specify the color for highlighting lines.

    .. versionadded:: 1.2

    Default: highlight color of the selected style
:::
:::{doc} GifImageFormatter:647
Create a GIF image from source code. This uses the Python Imaging Library to
generate a pixmap from the source code.

.. versionadded:: 1.0
:::
:::{doc} JpgImageFormatter:661
Create a JPEG image from source code. This uses the Python Imaging Library to
generate a pixmap from the source code.

.. versionadded:: 1.0
:::
:::{doc} BmpImageFormatter:675
Create a bitmap image from source code. This uses the Python Imaging Library to
generate a pixmap from the source code.

.. versionadded:: 1.0
:::
**Imports**: `os`, `sys`, `pygments.formatter.Formatter`, `pygments.util.get_bool_opt`, `pygments.util.get_int_opt`, `pygments.util.get_list_opt`, `pygments.util.get_choice_opt`, `subprocess`, `PIL.Image`, `PIL.ImageDraw`, `PIL.ImageFont`, `_winreg`, `winreg`
**Type References**: [[BmpImageFormatter]], [[FontManager]], [[FontNotFound]], [[GifImageFormatter]], [[ImageFormatter]], [[JpgImageFormatter]], [[PilNotAvailable]]

### Interface
- `__init__`() -> Any
- `_get_nix_font_path`() -> Any
- `_create_nix`() -> Any
- `_get_mac_font_path`() -> Any
- `_create_mac`() -> Any
- `_lookup_win`() -> Any
- `_create_win`() -> Any
- `get_char_size`() -> Any
- `get_text_size`() -> Any
- `get_font`() -> Any
- `get_style`() -> Any
- `get_style_defs`() -> Any
- `_get_line_height`() -> Any
- `_get_line_y`() -> Any
- `_get_char_width`() -> Any
- `_get_char_x`() -> Any
- `_get_text_pos`() -> Any
- `_get_linenumber_pos`() -> Any
- `_get_text_color`() -> Any
- `_get_text_bg_color`() -> Any
- `_get_style_font`() -> Any
- `_get_image_size`() -> Any
- `_draw_linenumber`() -> Any
- `_draw_text`() -> Any
- `_create_drawables`() -> Any
- `_draw_line_numbers`() -> Any
- `_paint_line_number_bg`() -> Any
- `format`() -> Any

### Implementation
**PilNotAvailable**

**FontNotFound**

**FontManager**

**ImageFormatter**

**GifImageFormatter**

**JpgImageFormatter**

**BmpImageFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatters/img.py`  
**Dependencies**: `os`, `sys`, `pygments.formatter.Formatter`, `pygments.util.get_bool_opt`, `pygments.util.get_int_opt`, `pygments.util.get_list_opt`, `pygments.util.get_choice_opt`, `subprocess`, `PIL.Image`, `PIL.ImageDraw`, `PIL.ImageFont`, `_winreg`, `winreg`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatters.terminal256
:::{doc} Terminal256Formatter:98
Format tokens with ANSI color sequences, for output in a 256-color
terminal or console.  Like in `TerminalFormatter` color sequences
are terminated at newlines, so that paging the output works correctly.

The formatter takes colors from a style defined by the `style` option
and converts them to nearest ANSI 256-color escape sequences. Bold and
underline attributes from the style are preserved (and displayed).

.. versionadded:: 0.9

.. versionchanged:: 2.2
   If the used style defines foreground colors in the form ``#ansi*``, then
   `Terminal256Formatter` will map these to non extended foreground color.
   See :ref:`AnsiTerminalStyle` for more information.

.. versionchanged:: 2.4
   The ANSI color names have been updated with names that are easier to
   understand and align with colornames of other projects and terminals.
   See :ref:`this table <new-ansi-color-names>` for more information.


Options accepted:

`style`
    The style to use, can be a string or a Style subclass (default:
    ``'default'``).

`linenos`
    Set to ``True`` to have line numbers on the terminal output as well
    (default: ``False`` = no line numbers).
:::
:::{doc} TerminalTrueColorFormatter:293
Format tokens with ANSI color sequences, for output in a true-color
terminal or console.  Like in `TerminalFormatter` color sequences
are terminated at newlines, so that paging the output works correctly.

.. versionadded:: 2.1

Options accepted:

`style`
    The style to use, can be a string or a Style subclass (default:
    ``'default'``).
:::
**Imports**: `pygments.formatter.Formatter`, `pygments.console.codes`, `pygments.style.ansicolors`
**Type References**: [[EscapeSequence]], [[Terminal256Formatter]], [[TerminalTrueColorFormatter]]

### Interface
- `__init__`() -> Any
- `escape`() -> Any
- `color_string`() -> Any
- `true_color_string`() -> Any
- `reset_string`() -> Any
- `_build_color_table`() -> Any
- `_closest_color`() -> Any
- `_color_index`() -> Any
- `_setup_styles`() -> Any
- `_write_lineno`() -> Any
- `format`() -> Any
- `format_unencoded`() -> Any
- `_color_tuple`() -> Any

### Implementation
**EscapeSequence**

**Terminal256Formatter**

**TerminalTrueColorFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatters/terminal256.py`  
**Dependencies**: `pygments.formatter.Formatter`, `pygments.console.codes`, `pygments.style.ansicolors`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatters.rtf
:::{doc} RtfFormatter:20
Format tokens as RTF markup. This formatter automatically outputs full RTF
documents with color information and other useful stuff. Perfect for Copy and
Paste into Microsoft(R) Word(R) documents.

Please note that ``encoding`` and ``outencoding`` options are ignored.
The RTF format is ASCII natively, but handles unicode characters correctly
thanks to escape sequences.

.. versionadded:: 0.6

Additional options accepted:

`style`
    The style to use, can be a string or a Style subclass (default:
    ``'default'``).

`fontface`
    The used font family, for example ``Bitstream Vera Sans``. Defaults to
    some generic font which is supposed to have fixed width.

`fontsize`
    Size of the font used. Size is specified in half points. The
    default is 24 half-points, giving a size 12 font.

    .. versionadded:: 2.0

`linenos`
    Turn on line numbering (default: ``False``).

    .. versionadded:: 2.18

`lineno_fontsize`
    Font size for line numbers. Size is specified in half points
    (default: `fontsize`). 

    .. versionadded:: 2.18

`lineno_padding`
    Number of spaces between the (inline) line numbers and the
    source code (default: ``2``).

    .. versionadded:: 2.18

`linenostart`
    The line number for the first line (default: ``1``).

    .. versionadded:: 2.18

`linenostep`
    If set to a number n > 1, only every nth line number is printed.

    .. versionadded:: 2.18

`lineno_color`
    Color for line numbers specified as a hex triplet, e.g. ``'5e5e5e'``. 
    Defaults to the style's line number color if it is a hex triplet, 
    otherwise ansi bright black.

    .. versionadded:: 2.18

`hl_lines`
    Specify a list of lines to be highlighted, as line numbers separated by
    spaces, e.g. ``'3 7 8'``. The line numbers are relative to the input 
    (i.e. the first line is line 1) unless `hl_linenostart` is set.

    .. versionadded:: 2.18

`hl_color`
    Color for highlighting the lines specified in `hl_lines`, specified as 
    a hex triplet (default: style's `highlight_color`).

    .. versionadded:: 2.18

`hl_linenostart`
    If set to ``True`` line numbers in `hl_lines` are specified
    relative to `linenostart` (default ``False``).

    .. versionadded:: 2.18
:::
**Imports**: `collections.OrderedDict`, `pygments.formatter.Formatter`, `pygments.style._ansimap`, `pygments.util.get_bool_opt`, `pygments.util.get_int_opt`, `pygments.util.get_list_opt`, `pygments.util.surrogatepair`
**Type References**: [[RtfFormatter]]

### Interface
- `__init__`() -> Any
- `_escape`() -> Any
- `_escape_text`() -> Any
- `hex_to_rtf_color`() -> Any
- `_split_tokens_on_newlines`() -> Any
- `_create_color_mapping`() -> Any
- `_lineno_template`() -> Any
- `_hl_open_str`() -> Any
- `_rtf_header`() -> Any
- `format_unencoded`() -> Any

### Implementation
**RtfFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatters/rtf.py`  
**Dependencies**: `collections.OrderedDict`, `pygments.formatter.Formatter`, `pygments.style._ansimap`, `pygments.util.get_bool_opt`, `pygments.util.get_int_opt`, `pygments.util.get_list_opt`, `pygments.util.surrogatepair`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatters.svg
:::{doc} escape_html:18
Escape &, <, > as well as single and double quotes for HTML.
:::
:::{doc} SvgFormatter:29
Format tokens as an SVG graphics file.  This formatter is still experimental.
Each line of code is a ``<text>`` element with explicit ``x`` and ``y``
coordinates containing ``<tspan>`` elements with the individual token styles.

By default, this formatter outputs a full SVG document including doctype
declaration and the ``<svg>`` root element.

.. versionadded:: 0.9

Additional options accepted:

`nowrap`
    Don't wrap the SVG ``<text>`` elements in ``<svg><g>`` elements and
    don't add a XML declaration and a doctype.  If true, the `fontfamily`
    and `fontsize` options are ignored.  Defaults to ``False``.

`fontfamily`
    The value to give the wrapping ``<g>`` element's ``font-family``
    attribute, defaults to ``"monospace"``.

`fontsize`
    The value to give the wrapping ``<g>`` element's ``font-size``
    attribute, defaults to ``"14px"``.

`linenos`
    If ``True``, add line numbers (default: ``False``).

`linenostart`
    The line number for the first line (default: ``1``).

`linenostep`
    If set to a number n > 1, only every nth line number is printed.

`linenowidth`
    Maximum width devoted to line numbers (default: ``3*ystep``, sufficient
    for up to 4-digit line numbers. Increase width for longer code blocks).

`xoffset`
    Starting offset in X direction, defaults to ``0``.

`yoffset`
    Starting offset in Y direction, defaults to the font size if it is given
    in pixels, or ``20`` else.  (This is necessary since text coordinates
    refer to the text baseline, not the top edge.)

`ystep`
    Offset to add to the Y coordinate for each subsequent line.  This should
    roughly be the text size plus 5.  It defaults to that value if the text
    size is given in pixels, or ``25`` else.

`spacehack`
    Convert spaces in the source to ``&#160;``, which are non-breaking
    spaces.  SVG provides the ``xml:space`` attribute to control how
    whitespace inside tags is handled, in theory, the ``preserve`` value
    could be used to keep all whitespace as-is.  However, many current SVG
    viewers don't obey that rule, so this option is provided as a workaround
    and defaults to ``True``.
:::
**Imports**: `pygments.formatter.Formatter`, `pygments.token.Comment`, `pygments.util.get_bool_opt`, `pygments.util.get_int_opt`
**Type References**: [[SvgFormatter]]

### Interface
- `escape_html`() -> Any
- `__init__`() -> Any
- `format_unencoded`() -> Any
- `_get_style`() -> Any

### Implementation
**SvgFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatters/svg.py`  
**Dependencies**: `pygments.formatter.Formatter`, `pygments.token.Comment`, `pygments.util.get_bool_opt`, `pygments.util.get_int_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatters.bbcode
:::{doc} BBCodeFormatter:18
Format tokens with BBcodes. These formatting codes are used by many
bulletin boards, so you can highlight your sourcecode with pygments before
posting it there.

This formatter has no support for background colors and borders, as there
are no common BBcode tags for that.

Some board systems (e.g. phpBB) don't support colors in their [code] tag,
so you can't use the highlighting together with that tag.
Text in a [code] tag usually is shown with a monospace font (which this
formatter can do with the ``monofont`` option) and no spaces (which you
need for indentation) are removed.

Additional options accepted:

`style`
    The style to use, can be a string or a Style subclass (default:
    ``'default'``).

`codetag`
    If set to true, put the output into ``[code]`` tags (default:
    ``false``)

`monofont`
    If set to true, add a tag to show the code with a monospace font
    (default: ``false``).
:::
**Imports**: `pygments.formatter.Formatter`, `pygments.util.get_bool_opt`
**Type References**: [[BBCodeFormatter]]

### Interface
- `__init__`() -> Any
- `_make_styles`() -> Any
- `format_unencoded`() -> Any

### Implementation
**BBCodeFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatters/bbcode.py`  
**Dependencies**: `pygments.formatter.Formatter`, `pygments.util.get_bool_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatters.pangomarkup
:::{doc} escape_special_chars:23
Escape & and < for Pango Markup.
:::
:::{doc} PangoMarkupFormatter:28
Format tokens as Pango Markup code. It can then be rendered to an SVG.

.. versionadded:: 2.9
:::
**Imports**: `pygments.formatter.Formatter`
**Type References**: [[PangoMarkupFormatter]]

### Interface
- `escape_special_chars`() -> Any
- `__init__`() -> Any
- `format_unencoded`() -> Any

### Implementation
**PangoMarkupFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatters/pangomarkup.py`  
**Dependencies**: `pygments.formatter.Formatter`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatters._mapping



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatters/_mapping.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatters.groff
:::{doc} GroffFormatter:18
Format tokens with groff escapes to change their color and font style.

.. versionadded:: 2.11

Additional options accepted:

`style`
    The style to use, can be a string or a Style subclass (default:
    ``'default'``).

`monospaced`
    If set to true, monospace font will be used (default: ``true``).

`linenos`
    If set to true, print the line numbers (default: ``false``).

`wrap`
    Wrap lines to the specified number of characters. Disabled if set to 0
    (default: ``0``).
:::
**Imports**: `math`, `pygments.formatter.Formatter`, `pygments.util.get_bool_opt`, `pygments.util.get_int_opt`
**Type References**: [[GroffFormatter]]

### Interface
- `__init__`() -> Any
- `_make_styles`() -> Any
- `_define_colors`() -> Any
- `_write_lineno`() -> Any
- `_wrap_line`() -> Any
- `_escape_chars`() -> Any
- `format_unencoded`() -> Any

### Implementation
**GroffFormatter**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatters/groff.py`  
**Dependencies**: `math`, `pygments.formatter.Formatter`, `pygments.util.get_bool_opt`, `pygments.util.get_int_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.formatters.latex
:::{doc} LatexFormatter:147
Format tokens as LaTeX code. This needs the `fancyvrb` and `color`
standard packages.

Without the `full` option, code is formatted as one ``Verbatim``
environment, like this:

.. sourcecode:: latex

    \begin{Verbatim}[commandchars=\\\{\}]
    \PY{k}{def }\PY{n+nf}{foo}(\PY{n}{bar}):
        \PY{k}{pass}
    \end{Verbatim}

Wrapping can be disabled using the `nowrap` option.

The special command used here (``\PY``) and all the other macros it needs
are output by the `get_style_defs` method.

With the `full` option, a complete LaTeX document is output, including
the command definitions in the preamble.

The `get_style_defs()` method of a `LatexFormatter` returns a string
containing ``\def`` commands defining the macros needed inside the
``Verbatim`` environments.

Additional options accepted:

`nowrap`
    If set to ``True``, don't wrap the tokens at all, not even inside a
    ``\begin{Verbatim}`` environment. This disables most other options
    (default: ``False``).

`style`
    The style to use, can be a string or a Style subclass (default:
    ``'default'``).

`full`
    Tells the formatter to output a "full" document, i.e. a complete
    self-contained document (default: ``False``).

`title`
    If `full` is true, the title that should be used to caption the
    document (default: ``''``).

`docclass`
    If the `full` option is enabled, this is the document class to use
    (default: ``'article'``).

`preamble`
    If the `full` option is enabled, this can be further preamble commands,
    e.g. ``\usepackage`` (default: ``''``).

`linenos`
    If set to ``True``, output line numbers (default: ``False``).

`linenostart`
    The line number for the first line (default: ``1``).

`linenostep`
    If set to a number n > 1, only every nth line number is printed.

`verboptions`
    Additional options given to the Verbatim environment (see the *fancyvrb*
    docs for possible values) (default: ``''``).

`commandprefix`
    The LaTeX commands used to produce colored output are constructed
    using this prefix and some letters (default: ``'PY'``).

    .. versionadded:: 0.7
    .. versionchanged:: 0.10
       The default is now ``'PY'`` instead of ``'C'``.

`texcomments`
    If set to ``True``, enables LaTeX comment lines.  That is, LaTex markup
    in comment tokens is not escaped so that LaTeX can render it (default:
    ``False``).

    .. versionadded:: 1.2

`mathescape`
    If set to ``True``, enables LaTeX math mode escape in comments. That
    is, ``'$...$'`` inside a comment will trigger math mode (default:
    ``False``).

    .. versionadded:: 1.2

`escapeinside`
    If set to a string of length 2, enables escaping to LaTeX. Text
    delimited by these 2 characters is read as LaTeX code and
    typeset accordingly. It has no effect in string literals. It has
    no effect in comments if `texcomments` or `mathescape` is
    set. (default: ``''``).

    .. versionadded:: 2.0

`envname`
    Allows you to pick an alternative environment name replacing Verbatim.
    The alternate environment still has to support Verbatim's option syntax.
    (default: ``'Verbatim'``).

    .. versionadded:: 2.0
:::
:::{doc} LatexEmbeddedLexer:437
This lexer takes one lexer as argument, the lexer for the language
being formatted, and the left and right delimiters for escaped text.

First everything is scanned using the language lexer to obtain
strings and comments. All other consecutive tokens are merged and
the resulting text is scanned for escaped segments, which are given
the Token.Escape type. Finally text that is not escaped is scanned
again with the language lexer.
:::
**Imports**: `io.StringIO`, `pygments.formatter.Formatter`, `pygments.lexer.Lexer`, `pygments.lexer.do_insertions`, `pygments.token.Token`, `pygments.token.STANDARD_TYPES`, `pygments.util.get_bool_opt`, `pygments.util.get_int_opt`
**Type References**: [[LatexEmbeddedLexer]], [[LatexFormatter]]

### Interface
- `escape_tex`() -> Any
- `_get_ttype_name`() -> Any
- `__init__`() -> Any
- `_create_stylesheet`() -> Any
- `get_style_defs`() -> Any
- `format_unencoded`() -> Any
- `get_tokens_unprocessed`() -> Any
- `_find_safe_escape_tokens`() -> Any
- `_filter_to`() -> Any
- `_find_escape_tokens`() -> Any
- `rgbcolor`() -> Any

### Implementation
**LatexFormatter**

**LatexEmbeddedLexer**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/formatters/latex.py`  
**Dependencies**: `io.StringIO`, `pygments.formatter.Formatter`, `pygments.lexer.Lexer`, `pygments.lexer.do_insertions`, `pygments.token.Token`, `pygments.token.STANDARD_TYPES`, `pygments.util.get_bool_opt`, `pygments.util.get_int_opt`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.sas
:::{doc} SasStyle:21
Style inspired by SAS' enhanced program editor. Note This is not
meant to be a complete style. It's merely meant to mimic SAS'
program editor syntax highlighting.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Other`, `pygments.token.Whitespace`, `pygments.token.Generic`
**Type References**: [[SasStyle]]


### Implementation
**SasStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/sas.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Other`, `pygments.token.Whitespace`, `pygments.token.Generic`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.material
:::{doc} MaterialStyle:21
This style mimics the Material Theme color scheme.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Escape`, `pygments.token.Error`, `pygments.token.Text`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Punctuation`, `pygments.token.Literal`
**Type References**: [[MaterialStyle]]


### Implementation
**MaterialStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/material.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Escape`, `pygments.token.Error`, `pygments.token.Text`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Punctuation`, `pygments.token.Literal`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.friendly_grayscale
:::{doc} FriendlyGrayscaleStyle:22
A modern grayscale style based on the friendly style.

.. versionadded:: 2.11
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[FriendlyGrayscaleStyle]]


### Implementation
**FriendlyGrayscaleStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/friendly_grayscale.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.pastie
:::{doc} PastieStyle:21
Style similar to the pastie default style.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[PastieStyle]]


### Implementation
**PastieStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/pastie.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.onedark
:::{doc} OneDarkStyle:22
Theme inspired by One Dark Pro for Atom.

.. versionadded:: 2.11
:::
**Imports**: `pygments.style.Style`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Token`
**Type References**: [[OneDarkStyle]]


### Implementation
**OneDarkStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/onedark.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Comment`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Token`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.inkpot

**Imports**: `pygments.style.Style`, `pygments.token.Text`, `pygments.token.Other`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Punctuation`
**Type References**: [[InkPotStyle]]


### Implementation
**InkPotStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/inkpot.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Text`, `pygments.token.Other`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Punctuation`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.xcode
:::{doc} XcodeStyle:19
Style similar to the Xcode default colouring theme.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Literal`
**Type References**: [[XcodeStyle]]


### Implementation
**XcodeStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/xcode.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Literal`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.gruvbox
:::{doc} GruvboxDarkStyle:20
Pygments version of the "gruvbox" dark vim theme.
:::
:::{doc} GruvboxLightStyle:72
Pygments version of the "gruvbox" Light vim theme.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Token`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`
**Type References**: [[GruvboxDarkStyle]], [[GruvboxLightStyle]]


### Implementation
**GruvboxDarkStyle**

**GruvboxLightStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/gruvbox.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Token`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.monokai
:::{doc} MonokaiStyle:21
This style mimics the Monokai color scheme.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Token`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Literal`
**Type References**: [[MonokaiStyle]]


### Implementation
**MonokaiStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/monokai.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Token`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Literal`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.tango
:::{doc} TangoStyle:47
The Crunchy default Style inspired from the color palette from
the Tango Icon Theme Guidelines.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Literal`
**Type References**: [[TangoStyle]]


### Implementation
**TangoStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/tango.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Literal`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.friendly
:::{doc} FriendlyStyle:19
A modern style based on the VIM pyte theme.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[FriendlyStyle]]


### Implementation
**FriendlyStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/friendly.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.staroffice
:::{doc} StarofficeStyle:18
Style similar to StarOffice style, also in OpenOffice and LibreOffice.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Token`
**Type References**: [[StarofficeStyle]]


### Implementation
**StarofficeStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/staroffice.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Token`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.paraiso_dark

**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Text`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Literal`
**Type References**: [[ParaisoDarkStyle]]


### Implementation
**ParaisoDarkStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/paraiso_dark.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Text`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Literal`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.solarized
:::{doc} SolarizedDarkStyle:119
The solarized style, dark.
:::
:::{doc} SolarizedLightStyle:133
The solarized style, light.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Generic`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Token`
**Type References**: [[SolarizedDarkStyle]], [[SolarizedLightStyle]]

### Interface
- `make_style`() -> Any

### Implementation
**SolarizedDarkStyle**

**SolarizedLightStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/solarized.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Generic`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Token`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles
:::{doc} get_style_by_name:24
Return a style class by its short name. The names of the builtin styles
are listed in :data:`pygments.styles.STYLE_MAP`.

Will raise :exc:`pygments.util.ClassNotFound` if no style of that name is
found.
:::
:::{doc} get_all_styles:56
Return a generator for all styles by name, both builtin and plugin.
:::
**Imports**: `pygments.plugin.find_plugin_styles`, `pygments.util.ClassNotFound`, `pygments.styles._mapping.STYLES`
### Interface
- `get_style_by_name`() -> Any
- `get_all_styles`() -> Any
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/__init__.py`  
**Dependencies**: `pygments.plugin.find_plugin_styles`, `pygments.util.ClassNotFound`, `pygments.styles._mapping.STYLES`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.algol_nu

**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Operator`
**Type References**: [[Algol_NuStyle]]


### Implementation
**Algol_NuStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/algol_nu.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Operator`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.gh_dark
:::{doc} GhDarkStyle:42
Github's Dark-Colorscheme based theme for Pygments
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Text`, `pygments.token.Literal`, `pygments.token.String`, `pygments.token.Token`
**Type References**: [[GhDarkStyle]]


### Implementation
**GhDarkStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/gh_dark.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Text`, `pygments.token.Literal`, `pygments.token.String`, `pygments.token.Token`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.native
:::{doc} NativeStyle:19
Pygments version of the "native" vim theme.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Token`, `pygments.token.Whitespace`
**Type References**: [[NativeStyle]]


### Implementation
**NativeStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/native.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Token`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.colorful
:::{doc} ColorfulStyle:19
A colorful style, inspired by CodeRay.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[ColorfulStyle]]


### Implementation
**ColorfulStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/colorful.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.lilypond
:::{doc} LilyPondStyle:18
Style for the LilyPond language.

.. versionadded:: 2.11
:::
**Imports**: `pygments.style.Style`, `pygments.token.Token`
**Type References**: [[LilyPondStyle]]


### Implementation
**LilyPondStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/lilypond.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Token`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.igor
:::{doc} IgorStyle:18
Pygments version of the official colors for Igor Pro procedures.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`
**Type References**: [[IgorStyle]]


### Implementation
**IgorStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/igor.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.zenburn
:::{doc} ZenburnStyle:22
Low contrast Zenburn style.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Token`, `pygments.token.Name`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Generic`, `pygments.token.Comment`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Literal`, `pygments.token.Punctuation`, `pygments.token.Error`
**Type References**: [[ZenburnStyle]]


### Implementation
**ZenburnStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/zenburn.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Token`, `pygments.token.Name`, `pygments.token.Operator`, `pygments.token.Keyword`, `pygments.token.Generic`, `pygments.token.Comment`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Literal`, `pygments.token.Punctuation`, `pygments.token.Error`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.bw

**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Operator`, `pygments.token.Generic`
**Type References**: [[BlackWhiteStyle]]


### Implementation
**BlackWhiteStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/bw.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Operator`, `pygments.token.Generic`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.emacs
:::{doc} EmacsStyle:19
The default style (inspired by Emacs 22).
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[EmacsStyle]]


### Implementation
**EmacsStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/emacs.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.dracula

**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Literal`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Other`, `pygments.token.Punctuation`, `pygments.token.Text`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[DraculaStyle]]


### Implementation
**DraculaStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/dracula.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Literal`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Other`, `pygments.token.Punctuation`, `pygments.token.Text`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.vs

**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Operator`, `pygments.token.Generic`
**Type References**: [[VisualStudioStyle]]


### Implementation
**VisualStudioStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/vs.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Operator`, `pygments.token.Generic`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.default
:::{doc} DefaultStyle:19
The default style (inspired by Emacs 22).
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[DefaultStyle]]


### Implementation
**DefaultStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/default.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.paraiso_light

**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Text`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Literal`
**Type References**: [[ParaisoLightStyle]]


### Implementation
**ParaisoLightStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/paraiso_light.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Text`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Punctuation`, `pygments.token.Other`, `pygments.token.Literal`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.lovelace
:::{doc} LovelaceStyle:23
The style used in Lovelace interactive learning environment. Tries to avoid
the "angry fruit salad" effect with desaturated and dim colours.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[LovelaceStyle]]


### Implementation
**LovelaceStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/lovelace.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.stata_dark

**Imports**: `pygments.style.Style`, `pygments.token.Token`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Whitespace`, `pygments.token.Generic`
**Type References**: [[StataDarkStyle]]


### Implementation
**StataDarkStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/stata_dark.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Token`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Whitespace`, `pygments.token.Generic`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.vim
:::{doc} VimStyle:19
Styles somewhat like vim 7.0
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Token`
**Type References**: [[VimStyle]]


### Implementation
**VimStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/vim.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Token`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.borland
:::{doc} BorlandStyle:19
Style similar to the style used in the borland IDEs.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[BorlandStyle]]


### Implementation
**BorlandStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/borland.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.coffee
:::{doc} CoffeeStyle:18
A warm and cozy theme based off gruvbox
:::
**Imports**: `pygments.style.Style`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Generic`, `pygments.token.Keyword`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Token`
**Type References**: [[CoffeeStyle]]


### Implementation
**CoffeeStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/coffee.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Generic`, `pygments.token.Keyword`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Token`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles._mapping



**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/_mapping.py`  

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.murphy
:::{doc} MurphyStyle:19
Murphy's style from CodeRay.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[MurphyStyle]]


### Implementation
**MurphyStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/murphy.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.lightbulb
:::{doc} LightbulbStyle:49
A minimal dark theme based on the Lightbulb theme for VSCode.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Generic`, `pygments.token.Keyword`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Token`
**Type References**: [[LightbulbStyle]]


### Implementation
**LightbulbStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/lightbulb.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Generic`, `pygments.token.Keyword`, `pygments.token.Literal`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Punctuation`, `pygments.token.String`, `pygments.token.Token`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.fruity
:::{doc} FruityStyle:19
Pygments version of the "native" vim theme.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Token`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Keyword`, `pygments.token.Generic`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Whitespace`
**Type References**: [[FruityStyle]]


### Implementation
**FruityStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/fruity.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Token`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Keyword`, `pygments.token.Generic`, `pygments.token.Number`, `pygments.token.String`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.abap

**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`
**Type References**: [[AbapStyle]]


### Implementation
**AbapStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/abap.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.rainbow_dash
:::{doc} RainbowDashStyle:39
A bright and colorful syntax highlighting theme.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Generic`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`, `pygments.token.Keyword`
**Type References**: [[RainbowDashStyle]]


### Implementation
**RainbowDashStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/rainbow_dash.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Comment`, `pygments.token.Error`, `pygments.token.Generic`, `pygments.token.Name`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.String`, `pygments.token.Text`, `pygments.token.Whitespace`, `pygments.token.Keyword`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.manni
:::{doc} ManniStyle:22
A colorful style, inspired by the terminal highlighting style.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[ManniStyle]]


### Implementation
**ManniStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/manni.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.autumn
:::{doc} AutumnStyle:19
A colorful style, inspired by the terminal highlighting style.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[AutumnStyle]]


### Implementation
**AutumnStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/autumn.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.rrt
:::{doc} RrtStyle:18
Minimalistic "rrt" theme, based on Zap and Emacs defaults.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Token`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Keyword`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Operator`
**Type References**: [[RrtStyle]]


### Implementation
**RrtStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/rrt.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Token`, `pygments.token.Comment`, `pygments.token.Name`, `pygments.token.Keyword`, `pygments.token.String`, `pygments.token.Number`, `pygments.token.Operator`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.perldoc
:::{doc} PerldocStyle:21
Style similar to the style used in the perldoc code blocks.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[PerldocStyle]]


### Implementation
**PerldocStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/perldoc.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.trac
:::{doc} TracStyle:19
Port of the default trac highlighter design.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[TracStyle]]


### Implementation
**TracStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/trac.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.algol

**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Operator`
**Type References**: [[AlgolStyle]]


### Implementation
**AlgolStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/algol.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Operator`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.arduino
:::{doc} ArduinoStyle:19
The Arduino® language style. This style is designed to highlight the
Arduino source code, so expect the best results with it.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`
**Type References**: [[ArduinoStyle]]


### Implementation
**ArduinoStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/arduino.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.nord
:::{doc} NordStyle:20
Pygments version of the "nord" theme by Arctic Ice Studio.
:::
:::{doc} NordDarkerStyle:90
Pygments version of a darker "nord" theme by Arctic Ice Studio
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Punctuation`, `pygments.token.Text`, `pygments.token.Token`
**Type References**: [[NordDarkerStyle]], [[NordStyle]]


### Implementation
**NordStyle**

**NordDarkerStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/nord.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Generic`, `pygments.token.Whitespace`, `pygments.token.Punctuation`, `pygments.token.Text`, `pygments.token.Token`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.pygments.styles.stata_light
:::{doc} StataLightStyle:20
Light mode style inspired by Stata's do-file editor. This is not
meant to be a complete style, just for use with Stata.
:::
**Imports**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Whitespace`, `pygments.token.Text`
**Type References**: [[StataLightStyle]]


### Implementation
**StataLightStyle**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/pygments/styles/stata_light.py`  
**Dependencies**: `pygments.style.Style`, `pygments.token.Keyword`, `pygments.token.Name`, `pygments.token.Comment`, `pygments.token.String`, `pygments.token.Error`, `pygments.token.Number`, `pygments.token.Operator`, `pygments.token.Whitespace`, `pygments.token.Text`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging.licenses
:::{doc} InvalidLicenseExpression:50
Raised when a license-expression string is invalid

>>> canonicalize_license_expression("invalid")
Traceback (most recent call last):
    ...
packaging.licenses.InvalidLicenseExpression: Invalid license expression: 'invalid'
:::
**Imports**: `__future__.annotations`, `re`, `typing.NewType`, `typing.cast`, `packaging.licenses._spdx.EXCEPTIONS`, `packaging.licenses._spdx.LICENSES`
**Type References**: [[InvalidLicenseExpression]]

### Interface
- `canonicalize_license_expression`(raw_license_expression: str) -> NormalizedLicenseExpression

### Implementation
**InvalidLicenseExpression**

**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/licenses/__init__.py`  
**Dependencies**: `__future__.annotations`, `re`, `typing.NewType`, `typing.cast`, `packaging.licenses._spdx.EXCEPTIONS`, `packaging.licenses._spdx.LICENSES`

:::
:::{module} chewchew..venv.lib.python3.13.site-packages.packaging.licenses._spdx

**Imports**: `__future__.annotations`, `typing.TypedDict`
**Type References**: [[SPDXException]], [[SPDXLicense]]


### Implementation
**SPDXLicense**
  - id: str
  - deprecated: bool
**SPDXException**
  - id: str
  - deprecated: bool
**Source**: `/Users/puroman/Library/Mobile Documents/com~apple~CloudDocs/dev/chewchew/.venv/lib/python3.13/site-packages/packaging/licenses/_spdx.py`  
**Dependencies**: `__future__.annotations`, `typing.TypedDict`

:::